[
  {
    "commitSHA1": "090ceebd51861af553e27c216fb23113129e4632",
    "commitFile": "GoogleStorageWagon/src/main/java/com/gkatzioura/maven/cloud/gcs/GoogleStorageRepository.java",
    "patch": "diff --git a/GoogleStorageWagon/src/main/java/com/gkatzioura/maven/cloud/gcs/GoogleStorageRepository.java b/GoogleStorageWagon/src/main/java/com/gkatzioura/maven/cloud/gcs/GoogleStorageRepository.java\nindex d7ab006..25c3e4f 100644\n--- a/GoogleStorageWagon/src/main/java/com/gkatzioura/maven/cloud/gcs/GoogleStorageRepository.java\n+++ b/GoogleStorageWagon/src/main/java/com/gkatzioura/maven/cloud/gcs/GoogleStorageRepository.java\n@@ -52,7 +52,7 @@\n \n         try {\n             storage \u003d StorageOptions.getDefaultInstance().getService();\n-            storage.list(Storage.BucketListOption.pageSize(1));\n+            storage.list(bucket, Storage.BlobListOption.pageSize(1));\n         } catch (Exception e) {\n             LOGGER.error(\"Could not establish connection with google cloud\",e);\n             throw new AuthenticationException(\"Please configure you google cloud account by logging using gcloud and specify a default project\");\n",
    "projectName": "CloudStorage",
    "lineNum": 55,
    "nodeStartChar": 1837,
    "before": "storage.list(Storage.BucketListOption.pageSize(1))",
    "after": "storage.list(bucket,Storage.BlobListOption.pageSize(1))"
  },
  {
    "commitSHA1": "2d6a4c90ec271ae45214dcf905a077abfc2f5733",
    "commitFile": "src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java",
    "patch": "diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex 00f38b3..d8a1475 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -65,7 +65,7 @@\n      * @param baseDirName    查找的文件夹路径\n      * @param targetFileName 需要查找的文件名\n      */\n-    private static List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n+    private  List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n         /**\n          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。\n          */\n@@ -82,7 +82,7 @@\n                 } else {\n                     if (wildcardMatch(targetFileName, file.getName())) {\n                         String fileName \u003d file.getAbsolutePath();\n-                        String open \u003d PathKit.getRootClassPath() + File.separator;\n+                        String open \u003d classpath + File.separator;\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\ndiff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex 00f38b3..d8a1475 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -65,7 +65,7 @@\n      * @param baseDirName    查找的文件夹路径\n      * @param targetFileName 需要查找的文件名\n      */\n-    private static List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n+    private  List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n         /**\n          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。\n          */\n@@ -82,7 +82,7 @@\n                 } else {\n                     if (wildcardMatch(targetFileName, file.getName())) {\n                         String fileName \u003d file.getAbsolutePath();\n-                        String open \u003d PathKit.getRootClassPath() + File.separator;\n+                        String open \u003d classpath + File.separator;\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n",
    "projectName": "JFinal-ext2",
    "lineNum": 64,
    "nodeStartChar": 2083,
    "before": "/**   * @param baseDirName    查找的文件夹路径  * @param targetFileName 需要查找的文件名  */ private static List\u003cString\u003e findFiles(String baseDirName,String targetFileName){   List\u003cString\u003e classFiles\u003dLists.newArrayList();   File baseDir\u003dnew File(baseDirName);   if (!baseDir.exists() || !baseDir.isDirectory()) {     LOG.error(\"search error：\" + baseDirName + \"is not a dir！\");   }  else {     String[] files\u003dbaseDir.list();     for (int i\u003d0; i \u003c files.length; i++) {       File file\u003dnew File(baseDirName + File.separator + files[i]);       if (file.isDirectory()) {         classFiles.addAll(findFiles(baseDirName + File.separator + files[i],targetFileName));       }  else {         if (wildcardMatch(targetFileName,file.getName())) {           String fileName\u003dfile.getAbsolutePath();           String open\u003dPathKit.getRootClassPath() + File.separator;           String close\u003d\".class\";           int start\u003dfileName.indexOf(open);           int end\u003dfileName.indexOf(close,start + open.length());           String className\u003dfileName.substring(start + open.length(),end).replace(File.separator,\".\");           classFiles.add(className);         }       }     }   }   return classFiles; } ",
    "after": "/**   * @param baseDirName    查找的文件夹路径  * @param targetFileName 需要查找的文件名  */ private List\u003cString\u003e findFiles(String baseDirName,String targetFileName){   List\u003cString\u003e classFiles\u003dLists.newArrayList();   File baseDir\u003dnew File(baseDirName);   if (!baseDir.exists() || !baseDir.isDirectory()) {     LOG.error(\"search error：\" + baseDirName + \"is not a dir！\");   }  else {     String[] files\u003dbaseDir.list();     for (int i\u003d0; i \u003c files.length; i++) {       File file\u003dnew File(baseDirName + File.separator + files[i]);       if (file.isDirectory()) {         classFiles.addAll(findFiles(baseDirName + File.separator + files[i],targetFileName));       }  else {         if (wildcardMatch(targetFileName,file.getName())) {           String fileName\u003dfile.getAbsolutePath();           String open\u003dPathKit.getRootClassPath() + File.separator;           String close\u003d\".class\";           int start\u003dfileName.indexOf(open);           int end\u003dfileName.indexOf(close,start + open.length());           String className\u003dfileName.substring(start + open.length(),end).replace(File.separator,\".\");           classFiles.add(className);         }       }     }   }   return classFiles; } "
  },
  {
    "commitSHA1": "2d6a4c90ec271ae45214dcf905a077abfc2f5733",
    "commitFile": "src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java",
    "patch": "diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex 00f38b3..d8a1475 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -65,7 +65,7 @@\n      * @param baseDirName    查找的文件夹路径\n      * @param targetFileName 需要查找的文件名\n      */\n-    private static List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n+    private  List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n         /**\n          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。\n          */\n@@ -82,7 +82,7 @@\n                 } else {\n                     if (wildcardMatch(targetFileName, file.getName())) {\n                         String fileName \u003d file.getAbsolutePath();\n-                        String open \u003d PathKit.getRootClassPath() + File.separator;\n+                        String open \u003d classpath + File.separator;\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\ndiff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex 00f38b3..d8a1475 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -65,7 +65,7 @@\n      * @param baseDirName    查找的文件夹路径\n      * @param targetFileName 需要查找的文件名\n      */\n-    private static List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n+    private  List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n         /**\n          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。\n          */\n@@ -82,7 +82,7 @@\n                 } else {\n                     if (wildcardMatch(targetFileName, file.getName())) {\n                         String fileName \u003d file.getAbsolutePath();\n-                        String open \u003d PathKit.getRootClassPath() + File.separator;\n+                        String open \u003d classpath + File.separator;\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n",
    "projectName": "JFinal-ext2",
    "lineNum": 85,
    "nodeStartChar": 3174,
    "before": "PathKit.getRootClassPath()",
    "after": "classpath"
  },
  {
    "commitSHA1": "9d858bf67a03122801b9d6eae68d4fee3bd9c9d5",
    "commitFile": "src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java",
    "patch": "diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex e271805..00f38b3 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -86,7 +86,7 @@\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n-                        String className \u003d fileName.substring(start + open.length(), end).replaceAll(File.separator, \".\");\n+                        String className \u003d fileName.substring(start + open.length(), end).replace(File.separator, \".\");\n                         classFiles.add(className);\n                     }\n                 }\ndiff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex e271805..00f38b3 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -86,7 +86,7 @@\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n-                        String className \u003d fileName.substring(start + open.length(), end).replaceAll(File.separator, \".\");\n+                        String className \u003d fileName.substring(start + open.length(), end).replace(File.separator, \".\");\n                         classFiles.add(className);\n                     }\n                 }\n",
    "projectName": "JFinal-ext2",
    "lineNum": 89,
    "nodeStartChar": 3453,
    "before": "fileName.substring(start + open.length(),end).replaceAll(File.separator,\".\")",
    "after": "fileName.substring(start + open.length(),end).replace(File.separator,\".\")"
  },
  {
    "commitSHA1": "8c389aaf3a8593618bdd670356478463c3d83df4",
    "commitFile": "jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java",
    "patch": "diff --git a/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java b/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java\nindex 24c897b..f1877b7 100644\n--- a/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java\n+++ b/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java\n@@ -243,7 +243,7 @@\n \t\t\tproperties \u003d Collections.emptyMap();\n \t\t}\n \n-\t\treturn new AuthInfo(selectedProfile.getName(), authResult.getAccessToken(), UUIDUtils.unsign(selectedProfile.getUUID()), properties, authResult.getUserType().getName());\n+\t\treturn new AuthInfo(selectedProfile.getName(), authResult.getAccessToken(), selectedProfile.getUUID(), properties, authResult.getUserType().getName());\n \t}\n \n \t/**\ndiff --git a/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java b/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java\nindex 24c897b..f1877b7 100644\n--- a/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java\n+++ b/jmccc-yggdrasil-authenticator/src/main/java/org/to2mbn/jmccc/auth/yggdrasil/YggdrasilAuthenticator.java\n@@ -243,7 +243,7 @@\n \t\t\tproperties \u003d Collections.emptyMap();\n \t\t}\n \n-\t\treturn new AuthInfo(selectedProfile.getName(), authResult.getAccessToken(), UUIDUtils.unsign(selectedProfile.getUUID()), properties, authResult.getUserType().getName());\n+\t\treturn new AuthInfo(selectedProfile.getName(), authResult.getAccessToken(), selectedProfile.getUUID(), properties, authResult.getUserType().getName());\n \t}\n \n \t/**\n",
    "projectName": "JMCCC",
    "lineNum": 246,
    "nodeStartChar": 8652,
    "before": "UUIDUtils.unsign(selectedProfile.getUUID())",
    "after": "selectedProfile.getUUID()"
  },
  {
    "commitSHA1": "de31a5c9102e3cb57f489b3feed5b30df99e01e2",
    "commitFile": "jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java",
    "patch": "diff --git a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\nindex 5a8f85c..511bfd6 100644\n--- a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n+++ b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n@@ -116,7 +116,7 @@\n \t\t\t\t\t\t\t\t.header(\"Content-Type\", \"image/png\")\n \t\t\t\t\t\t\t\t.content(IOUtils.toByteArray(texture.openStream()));\n \n-\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType()));\n+\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType(), headers));\n \t\t\t\t\t}\n \t\t\t\t}\n \ndiff --git a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\nindex 5a8f85c..511bfd6 100644\n--- a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n+++ b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n@@ -116,7 +116,7 @@\n \t\t\t\t\t\t\t\t.header(\"Content-Type\", \"image/png\")\n \t\t\t\t\t\t\t\t.content(IOUtils.toByteArray(texture.openStream()));\n \n-\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType()));\n+\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType(), headers));\n \t\t\t\t\t}\n \t\t\t\t}\n \n",
    "projectName": "JMCCC",
    "lineNum": 119,
    "nodeStartChar": 4180,
    "before": "requester.requestWithPayload(\"PUT\",url,multipart.finish(),multipart.getContentType())",
    "after": "requester.requestWithPayload(\"PUT\",url,multipart.finish(),multipart.getContentType(),headers)"
  },
  {
    "commitSHA1": "2c5d278c1326ce9341e8e4d7f17642004d38a41d",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java\nindex ed5af31..40b6094 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java\n@@ -33,7 +33,7 @@\n \n \t@Override\n \tpublic CombinedDownloadTask\u003cSet\u003cAsset\u003e\u003e assetsIndex(final MinecraftDirectory mcdir, final Version version) {\n-\t\tCombinedDownloadTask\u003cVoid\u003e task \u003d download(version.getAssetIndexDownloadInfo(), mcdir.getAssetIndex(version));\n+\t\tCombinedDownloadTask\u003cVoid\u003e task \u003d download(version.getAssetIndexDownloadInfo(), mcdir.getAssetIndex(version), CacheNames.ASSET_INDEX);\n \t\tif (task !\u003d null) {\n \t\t\treturn task\n \t\t\t\t\t.andThen(new ResultProcessor\u003cVoid, Set\u003cAsset\u003e\u003e() {\n@@ -42,8 +42,7 @@\n \t\t\t\t\t\tpublic Set\u003cAsset\u003e process(Void arg) throws Exception {\n \t\t\t\t\t\t\treturn Versions.resolveAssets(mcdir, version);\n \t\t\t\t\t\t}\n-\t\t\t\t\t})\n-\t\t\t\t\t.cachePool(CacheNames.ASSET_INDEX);\n+\t\t\t\t\t});\n \t\t} else {\n \t\t\treturn null;\n \t\t}\n@@ -53,8 +52,7 @@\n \tpublic CombinedDownloadTask\u003cVoid\u003e gameJar(MinecraftDirectory mcdir, Version version) {\n \t\tMap\u003cString, DownloadInfo\u003e downloads \u003d version.getDownloads();\n \t\tif (downloads !\u003d null) {\n-\t\t\treturn download(downloads.get(\"client\"), mcdir.getVersionJar(version))\n-\t\t\t\t\t.cachePool(CacheNames.GAME_JAR);\n+\t\t\treturn download(downloads.get(\"client\"), mcdir.getVersionJar(version), CacheNames.GAME_JAR);\n \t\t}\n \t\treturn null;\n \t}\n@@ -63,8 +61,7 @@\n \tpublic CombinedDownloadTask\u003cVoid\u003e library(MinecraftDirectory mcdir, Library library) {\n \t\tLibraryInfo info \u003d library.getDownloadInfo();\n \t\tif (info !\u003d null) {\n-\t\t\treturn download(info, mcdir.getLibrary(library))\n-\t\t\t\t\t.cachePool(CacheNames.LIBRARY);\n+\t\t\treturn download(info, mcdir.getLibrary(library), CacheNames.LIBRARY);\n \t\t}\n \t\treturn null;\n \t}\n@@ -99,7 +96,7 @@\n \t\tthis.upstreamProvider \u003d upstreamProvider;\n \t}\n \n-\tprivate CombinedDownloadTask\u003cVoid\u003e download(final DownloadInfo info, final File target) {\n+\tprivate CombinedDownloadTask\u003cVoid\u003e download(final DownloadInfo info, final File target, String cachePool) {\n \t\tif (info \u003d\u003d null || info.getUrl() \u003d\u003d null) {\n \t\t\treturn null;\n \t\t}\n@@ -113,7 +110,8 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn null;\n \t\t\t\t\t}\n-\t\t\t\t}));\n+\t\t\t\t})\n+\t\t\t\t.cachePool(cachePool));\n \t}\n \n \tprivate URI parseURI(String str) {\n",
    "projectName": "JMCCC",
    "lineNum": 38,
    "nodeStartChar": 1579,
    "before": "task.andThen(new ResultProcessor\u003cVoid,Set\u003cAsset\u003e\u003e(){   @Override public Set\u003cAsset\u003e process(  Void arg) throws Exception {     return Versions.resolveAssets(mcdir,version);   } } )",
    "after": "task"
  },
  {
    "commitSHA1": "2c5d278c1326ce9341e8e4d7f17642004d38a41d",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java\nindex ed5af31..40b6094 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/DownloadInfoProvider.java\n@@ -33,7 +33,7 @@\n \n \t@Override\n \tpublic CombinedDownloadTask\u003cSet\u003cAsset\u003e\u003e assetsIndex(final MinecraftDirectory mcdir, final Version version) {\n-\t\tCombinedDownloadTask\u003cVoid\u003e task \u003d download(version.getAssetIndexDownloadInfo(), mcdir.getAssetIndex(version));\n+\t\tCombinedDownloadTask\u003cVoid\u003e task \u003d download(version.getAssetIndexDownloadInfo(), mcdir.getAssetIndex(version), CacheNames.ASSET_INDEX);\n \t\tif (task !\u003d null) {\n \t\t\treturn task\n \t\t\t\t\t.andThen(new ResultProcessor\u003cVoid, Set\u003cAsset\u003e\u003e() {\n@@ -42,8 +42,7 @@\n \t\t\t\t\t\tpublic Set\u003cAsset\u003e process(Void arg) throws Exception {\n \t\t\t\t\t\t\treturn Versions.resolveAssets(mcdir, version);\n \t\t\t\t\t\t}\n-\t\t\t\t\t})\n-\t\t\t\t\t.cachePool(CacheNames.ASSET_INDEX);\n+\t\t\t\t\t});\n \t\t} else {\n \t\t\treturn null;\n \t\t}\n@@ -53,8 +52,7 @@\n \tpublic CombinedDownloadTask\u003cVoid\u003e gameJar(MinecraftDirectory mcdir, Version version) {\n \t\tMap\u003cString, DownloadInfo\u003e downloads \u003d version.getDownloads();\n \t\tif (downloads !\u003d null) {\n-\t\t\treturn download(downloads.get(\"client\"), mcdir.getVersionJar(version))\n-\t\t\t\t\t.cachePool(CacheNames.GAME_JAR);\n+\t\t\treturn download(downloads.get(\"client\"), mcdir.getVersionJar(version), CacheNames.GAME_JAR);\n \t\t}\n \t\treturn null;\n \t}\n@@ -63,8 +61,7 @@\n \tpublic CombinedDownloadTask\u003cVoid\u003e library(MinecraftDirectory mcdir, Library library) {\n \t\tLibraryInfo info \u003d library.getDownloadInfo();\n \t\tif (info !\u003d null) {\n-\t\t\treturn download(info, mcdir.getLibrary(library))\n-\t\t\t\t\t.cachePool(CacheNames.LIBRARY);\n+\t\t\treturn download(info, mcdir.getLibrary(library), CacheNames.LIBRARY);\n \t\t}\n \t\treturn null;\n \t}\n@@ -99,7 +96,7 @@\n \t\tthis.upstreamProvider \u003d upstreamProvider;\n \t}\n \n-\tprivate CombinedDownloadTask\u003cVoid\u003e download(final DownloadInfo info, final File target) {\n+\tprivate CombinedDownloadTask\u003cVoid\u003e download(final DownloadInfo info, final File target, String cachePool) {\n \t\tif (info \u003d\u003d null || info.getUrl() \u003d\u003d null) {\n \t\t\treturn null;\n \t\t}\n@@ -113,7 +110,8 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn null;\n \t\t\t\t\t}\n-\t\t\t\t}));\n+\t\t\t\t})\n+\t\t\t\t.cachePool(cachePool));\n \t}\n \n \tprivate URI parseURI(String str) {\n",
    "projectName": "JMCCC",
    "lineNum": 106,
    "nodeStartChar": 3766,
    "before": "new FileDownloadTask(parseURI(info.getUrl()),target)",
    "after": "new FileDownloadTask(parseURI(info.getUrl()),target).andThen(new ResultProcessor\u003cVoid,Void\u003e(){   @Override public Void process(  Void arg) throws Exception {     if (!ChecksumUtils.verify(target,info.getChecksum(),\"SHA-1\",info.getSize())) {       throw new IOException(\"checksums mismatch\");     }     return null;   } } )"
  },
  {
    "commitSHA1": "861beca02d5045984abc4dac048aee8bf1f0a216",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java\nindex e89dfdb..fd3d0fc 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java\n@@ -12,7 +12,7 @@\n \n \t@Override\n \tpublic void execute(CombinedDownloadContext\u003cT\u003e context) throws Exception {\n-\t\tproxied.execute(context);\n+\t\tproxied.execute(new CachePoolCombinedDownloadContext\u003c\u003e(context, cachePool));\n \t}\n \n \t@Override\ndiff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java\nindex e89dfdb..fd3d0fc 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/CachePoolCombinedDownloadTask.java\n@@ -12,7 +12,7 @@\n \n \t@Override\n \tpublic void execute(CombinedDownloadContext\u003cT\u003e context) throws Exception {\n-\t\tproxied.execute(context);\n+\t\tproxied.execute(new CachePoolCombinedDownloadContext\u003c\u003e(context, cachePool));\n \t}\n \n \t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 15,
    "nodeStartChar": 457,
    "before": "context",
    "after": "new CachePoolCombinedDownloadContext\u003c\u003e(context,cachePool)"
  },
  {
    "commitSHA1": "28c0a45e6a56f39875208a0453ec891b47d0b691",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\nindex 083be28..204c2df 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n@@ -13,7 +13,7 @@\n \t@Override\n \tpublic void execute(final CombinedDownloadContext\u003cVoid\u003e context) throws Exception {\n \t\tfor (CombinedDownloadTask\u003c?\u003e task : tasks) {\n-\t\t\tif (task \u003d\u003d null) {\n+\t\t\tif (task !\u003d null) {\n \t\t\t\tcontext.submit(task, null, true);\n \t\t\t}\n \t\t}\ndiff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\nindex 083be28..204c2df 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n@@ -13,7 +13,7 @@\n \t@Override\n \tpublic void execute(final CombinedDownloadContext\u003cVoid\u003e context) throws Exception {\n \t\tfor (CombinedDownloadTask\u003c?\u003e task : tasks) {\n-\t\t\tif (task \u003d\u003d null) {\n+\t\t\tif (task !\u003d null) {\n \t\t\t\tcontext.submit(task, null, true);\n \t\t\t}\n \t\t}\n",
    "projectName": "JMCCC",
    "lineNum": 16,
    "nodeStartChar": 452,
    "before": "task \u003d\u003d null",
    "after": "task !\u003d null"
  },
  {
    "commitSHA1": "a379235495382b438f1e40efe2592eb9b4d98d9b",
    "commitFile": "jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java",
    "patch": "diff --git a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\nindex 656bc49..6f814b8 100644\n--- a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n+++ b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n@@ -422,7 +422,7 @@\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn String.format(\"LaunchOption [maxMemory\u003d%s, minMemory\u003d%s, version\u003d%s, authenticator\u003d%s, serverInfo\u003d%s, windowSize\u003d%s, javaOption\u003d%s, minecraftDirectory\u003d%s, runtimeDirectory\u003d%s, extraJvmArguments\u003d%s, extraMinecraftArguments\u003d%s, commandlineVariables\u003d%s]\", maxMemory, minMemory, version, authenticator, serverInfo, windowSize, javaEnvironment, minecraftDirectory, runtimeDirectory, extraJvmArguments, extraMinecraftArguments, commandlineVariables);\n+\t\treturn String.format(\"LaunchOption [maxMemory\u003d%s, minMemory\u003d%s, version\u003d%s, authenticator\u003d%s, serverInfo\u003d%s, windowSize\u003d%s, javaEnvironment\u003d%s, minecraftDirectory\u003d%s, runtimeDirectory\u003d%s, extraJvmArguments\u003d%s, extraMinecraftArguments\u003d%s, commandlineVariables\u003d%s]\", maxMemory, minMemory, version, authenticator, serverInfo, windowSize, javaEnvironment, minecraftDirectory, runtimeDirectory, extraJvmArguments, extraMinecraftArguments, commandlineVariables);\n \t}\n \n \t@Override\ndiff --git a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\nindex 656bc49..6f814b8 100644\n--- a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n+++ b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n@@ -422,7 +422,7 @@\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn String.format(\"LaunchOption [maxMemory\u003d%s, minMemory\u003d%s, version\u003d%s, authenticator\u003d%s, serverInfo\u003d%s, windowSize\u003d%s, javaOption\u003d%s, minecraftDirectory\u003d%s, runtimeDirectory\u003d%s, extraJvmArguments\u003d%s, extraMinecraftArguments\u003d%s, commandlineVariables\u003d%s]\", maxMemory, minMemory, version, authenticator, serverInfo, windowSize, javaEnvironment, minecraftDirectory, runtimeDirectory, extraJvmArguments, extraMinecraftArguments, commandlineVariables);\n+\t\treturn String.format(\"LaunchOption [maxMemory\u003d%s, minMemory\u003d%s, version\u003d%s, authenticator\u003d%s, serverInfo\u003d%s, windowSize\u003d%s, javaEnvironment\u003d%s, minecraftDirectory\u003d%s, runtimeDirectory\u003d%s, extraJvmArguments\u003d%s, extraMinecraftArguments\u003d%s, commandlineVariables\u003d%s]\", maxMemory, minMemory, version, authenticator, serverInfo, windowSize, javaEnvironment, minecraftDirectory, runtimeDirectory, extraJvmArguments, extraMinecraftArguments, commandlineVariables);\n \t}\n \n \t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 425,
    "nodeStartChar": 11107,
    "before": "\"LaunchOption [maxMemory\u003d%s, minMemory\u003d%s, version\u003d%s, authenticator\u003d%s, serverInfo\u003d%s, windowSize\u003d%s, javaOption\u003d%s, minecraftDirectory\u003d%s, runtimeDirectory\u003d%s, extraJvmArguments\u003d%s, extraMinecraftArguments\u003d%s, commandlineVariables\u003d%s]\"",
    "after": "\"LaunchOption [maxMemory\u003d%s, minMemory\u003d%s, version\u003d%s, authenticator\u003d%s, serverInfo\u003d%s, windowSize\u003d%s, javaEnvironment\u003d%s, minecraftDirectory\u003d%s, runtimeDirectory\u003d%s, extraJvmArguments\u003d%s, extraMinecraftArguments\u003d%s, commandlineVariables\u003d%s]\""
  },
  {
    "commitSHA1": "98b78c4fa6d76cc2f9c31f5c6e9c1f5364942975",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java\nindex a0e3fb6..581d6b5 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java\n@@ -28,7 +28,7 @@\n \tpublic DownloadSession\u003cbyte[]\u003e createSession(final long length) throws IOException {\n \t\treturn new DownloadSession\u003cbyte[]\u003e() {\n \n-\t\t\tByteArrayOutputStream out \u003d new ByteArrayOutputStream((int) length);\n+\t\t\tByteArrayOutputStream out \u003d new ByteArrayOutputStream(length \u003d\u003d -1 ? 8192 : (int) length);\n \t\t\tWritableByteChannel channel \u003d Channels.newChannel(out);\n \n \t\t\t@Override\ndiff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java\nindex a0e3fb6..581d6b5 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/MemoryDownloadTask.java\n@@ -28,7 +28,7 @@\n \tpublic DownloadSession\u003cbyte[]\u003e createSession(final long length) throws IOException {\n \t\treturn new DownloadSession\u003cbyte[]\u003e() {\n \n-\t\t\tByteArrayOutputStream out \u003d new ByteArrayOutputStream((int) length);\n+\t\t\tByteArrayOutputStream out \u003d new ByteArrayOutputStream(length \u003d\u003d -1 ? 8192 : (int) length);\n \t\t\tWritableByteChannel channel \u003d Channels.newChannel(out);\n \n \t\t\t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 31,
    "nodeStartChar": 790,
    "before": "(int)length",
    "after": "length \u003d\u003d -1 ? 8192 : (int)length"
  },
  {
    "commitSHA1": "0d43809b4c3609d0e4afd3460dd2f3679026f364",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java\nindex 0371f59..919907f 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java\n@@ -48,7 +48,7 @@\n \t\t\t}\n \t\t}\n \n-\t\treturn null;\n+\t\tthrow new IllegalArgumentException(\"No universal jar found\");\n \t}\n \n \tprivate boolean isUniversalJar(String name) {\ndiff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java\nindex 0371f59..919907f 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/provider/forge/UniversalDecompressor.java\n@@ -48,7 +48,7 @@\n \t\t\t}\n \t\t}\n \n-\t\treturn null;\n+\t\tthrow new IllegalArgumentException(\"No universal jar found\");\n \t}\n \n \tprivate boolean isUniversalJar(String name) {\n",
    "projectName": "JMCCC",
    "lineNum": 51,
    "nodeStartChar": 1531,
    "before": "return null; ",
    "after": "throw new IllegalArgumentException(\"No universal jar found\"); "
  },
  {
    "commitSHA1": "b202f31f1772cbecdcb6d085bb3b83e7a2a9543f",
    "commitFile": "jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java",
    "patch": "diff --git a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\nindex b960ed2..1d22aba 100644\n--- a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n+++ b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n@@ -328,7 +328,7 @@\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"[maxMemory\u003d\" + maxMemory + \", minMemory\u003d\" + minMemory + \", version\u003d\" + version + \", authenticator\u003d\" + authenticator + \", serverInfo\u003d\" + serverInfo + \", windowSize\u003d\" + windowSize + \", javaOption\u003d\" + javaOption + \", minecraftDirectory\u003d\" + minecraftDirectory + \", extraArguments\u003d\" + extraJvmArguments + \"]\";\n+\t\treturn \"LaunchOption [maxMemory\u003d\" + maxMemory + \", minMemory\u003d\" + minMemory + \", version\u003d\" + version + \", authenticator\u003d\" + authenticator + \", serverInfo\u003d\" + serverInfo + \", windowSize\u003d\" + windowSize + \", javaOption\u003d\" + javaOption + \", minecraftDirectory\u003d\" + minecraftDirectory + \", gameDirectory\u003d\" + gameDirectory + \", extraJvmArguments\u003d\" + extraJvmArguments + \", extraMinecraftArguments\u003d\" + extraMinecraftArguments + \"]\";\n \t}\n \n \t@Override\ndiff --git a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\nindex b960ed2..1d22aba 100644\n--- a/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n+++ b/jmccc/src/main/java/org/to2mbn/jmccc/option/LaunchOption.java\n@@ -328,7 +328,7 @@\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"[maxMemory\u003d\" + maxMemory + \", minMemory\u003d\" + minMemory + \", version\u003d\" + version + \", authenticator\u003d\" + authenticator + \", serverInfo\u003d\" + serverInfo + \", windowSize\u003d\" + windowSize + \", javaOption\u003d\" + javaOption + \", minecraftDirectory\u003d\" + minecraftDirectory + \", extraArguments\u003d\" + extraJvmArguments + \"]\";\n+\t\treturn \"LaunchOption [maxMemory\u003d\" + maxMemory + \", minMemory\u003d\" + minMemory + \", version\u003d\" + version + \", authenticator\u003d\" + authenticator + \", serverInfo\u003d\" + serverInfo + \", windowSize\u003d\" + windowSize + \", javaOption\u003d\" + javaOption + \", minecraftDirectory\u003d\" + minecraftDirectory + \", gameDirectory\u003d\" + gameDirectory + \", extraJvmArguments\u003d\" + extraJvmArguments + \", extraMinecraftArguments\u003d\" + extraMinecraftArguments + \"]\";\n \t}\n \n \t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 331,
    "nodeStartChar": 8078,
    "before": "\"[maxMemory\u003d\" + maxMemory + \", minMemory\u003d\"+ minMemory+ \", version\u003d\"+ version+ \", authenticator\u003d\"+ authenticator+ \", serverInfo\u003d\"+ serverInfo+ \", windowSize\u003d\"+ windowSize+ \", javaOption\u003d\"+ javaOption+ \", minecraftDirectory\u003d\"+ minecraftDirectory+ \", extraArguments\u003d\"+ extraJvmArguments+ \"]\"",
    "after": "\"LaunchOption [maxMemory\u003d\" + maxMemory + \", minMemory\u003d\"+ minMemory+ \", version\u003d\"+ version+ \", authenticator\u003d\"+ authenticator+ \", serverInfo\u003d\"+ serverInfo+ \", windowSize\u003d\"+ windowSize+ \", javaOption\u003d\"+ javaOption+ \", minecraftDirectory\u003d\"+ minecraftDirectory+ \", gameDirectory\u003d\"+ gameDirectory+ \", extraJvmArguments\u003d\"+ extraJvmArguments+ \", extraMinecraftArguments\u003d\"+ extraMinecraftArguments+ \"]\""
  },
  {
    "commitSHA1": "0b6a1472714c6679c3e25f61d8861b7a6172c36b",
    "commitFile": "src/main/java/org/to2mbn/jmccc/version/VersionParser.java",
    "patch": "diff --git a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\nindex 0d1c459..23aa223 100644\n--- a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n@@ -132,7 +132,7 @@\n \t\tif (isNative) {\n \t\t\tString natives \u003d resolveNative(json.getJSONObject(\"natives\"));\n \t\t\tSet\u003cString\u003e excludes \u003d json.has(\"extract\") ? resolveExtractExclude(json.getJSONObject(\"extract\")) : null;\n-\t\t\treturn new Native(domain, name, version, resolveLibraryDownload(json, null), natives, excludes, url, checksums);\n+\t\t\treturn new Native(domain, name, version, resolveLibraryDownload(json, natives), natives, excludes, url, checksums);\n \t\t} else {\n \t\t\treturn new Library(domain, name, version, resolveLibraryDownload(json, null), url, checksums);\n \t\t}\ndiff --git a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\nindex 0d1c459..23aa223 100644\n--- a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n@@ -132,7 +132,7 @@\n \t\tif (isNative) {\n \t\t\tString natives \u003d resolveNative(json.getJSONObject(\"natives\"));\n \t\t\tSet\u003cString\u003e excludes \u003d json.has(\"extract\") ? resolveExtractExclude(json.getJSONObject(\"extract\")) : null;\n-\t\t\treturn new Native(domain, name, version, resolveLibraryDownload(json, null), natives, excludes, url, checksums);\n+\t\t\treturn new Native(domain, name, version, resolveLibraryDownload(json, natives), natives, excludes, url, checksums);\n \t\t} else {\n \t\t\treturn new Library(domain, name, version, resolveLibraryDownload(json, null), url, checksums);\n \t\t}\n",
    "projectName": "JMCCC",
    "lineNum": 135,
    "nodeStartChar": 4555,
    "before": "null",
    "after": "natives"
  },
  {
    "commitSHA1": "54b809a3ce3462b841146eb30df8698b5a761c65",
    "commitFile": "src/main/java/org/to2mbn/jmccc/version/VersionParser.java",
    "patch": "diff --git a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\nindex 8e4df7e..0d1c459 100644\n--- a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n@@ -219,7 +219,7 @@\n \tprivate AssetIndexInfo resolveAssetIndexInfo(JSONObject json) {\n \t\tDownloadInfo base \u003d resolveDownloadInfo(json);\n \t\tString id \u003d json.getString(\"id\");\n-\t\tlong totalSize \u003d json.optLong(\"size\", -1);\n+\t\tlong totalSize \u003d json.optLong(\"totalSize\", -1);\n \t\treturn new AssetIndexInfo(base.getUrl(), base.getChecksum(), base.getSize(), id, totalSize);\n \t}\n \ndiff --git a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\nindex 8e4df7e..0d1c459 100644\n--- a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n@@ -219,7 +219,7 @@\n \tprivate AssetIndexInfo resolveAssetIndexInfo(JSONObject json) {\n \t\tDownloadInfo base \u003d resolveDownloadInfo(json);\n \t\tString id \u003d json.getString(\"id\");\n-\t\tlong totalSize \u003d json.optLong(\"size\", -1);\n+\t\tlong totalSize \u003d json.optLong(\"totalSize\", -1);\n \t\treturn new AssetIndexInfo(base.getUrl(), base.getChecksum(), base.getSize(), id, totalSize);\n \t}\n \n",
    "projectName": "JMCCC",
    "lineNum": 222,
    "nodeStartChar": 7249,
    "before": "\"size\"",
    "after": "\"totalSize\""
  },
  {
    "commitSHA1": "672be5d31ff770eebf57979cd5fcedae26db8fee",
    "commitFile": "src/main/java/org/to2mbn/jmccc/version/VersionParser.java",
    "patch": "diff --git a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\nindex 98b1227..e946df1 100644\n--- a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n@@ -180,7 +180,7 @@\n \t\t\tJSONObject infojson \u003d json.getJSONObject(key);\n \t\t\tString url \u003d infojson.getString(\"url\");\n \t\t\tString checksum \u003d infojson.optString(\"sha1\", null);\n-\t\t\tlong size \u003d infojson.optLong(\"totalSize\", -1);\n+\t\t\tlong size \u003d infojson.optLong(\"size\", -1);\n \t\t\tdownloads.put(key, new DownloadInfo(url, checksum, size));\n \t\t}\n \t\treturn downloads;\ndiff --git a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\nindex 98b1227..e946df1 100644\n--- a/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/org/to2mbn/jmccc/version/VersionParser.java\n@@ -180,7 +180,7 @@\n \t\t\tJSONObject infojson \u003d json.getJSONObject(key);\n \t\t\tString url \u003d infojson.getString(\"url\");\n \t\t\tString checksum \u003d infojson.optString(\"sha1\", null);\n-\t\t\tlong size \u003d infojson.optLong(\"totalSize\", -1);\n+\t\t\tlong size \u003d infojson.optLong(\"size\", -1);\n \t\t\tdownloads.put(key, new DownloadInfo(url, checksum, size));\n \t\t}\n \t\treturn downloads;\n",
    "projectName": "JMCCC",
    "lineNum": 183,
    "nodeStartChar": 6092,
    "before": "\"totalSize\"",
    "after": "\"size\""
  },
  {
    "commitSHA1": "907c183951bfd6b1965515ecb1e90ae6c3af40b9",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\nindex 4c2fe77..b5448e1 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n@@ -18,7 +18,7 @@\n \n \t\t@Override\n \t\tpublic void run() {\n-\t\t\twhile (Thread.interrupted()) {\n+\t\t\twhile (!Thread.interrupted()) {\n \t\t\t\ttry {\n \t\t\t\t\tif (in.read() \u003d\u003d -1) {\n \t\t\t\t\t\tbreak;\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\nindex 4c2fe77..b5448e1 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n@@ -18,7 +18,7 @@\n \n \t\t@Override\n \t\tpublic void run() {\n-\t\t\twhile (Thread.interrupted()) {\n+\t\t\twhile (!Thread.interrupted()) {\n \t\t\t\ttry {\n \t\t\t\t\tif (in.read() \u003d\u003d -1) {\n \t\t\t\t\t\tbreak;\n",
    "projectName": "JMCCC",
    "lineNum": 21,
    "nodeStartChar": 443,
    "before": "Thread.interrupted()",
    "after": "!Thread.interrupted()"
  },
  {
    "commitSHA1": "6753cee6a259255b21df95f5abbf013718c89b84",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\nindex f21f977..b9b7ca3 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n@@ -88,7 +88,7 @@\n             args.add(\"--server\");\n             args.add(launchOption.getServerInfo().getHost());\n \n-            if (launchOption.getServerInfo().getPort() \u003d\u003d 0) {\n+            if (launchOption.getServerInfo().getPort() \u003e 0) {\n                 args.add(\"--port\");\n                 args.add(String.valueOf(launchOption.getServerInfo().getPort()));\n             }\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\nindex f21f977..b9b7ca3 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n@@ -88,7 +88,7 @@\n             args.add(\"--server\");\n             args.add(launchOption.getServerInfo().getHost());\n \n-            if (launchOption.getServerInfo().getPort() \u003d\u003d 0) {\n+            if (launchOption.getServerInfo().getPort() \u003e 0) {\n                 args.add(\"--port\");\n                 args.add(String.valueOf(launchOption.getServerInfo().getPort()));\n             }\n",
    "projectName": "JMCCC",
    "lineNum": 91,
    "nodeStartChar": 2829,
    "before": "launchOption.getServerInfo().getPort() \u003d\u003d 0",
    "after": "launchOption.getServerInfo().getPort() \u003e 0"
  },
  {
    "commitSHA1": "ead39b25d53c70b040131f70932083f092a72bfe",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java\nindex 3093ac7..cd76975 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java\n@@ -15,7 +15,7 @@\n \t\tJSONObject versionsJson \u003d json.getJSONObject(\"versions\");\n \t\tfor (String mcversion : (Set\u003cString\u003e) versionsJson.keySet()) {\n \t\t\tMap\u003cString, LiteloaderVersion\u003e artefacts \u003d new TreeMap\u003c\u003e();\n-\t\t\tJSONObject artefactsJson \u003d versionsJson.getJSONObject(mcversion).getJSONObject(\"artefacts\");\n+\t\t\tJSONObject artefactsJson \u003d versionsJson.getJSONObject(mcversion).getJSONObject(\"artefacts\").getJSONObject(\"com.mumfrey:liteloader\");\n \t\t\tfor (String artefactId : (Set\u003cString\u003e) artefactsJson.keySet()) {\n \t\t\t\tJSONObject artefactJson \u003d artefactsJson.getJSONObject(artefactId);\n \t\t\t\tString liteloaderVersion \u003d artefactJson.getString(\"version\");\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java\nindex 3093ac7..cd76975 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/liteloader/LiteloaderVersionList.java\n@@ -15,7 +15,7 @@\n \t\tJSONObject versionsJson \u003d json.getJSONObject(\"versions\");\n \t\tfor (String mcversion : (Set\u003cString\u003e) versionsJson.keySet()) {\n \t\t\tMap\u003cString, LiteloaderVersion\u003e artefacts \u003d new TreeMap\u003c\u003e();\n-\t\t\tJSONObject artefactsJson \u003d versionsJson.getJSONObject(mcversion).getJSONObject(\"artefacts\");\n+\t\t\tJSONObject artefactsJson \u003d versionsJson.getJSONObject(mcversion).getJSONObject(\"artefacts\").getJSONObject(\"com.mumfrey:liteloader\");\n \t\t\tfor (String artefactId : (Set\u003cString\u003e) artefactsJson.keySet()) {\n \t\t\t\tJSONObject artefactJson \u003d artefactsJson.getJSONObject(artefactId);\n \t\t\t\tString liteloaderVersion \u003d artefactJson.getString(\"version\");\n",
    "projectName": "JMCCC",
    "lineNum": 18,
    "nodeStartChar": 642,
    "before": "versionsJson",
    "after": "versionsJson.getJSONObject(mcversion)"
  },
  {
    "commitSHA1": "dc9d011d4a2d7ba889d50f1c042d7703493aca74",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\nindex fc22d37..d0d4040 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n@@ -49,7 +49,7 @@\n \t\ttry {\n \t\t\treturn new URI(uri);\n \t\t} catch (URISyntaxException e) {\n-\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\");\n+\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\", e);\n \t\t}\n \t}\n \ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\nindex fc22d37..d0d4040 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n@@ -49,7 +49,7 @@\n \t\ttry {\n \t\t\treturn new URI(uri);\n \t\t} catch (URISyntaxException e) {\n-\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\");\n+\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\", e);\n \t\t}\n \t}\n \n",
    "projectName": "JMCCC",
    "lineNum": 52,
    "nodeStartChar": 1257,
    "before": "new IllegalStateException(\"unable to convert \" + uri + \" to URI\")",
    "after": "new IllegalStateException(\"unable to convert \" + uri + \" to URI\",e)"
  },
  {
    "commitSHA1": "3601b671081d2c3ce34152686729467fda1c968e",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java\nindex 6769f27..9f987e9 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java\n@@ -24,7 +24,7 @@\n \n public class ForgeDownloadProvider extends URIDownloadProvider {\n \n-\tprivate static final Pattern FORGE_VERSION_PATTERN \u003d Pattern.compile(\"^((\\\\d+\\\\.)+\\\\d+)-forge\\\\1-(\\\\d+\\\\.)+\\\\d+$\");\n+\tprivate static final Pattern FORGE_VERSION_PATTERN \u003d Pattern.compile(\"^([\\\\w\\\\.\\\\-]+)-forge\\\\1-[\\\\w\\\\.\\\\-]+$\");\n \n \t@Override\n \tpublic DownloadTask\u003cObject\u003e gameVersionJson(final MinecraftDirectory mcdir, final String version) {\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java\nindex 6769f27..9f987e9 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/ForgeDownloadProvider.java\n@@ -24,7 +24,7 @@\n \n public class ForgeDownloadProvider extends URIDownloadProvider {\n \n-\tprivate static final Pattern FORGE_VERSION_PATTERN \u003d Pattern.compile(\"^((\\\\d+\\\\.)+\\\\d+)-forge\\\\1-(\\\\d+\\\\.)+\\\\d+$\");\n+\tprivate static final Pattern FORGE_VERSION_PATTERN \u003d Pattern.compile(\"^([\\\\w\\\\.\\\\-]+)-forge\\\\1-[\\\\w\\\\.\\\\-]+$\");\n \n \t@Override\n \tpublic DownloadTask\u003cObject\u003e gameVersionJson(final MinecraftDirectory mcdir, final String version) {\n",
    "projectName": "JMCCC",
    "lineNum": 27,
    "nodeStartChar": 1017,
    "before": "\"^((\\\\d+\\\\.)+\\\\d+)-forge\\\\1-(\\\\d+\\\\.)+\\\\d+$\"",
    "after": "\"^([\\\\w\\\\.\\\\-]+)-forge\\\\1-[\\\\w\\\\.\\\\-]+$\""
  },
  {
    "commitSHA1": "606efb98e703ecc97af5a47c9c85eb03a96b3d63",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java\nindex 578001b..224d0c6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java\n@@ -42,7 +42,7 @@\n \t\t\tthrow new IOException(\"pack data too short: \" + data.length);\n \t\t}\n \t\tfor (int i \u003d 0; i \u003c 4; i++) {\n-\t\t\tif (data[data.length - i] !\u003d POSTFIX[POSTFIX.length - i]) {\n+\t\t\tif (data[data.length - i - 1] !\u003d POSTFIX[POSTFIX.length - i - 1]) {\n \t\t\t\tthrow new IOException(\"bad postfix\");\n \t\t\t}\n \t\t}\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java\nindex 578001b..224d0c6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/PackProcessor.java\n@@ -42,7 +42,7 @@\n \t\t\tthrow new IOException(\"pack data too short: \" + data.length);\n \t\t}\n \t\tfor (int i \u003d 0; i \u003c 4; i++) {\n-\t\t\tif (data[data.length - i] !\u003d POSTFIX[POSTFIX.length - i]) {\n+\t\t\tif (data[data.length - i - 1] !\u003d POSTFIX[POSTFIX.length - i - 1]) {\n \t\t\t\tthrow new IOException(\"bad postfix\");\n \t\t\t}\n \t\t}\n",
    "projectName": "JMCCC",
    "lineNum": 45,
    "nodeStartChar": 1176,
    "before": "data.length - i",
    "after": "data.length - i - 1"
  },
  {
    "commitSHA1": "88553139f93b211661a802e6f342165bc4ae4eca",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java\nindex bad422d..26c1eb5 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java\n@@ -225,7 +225,7 @@\n \t\t\t\t\t\t\tcallbacks.add(outsidecallback);\n \t\t\t\t\t\t}\n \t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\t\t\t\tDownloadCallback\u003cR\u003e[] callbacksArray \u003d new DownloadCallback[callbacks.size()];\n+\t\t\t\t\t\tDownloadCallback\u003cR\u003e[] callbacksArray \u003d callbacks.toArray(new DownloadCallback[callbacks.size()]);\n \t\t\t\t\t\tactiveTasksCountup();\n \t\t\t\t\t\tFuture\u003cR\u003e taskfuture \u003d downloader.download(task, new DownloadCallbackGroup\u003cR\u003e(callbacksArray), TaskHandler.this.tries);\n \t\t\t\t\t\tactiveSubtasks.add(taskfuture);\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\nindex 3fe906b..1346cf6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n@@ -9,17 +9,17 @@\n \n \t@Override\n \tprotected String getVersionBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/versions/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/\";\n \t}\n \n \t@Override\n \tprotected String getAssetIndexBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/indexes/\";\n \t}\n \n \t@Override\n \tprotected String getVersionListURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/versions.json\";\n \t}\n \n \t@Override\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java\nindex bad422d..26c1eb5 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/download/multiple/MultipleDownloaderImpl.java\n@@ -225,7 +225,7 @@\n \t\t\t\t\t\t\tcallbacks.add(outsidecallback);\n \t\t\t\t\t\t}\n \t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\t\t\t\tDownloadCallback\u003cR\u003e[] callbacksArray \u003d new DownloadCallback[callbacks.size()];\n+\t\t\t\t\t\tDownloadCallback\u003cR\u003e[] callbacksArray \u003d callbacks.toArray(new DownloadCallback[callbacks.size()]);\n \t\t\t\t\t\tactiveTasksCountup();\n \t\t\t\t\t\tFuture\u003cR\u003e taskfuture \u003d downloader.download(task, new DownloadCallbackGroup\u003cR\u003e(callbacksArray), TaskHandler.this.tries);\n \t\t\t\t\t\tactiveSubtasks.add(taskfuture);\n",
    "projectName": "JMCCC",
    "lineNum": 228,
    "nodeStartChar": 6219,
    "before": "new DownloadCallback[callbacks.size()]",
    "after": "callbacks.toArray(new DownloadCallback[callbacks.size()])"
  },
  {
    "commitSHA1": "88553139f93b211661a802e6f342165bc4ae4eca",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\nindex 3fe906b..1346cf6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n@@ -9,17 +9,17 @@\n \n \t@Override\n \tprotected String getVersionBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/versions/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/\";\n \t}\n \n \t@Override\n \tprotected String getAssetIndexBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/indexes/\";\n \t}\n \n \t@Override\n \tprotected String getVersionListURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/versions.json\";\n \t}\n \n \t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 12,
    "nodeStartChar": 285,
    "before": "\"https://s3.amazonaws.com/Minecraft.Download/versions/\"",
    "after": "\"http://s3.amazonaws.com/Minecraft.Download/versions/\""
  },
  {
    "commitSHA1": "88553139f93b211661a802e6f342165bc4ae4eca",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\nindex 3fe906b..1346cf6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n@@ -9,17 +9,17 @@\n \n \t@Override\n \tprotected String getVersionBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/versions/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/\";\n \t}\n \n \t@Override\n \tprotected String getAssetIndexBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/indexes/\";\n \t}\n \n \t@Override\n \tprotected String getVersionListURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/versions.json\";\n \t}\n \n \t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 17,
    "nodeStartChar": 409,
    "before": "\"https://s3.amazonaws.com/Minecraft.Download/indexes/\"",
    "after": "\"http://s3.amazonaws.com/Minecraft.Download/indexes/\""
  },
  {
    "commitSHA1": "88553139f93b211661a802e6f342165bc4ae4eca",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\nindex 3fe906b..1346cf6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/MojangDownloadProvider.java\n@@ -9,17 +9,17 @@\n \n \t@Override\n \tprotected String getVersionBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/versions/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/\";\n \t}\n \n \t@Override\n \tprotected String getAssetIndexBaseURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/indexes/\";\n \t}\n \n \t@Override\n \tprotected String getVersionListURL() {\n-\t\treturn \"https://s3.amazonaws.com/Minecraft.Download/indexes/\";\n+\t\treturn \"http://s3.amazonaws.com/Minecraft.Download/versions/versions.json\";\n \t}\n \n \t@Override\n",
    "projectName": "JMCCC",
    "lineNum": 22,
    "nodeStartChar": 529,
    "before": "\"https://s3.amazonaws.com/Minecraft.Download/indexes/\"",
    "after": "\"http://s3.amazonaws.com/Minecraft.Download/versions/versions.json\""
  },
  {
    "commitSHA1": "d4a6c7ebed941baeed0358f502c69cdbc319502d",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\nindex 25f3f90..3b73daa 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n@@ -23,7 +23,8 @@\n \n         JSONObject json \u003d readJson(minecraftDir.getVersionJson(name));\n         String version \u003d json.getString(\"id\");\n-        String assets \u003d json.getString(\"assets\");\n+        // see https://github.com/to2mbn/JMCCC/issues/8\n+        String assets \u003d json.optString(\"assets\", \"legacy\");\n         String mainClass \u003d json.getString(\"mainClass\");\n         String launchArgs \u003d json.getString(\"minecraftArguments\");\n         loadDepends(json.getJSONArray(\"libraries\"), libraries);\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\nindex 25f3f90..3b73daa 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n@@ -23,7 +23,8 @@\n \n         JSONObject json \u003d readJson(minecraftDir.getVersionJson(name));\n         String version \u003d json.getString(\"id\");\n-        String assets \u003d json.getString(\"assets\");\n+        // see https://github.com/to2mbn/JMCCC/issues/8\n+        String assets \u003d json.optString(\"assets\", \"legacy\");\n         String mainClass \u003d json.getString(\"mainClass\");\n         String launchArgs \u003d json.getString(\"minecraftArguments\");\n         loadDepends(json.getJSONArray(\"libraries\"), libraries);\n",
    "projectName": "JMCCC",
    "lineNum": 27,
    "nodeStartChar": 892,
    "before": "json.getString(\"assets\")",
    "after": "json.optString(\"assets\",\"legacy\")"
  },
  {
    "commitSHA1": "2a193ac4d3915ef45d43016be738e230ab75c95b",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java\nindex a55bfef..f5658eb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java\n@@ -120,7 +120,7 @@\n \t * @throws NoSuchAlgorithmException if the default hash algorithm SHA-1 doesn\u0027t exist\n \t */\n \tpublic boolean isValid(MinecraftDirectory dir) throws IOException, NoSuchAlgorithmException {\n-\t\tFile file \u003d new File(dir.getAssets(), getPath());\n+\t\tFile file \u003d new File(dir.getAssets(), \"objects/\" + getPath());\n \t\tif (!file.isFile()) {\n \t\t\treturn false;\n \t\t}\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java\nindex a55bfef..f5658eb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/Asset.java\n@@ -120,7 +120,7 @@\n \t * @throws NoSuchAlgorithmException if the default hash algorithm SHA-1 doesn\u0027t exist\n \t */\n \tpublic boolean isValid(MinecraftDirectory dir) throws IOException, NoSuchAlgorithmException {\n-\t\tFile file \u003d new File(dir.getAssets(), getPath());\n+\t\tFile file \u003d new File(dir.getAssets(), \"objects/\" + getPath());\n \t\tif (!file.isFile()) {\n \t\t\treturn false;\n \t\t}\n",
    "projectName": "JMCCC",
    "lineNum": 123,
    "nodeStartChar": 3206,
    "before": "getPath()",
    "after": "\"objects/\" + getPath()"
  },
  {
    "commitSHA1": "7a460b6b87434b9f4bddd90aa167b880c541a3de",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java\nindex d8193b5..ebb9d2b 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java\n@@ -43,7 +43,7 @@\n \t * @throws NullPointerException if \u003ccode\u003eemail\u003d\u003dnull||password\u003d\u003dnull||clientToken\u003d\u003dnull\u003c/code\u003e\n \t */\n \tpublic YggdrasilPasswordAuthenticator(String email, String password, CharacterSelector characterSelector, UUID clientToken) {\n-\t\tsuper(clientToken);\n+\t\tsuper(clientToken, characterSelector);\n \t\tObjects.requireNonNull(email);\n \t\tObjects.requireNonNull(password);\n \t\tthis.email \u003d email;\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java\nindex d8193b5..ebb9d2b 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilPasswordAuthenticator.java\n@@ -43,7 +43,7 @@\n \t * @throws NullPointerException if \u003ccode\u003eemail\u003d\u003dnull||password\u003d\u003dnull||clientToken\u003d\u003dnull\u003c/code\u003e\n \t */\n \tpublic YggdrasilPasswordAuthenticator(String email, String password, CharacterSelector characterSelector, UUID clientToken) {\n-\t\tsuper(clientToken);\n+\t\tsuper(clientToken, characterSelector);\n \t\tObjects.requireNonNull(email);\n \t\tObjects.requireNonNull(password);\n \t\tthis.email \u003d email;\n",
    "projectName": "JMCCC",
    "lineNum": 46,
    "nodeStartChar": 1561,
    "before": "super(clientToken); ",
    "after": "super(clientToken,characterSelector); "
  },
  {
    "commitSHA1": "03737b683bd1591ce5251dd9675754cd07fae4ab",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\n",
    "projectName": "JMCCC",
    "lineNum": 94,
    "nodeStartChar": 2804,
    "before": "UUIDUtils.toUnsignedUUIDString(selected.getUUID())",
    "after": "UUIDUtils.unsign(selected.getUUID())"
  },
  {
    "commitSHA1": "03737b683bd1591ce5251dd9675754cd07fae4ab",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\n",
    "projectName": "JMCCC",
    "lineNum": 101,
    "nodeStartChar": 3134,
    "before": "UUIDUtils.toUnsignedUUIDString(clientToken)",
    "after": "clientToken"
  },
  {
    "commitSHA1": "181f316b6f7f183eb2e8bd76c3d0f4a7a992d4e2",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java\nindex 9db2bae..bebb2e5 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java\n@@ -17,7 +17,7 @@\n \n \t\ttry {\n \t\t\tif (response.has(\"error\") \u0026\u0026 !response.getString(\"error\").isEmpty()) {\n-\t\t\t\tthrow new RemoteAuthenticationException(response.getString(\"error\"), response.optString(\"errorMessage\"), response.optString(\"cause\"));\n+\t\t\t\tthrow new RemoteAuthenticationException(response.getString(\"error\"), response.optString(\"errorMessage\", null), response.optString(\"cause\", null));\n \t\t\t}\n \t\t} catch (JSONException e) {\n \t\t\tthrow newResponseFormatException(e);\ndiff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java\nindex 9db2bae..bebb2e5 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilService.java\n@@ -17,7 +17,7 @@\n \n \t\ttry {\n \t\t\tif (response.has(\"error\") \u0026\u0026 !response.getString(\"error\").isEmpty()) {\n-\t\t\t\tthrow new RemoteAuthenticationException(response.getString(\"error\"), response.optString(\"errorMessage\"), response.optString(\"cause\"));\n+\t\t\t\tthrow new RemoteAuthenticationException(response.getString(\"error\"), response.optString(\"errorMessage\", null), response.optString(\"cause\", null));\n \t\t\t}\n \t\t} catch (JSONException e) {\n \t\t\tthrow newResponseFormatException(e);\n",
    "projectName": "JMCCC",
    "lineNum": 20,
    "nodeStartChar": 649,
    "before": "new RemoteAuthenticationException(response.getString(\"error\"),response.optString(\"errorMessage\"),response.optString(\"cause\"))",
    "after": "new RemoteAuthenticationException(response.getString(\"error\"),response.optString(\"errorMessage\",null),response.optString(\"cause\",null))"
  },
  {
    "commitSHA1": "878fff5fbba1de83bb657ede15e00a071fc12f40",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java b/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java\nindex 1f3f6a0..f64b7b8 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java\n@@ -38,7 +38,7 @@\n      */\n     public MinecraftDirectory(File rootDir) {\n         Objects.requireNonNull(rootDir);\n-        this.rootDir \u003d rootDir;\n+        this.rootDir \u003d rootDir.getAbsoluteFile();\n     }\n \n     /**\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java b/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java\nindex 1f3f6a0..f64b7b8 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/option/MinecraftDirectory.java\n@@ -38,7 +38,7 @@\n      */\n     public MinecraftDirectory(File rootDir) {\n         Objects.requireNonNull(rootDir);\n-        this.rootDir \u003d rootDir;\n+        this.rootDir \u003d rootDir.getAbsoluteFile();\n     }\n \n     /**\n",
    "projectName": "JMCCC",
    "lineNum": 41,
    "nodeStartChar": 1010,
    "before": "rootDir",
    "after": "rootDir.getAbsoluteFile()"
  },
  {
    "commitSHA1": "0fb82681c019246ebc3608630a033c92585c9e3d",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\nindex 16dfcbf..426642e 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n@@ -110,10 +110,10 @@\n \t}\n \n \tprivate GameProfile getGameProfile(JSONObject gameprofileResponse) throws AuthenticationException {\n-\t\treturn getGameProfile(UUIDUtils.fromUUIDString(gameprofileResponse.getString(\"id\")));\n+\t\treturn getGameProfile(UUIDUtils.fromUUIDString(gameprofileResponse.getString(\"id\")), gameprofileResponse.getString(\"name\"));\n \t}\n \n-\tprivate GameProfile getGameProfile(UUID uuid) throws AuthenticationException {\n+\tprivate GameProfile getGameProfile(UUID uuid, String name) throws AuthenticationException {\n \t\tMap\u003cString, Object\u003e arguments \u003d new HashMap\u003c\u003e();\n \t\targuments.put(\"unsigned\", false);\n \t\tJSONObject response;\n@@ -123,7 +123,7 @@\n \t\t\tthrow new AuthenticationException(\"failed to request\", e);\n \t\t}\n \t\tif (response \u003d\u003d null) {\n-\t\t\treturn null;\n+\t\t\treturn new GameProfile(uuid, name, false, null);\n \t\t}\n \t\tcheckResponse(response);\n \t\treturn new GameProfile(UUIDUtils.fromUUIDString(response.getString(\"id\")), response.getString(\"name\"), false, getProperties(response.getJSONArray(\"properties\"), true));\ndiff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\nindex 16dfcbf..426642e 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n@@ -110,10 +110,10 @@\n \t}\n \n \tprivate GameProfile getGameProfile(JSONObject gameprofileResponse) throws AuthenticationException {\n-\t\treturn getGameProfile(UUIDUtils.fromUUIDString(gameprofileResponse.getString(\"id\")));\n+\t\treturn getGameProfile(UUIDUtils.fromUUIDString(gameprofileResponse.getString(\"id\")), gameprofileResponse.getString(\"name\"));\n \t}\n \n-\tprivate GameProfile getGameProfile(UUID uuid) throws AuthenticationException {\n+\tprivate GameProfile getGameProfile(UUID uuid, String name) throws AuthenticationException {\n \t\tMap\u003cString, Object\u003e arguments \u003d new HashMap\u003c\u003e();\n \t\targuments.put(\"unsigned\", false);\n \t\tJSONObject response;\n@@ -123,7 +123,7 @@\n \t\t\tthrow new AuthenticationException(\"failed to request\", e);\n \t\t}\n \t\tif (response \u003d\u003d null) {\n-\t\t\treturn null;\n+\t\t\treturn new GameProfile(uuid, name, false, null);\n \t\t}\n \t\tcheckResponse(response);\n \t\treturn new GameProfile(UUIDUtils.fromUUIDString(response.getString(\"id\")), response.getString(\"name\"), false, getProperties(response.getJSONArray(\"properties\"), true));\n",
    "projectName": "JMCCC",
    "lineNum": 126,
    "nodeStartChar": 4979,
    "before": "null",
    "after": "new GameProfile(uuid,name,false,null)"
  },
  {
    "commitSHA1": "315d8b77bc01e5508e927e309bb7e9a80a4c5b82",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\nindex a3fa66e..d9c6be1 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n@@ -29,7 +29,7 @@\n public class YggdrasilSessionService implements SessionService {\n \n \tprivate static final String API_AUTHENTICATE \u003d \"https://authserver.mojang.com/authenticate\";\n-\tprivate static final String API_PROFILE \u003d \"https://authserver.mojang.com/profile/\";\n+\tprivate static final String API_PROFILE \u003d \"https://sessionserver.mojang.com/session/minecraft/profile/\";\n \n \tprivate String clientToken;\n \tprivate Agent agent;\ndiff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\nindex a3fa66e..d9c6be1 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n@@ -29,7 +29,7 @@\n public class YggdrasilSessionService implements SessionService {\n \n \tprivate static final String API_AUTHENTICATE \u003d \"https://authserver.mojang.com/authenticate\";\n-\tprivate static final String API_PROFILE \u003d \"https://authserver.mojang.com/profile/\";\n+\tprivate static final String API_PROFILE \u003d \"https://sessionserver.mojang.com/session/minecraft/profile/\";\n \n \tprivate String clientToken;\n \tprivate Agent agent;\n",
    "projectName": "JMCCC",
    "lineNum": 32,
    "nodeStartChar": 1165,
    "before": "\"https://authserver.mojang.com/profile/\"",
    "after": "\"https://sessionserver.mojang.com/session/minecraft/profile/\""
  },
  {
    "commitSHA1": "191e8a2493d9ed3c08af482d2b01e2687c4db0ea",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\nindex b946478..a3fa66e 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n@@ -118,7 +118,7 @@\n \t\targuments.put(\"unsigned\", false);\n \t\tJSONObject response;\n \t\ttry {\n-\t\t\tresponse \u003d requester.jsonGet(API_PROFILE + uuid.toString().replace(\"-\", \"\"), arguments);\n+\t\t\tresponse \u003d requester.jsonGet(API_PROFILE + uuid, arguments);\n \t\t} catch (JSONException | IOException e) {\n \t\t\tthrow new AuthenticationException(\"failed to request\", e);\n \t\t}\ndiff --git a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\nindex b946478..a3fa66e 100644\n--- a/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n+++ b/src/main/java/com/github/to2mbn/jyal/yggdrasil/YggdrasilSessionService.java\n@@ -118,7 +118,7 @@\n \t\targuments.put(\"unsigned\", false);\n \t\tJSONObject response;\n \t\ttry {\n-\t\t\tresponse \u003d requester.jsonGet(API_PROFILE + uuid.toString().replace(\"-\", \"\"), arguments);\n+\t\t\tresponse \u003d requester.jsonGet(API_PROFILE + uuid, arguments);\n \t\t} catch (JSONException | IOException e) {\n \t\t\tthrow new AuthenticationException(\"failed to request\", e);\n \t\t}\n",
    "projectName": "JMCCC",
    "lineNum": 121,
    "nodeStartChar": 4794,
    "before": "uuid.toString().replace(\"-\",\"\")",
    "after": "uuid"
  },
  {
    "commitSHA1": "214417eaf5f38a724fce61d1c9c4bb4a7864a7da",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\nindex a87a0ba..ec96bbf 100644\n--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n@@ -12,7 +12,7 @@\n \t\tif (uuid.length() \u003d\u003d 36) {\n \t\t\treturn UUID.fromString(uuid);\n \t\t} else {\n-\t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 4) + \"-\" + uuid.substring(12, 4) + \"-\" + uuid.substring(16, 4) + \"-\" + uuid.substring(20, 12));\n+\t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 12) + \"-\" + uuid.substring(12, 16) + \"-\" + uuid.substring(16, 20) + \"-\" + uuid.substring(20, 32));\n \t\t}\n \t}\n \ndiff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\nindex a87a0ba..ec96bbf 100644\n--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n@@ -12,7 +12,7 @@\n \t\tif (uuid.length() \u003d\u003d 36) {\n \t\t\treturn UUID.fromString(uuid);\n \t\t} else {\n-\t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 4) + \"-\" + uuid.substring(12, 4) + \"-\" + uuid.substring(16, 4) + \"-\" + uuid.substring(20, 12));\n+\t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 12) + \"-\" + uuid.substring(12, 16) + \"-\" + uuid.substring(16, 20) + \"-\" + uuid.substring(20, 32));\n \t\t}\n \t}\n \n",
    "projectName": "JMCCC",
    "lineNum": 15,
    "nodeStartChar": 346,
    "before": "uuid.substring(0,8) + \"-\" + uuid.substring(8,4)+ \"-\"+ uuid.substring(12,4)+ \"-\"+ uuid.substring(16,4)+ \"-\"+ uuid.substring(20,12)",
    "after": "uuid.substring(0,8) + \"-\" + uuid.substring(8,12)+ \"-\"+ uuid.substring(12,16)+ \"-\"+ uuid.substring(16,20)+ \"-\"+ uuid.substring(20,32)"
  },
  {
    "commitSHA1": "36ab00a2889a5d83083c174fd7e313aa6e0605e1",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\nindex 678e767..a87a0ba 100644\n--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n@@ -9,7 +9,7 @@\n \t}\n \n \tpublic static UUID fromUUIDString(String uuid) {\n-\t\tif (uuid.length() \u003d\u003d 32) {\n+\t\tif (uuid.length() \u003d\u003d 36) {\n \t\t\treturn UUID.fromString(uuid);\n \t\t} else {\n \t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 4) + \"-\" + uuid.substring(12, 4) + \"-\" + uuid.substring(16, 4) + \"-\" + uuid.substring(20, 12));\ndiff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\nindex 678e767..a87a0ba 100644\n--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n@@ -9,7 +9,7 @@\n \t}\n \n \tpublic static UUID fromUUIDString(String uuid) {\n-\t\tif (uuid.length() \u003d\u003d 32) {\n+\t\tif (uuid.length() \u003d\u003d 36) {\n \t\t\treturn UUID.fromString(uuid);\n \t\t} else {\n \t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 4) + \"-\" + uuid.substring(12, 4) + \"-\" + uuid.substring(16, 4) + \"-\" + uuid.substring(20, 12));\n",
    "projectName": "JMCCC",
    "lineNum": 12,
    "nodeStartChar": 270,
    "before": "32",
    "after": "36"
  },
  {
    "commitSHA1": "dd3c6ac2f2b9ccc5af15fff12f754c60e90d8951",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/version/Library.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/version/Library.java b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\nindex 4fa4fc9..542eba6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n@@ -132,7 +132,7 @@\n      * @return true if the library is missing in the given minecraft directory\n      */\n     public boolean isMissing(MinecraftDirectory minecraftDir) {\n-        return new File(minecraftDir.getLibraries(), path).isFile();\n+        return !new File(minecraftDir.getLibraries(), path).isFile();\n     }\n \n     @Override\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/version/Library.java b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\nindex 4fa4fc9..542eba6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n@@ -132,7 +132,7 @@\n      * @return true if the library is missing in the given minecraft directory\n      */\n     public boolean isMissing(MinecraftDirectory minecraftDir) {\n-        return new File(minecraftDir.getLibraries(), path).isFile();\n+        return !new File(minecraftDir.getLibraries(), path).isFile();\n     }\n \n     @Override\n",
    "projectName": "JMCCC",
    "lineNum": 135,
    "nodeStartChar": 3919,
    "before": "new File(minecraftDir.getLibraries(),path).isFile()",
    "after": "!new File(minecraftDir.getLibraries(),path).isFile()"
  },
  {
    "commitSHA1": "96408175622f4cd3222957c11a92351d4c6c143e",
    "commitFile": "src/main/java/com/darkyoooooo/jmccc/util/Utils.java",
    "patch": "diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\nindex 37a538a..52b8d3a 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n@@ -77,7 +77,7 @@\n                     }\n                 }\n \n-                in.getNextEntry();\n+                in.closeEntry();\n             }\n         }\n     }\ndiff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\nindex 37a538a..52b8d3a 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n@@ -77,7 +77,7 @@\n                     }\n                 }\n \n-                in.getNextEntry();\n+                in.closeEntry();\n             }\n         }\n     }\n",
    "projectName": "JMCCC",
    "lineNum": 80,
    "nodeStartChar": 2513,
    "before": "in.getNextEntry()",
    "after": "in.closeEntry()"
  },
  {
    "commitSHA1": "d8e45958f6fe6945035a5d131fb518692e0a7344",
    "commitFile": "src/main/java/com/darkyoooooo/jmccc/version/Version.java",
    "patch": "diff --git a/src/main/java/com/darkyoooooo/jmccc/version/Version.java b/src/main/java/com/darkyoooooo/jmccc/version/Version.java\nindex 6ff6018..cd30a94 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/version/Version.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/version/Version.java\n@@ -111,7 +111,7 @@\n         for (JsonElement element : rules.getAsJsonArray()) {\n             JsonObject rule \u003d element.getAsJsonObject();\n \n-            boolean action \u003d rule.get(\"action\").equals(\"allow\");\n+            boolean action \u003d rule.get(\"action\").getAsString().equals(\"allow\");\n \n             // apply by default\n             boolean apply \u003d true;\ndiff --git a/src/main/java/com/darkyoooooo/jmccc/version/Version.java b/src/main/java/com/darkyoooooo/jmccc/version/Version.java\nindex 6ff6018..cd30a94 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/version/Version.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/version/Version.java\n@@ -111,7 +111,7 @@\n         for (JsonElement element : rules.getAsJsonArray()) {\n             JsonObject rule \u003d element.getAsJsonObject();\n \n-            boolean action \u003d rule.get(\"action\").equals(\"allow\");\n+            boolean action \u003d rule.get(\"action\").getAsString().equals(\"allow\");\n \n             // apply by default\n             boolean apply \u003d true;\n",
    "projectName": "JMCCC",
    "lineNum": 114,
    "nodeStartChar": 4153,
    "before": "rule",
    "after": "rule.get(\"action\")"
  },
  {
    "commitSHA1": "a9f992d518116ec928a6b914bb76f8c0ddf57950",
    "commitFile": "mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java",
    "patch": "diff --git a/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java b/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java\nindex 6b2b451..0a93ab8 100644\n--- a/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java\n+++ b/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java\n@@ -137,7 +137,7 @@\n \n     private void handleMatrixTag(Source source, long position, int numBytes) throws IOException {\n         consumer.onMatrixBegin(position, numBytes);\n-        long end \u003d position + numBytes;\n+        long end \u003d source.getPosition() + numBytes;\n         long currentPos \u003d source.getPosition();\n         while (currentPos \u003c end) {\n             handleTag(Mat5Tag.readTag(source), source, currentPos);\ndiff --git a/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java b/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java\nindex 6b2b451..0a93ab8 100644\n--- a/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java\n+++ b/mfl-core/src/main/java/us/hebi/matlab/mat/format/Mat5TagStreamer.java\n@@ -137,7 +137,7 @@\n \n     private void handleMatrixTag(Source source, long position, int numBytes) throws IOException {\n         consumer.onMatrixBegin(position, numBytes);\n-        long end \u003d position + numBytes;\n+        long end \u003d source.getPosition() + numBytes;\n         long currentPos \u003d source.getPosition();\n         while (currentPos \u003c end) {\n             handleTag(Mat5Tag.readTag(source), source, currentPos);\n",
    "projectName": "MFL",
    "lineNum": 140,
    "nodeStartChar": 4619,
    "before": "position",
    "after": "source.getPosition()"
  },
  {
    "commitSHA1": "a3a211e655f53af03463b369304f0cb8dfbf6b25",
    "commitFile": "src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java",
    "patch": "diff --git a/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java b/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java\nindex b32ad69..91a203b 100644\n--- a/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java\n+++ b/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java\n@@ -133,7 +133,7 @@\n                 other.fields.equals(fields) \u0026\u0026\n                 other.values.size() \u003d\u003d values.size()) {\n             for (int i \u003d 0; i \u003c values.size(); ++i) {\n-                if (!other.values.get(i).equals(values.get(i))) {\n+                if (!Arrays.equals(other.values.get(i), values.get(i))) {\n                     return false;\n                 }\n             }\ndiff --git a/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java b/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java\nindex b32ad69..91a203b 100644\n--- a/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java\n+++ b/src/main/java/us/hebi/matlab/mat/types/AbstractStruct.java\n@@ -133,7 +133,7 @@\n                 other.fields.equals(fields) \u0026\u0026\n                 other.values.size() \u003d\u003d values.size()) {\n             for (int i \u003d 0; i \u003c values.size(); ++i) {\n-                if (!other.values.get(i).equals(values.get(i))) {\n+                if (!Arrays.equals(other.values.get(i), values.get(i))) {\n                     return false;\n                 }\n             }\n",
    "projectName": "MFL",
    "lineNum": 136,
    "nodeStartChar": 4331,
    "before": "other.values.get(i)",
    "after": "Arrays"
  },
  {
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 99,
    "nodeStartChar": 3318,
    "before": "new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\",e)",
    "after": "new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\")"
  },
  {
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 108,
    "nodeStartChar": 3695,
    "before": "new AssertionError(\"Java 6 Cleaner not available\",e)",
    "after": "new AssertionError(\"Java 6 Cleaner not available\")"
  },
  {
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 126,
    "nodeStartChar": 4197,
    "before": "new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\",e)",
    "after": "new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\")"
  },
  {
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 134,
    "nodeStartChar": 4502,
    "before": "new AssertionError(\"Java 9 Cleaner not available\",e)",
    "after": "new AssertionError(\"Java 9 Cleaner not available\")"
  },
  {
    "commitSHA1": "6939a49777e3b31862689282199f583d246565e6",
    "commitFile": "src/main/java/org/robotframework/mavenplugin/TestDocMojo.java",
    "patch": "diff --git a/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java b/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java\nindex 2bf1a1b..c78d9bd 100644\n--- a/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java\n+++ b/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java\n@@ -30,7 +30,7 @@\n  * Create documentation of test suites using the Robot Framework \u003ccode\u003etestdoc\u003c/code\u003e tool.\n  * \u003cp/\u003e\n  * Uses the \u003ccode\u003etestdoc\u003c/code\u003e bundled in Robot Framework jar distribution. For more help see\n- * \u003ca href\u003d\"http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html#test-data-documentation-tool-testdoc\"\u003etestdoc documentation\u003c/a\u003e.\n+ * \u003ca href\u003d\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-data-documentation-tool-testdoc\"\u003etestdoc documentation\u003c/a\u003e.\n  *\n  * @goal testdoc\n  * @requiresDependencyResolution test\n@@ -43,7 +43,7 @@\n         try {\n             runTestDoc();\n         } catch (IOException e) {\n-            throw new MojoExecutionException(\"Failed to execute libdoc script: \" + e.getMessage());\n+            throw new MojoExecutionException(\"Failed to execute testdoc script: \" + e.getMessage());\n         }\n     }\n \n@@ -80,10 +80,10 @@\n      * \u003c/ul\u003e\n      *\n      * Example:\n-     * \u003cpre\u003e\u003c![CDATA[\u003clibdoc\u003e\n+     * \u003cpre\u003e\u003c![CDATA[\u003ctestdoc\u003e\n      *      \u003coutputFile\u003eMyTests.html\u003c/outputFile\u003e\n      *      \u003cdataSourceFile\u003esrc/test/resources/MyTests.txt\u003c/dataSourceFile\u003e\n-     * \u003c/libdoc\u003e]]\u003e\u003c/pre\u003e\n+     * \u003c/testdoc\u003e]]\u003e\u003c/pre\u003e\n      *\n      * @parameter\n      * @required\ndiff --git a/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java b/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java\nindex 2bf1a1b..c78d9bd 100644\n--- a/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java\n+++ b/src/main/java/org/robotframework/mavenplugin/TestDocMojo.java\n@@ -30,7 +30,7 @@\n  * Create documentation of test suites using the Robot Framework \u003ccode\u003etestdoc\u003c/code\u003e tool.\n  * \u003cp/\u003e\n  * Uses the \u003ccode\u003etestdoc\u003c/code\u003e bundled in Robot Framework jar distribution. For more help see\n- * \u003ca href\u003d\"http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html#test-data-documentation-tool-testdoc\"\u003etestdoc documentation\u003c/a\u003e.\n+ * \u003ca href\u003d\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-data-documentation-tool-testdoc\"\u003etestdoc documentation\u003c/a\u003e.\n  *\n  * @goal testdoc\n  * @requiresDependencyResolution test\n@@ -43,7 +43,7 @@\n         try {\n             runTestDoc();\n         } catch (IOException e) {\n-            throw new MojoExecutionException(\"Failed to execute libdoc script: \" + e.getMessage());\n+            throw new MojoExecutionException(\"Failed to execute testdoc script: \" + e.getMessage());\n         }\n     }\n \n@@ -80,10 +80,10 @@\n      * \u003c/ul\u003e\n      *\n      * Example:\n-     * \u003cpre\u003e\u003c![CDATA[\u003clibdoc\u003e\n+     * \u003cpre\u003e\u003c![CDATA[\u003ctestdoc\u003e\n      *      \u003coutputFile\u003eMyTests.html\u003c/outputFile\u003e\n      *      \u003cdataSourceFile\u003esrc/test/resources/MyTests.txt\u003c/dataSourceFile\u003e\n-     * \u003c/libdoc\u003e]]\u003e\u003c/pre\u003e\n+     * \u003c/testdoc\u003e]]\u003e\u003c/pre\u003e\n      *\n      * @parameter\n      * @required\n",
    "projectName": "MavenPlugin",
    "lineNum": 46,
    "nodeStartChar": 1659,
    "before": "\"Failed to execute libdoc script: \"",
    "after": "\"Failed to execute testdoc script: \""
  },
  {
    "commitSHA1": "87170496868154ad440b5504b889cd3bc1c4c7d6",
    "commitFile": "src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java",
    "patch": "diff --git a/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java b/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java\nindex 29ec48b..a13ac5d 100644\n--- a/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java\n+++ b/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java\n@@ -51,6 +51,6 @@\n         String txtResourceWithDocTestDoc \u003d outputDirectory + \"invalid_login_doc.html\";\n         assertTrue(txtResourceWithDocTestDoc + \" not found\", new File(txtResourceWithDocTestDoc).exists());\n         String contents \u003d  FileUtils.fileRead(txtResourceWithDocTestDoc);\n-        assertTrue(contents.contains(\"\\\"doc\\\":\\\"\u003cp\u003eCustom documentation\u003c/p\u003e\\\"\"));\n+        assertTrue(contents.contains(\"\\\"doc\\\":\\\"\u003cp\u003eCustom documentation\"));\n     }\n }\ndiff --git a/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java b/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java\nindex 29ec48b..a13ac5d 100644\n--- a/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java\n+++ b/src/test/java/org/robotframework/mavenplugin/TestDocMojoTest.java\n@@ -51,6 +51,6 @@\n         String txtResourceWithDocTestDoc \u003d outputDirectory + \"invalid_login_doc.html\";\n         assertTrue(txtResourceWithDocTestDoc + \" not found\", new File(txtResourceWithDocTestDoc).exists());\n         String contents \u003d  FileUtils.fileRead(txtResourceWithDocTestDoc);\n-        assertTrue(contents.contains(\"\\\"doc\\\":\\\"\u003cp\u003eCustom documentation\u003c/p\u003e\\\"\"));\n+        assertTrue(contents.contains(\"\\\"doc\\\":\\\"\u003cp\u003eCustom documentation\"));\n     }\n }\n",
    "projectName": "MavenPlugin",
    "lineNum": 54,
    "nodeStartChar": 2372,
    "before": "\"\\\"doc\\\":\\\"\u003cp\u003eCustom documentation\u003c/p\u003e\\\"\"",
    "after": "\"\\\"doc\\\":\\\"\u003cp\u003eCustom documentation\""
  },
  {
    "commitSHA1": "249edd5253f4b948279f4da9acd9b55cf4436c94",
    "commitFile": "modules/ota-library/src/test/java/com/sap/prd/mobile/ios/ota/lib/OtaBuildHtmlGeneratorTest.java",
    "patch": "diff --git a/modules/ota-library/src/test/java/com/sap/prd/mobile/ios/ota/lib/OtaBuildHtmlGeneratorTest.java b/modules/ota-library/src/test/java/com/sap/prd/mobile/ios/ota/lib/OtaBuildHtmlGeneratorTest.java\nindex f6e90bf..486d36d 100644\n--- a/modules/ota-library/src/test/java/com/sap/prd/mobile/ios/ota/lib/OtaBuildHtmlGeneratorTest.java\n+++ b/modules/ota-library/src/test/java/com/sap/prd/mobile/ios/ota/lib/OtaBuildHtmlGeneratorTest.java\n@@ -63,7 +63,7 @@\n     assertContains(IPA_CLASSIFIER + \"\u003d\" + ipaClassifier, generated);\n     assertContains(OTA_CLASSIFIER + \"\u003d\" + otaClassifier, generated);\n     assertContains(\n-          \"\u003ciframe src\u003d\\\"\"\n+          \"\u003ciframe id\u003d\\\"iframe\\\" src\u003d\\\"\"\n                 + HTML_SERVICE\n                 + \"?title\u003dMyApp\u0026bundleIdentifier\u003dcom.sap.xyz.MyApp\u0026bundleVersion\u003d1.0.2\u0026ipaClassifier\u003dipaClassifier\u0026otaClassifier\u003dotaClassifier\\\"\",\n           generated);\n",
    "projectName": "OTAService",
    "lineNum": 66,
    "nodeStartChar": 2738,
    "before": "\"\u003ciframe src\u003d\\\"\"",
    "after": "\"\u003ciframe id\u003d\\\"iframe\\\" src\u003d\\\"\""
  },
  {
    "commitSHA1": "fecb52f610fce4de263ad77a64d9735447f955b4",
    "commitFile": "core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java",
    "patch": "diff --git a/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java b/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java\nindex 27b596f..d66feb1 100644\n--- a/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java\n+++ b/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java\n@@ -96,6 +96,6 @@\n             throw new FileNotFoundException(\"The resource \u0027\" + path + \"\u0027 was not found in file system or as URL.\");\n         }\n \n-        return Misc.getContent(url, Charset.forName(charsetName), 5000).getValue();\n+        return Misc.getContent(url, Charset.forName(charsetName), readTimeout).getValue();\n     }\n }\ndiff --git a/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java b/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java\nindex 27b596f..d66feb1 100644\n--- a/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java\n+++ b/core/src/main/java/org/cubeengine/pericopist/util/ResourceLoader.java\n@@ -96,6 +96,6 @@\n             throw new FileNotFoundException(\"The resource \u0027\" + path + \"\u0027 was not found in file system or as URL.\");\n         }\n \n-        return Misc.getContent(url, Charset.forName(charsetName), 5000).getValue();\n+        return Misc.getContent(url, Charset.forName(charsetName), readTimeout).getValue();\n     }\n }\n",
    "projectName": "Pericopist",
    "lineNum": 99,
    "nodeStartChar": 3413,
    "before": "5000",
    "after": "readTimeout"
  },
  {
    "commitSHA1": "558b68fa78c8add8472d61586813340809f8e294",
    "commitFile": "core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java",
    "patch": "diff --git a/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java b/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java\nindex 6fdb3ae..e531e0a 100644\n--- a/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java\n+++ b/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java\n@@ -175,7 +175,7 @@\n      */\n     public Pericopist getPericopist(String resource, int readTimeout, Context velocityContext, Logger logger) throws PericopistException\n     {\n-        return this.getPericopist(resource, Charset.forName(\"UTF-8\"), readTimeout, null, logger);\n+        return this.getPericopist(resource, Charset.forName(\"UTF-8\"), readTimeout, velocityContext, logger);\n     }\n \n     /**\ndiff --git a/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java b/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java\nindex 6fdb3ae..e531e0a 100644\n--- a/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java\n+++ b/core/src/main/java/org/cubeengine/pericopist/PericopistFactory.java\n@@ -175,7 +175,7 @@\n      */\n     public Pericopist getPericopist(String resource, int readTimeout, Context velocityContext, Logger logger) throws PericopistException\n     {\n-        return this.getPericopist(resource, Charset.forName(\"UTF-8\"), readTimeout, null, logger);\n+        return this.getPericopist(resource, Charset.forName(\"UTF-8\"), readTimeout, velocityContext, logger);\n     }\n \n     /**\n",
    "projectName": "Pericopist",
    "lineNum": 178,
    "nodeStartChar": 7362,
    "before": "null",
    "after": "velocityContext"
  },
  {
    "commitSHA1": "e5bda3b728f8c2c2db2372319fdd11e762a2de5b",
    "commitFile": "maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java",
    "patch": "diff --git a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\nindex 13c2786..bbebdb2 100644\n--- a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n+++ b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n@@ -89,7 +89,7 @@\n         }\n         if (this.configurations \u003d\u003d null || this.configurations.length \u003d\u003d 0)\n         {\n-            throw new MojoFailureException(\"An extractor configuration is not specified.\");\n+            throw new MojoFailureException(\"A pericopist configuration is not specified.\");\n         }\n \n         // load the classpath of the maven project\n@@ -174,7 +174,7 @@\n \n         for (String configuration : this.configurations)\n         {\n-            this.getLog().info(\"uses extractor configuration \u0027\" + configuration + \"\u0027.\");\n+            this.getLog().info(\"uses pericopist configuration \u0027\" + configuration + \"\u0027.\");\n \n             try\n             {\ndiff --git a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\nindex 13c2786..bbebdb2 100644\n--- a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n+++ b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n@@ -89,7 +89,7 @@\n         }\n         if (this.configurations \u003d\u003d null || this.configurations.length \u003d\u003d 0)\n         {\n-            throw new MojoFailureException(\"An extractor configuration is not specified.\");\n+            throw new MojoFailureException(\"A pericopist configuration is not specified.\");\n         }\n \n         // load the classpath of the maven project\n@@ -174,7 +174,7 @@\n \n         for (String configuration : this.configurations)\n         {\n-            this.getLog().info(\"uses extractor configuration \u0027\" + configuration + \"\u0027.\");\n+            this.getLog().info(\"uses pericopist configuration \u0027\" + configuration + \"\u0027.\");\n \n             try\n             {\n",
    "projectName": "Pericopist",
    "lineNum": 92,
    "nodeStartChar": 3052,
    "before": "\"An extractor configuration is not specified.\"",
    "after": "\"A pericopist configuration is not specified.\""
  },
  {
    "commitSHA1": "e5bda3b728f8c2c2db2372319fdd11e762a2de5b",
    "commitFile": "maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java",
    "patch": "diff --git a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\nindex 13c2786..bbebdb2 100644\n--- a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n+++ b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n@@ -89,7 +89,7 @@\n         }\n         if (this.configurations \u003d\u003d null || this.configurations.length \u003d\u003d 0)\n         {\n-            throw new MojoFailureException(\"An extractor configuration is not specified.\");\n+            throw new MojoFailureException(\"A pericopist configuration is not specified.\");\n         }\n \n         // load the classpath of the maven project\n@@ -174,7 +174,7 @@\n \n         for (String configuration : this.configurations)\n         {\n-            this.getLog().info(\"uses extractor configuration \u0027\" + configuration + \"\u0027.\");\n+            this.getLog().info(\"uses pericopist configuration \u0027\" + configuration + \"\u0027.\");\n \n             try\n             {\ndiff --git a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\nindex 13c2786..bbebdb2 100644\n--- a/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n+++ b/maven-plugin/src/main/java/org/cubeengine/maven/plugins/pericopist/mojo/AbstractPericopistMojo.java\n@@ -89,7 +89,7 @@\n         }\n         if (this.configurations \u003d\u003d null || this.configurations.length \u003d\u003d 0)\n         {\n-            throw new MojoFailureException(\"An extractor configuration is not specified.\");\n+            throw new MojoFailureException(\"A pericopist configuration is not specified.\");\n         }\n \n         // load the classpath of the maven project\n@@ -174,7 +174,7 @@\n \n         for (String configuration : this.configurations)\n         {\n-            this.getLog().info(\"uses extractor configuration \u0027\" + configuration + \"\u0027.\");\n+            this.getLog().info(\"uses pericopist configuration \u0027\" + configuration + \"\u0027.\");\n \n             try\n             {\n",
    "projectName": "Pericopist",
    "lineNum": 177,
    "nodeStartChar": 5933,
    "before": "\"uses extractor configuration \u0027\"",
    "after": "\"uses pericopist configuration \u0027\""
  },
  {
    "commitSHA1": "e01b7b9cae4343d836420003e1f35b724d69f3e5",
    "commitFile": "core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java",
    "patch": "diff --git a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java\nindex c1aee8b..17e1e3a 100644\n--- a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java\n+++ b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java\n@@ -61,7 +61,7 @@\n                 String[] messages \u003d this.getMessages((CtExpression\u003c?\u003e) fieldEntry.getValue(), annotation);\n                 if (messages \u003d\u003d null || messages.length \u003d\u003d 0)\n                 {\n-                    return;\n+                    continue;\n                 }\n \n                 this.addMessage(annotation, element, messages, null);\ndiff --git a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java\nindex c1aee8b..17e1e3a 100644\n--- a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java\n+++ b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/processor/AnnotationProcessor.java\n@@ -61,7 +61,7 @@\n                 String[] messages \u003d this.getMessages((CtExpression\u003c?\u003e) fieldEntry.getValue(), annotation);\n                 if (messages \u003d\u003d null || messages.length \u003d\u003d 0)\n                 {\n-                    return;\n+                    continue;\n                 }\n \n                 this.addMessage(annotation, element, messages, null);\n",
    "projectName": "Pericopist",
    "lineNum": 64,
    "nodeStartChar": 2745,
    "before": "return; ",
    "after": "continue; "
  },
  {
    "commitSHA1": "50a9b373474bfb32eae6141370dae6d84d6d22ec",
    "commitFile": "core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java",
    "patch": "diff --git a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java\nindex 89643cc..d9099c1 100644\n--- a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java\n+++ b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java\n@@ -47,7 +47,7 @@\n @XmlRootElement(name \u003d \"source\")\n public class JavaExtractorConfiguration extends AbstractExtractorConfiguration\n {\n-    private TranslatableExpression[] translatableExpressions;\n+    private TranslatableExpression[] translatableExpressions \u003d new TranslatableExpression[0];\n     private String classpath \u003d System.getProperty(\"java.class.path\");\n \n     /**\n@@ -135,7 +135,7 @@\n     {\n         if (this.getTranslatableExpressions().length \u003d\u003d 0)\n         {\n-            throw new ConfigurationException(\"You must specify at least one way which describes how to extract the messages\");\n+            throw new ConfigurationException(\"No translatable expression given!\");\n         }\n \n         for (TranslatableExpression expression : this.getTranslatableExpressions())\ndiff --git a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java\nindex 89643cc..d9099c1 100644\n--- a/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java\n+++ b/core/src/main/java/de/cubeisland/messageextractor/extractor/java/configuration/JavaExtractorConfiguration.java\n@@ -47,7 +47,7 @@\n @XmlRootElement(name \u003d \"source\")\n public class JavaExtractorConfiguration extends AbstractExtractorConfiguration\n {\n-    private TranslatableExpression[] translatableExpressions;\n+    private TranslatableExpression[] translatableExpressions \u003d new TranslatableExpression[0];\n     private String classpath \u003d System.getProperty(\"java.class.path\");\n \n     /**\n@@ -135,7 +135,7 @@\n     {\n         if (this.getTranslatableExpressions().length \u003d\u003d 0)\n         {\n-            throw new ConfigurationException(\"You must specify at least one way which describes how to extract the messages\");\n+            throw new ConfigurationException(\"No translatable expression given!\");\n         }\n \n         for (TranslatableExpression expression : this.getTranslatableExpressions())\n",
    "projectName": "Pericopist",
    "lineNum": 138,
    "nodeStartChar": 5325,
    "before": "\"You must specify at least one way which describes how to extract the messages\"",
    "after": "\"No translatable expression given!\""
  },
  {
    "commitSHA1": "fbfa3466d1f4916c69eceeadcf3393462d3d8a11",
    "commitFile": "maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java",
    "patch": "diff --git a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\nindex 5bb5663..ce8d69f 100644\n--- a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n+++ b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n@@ -42,21 +42,18 @@\n      * @required\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private MavenProject project \u003d null;\n+    private MavenProject project \u003d null; //NOSONAR\n \n     /**\n      * @parameter\n      */\n-    @SuppressWarnings(\"all\")\n-    private String[] configurations \u003d null;\n+    private String[] configurations \u003d null; //NOSONAR\n \n     /**\n      * @parameter default-value\u003d\"${project.build.sourceEncoding}\"\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private String charsetName \u003d null;\n+    private String charsetName \u003d null; //NOSONAR\n \n     /**\n      * {@inheritDoc}\ndiff --git a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\nindex 5bb5663..ce8d69f 100644\n--- a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n+++ b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n@@ -42,21 +42,18 @@\n      * @required\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private MavenProject project \u003d null;\n+    private MavenProject project \u003d null; //NOSONAR\n \n     /**\n      * @parameter\n      */\n-    @SuppressWarnings(\"all\")\n-    private String[] configurations \u003d null;\n+    private String[] configurations \u003d null; //NOSONAR\n \n     /**\n      * @parameter default-value\u003d\"${project.build.sourceEncoding}\"\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private String charsetName \u003d null;\n+    private String charsetName \u003d null; //NOSONAR\n \n     /**\n      * {@inheritDoc}\n",
    "projectName": "Pericopist",
    "lineNum": 40,
    "nodeStartChar": 1801,
    "before": "/**   * @parameter default-value\u003d\"${project}\"  * @required  * @readonly  */ @SuppressWarnings(\"all\") private MavenProject project\u003dnull; ",
    "after": "/**   * @parameter default-value\u003d\"${project}\"  * @required  * @readonly  */ private MavenProject project\u003dnull; "
  },
  {
    "commitSHA1": "fbfa3466d1f4916c69eceeadcf3393462d3d8a11",
    "commitFile": "maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java",
    "patch": "diff --git a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\nindex 5bb5663..ce8d69f 100644\n--- a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n+++ b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n@@ -42,21 +42,18 @@\n      * @required\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private MavenProject project \u003d null;\n+    private MavenProject project \u003d null; //NOSONAR\n \n     /**\n      * @parameter\n      */\n-    @SuppressWarnings(\"all\")\n-    private String[] configurations \u003d null;\n+    private String[] configurations \u003d null; //NOSONAR\n \n     /**\n      * @parameter default-value\u003d\"${project.build.sourceEncoding}\"\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private String charsetName \u003d null;\n+    private String charsetName \u003d null; //NOSONAR\n \n     /**\n      * {@inheritDoc}\ndiff --git a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\nindex 5bb5663..ce8d69f 100644\n--- a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n+++ b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n@@ -42,21 +42,18 @@\n      * @required\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private MavenProject project \u003d null;\n+    private MavenProject project \u003d null; //NOSONAR\n \n     /**\n      * @parameter\n      */\n-    @SuppressWarnings(\"all\")\n-    private String[] configurations \u003d null;\n+    private String[] configurations \u003d null; //NOSONAR\n \n     /**\n      * @parameter default-value\u003d\"${project.build.sourceEncoding}\"\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private String charsetName \u003d null;\n+    private String charsetName \u003d null; //NOSONAR\n \n     /**\n      * {@inheritDoc}\n",
    "projectName": "Pericopist",
    "lineNum": 48,
    "nodeStartChar": 1967,
    "before": "/**   * @parameter  */ @SuppressWarnings(\"all\") private String[] configurations\u003dnull; ",
    "after": "/**   * @parameter  */ private String[] configurations\u003dnull; "
  },
  {
    "commitSHA1": "fbfa3466d1f4916c69eceeadcf3393462d3d8a11",
    "commitFile": "maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java",
    "patch": "diff --git a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\nindex 5bb5663..ce8d69f 100644\n--- a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n+++ b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n@@ -42,21 +42,18 @@\n      * @required\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private MavenProject project \u003d null;\n+    private MavenProject project \u003d null; //NOSONAR\n \n     /**\n      * @parameter\n      */\n-    @SuppressWarnings(\"all\")\n-    private String[] configurations \u003d null;\n+    private String[] configurations \u003d null; //NOSONAR\n \n     /**\n      * @parameter default-value\u003d\"${project.build.sourceEncoding}\"\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private String charsetName \u003d null;\n+    private String charsetName \u003d null; //NOSONAR\n \n     /**\n      * {@inheritDoc}\ndiff --git a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\nindex 5bb5663..ce8d69f 100644\n--- a/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n+++ b/maven-plugin/src/main/java/de/cubeisland/maven/plugins/messageextractor/mojo/AbstractMessageExtractorMojo.java\n@@ -42,21 +42,18 @@\n      * @required\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private MavenProject project \u003d null;\n+    private MavenProject project \u003d null; //NOSONAR\n \n     /**\n      * @parameter\n      */\n-    @SuppressWarnings(\"all\")\n-    private String[] configurations \u003d null;\n+    private String[] configurations \u003d null; //NOSONAR\n \n     /**\n      * @parameter default-value\u003d\"${project.build.sourceEncoding}\"\n      * @readonly\n      */\n-    @SuppressWarnings(\"all\")\n-    private String charsetName \u003d null;\n+    private String charsetName \u003d null; //NOSONAR\n \n     /**\n      * {@inheritDoc}\n",
    "projectName": "Pericopist",
    "lineNum": 54,
    "nodeStartChar": 2075,
    "before": "/**   * @parameter default-value\u003d\"${project.build.sourceEncoding}\"  * @readonly  */ @SuppressWarnings(\"all\") private String charsetName\u003dnull; ",
    "after": "/**   * @parameter default-value\u003d\"${project.build.sourceEncoding}\"  * @readonly  */ private String charsetName\u003dnull; "
  },
  {
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\n",
    "projectName": "Pericopist",
    "lineNum": 86,
    "nodeStartChar": 3328,
    "before": "new ConfigurationException(\"The configuration file could not be read.\")",
    "after": "new ConfigurationException(\"The configuration file could not be read.\",e)"
  },
  {
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\n",
    "projectName": "Pericopist",
    "lineNum": 113,
    "nodeStartChar": 4426,
    "before": "new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName())",
    "after": "new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\",e)"
  },
  {
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\n",
    "projectName": "Pericopist",
    "lineNum": 131,
    "nodeStartChar": 5260,
    "before": "new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName())",
    "after": "new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\",e)"
  },
  {
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\n",
    "projectName": "Pericopist",
    "lineNum": 35,
    "nodeStartChar": 1184,
    "before": "for (String configuration : configurations) {   this.getLog().info(configuration); } ",
    "after": "if (this.project \u003d\u003d null) {   this.getLog().info(configuration); } "
  },
  {
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\n",
    "projectName": "Pericopist",
    "lineNum": 37,
    "nodeStartChar": 1250,
    "before": "this.getLog().info(configuration); ",
    "after": "throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\"); "
  },
  {
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\n",
    "projectName": "Pericopist",
    "lineNum": 93,
    "nodeStartChar": 3445,
    "before": "e.getCause()",
    "after": "e"
  },
  {
    "commitSHA1": "cf84cb66d6f8c7ddaeaf4e71a5128cf222ebfd3a",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java\nindex 00cffc0..f5dde55 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java\n@@ -76,7 +76,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    this.log.error(\"translatable annotation \u0027\" + annotation + \"_ could not be added\", e);\n+                    this.log.error(\"translatable annotation \u0027\" + annotation + \"\u0027 could not be added\", e);\n                 }\n             }\n         }\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java\nindex 00cffc0..f5dde55 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/parser/java/JavaSourceParser.java\n@@ -76,7 +76,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    this.log.error(\"translatable annotation \u0027\" + annotation + \"_ could not be added\", e);\n+                    this.log.error(\"translatable annotation \u0027\" + annotation + \"\u0027 could not be added\", e);\n                 }\n             }\n         }\n",
    "projectName": "Pericopist",
    "lineNum": 79,
    "nodeStartChar": 3073,
    "before": "\"_ could not be added\"",
    "after": "\"\u0027 could not be added\""
  },
  {
    "commitSHA1": "710759f5189e0cc86a00ccee7e9dc6250b537f5c",
    "commitFile": "src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java",
    "patch": "diff --git a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\nindex 9220c0c..a2f6ede 100644\n--- a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n+++ b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n@@ -49,12 +49,12 @@\n \t}\n \n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data) {\n-\t\t_logger.debug(\"---\u003e \"+toClient.getId()+\":\"+onChannel+\":\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data), null);\n \t}\n \t\n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data, CommunicationContext context) {\n-\t\t_logger.debug(\"---\u003e\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data, context), null);\n \t}\n \n@@ -160,7 +160,7 @@\n \t\t\t\t\t_logger.warn(\"Unparsable message from {}\", new Object[] {message.getChannel()});\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\t_logger.debug(\"\u003c---\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n+\t\t\t\t_logger.debug(\"\u003c---::\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n \t\t\t\tCommunicationContext context \u003d CommunicationContext.getInstance(message);\n \t\t\t\tif (callback.isAllowedMessage(msg) \u0026\u0026 callback.enrichContext(from.getId(), message, context)) {\n \t\t\t\t\tdoInvoke(from, channel.getId(), msg, context);\ndiff --git a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\nindex 9220c0c..a2f6ede 100644\n--- a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n+++ b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n@@ -49,12 +49,12 @@\n \t}\n \n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data) {\n-\t\t_logger.debug(\"---\u003e \"+toClient.getId()+\":\"+onChannel+\":\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data), null);\n \t}\n \t\n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data, CommunicationContext context) {\n-\t\t_logger.debug(\"---\u003e\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data, context), null);\n \t}\n \n@@ -160,7 +160,7 @@\n \t\t\t\t\t_logger.warn(\"Unparsable message from {}\", new Object[] {message.getChannel()});\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\t_logger.debug(\"\u003c---\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n+\t\t\t\t_logger.debug(\"\u003c---::\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n \t\t\t\tCommunicationContext context \u003d CommunicationContext.getInstance(message);\n \t\t\t\tif (callback.isAllowedMessage(msg) \u0026\u0026 callback.enrichContext(from.getId(), message, context)) {\n \t\t\t\t\tdoInvoke(from, channel.getId(), msg, context);\n",
    "projectName": "ProtoCometD",
    "lineNum": 52,
    "nodeStartChar": 1862,
    "before": "\"---\u003e \" + toClient.getId() + \":\"+ onChannel+ \":\"+ data",
    "after": "\"---\u003e::\" + toClient.getId() + \"::\"+ onChannel+ \"::\"+ data.getClass().getName()+ \"::\"+ data"
  },
  {
    "commitSHA1": "710759f5189e0cc86a00ccee7e9dc6250b537f5c",
    "commitFile": "src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java",
    "patch": "diff --git a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\nindex 9220c0c..a2f6ede 100644\n--- a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n+++ b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n@@ -49,12 +49,12 @@\n \t}\n \n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data) {\n-\t\t_logger.debug(\"---\u003e \"+toClient.getId()+\":\"+onChannel+\":\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data), null);\n \t}\n \t\n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data, CommunicationContext context) {\n-\t\t_logger.debug(\"---\u003e\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data, context), null);\n \t}\n \n@@ -160,7 +160,7 @@\n \t\t\t\t\t_logger.warn(\"Unparsable message from {}\", new Object[] {message.getChannel()});\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\t_logger.debug(\"\u003c---\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n+\t\t\t\t_logger.debug(\"\u003c---::\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n \t\t\t\tCommunicationContext context \u003d CommunicationContext.getInstance(message);\n \t\t\t\tif (callback.isAllowedMessage(msg) \u0026\u0026 callback.enrichContext(from.getId(), message, context)) {\n \t\t\t\t\tdoInvoke(from, channel.getId(), msg, context);\ndiff --git a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\nindex 9220c0c..a2f6ede 100644\n--- a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n+++ b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n@@ -49,12 +49,12 @@\n \t}\n \n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data) {\n-\t\t_logger.debug(\"---\u003e \"+toClient.getId()+\":\"+onChannel+\":\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data), null);\n \t}\n \t\n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data, CommunicationContext context) {\n-\t\t_logger.debug(\"---\u003e\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data, context), null);\n \t}\n \n@@ -160,7 +160,7 @@\n \t\t\t\t\t_logger.warn(\"Unparsable message from {}\", new Object[] {message.getChannel()});\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\t_logger.debug(\"\u003c---\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n+\t\t\t\t_logger.debug(\"\u003c---::\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n \t\t\t\tCommunicationContext context \u003d CommunicationContext.getInstance(message);\n \t\t\t\tif (callback.isAllowedMessage(msg) \u0026\u0026 callback.enrichContext(from.getId(), message, context)) {\n \t\t\t\t\tdoInvoke(from, channel.getId(), msg, context);\n",
    "projectName": "ProtoCometD",
    "lineNum": 57,
    "nodeStartChar": 2122,
    "before": "\"---\u003e\"",
    "after": "\"---\u003e::\""
  },
  {
    "commitSHA1": "710759f5189e0cc86a00ccee7e9dc6250b537f5c",
    "commitFile": "src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java",
    "patch": "diff --git a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\nindex 9220c0c..a2f6ede 100644\n--- a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n+++ b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n@@ -49,12 +49,12 @@\n \t}\n \n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data) {\n-\t\t_logger.debug(\"---\u003e \"+toClient.getId()+\":\"+onChannel+\":\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data), null);\n \t}\n \t\n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data, CommunicationContext context) {\n-\t\t_logger.debug(\"---\u003e\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data, context), null);\n \t}\n \n@@ -160,7 +160,7 @@\n \t\t\t\t\t_logger.warn(\"Unparsable message from {}\", new Object[] {message.getChannel()});\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\t_logger.debug(\"\u003c---\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n+\t\t\t\t_logger.debug(\"\u003c---::\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n \t\t\t\tCommunicationContext context \u003d CommunicationContext.getInstance(message);\n \t\t\t\tif (callback.isAllowedMessage(msg) \u0026\u0026 callback.enrichContext(from.getId(), message, context)) {\n \t\t\t\t\tdoInvoke(from, channel.getId(), msg, context);\ndiff --git a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\nindex 9220c0c..a2f6ede 100644\n--- a/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n+++ b/src/main/java/com/github/jucovschi/ProtoCometD/ProtoService.java\n@@ -49,12 +49,12 @@\n \t}\n \n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data) {\n-\t\t_logger.debug(\"---\u003e \"+toClient.getId()+\":\"+onChannel+\":\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data), null);\n \t}\n \t\n \tprotected void send(ServerSession toClient, String onChannel, AbstractMessage data, CommunicationContext context) {\n-\t\t_logger.debug(\"---\u003e\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n+\t\t_logger.debug(\"---\u003e::\"+toClient.getId()+\"::\"+onChannel+\"::\"+data.getClass().getName()+\"::\"+data);\n \t\tsuper.send(toClient, onChannel, ProtoUtils.prepareProto(data, context), null);\n \t}\n \n@@ -160,7 +160,7 @@\n \t\t\t\t\t_logger.warn(\"Unparsable message from {}\", new Object[] {message.getChannel()});\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\t_logger.debug(\"\u003c---\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n+\t\t\t\t_logger.debug(\"\u003c---::\"+from.getId()+\"::\"+channel.getId()+\"::\"+msg.getClass().getName()+\"::\"+msg);\n \t\t\t\tCommunicationContext context \u003d CommunicationContext.getInstance(message);\n \t\t\t\tif (callback.isAllowedMessage(msg) \u0026\u0026 callback.enrichContext(from.getId(), message, context)) {\n \t\t\t\t\tdoInvoke(from, channel.getId(), msg, context);\n",
    "projectName": "ProtoCometD",
    "lineNum": 163,
    "nodeStartChar": 5125,
    "before": "\"\u003c---\"",
    "after": "\"\u003c---::\""
  },
  {
    "commitSHA1": "a0a196bf10da9878c81c9a03b453bbcff232e58a",
    "commitFile": "Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java",
    "patch": "diff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\ndiff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\n",
    "projectName": "SPOTranslator",
    "lineNum": 294,
    "nodeStartChar": 8277,
    "before": "\"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\"",
    "after": "\"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\""
  },
  {
    "commitSHA1": "a0a196bf10da9878c81c9a03b453bbcff232e58a",
    "commitFile": "Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java",
    "patch": "diff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\ndiff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\n",
    "projectName": "SPOTranslator",
    "lineNum": 298,
    "nodeStartChar": 8573,
    "before": "out",
    "after": "out.toString()"
  },
  {
    "commitSHA1": "a0a196bf10da9878c81c9a03b453bbcff232e58a",
    "commitFile": "Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java",
    "patch": "diff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\ndiff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\n",
    "projectName": "SPOTranslator",
    "lineNum": 314,
    "nodeStartChar": 9116,
    "before": "\"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\"",
    "after": "\"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\""
  },
  {
    "commitSHA1": "a0a196bf10da9878c81c9a03b453bbcff232e58a",
    "commitFile": "Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java",
    "patch": "diff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\ndiff --git a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\nindex 591e415..50c0c74 100644\n--- a/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n+++ b/Tests/src/test/java/io/github/therealmone/spoStackMachine/StackMachineTest.java\n@@ -290,12 +290,12 @@\n                         \"a \u003d 101.101;\" +\n                         \"print(a);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1595953398: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n                         \"Test\\r\\n\" +\n                         \"100.0\\r\\n\" +\n                         \"101.101\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n \n \n@@ -310,11 +310,11 @@\n                         \"print(a);\" + //При присваивании переменной любого типа отличного от примитивных, сконвертирует все в строку\n                         \"put(a, 1);\"\n         );\n-        assertEquals(       //      Этот хеш меня убьет D: (Запускать этот тест только в All in Tests)\n-                \"ArrayList@1684106402: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n-                        \"HashSet@335471116: [  ]\\r\\n\" +\n+        assertEquals(\n+                \"ArrayList@hash: [ (index \u003d 0, value \u003d 1.0)  (index \u003d 1, value \u003d 2.0) ]\\r\\n\" +\n+                        \"HashSet@hash: [  ]\\r\\n\" +\n                         \"Wrong type of: a\\r\\n\"\n-                ,out.toString()\n+                ,out.toString().replaceAll(\"@\\\\d+\", \"@hash\")\n         );\n     }\n }\n",
    "projectName": "SPOTranslator",
    "lineNum": 317,
    "nodeStartChar": 9402,
    "before": "out",
    "after": "out.toString()"
  },
  {
    "commitSHA1": "5afd1c3dcfac3ea6f9995ad1d89af179039f0b62",
    "commitFile": "src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java",
    "patch": "diff --git a/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java b/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java\nindex 60b014c..571c125 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java\n@@ -77,7 +77,7 @@\n     } else { // subsequent advance\n       //append to existing\n       assert !bufNeedsToBeCopied;\n-      prefixBuf.grow(1 + word.length);\n+      prefixBuf.grow(prefixBuf.length + 1 + word.length);\n       prefixBuf.bytes[prefixBuf.length++] \u003d SEPARATOR_CHAR;\n       prefixBuf.append(word);\n       if (seekPrefix()) {\ndiff --git a/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java b/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java\nindex 60b014c..571c125 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/TermPrefixCursor.java\n@@ -77,7 +77,7 @@\n     } else { // subsequent advance\n       //append to existing\n       assert !bufNeedsToBeCopied;\n-      prefixBuf.grow(1 + word.length);\n+      prefixBuf.grow(prefixBuf.length + 1 + word.length);\n       prefixBuf.bytes[prefixBuf.length++] \u003d SEPARATOR_CHAR;\n       prefixBuf.append(word);\n       if (seekPrefix()) {\n",
    "projectName": "SolrTextTagger",
    "lineNum": 80,
    "nodeStartChar": 2776,
    "before": "1 + word.length",
    "after": "prefixBuf.length + 1 + word.length"
  },
  {
    "commitSHA1": "e3a78067549ba22503b38227e8f8e3e7a8995905",
    "commitFile": "src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\nindex 3a09d55..f35ebef 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n@@ -29,6 +29,7 @@\n import java.util.Map;\n \n /**\n+ * @see {@link ConcatenateFilter}.\n  * @author David Smiley - dsmiley@mitre.org\n  */\n public class ConcatenateFilterFactory extends TokenFilterFactory {\n@@ -38,7 +39,7 @@\n   /**\n    * Initialize this factory via a set of key-value pairs.\n    */\n-  protected ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n+  public ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n     super(args);\n     tokenSeparator \u003d get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n     if (tokenSeparator.length() !\u003d 1)\ndiff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\nindex 3a09d55..f35ebef 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n@@ -29,6 +29,7 @@\n import java.util.Map;\n \n /**\n+ * @see {@link ConcatenateFilter}.\n  * @author David Smiley - dsmiley@mitre.org\n  */\n public class ConcatenateFilterFactory extends TokenFilterFactory {\n@@ -38,7 +39,7 @@\n   /**\n    * Initialize this factory via a set of key-value pairs.\n    */\n-  protected ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n+  public ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n     super(args);\n     tokenSeparator \u003d get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n     if (tokenSeparator.length() !\u003d 1)\n",
    "projectName": "SolrTextTagger",
    "lineNum": 41,
    "nodeStartChar": 1303,
    "before": "protected",
    "after": "public"
  },
  {
    "commitSHA1": "272fdba4c6e79a679ae24e310f41ba772cb0666e",
    "commitFile": "src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\nindex 8a5212c..3a09d55 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n@@ -41,7 +41,7 @@\n   protected ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n     super(args);\n     tokenSeparator \u003d get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n-    if (tokenSeparator.length() !\u003d 0)\n+    if (tokenSeparator.length() !\u003d 1)\n       throw new IllegalArgumentException(\"tokenSeparator should be 1 char: \"+tokenSeparator);\n     if (!args.isEmpty()) {\n       throw new IllegalArgumentException(\"Unknown parameters: \" + args);\ndiff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\nindex 8a5212c..3a09d55 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n@@ -41,7 +41,7 @@\n   protected ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n     super(args);\n     tokenSeparator \u003d get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n-    if (tokenSeparator.length() !\u003d 0)\n+    if (tokenSeparator.length() !\u003d 1)\n       throw new IllegalArgumentException(\"tokenSeparator should be 1 char: \"+tokenSeparator);\n     if (!args.isEmpty()) {\n       throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n",
    "projectName": "SolrTextTagger",
    "lineNum": 44,
    "nodeStartChar": 1499,
    "before": "0",
    "after": "1"
  },
  {
    "commitSHA1": "18de275e42d0d3ab0843e93a94a68c36d30d26c8",
    "commitFile": "src/main/java/com/google/acai/Dependencies.java",
    "patch": "diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex ebe1580..70c4c39 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -138,7 +138,7 @@\n      * Removes the directed edge from {@code tail} to {@code head}.\n      */\n     void removeEdge(T tail, T head) {\n-      checkState(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n+      checkArgument(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n       checkState(predecessors.remove(head, tail), \"Graph state was invalid.\");\n     }\n \ndiff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex ebe1580..70c4c39 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -138,7 +138,7 @@\n      * Removes the directed edge from {@code tail} to {@code head}.\n      */\n     void removeEdge(T tail, T head) {\n-      checkState(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n+      checkArgument(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n       checkState(predecessors.remove(head, tail), \"Graph state was invalid.\");\n     }\n \n",
    "projectName": "acai",
    "lineNum": 141,
    "nodeStartChar": 5171,
    "before": "checkState(successors.remove(tail,head),\"Attempt to remove non-existent edge\")",
    "after": "checkArgument(successors.remove(tail,head),\"Attempt to remove non-existent edge\")"
  },
  {
    "commitSHA1": "815f4f92cbde6a7c41ed88c9e701389c1d2fc2f4",
    "commitFile": "src/test/java/com/google/acai/DependenciesTest.java",
    "patch": "diff --git a/src/test/java/com/google/acai/DependenciesTest.java b/src/test/java/com/google/acai/DependenciesTest.java\nindex 717a47a..be9f43a 100644\n--- a/src/test/java/com/google/acai/DependenciesTest.java\n+++ b/src/test/java/com/google/acai/DependenciesTest.java\n@@ -41,7 +41,7 @@\n     Set\u003cTestingService\u003e testingServices \u003d\n         ImmutableSet.of(new ServiceA(), new ServiceB(), new ServiceA());\n \n-    assertThat(Dependencies.inOrder(testingServices)).has().exactlyAs(testingServices);\n+    assertThat(Dependencies.inOrder(testingServices)).containsExactlyElementsIn(testingServices);\n   }\n \n   private static class Service1 implements TestingService {}\n@@ -54,7 +54,7 @@\n         ImmutableList.of(new Service1(), new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n         ImmutableList.of(new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @DependsOn({ServiceA.class, ServiceB.class}) private static class Last implements TestingService {}\n@@ -77,7 +77,7 @@\n     ImmutableList\u003cTestingService\u003e ordered \u003d\n         Dependencies.inOrder(ImmutableSet.copyOf(testingServices));\n \n-    assertThat(ordered).has().exactlyAs(testingServices);\n+    assertThat(ordered).containsExactlyElementsIn(testingServices);\n     assertThat(Iterables.getLast(ordered)).isInstanceOf(Last.class);\n   }\n \n",
    "projectName": "acai",
    "lineNum": 44,
    "nodeStartChar": 1428,
    "before": "assertThat(Dependencies.inOrder(testingServices)).has()",
    "after": "assertThat(Dependencies.inOrder(testingServices))"
  },
  {
    "commitSHA1": "815f4f92cbde6a7c41ed88c9e701389c1d2fc2f4",
    "commitFile": "src/test/java/com/google/acai/DependenciesTest.java",
    "patch": "diff --git a/src/test/java/com/google/acai/DependenciesTest.java b/src/test/java/com/google/acai/DependenciesTest.java\nindex 717a47a..be9f43a 100644\n--- a/src/test/java/com/google/acai/DependenciesTest.java\n+++ b/src/test/java/com/google/acai/DependenciesTest.java\n@@ -41,7 +41,7 @@\n     Set\u003cTestingService\u003e testingServices \u003d\n         ImmutableSet.of(new ServiceA(), new ServiceB(), new ServiceA());\n \n-    assertThat(Dependencies.inOrder(testingServices)).has().exactlyAs(testingServices);\n+    assertThat(Dependencies.inOrder(testingServices)).containsExactlyElementsIn(testingServices);\n   }\n \n   private static class Service1 implements TestingService {}\n@@ -54,7 +54,7 @@\n         ImmutableList.of(new Service1(), new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n         ImmutableList.of(new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @DependsOn({ServiceA.class, ServiceB.class}) private static class Last implements TestingService {}\n@@ -77,7 +77,7 @@\n     ImmutableList\u003cTestingService\u003e ordered \u003d\n         Dependencies.inOrder(ImmutableSet.copyOf(testingServices));\n \n-    assertThat(ordered).has().exactlyAs(testingServices);\n+    assertThat(ordered).containsExactlyElementsIn(testingServices);\n     assertThat(Iterables.getLast(ordered)).isInstanceOf(Last.class);\n   }\n \n",
    "projectName": "acai",
    "lineNum": 56,
    "nodeStartChar": 1924,
    "before": "assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices))).has()",
    "after": "assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))"
  },
  {
    "commitSHA1": "815f4f92cbde6a7c41ed88c9e701389c1d2fc2f4",
    "commitFile": "src/test/java/com/google/acai/DependenciesTest.java",
    "patch": "diff --git a/src/test/java/com/google/acai/DependenciesTest.java b/src/test/java/com/google/acai/DependenciesTest.java\nindex 717a47a..be9f43a 100644\n--- a/src/test/java/com/google/acai/DependenciesTest.java\n+++ b/src/test/java/com/google/acai/DependenciesTest.java\n@@ -41,7 +41,7 @@\n     Set\u003cTestingService\u003e testingServices \u003d\n         ImmutableSet.of(new ServiceA(), new ServiceB(), new ServiceA());\n \n-    assertThat(Dependencies.inOrder(testingServices)).has().exactlyAs(testingServices);\n+    assertThat(Dependencies.inOrder(testingServices)).containsExactlyElementsIn(testingServices);\n   }\n \n   private static class Service1 implements TestingService {}\n@@ -54,7 +54,7 @@\n         ImmutableList.of(new Service1(), new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n         ImmutableList.of(new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @DependsOn({ServiceA.class, ServiceB.class}) private static class Last implements TestingService {}\n@@ -77,7 +77,7 @@\n     ImmutableList\u003cTestingService\u003e ordered \u003d\n         Dependencies.inOrder(ImmutableSet.copyOf(testingServices));\n \n-    assertThat(ordered).has().exactlyAs(testingServices);\n+    assertThat(ordered).containsExactlyElementsIn(testingServices);\n     assertThat(Iterables.getLast(ordered)).isInstanceOf(Last.class);\n   }\n \n",
    "projectName": "acai",
    "lineNum": 66,
    "nodeStartChar": 2301,
    "before": "assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices))).has()",
    "after": "assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))"
  },
  {
    "commitSHA1": "815f4f92cbde6a7c41ed88c9e701389c1d2fc2f4",
    "commitFile": "src/test/java/com/google/acai/DependenciesTest.java",
    "patch": "diff --git a/src/test/java/com/google/acai/DependenciesTest.java b/src/test/java/com/google/acai/DependenciesTest.java\nindex 717a47a..be9f43a 100644\n--- a/src/test/java/com/google/acai/DependenciesTest.java\n+++ b/src/test/java/com/google/acai/DependenciesTest.java\n@@ -41,7 +41,7 @@\n     Set\u003cTestingService\u003e testingServices \u003d\n         ImmutableSet.of(new ServiceA(), new ServiceB(), new ServiceA());\n \n-    assertThat(Dependencies.inOrder(testingServices)).has().exactlyAs(testingServices);\n+    assertThat(Dependencies.inOrder(testingServices)).containsExactlyElementsIn(testingServices);\n   }\n \n   private static class Service1 implements TestingService {}\n@@ -54,7 +54,7 @@\n         ImmutableList.of(new Service1(), new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n         ImmutableList.of(new Service2(), new Service3());\n \n     assertThat(Dependencies.inOrder(ImmutableSet.copyOf(testingServices)))\n-        .has().exactlyAs(testingServices).inOrder();\n+        .containsExactlyElementsIn(testingServices).inOrder();\n   }\n \n   @DependsOn({ServiceA.class, ServiceB.class}) private static class Last implements TestingService {}\n@@ -77,7 +77,7 @@\n     ImmutableList\u003cTestingService\u003e ordered \u003d\n         Dependencies.inOrder(ImmutableSet.copyOf(testingServices));\n \n-    assertThat(ordered).has().exactlyAs(testingServices);\n+    assertThat(ordered).containsExactlyElementsIn(testingServices);\n     assertThat(Iterables.getLast(ordered)).isInstanceOf(Last.class);\n   }\n \n",
    "projectName": "acai",
    "lineNum": 80,
    "nodeStartChar": 2820,
    "before": "assertThat(ordered).has()",
    "after": "assertThat(ordered)"
  },
  {
    "commitSHA1": "b9d6e89b7d0c5fc6384a87537272e9bfc872dc14",
    "commitFile": "src/main/java/com/google/acai/Dependencies.java",
    "patch": "diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex b2747ed..ebe1580 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -67,7 +67,7 @@\n       }\n     }\n     if (dependencyGraph.hasEdges()) {\n-      throw new IllegalArgumentException(\"Cycle exists in @RunAfter dependencies.\");\n+      throw new IllegalArgumentException(\"Cycle exists in @DependsOn dependencies.\");\n     }\n     return ordered.build();\n   }\ndiff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex b2747ed..ebe1580 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -67,7 +67,7 @@\n       }\n     }\n     if (dependencyGraph.hasEdges()) {\n-      throw new IllegalArgumentException(\"Cycle exists in @RunAfter dependencies.\");\n+      throw new IllegalArgumentException(\"Cycle exists in @DependsOn dependencies.\");\n     }\n     return ordered.build();\n   }\n",
    "projectName": "acai",
    "lineNum": 70,
    "nodeStartChar": 2654,
    "before": "\"Cycle exists in @RunAfter dependencies.\"",
    "after": "\"Cycle exists in @DependsOn dependencies.\""
  },
  {
    "commitSHA1": "6428e0276d0cc992c70aefad23ceed5bebb96311",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\n",
    "projectName": "admin-persistence",
    "lineNum": 208,
    "nodeStartChar": 6107,
    "before": "Messages.getMessage(\"entity.create-message\")",
    "after": "Messages.getMessage(\"entity.create-message\",entity.getClass().getSimpleName())"
  },
  {
    "commitSHA1": "6428e0276d0cc992c70aefad23ceed5bebb96311",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\n",
    "projectName": "admin-persistence",
    "lineNum": 218,
    "nodeStartChar": 6431,
    "before": "Messages.getMessage(\"entity.remove-message\")",
    "after": "Messages.getMessage(\"entity.remove-message\",entity.getClass().getSimpleName())"
  },
  {
    "commitSHA1": "6428e0276d0cc992c70aefad23ceed5bebb96311",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\n",
    "projectName": "admin-persistence",
    "lineNum": 228,
    "nodeStartChar": 6755,
    "before": "Messages.getMessage(\"entity.update-message\")",
    "after": "Messages.getMessage(\"entity.update-message\",entity.getClass().getSimpleName())"
  },
  {
    "commitSHA1": "02014e47c2668db9da9353ca0b7078723391be37",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/service/CrudService.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/service/CrudService.java b/src/main/java/com/github/adminfaces/persistence/service/CrudService.java\nindex a96625a..dcbb57f 100644\n--- a/src/main/java/com/github/adminfaces/persistence/service/CrudService.java\n+++ b/src/main/java/com/github/adminfaces/persistence/service/CrudService.java\n@@ -194,7 +194,7 @@\n     public T findById(Serializable id) {\n         T entity \u003d entityManager.find(entityClass, id);\n         if (entity \u003d\u003d null) {\n-            throw new RuntimeException(String.format(\"Record with id %s not found.\", id));\n+            LOG.warning(String.format(\"Record with id %s not found.\", id));\n         }\n         return entity;\n     }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/service/CrudService.java b/src/main/java/com/github/adminfaces/persistence/service/CrudService.java\nindex a96625a..dcbb57f 100644\n--- a/src/main/java/com/github/adminfaces/persistence/service/CrudService.java\n+++ b/src/main/java/com/github/adminfaces/persistence/service/CrudService.java\n@@ -194,7 +194,7 @@\n     public T findById(Serializable id) {\n         T entity \u003d entityManager.find(entityClass, id);\n         if (entity \u003d\u003d null) {\n-            throw new RuntimeException(String.format(\"Record with id %s not found.\", id));\n+            LOG.warning(String.format(\"Record with id %s not found.\", id));\n         }\n         return entity;\n     }\n",
    "projectName": "admin-persistence",
    "lineNum": 197,
    "nodeStartChar": 6268,
    "before": "throw new RuntimeException(String.format(\"Record with id %s not found.\",id)); ",
    "after": "LOG.warning(String.format(\"Record with id %s not found.\",id)); "
  },
  {
    "commitSHA1": "40e059a778d0251975b7b2742987805d055626d8",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex a06c0a6..368364f 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -19,7 +19,7 @@\n \n import static com.github.adminfaces.persistence.util.Messages.addDetailMessage;\n \n-public abstract class CrudMB\u003cT extends PersistenceEntity\u003e {\n+public abstract class CrudMB\u003cT extends PersistenceEntity\u003e implements Serializable {\n \n     protected final Logger LOG \u003d LoggerFactory.getLogger(getClass().getName());\n \ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex a06c0a6..368364f 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -19,7 +19,7 @@\n \n import static com.github.adminfaces.persistence.util.Messages.addDetailMessage;\n \n-public abstract class CrudMB\u003cT extends PersistenceEntity\u003e {\n+public abstract class CrudMB\u003cT extends PersistenceEntity\u003e implements Serializable {\n \n     protected final Logger LOG \u003d LoggerFactory.getLogger(getClass().getName());\n \n",
    "projectName": "admin-persistence",
    "lineNum": 22,
    "nodeStartChar": 816,
    "before": "public abstract class CrudMB\u003cT extends PersistenceEntity\u003e {   protected final Logger LOG\u003dLoggerFactory.getLogger(getClass().getName());   protected CrudService\u003cT,? extends Serializable\u003e crudService;   protected T entity;   protected Serializable id;   protected Filter\u003cT\u003e filter;   protected AdminDataModel\u003cT\u003e list;   protected List\u003cT\u003e selectionList;   protected T selection;   protected List\u003cT\u003e filteredValue;   @Inject protected SessionFilter sessionFilter;   @Inject protected Messages messages;   private String createMessage;   private String removeMessage;   private String updateMessage;   @PostConstruct public void initCrudMB(){     if (getCrudService() \u003d\u003d null) {       initServiceViaAnnotation();       if (crudService \u003d\u003d null) {         LOG.error(\"You need to initialize CrudService on your Managed Bean and call setCrudService(yourService) or override getCrudService()\");         throw new RuntimeException(\"You need to initialize CrudService on your Managed Bean and call setCrudService(yourService) or override getCrudService()\");       }     }     entity\u003dinitEntity();     filter\u003dinitFilter();     list\u003dnew AdminDataModel\u003c\u003e(crudService,filter);   }   private void initServiceViaAnnotation(){     if (getClass().isAnnotationPresent(BeanService.class)) {       BeanService beanService\u003dgetClass().getAnnotation(BeanService.class);       Class\u003c? extends CrudService\u003e serviceClass\u003dbeanService.value();       crudService\u003dBeanProvider.getContextualReference(serviceClass);     }   }   public void init(){     if (FacesContext.getCurrentInstance().getPartialViewContext().isAjaxRequest()) {       return;     }     if (id !\u003d null \u0026\u0026 !\"\".equals(id)) {       entity\u003dcrudService.findById(id);     }   }   protected Filter\u003cT\u003e initFilter(){     Filter\u003cT\u003e filter;     if (keepFiltersInSession()) {       String sessionFilterKey\u003dgetClass().getName();       filter\u003d(Filter\u003cT\u003e)sessionFilter.get(sessionFilterKey);       if (filter \u003d\u003d null) {         filter\u003dcreateDefaultFilters();         sessionFilter.add(sessionFilterKey,filter);       }     }  else {       filter\u003dcreateDefaultFilters();     }     return filter;   }   protected T initEntity(){     return createDefaultEntity();   }   public boolean isNew(){     return entity \u003d\u003d null || entity.getId() \u003d\u003d null;   }   public T createDefaultEntity(){     try {       return ((Class\u003cT\u003e)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0]).newInstance();     }  catch (    InstantiationException|IllegalAccessException e) {       LOG.error(String.format(\"Could not create entity class for bean %s\",getClass().getName()),e);       throw new RuntimeException(e);     }   }   public Filter\u003cT\u003e createDefaultFilters(){     try {       return new Filter\u003c\u003e(((Class\u003cT\u003e)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0]).newInstance());     }  catch (    InstantiationException|IllegalAccessException e) {       LOG.error(String.format(\"Could not create filters for bean %s\",getClass().getName()),e);       throw new RuntimeException(e);     }   }   public boolean keepFiltersInSession(){     return true;   }   public void setCrudService(  CrudService\u003cT,?\u003e crudService){     this.crudService\u003dcrudService;   }   public AdminDataModel\u003cT\u003e getList(){     return list;   }   public void setList(  AdminDataModel\u003cT\u003e list){     this.list\u003dlist;   }   public List\u003cT\u003e getSelectionList(){     return selectionList;   }   public void setSelectionList(  List\u003cT\u003e selectionList){     this.selectionList\u003dselectionList;   }   public T getSelection(){     return selection;   }   public void setSelection(  T selection){     this.selection\u003dselection;   }   public List\u003cT\u003e getFilteredValue(){     return filteredValue;   }   public void setFilteredValue(  List\u003cT\u003e filteredValue){     this.filteredValue\u003dfilteredValue;   }   public T getEntity(){     return entity;   }   public void setEntity(  T entity){     this.entity\u003dentity;   }   public Filter\u003cT\u003e getFilter(){     return filter;   }   public void setFilter(  Filter\u003cT\u003e filter){     this.filter\u003dfilter;   }   public CrudService\u003cT,?\u003e getCrudService(){     return crudService;   }   public Serializable getId(){     return id;   }   public void setId(  Serializable id){     this.id\u003did;   }   public String getCreateMessage(){     if (createMessage \u003d\u003d null) {       createMessage\u003d\"Record created successfully\";     }     return createMessage;   }   public String getRemoveMessage(){     if (removeMessage \u003d\u003d null) {       removeMessage\u003d\"Record removed successfully\";     }     return removeMessage;   }   public String getUpdateMessage(){     if (updateMessage \u003d\u003d null) {       updateMessage\u003d\"Record updated successfully\";     }     return updateMessage;   }   public void save(){     if (isNew()) {       beforeInsert();       crudService.insert(entity);       addDetailMessage(getCreateMessage());       afterInsert();     }  else {       beforeUpdate();       entity\u003dcrudService.update(entity);       addDetailMessage(getUpdateMessage());       afterUpdate();     }   }   public void remove(){     beforeRemove();     crudService.remove(entity);     addDetailMessage(getRemoveMessage());     afterRemove();   }   public void clear(){     if (keepFiltersInSession()) {       sessionFilter.clear(getClass().getName());     }     filter\u003dinitFilter();     list.setFilter(filter);     entity\u003dinitEntity();     id\u003dnull;   }   public void beforeRemove(){   }   public void afterRemove(){   }   public void beforeInsert(){   }   public void afterInsert(){   }   public void beforeUpdate(){   }   public void afterUpdate(){   } } ",
    "after": "public abstract class CrudMB\u003cT extends PersistenceEntity\u003e implements Serializable {   protected final Logger LOG\u003dLoggerFactory.getLogger(getClass().getName());   protected CrudService\u003cT,? extends Serializable\u003e crudService;   protected T entity;   protected Serializable id;   protected Filter\u003cT\u003e filter;   protected AdminDataModel\u003cT\u003e list;   protected List\u003cT\u003e selectionList;   protected T selection;   protected List\u003cT\u003e filteredValue;   @Inject protected SessionFilter sessionFilter;   @Inject protected Messages messages;   private String createMessage;   private String removeMessage;   private String updateMessage;   @PostConstruct public void initCrudMB(){     if (getCrudService() \u003d\u003d null) {       initServiceViaAnnotation();       if (crudService \u003d\u003d null) {         LOG.error(\"You need to initialize CrudService on your Managed Bean and call setCrudService(yourService) or override getCrudService()\");         throw new RuntimeException(\"You need to initialize CrudService on your Managed Bean and call setCrudService(yourService) or override getCrudService()\");       }     }     entity\u003dinitEntity();     filter\u003dinitFilter();     list\u003dnew AdminDataModel\u003c\u003e(crudService,filter);   }   private void initServiceViaAnnotation(){     if (getClass().isAnnotationPresent(BeanService.class)) {       BeanService beanService\u003dgetClass().getAnnotation(BeanService.class);       Class\u003c? extends CrudService\u003e serviceClass\u003dbeanService.value();       crudService\u003dBeanProvider.getContextualReference(serviceClass);     }   }   public void init(){     if (FacesContext.getCurrentInstance().getPartialViewContext().isAjaxRequest()) {       return;     }     if (id !\u003d null \u0026\u0026 !\"\".equals(id)) {       entity\u003dcrudService.findById(id);     }   }   protected Filter\u003cT\u003e initFilter(){     Filter\u003cT\u003e filter;     if (keepFiltersInSession()) {       String sessionFilterKey\u003dgetClass().getName();       filter\u003d(Filter\u003cT\u003e)sessionFilter.get(sessionFilterKey);       if (filter \u003d\u003d null) {         filter\u003dcreateDefaultFilters();         sessionFilter.add(sessionFilterKey,filter);       }     }  else {       filter\u003dcreateDefaultFilters();     }     return filter;   }   protected T initEntity(){     return createDefaultEntity();   }   public boolean isNew(){     return entity \u003d\u003d null || entity.getId() \u003d\u003d null;   }   public T createDefaultEntity(){     try {       return ((Class\u003cT\u003e)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0]).newInstance();     }  catch (    InstantiationException|IllegalAccessException e) {       LOG.error(String.format(\"Could not create entity class for bean %s\",getClass().getName()),e);       throw new RuntimeException(e);     }   }   public Filter\u003cT\u003e createDefaultFilters(){     try {       return new Filter\u003c\u003e(((Class\u003cT\u003e)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0]).newInstance());     }  catch (    InstantiationException|IllegalAccessException e) {       LOG.error(String.format(\"Could not create filters for bean %s\",getClass().getName()),e);       throw new RuntimeException(e);     }   }   public boolean keepFiltersInSession(){     return true;   }   public void setCrudService(  CrudService\u003cT,?\u003e crudService){     this.crudService\u003dcrudService;   }   public AdminDataModel\u003cT\u003e getList(){     return list;   }   public void setList(  AdminDataModel\u003cT\u003e list){     this.list\u003dlist;   }   public List\u003cT\u003e getSelectionList(){     return selectionList;   }   public void setSelectionList(  List\u003cT\u003e selectionList){     this.selectionList\u003dselectionList;   }   public T getSelection(){     return selection;   }   public void setSelection(  T selection){     this.selection\u003dselection;   }   public List\u003cT\u003e getFilteredValue(){     return filteredValue;   }   public void setFilteredValue(  List\u003cT\u003e filteredValue){     this.filteredValue\u003dfilteredValue;   }   public T getEntity(){     return entity;   }   public void setEntity(  T entity){     this.entity\u003dentity;   }   public Filter\u003cT\u003e getFilter(){     return filter;   }   public void setFilter(  Filter\u003cT\u003e filter){     this.filter\u003dfilter;   }   public CrudService\u003cT,?\u003e getCrudService(){     return crudService;   }   public Serializable getId(){     return id;   }   public void setId(  Serializable id){     this.id\u003did;   }   public String getCreateMessage(){     if (createMessage \u003d\u003d null) {       createMessage\u003d\"Record created successfully\";     }     return createMessage;   }   public String getRemoveMessage(){     if (removeMessage \u003d\u003d null) {       removeMessage\u003d\"Record removed successfully\";     }     return removeMessage;   }   public String getUpdateMessage(){     if (updateMessage \u003d\u003d null) {       updateMessage\u003d\"Record updated successfully\";     }     return updateMessage;   }   public void save(){     if (isNew()) {       beforeInsert();       crudService.insert(entity);       addDetailMessage(getCreateMessage());       afterInsert();     }  else {       beforeUpdate();       entity\u003dcrudService.update(entity);       addDetailMessage(getUpdateMessage());       afterUpdate();     }   }   public void remove(){     beforeRemove();     crudService.remove(entity);     addDetailMessage(getRemoveMessage());     afterRemove();   }   public void clear(){     if (keepFiltersInSession()) {       sessionFilter.clear(getClass().getName());     }     filter\u003dinitFilter();     list.setFilter(filter);     entity\u003dinitEntity();     id\u003dnull;   }   public void beforeRemove(){   }   public void afterRemove(){   }   public void beforeInsert(){   }   public void afterInsert(){   }   public void beforeUpdate(){   }   public void afterUpdate(){   } } "
  },
  {
    "commitSHA1": "208cfa3b4ce75750045b90174267ec3880359924",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/model/Filter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex 3aa63b1..1064263 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -9,7 +9,7 @@\n  * Created by rmpestano on 9/7/14.\n  * class which holds database pagination metadata\n  */\n-public class Filter\u003cT extends Serializable\u003e {\n+public class Filter\u003cT extends PersistenceEntity\u003e {\n     private T entity;\n     private int first;\n     private int pageSize;\ndiff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex 3aa63b1..1064263 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -9,7 +9,7 @@\n  * Created by rmpestano on 9/7/14.\n  * class which holds database pagination metadata\n  */\n-public class Filter\u003cT extends Serializable\u003e {\n+public class Filter\u003cT extends PersistenceEntity\u003e {\n     private T entity;\n     private int first;\n     private int pageSize;\n",
    "projectName": "admin-persistence",
    "lineNum": 12,
    "nodeStartChar": 252,
    "before": "Serializable",
    "after": "PersistenceEntity"
  },
  {
    "commitSHA1": "b25dd37d6ae7d5602787b51c490e3a911c1fa5ff",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \ndiff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \n",
    "projectName": "admin-persistence",
    "lineNum": 17,
    "nodeStartChar": 489,
    "before": "Class\u003c? extends CrudMB\u003e",
    "after": "String"
  },
  {
    "commitSHA1": "b25dd37d6ae7d5602787b51c490e3a911c1fa5ff",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \ndiff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \n",
    "projectName": "admin-persistence",
    "lineNum": 19,
    "nodeStartChar": 602,
    "before": "Class\u003c? extends CrudMB\u003e",
    "after": "String"
  },
  {
    "commitSHA1": "b25dd37d6ae7d5602787b51c490e3a911c1fa5ff",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \ndiff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \n",
    "projectName": "admin-persistence",
    "lineNum": 23,
    "nodeStartChar": 741,
    "before": "Class\u003c? extends CrudMB\u003e",
    "after": "String"
  },
  {
    "commitSHA1": "b25dd37d6ae7d5602787b51c490e3a911c1fa5ff",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \ndiff --git a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\nindex e6a82f2..3207615 100644\n--- a/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/util/SessionFilter.java\n@@ -14,19 +14,19 @@\n \n     private static final long serialVersionUID \u003d 1L;\n \n-    private Map\u003cClass\u003c? extends CrudMB\u003e, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n+    private Map\u003cString, Filter\u003c? extends PersistenceEntity\u003e\u003e sessionMap \u003d new HashMap\u003c\u003e();\n \n-    public void add(Class\u003c? extends CrudMB\u003e key, Filter\u003c? extends PersistenceEntity\u003e value) {\n+    public void add(String key, Filter\u003c? extends PersistenceEntity\u003e value) {\n         sessionMap.put(key, value);\n     }\n \n-    public void clear(Class\u003c? extends CrudMB\u003e key) {\n+    public void clear(String key) {\n         if (sessionMap.containsKey(key)) {\n             sessionMap.put(key, null);\n         }\n     }\n \n-    public Filter\u003c? extends PersistenceEntity\u003e get(Class\u003c? extends CrudMB\u003e key) {\n+    public Filter\u003c? extends PersistenceEntity\u003e get(String key) {\n         return sessionMap.get(key);\n     }\n \n",
    "projectName": "admin-persistence",
    "lineNum": 29,
    "nodeStartChar": 922,
    "before": "Class\u003c? extends CrudMB\u003e",
    "after": "String"
  },
  {
    "commitSHA1": "faca3dbc06ef2c363e1348828c3ea961179d9ffd",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/model/Filter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex af9b70a..5e43ddd 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -97,18 +97,18 @@\n     }\n \n     public Integer getIntParam(String key) {\n-        return hasParam(key) ? (Integer) getParam(key): null;\n+        return hasParam(key) ? Integer.parseInt(getStringParam(key)) : null;\n     }\n \n     public Long getLongParam(String key) {\n-        return hasParam(key) ? (Long) getParam(key): null;\n+        return hasParam(key) ? Long.parseLong(getStringParam(key)) : null;\n     }\n \n     public Boolean getBooleanParam(String key) {\n-        return hasParam(key) ? (Boolean) getParam(key):null;\n+        return hasParam(key) ? Boolean.parseBoolean(getStringParam(key)) : null;\n     }\n \n     public Double getDoubleParam(String key) {\n-        return hasParam(key) ? (Double) getParam(key):null;\n+        return hasParam(key) ? Double.parseDouble(getStringParam(key)) : null;\n     }\n }\n",
    "projectName": "admin-persistence",
    "lineNum": 100,
    "nodeStartChar": 2131,
    "before": "(Integer)getParam(key)",
    "after": "Integer.parseInt(getStringParam(key))"
  },
  {
    "commitSHA1": "faca3dbc06ef2c363e1348828c3ea961179d9ffd",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/model/Filter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex af9b70a..5e43ddd 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -97,18 +97,18 @@\n     }\n \n     public Integer getIntParam(String key) {\n-        return hasParam(key) ? (Integer) getParam(key): null;\n+        return hasParam(key) ? Integer.parseInt(getStringParam(key)) : null;\n     }\n \n     public Long getLongParam(String key) {\n-        return hasParam(key) ? (Long) getParam(key): null;\n+        return hasParam(key) ? Long.parseLong(getStringParam(key)) : null;\n     }\n \n     public Boolean getBooleanParam(String key) {\n-        return hasParam(key) ? (Boolean) getParam(key):null;\n+        return hasParam(key) ? Boolean.parseBoolean(getStringParam(key)) : null;\n     }\n \n     public Double getDoubleParam(String key) {\n-        return hasParam(key) ? (Double) getParam(key):null;\n+        return hasParam(key) ? Double.parseDouble(getStringParam(key)) : null;\n     }\n }\n",
    "projectName": "admin-persistence",
    "lineNum": 104,
    "nodeStartChar": 2243,
    "before": "(Long)getParam(key)",
    "after": "Long.parseLong(getStringParam(key))"
  },
  {
    "commitSHA1": "faca3dbc06ef2c363e1348828c3ea961179d9ffd",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/model/Filter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex af9b70a..5e43ddd 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -97,18 +97,18 @@\n     }\n \n     public Integer getIntParam(String key) {\n-        return hasParam(key) ? (Integer) getParam(key): null;\n+        return hasParam(key) ? Integer.parseInt(getStringParam(key)) : null;\n     }\n \n     public Long getLongParam(String key) {\n-        return hasParam(key) ? (Long) getParam(key): null;\n+        return hasParam(key) ? Long.parseLong(getStringParam(key)) : null;\n     }\n \n     public Boolean getBooleanParam(String key) {\n-        return hasParam(key) ? (Boolean) getParam(key):null;\n+        return hasParam(key) ? Boolean.parseBoolean(getStringParam(key)) : null;\n     }\n \n     public Double getDoubleParam(String key) {\n-        return hasParam(key) ? (Double) getParam(key):null;\n+        return hasParam(key) ? Double.parseDouble(getStringParam(key)) : null;\n     }\n }\n",
    "projectName": "admin-persistence",
    "lineNum": 108,
    "nodeStartChar": 2358,
    "before": "(Boolean)getParam(key)",
    "after": "Boolean.parseBoolean(getStringParam(key))"
  },
  {
    "commitSHA1": "faca3dbc06ef2c363e1348828c3ea961179d9ffd",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/model/Filter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex af9b70a..5e43ddd 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -97,18 +97,18 @@\n     }\n \n     public Integer getIntParam(String key) {\n-        return hasParam(key) ? (Integer) getParam(key): null;\n+        return hasParam(key) ? Integer.parseInt(getStringParam(key)) : null;\n     }\n \n     public Long getLongParam(String key) {\n-        return hasParam(key) ? (Long) getParam(key): null;\n+        return hasParam(key) ? Long.parseLong(getStringParam(key)) : null;\n     }\n \n     public Boolean getBooleanParam(String key) {\n-        return hasParam(key) ? (Boolean) getParam(key):null;\n+        return hasParam(key) ? Boolean.parseBoolean(getStringParam(key)) : null;\n     }\n \n     public Double getDoubleParam(String key) {\n-        return hasParam(key) ? (Double) getParam(key):null;\n+        return hasParam(key) ? Double.parseDouble(getStringParam(key)) : null;\n     }\n }\n",
    "projectName": "admin-persistence",
    "lineNum": 112,
    "nodeStartChar": 2473,
    "before": "(Double)getParam(key)",
    "after": "Double.parseDouble(getStringParam(key))"
  },
  {
    "commitSHA1": "e94a5c202ab57dd64d05b5026440ab84356a1a7b",
    "commitFile": "src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java",
    "patch": "diff --git a/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java b/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java\nindex c1fb185..e01ebef 100644\n--- a/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java\n+++ b/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java\n@@ -106,7 +106,7 @@\n                 case POSITIVE:\n                     return positiveDoubles();\n                 case NEGATIVE:\n-                    return doubles(-Double.MAX_VALUE, 0);\n+                    return doubles(-Double.MAX_VALUE, -Double.MAX_VALUE);\n                 default:\n                     return doubles(-Double.MAX_VALUE, Double.MAX_VALUE);\n             }\ndiff --git a/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java b/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java\nindex c1fb185..e01ebef 100644\n--- a/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java\n+++ b/src/main/java/tech/sirwellington/alchemy/test/junit/runners/GenerateDouble.java\n@@ -106,7 +106,7 @@\n                 case POSITIVE:\n                     return positiveDoubles();\n                 case NEGATIVE:\n-                    return doubles(-Double.MAX_VALUE, 0);\n+                    return doubles(-Double.MAX_VALUE, -Double.MAX_VALUE);\n                 default:\n                     return doubles(-Double.MAX_VALUE, Double.MAX_VALUE);\n             }\n",
    "projectName": "alchemy-test",
    "lineNum": 109,
    "nodeStartChar": 3305,
    "before": "0",
    "after": "-Double.MAX_VALUE"
  },
  {
    "commitSHA1": "5fc212e210ad51cf9937930cd0c4ae027a205e84",
    "commitFile": "src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java",
    "patch": "diff --git a/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java b/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java\nindex 4f4e1ec..fe311b6 100644\n--- a/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java\n+++ b/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java\n@@ -45,7 +45,7 @@\n     @Before\n     public void setUp()\n     {\n-        protocol \u003d StringGenerators.stringsFromFixedList(\"http\", \"https\", \"ftp\", \"ssh\").get();\n+        protocol \u003d StringGenerators.stringsFromFixedList(\"http\", \"https\", \"ftp\", \"file\").get();\n \n         annotation \u003d new GenerateURLInstance(protocol);\n \ndiff --git a/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java b/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java\nindex 4f4e1ec..fe311b6 100644\n--- a/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java\n+++ b/src/test/java/tech/sirwellington/alchemy/test/junit/runners/GenerateURLTest.java\n@@ -45,7 +45,7 @@\n     @Before\n     public void setUp()\n     {\n-        protocol \u003d StringGenerators.stringsFromFixedList(\"http\", \"https\", \"ftp\", \"ssh\").get();\n+        protocol \u003d StringGenerators.stringsFromFixedList(\"http\", \"https\", \"ftp\", \"file\").get();\n \n         annotation \u003d new GenerateURLInstance(protocol);\n \n",
    "projectName": "alchemy-test",
    "lineNum": 48,
    "nodeStartChar": 1578,
    "before": "\"ssh\"",
    "after": "\"file\""
  },
  {
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 34,
    "nodeStartChar": 996,
    "before": "/**   * Initialize the transport with the values provided in the Properties object.  * @param p the Properties object with the initialization values  * @param networkInterface name of the network interface  * @throws TransportConfigException if something goes wrong  */ public void initialize(Properties p,String networkInterface) throws TransportConfigException ; ",
    "after": "/**   * Initialize the transport with the values provided in the Properties object.  * @param p the Properties object with the initialization values  * @param networkInterface name of the network interface  * @throws TransportConfigException if something goes wrong  */ void initialize(Properties p,String networkInterface) throws TransportConfigException ; "
  },
  {
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 43,
    "nodeStartChar": 1381,
    "before": "/**   * Actually send the probe out on transport mechanism.  * @param probe the Probe instance that has been pre-configured  * @throws ProbeSenderException if something bad happened when sending theprobe  */ public void sendProbe(Probe probe) throws TransportException ; ",
    "after": "/**   * Actually send the probe out on transport mechanism.  * @param probe the Probe instance that has been pre-configured  * @throws ProbeSenderException if something bad happened when sending theprobe  */ void sendProbe(Probe probe) throws TransportException ; "
  },
  {
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 52,
    "nodeStartChar": 1685,
    "before": "/**   * Return the maximum payload size that this transport can handle. For example, the payload of the UDP Multicast transport could only be 600 bytes, meaning that the probe might be split up into several smaller probes. But other transports such as JMS or SNS might allow probe payload sizes much larger (practically unlimited).  * @return max payload size in bytes  */ public int maxPayloadSize(); ",
    "after": "/**   * Return the maximum payload size that this transport can handle. For example, the payload of the UDP Multicast transport could only be 600 bytes, meaning that the probe might be split up into several smaller probes. But other transports such as JMS or SNS might allow probe payload sizes much larger (practically unlimited).  * @return max payload size in bytes  */ int maxPayloadSize(); "
  },
  {
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 63,
    "nodeStartChar": 2123,
    "before": "/**   * Return the name of the network interface associated with this transport.  * @return the name of the network interface associated with this transport  */ public String getNetworkInterfaceName(); ",
    "after": "/**   * Return the name of the network interface associated with this transport.  * @return the name of the network interface associated with this transport  */ String getNetworkInterfaceName(); "
  },
  {
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 70,
    "nodeStartChar": 2341,
    "before": "/**   * Close the transport.  * @throws ProbeSenderException if something bad happened  */ public void close() throws TransportException ; ",
    "after": "/**   * Close the transport.  * @throws ProbeSenderException if something bad happened  */ void close() throws TransportException ; "
  },
  {
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 34,
    "nodeStartChar": 996,
    "before": "/**   * Initialize the transport with the values provided in the Properties object.  * @param p the Properties object with the initialization values  * @param networkInterface name of the network interface  * @throws TransportConfigException if something goes wrong  */ public void initialize(Properties p,String networkInterface) throws TransportConfigException ; ",
    "after": "/**   * Initialize the transport with the values provided in the Properties object.  * @param p the Properties object with the initialization values  * @param networkInterface name of the network interface  * @throws TransportConfigException if something goes wrong  */ void initialize(Properties p,String networkInterface) throws TransportConfigException ; "
  },
  {
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 43,
    "nodeStartChar": 1381,
    "before": "/**   * Actually send the probe out on transport mechanism.  * @param probe the Probe instance that has been pre-configured  * @throws ProbeSenderException if something bad happened when sending theprobe  */ public void sendProbe(Probe probe) throws TransportException ; ",
    "after": "/**   * Actually send the probe out on transport mechanism.  * @param probe the Probe instance that has been pre-configured  * @throws ProbeSenderException if something bad happened when sending theprobe  */ void sendProbe(Probe probe) throws TransportException ; "
  },
  {
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 52,
    "nodeStartChar": 1685,
    "before": "/**   * Return the maximum payload size that this transport can handle. For example, the payload of the UDP Multicast transport could only be 600 bytes, meaning that the probe might be split up into several smaller probes. But other transports such as JMS or SNS might allow probe payload sizes much larger (practically unlimited).  * @return max payload size in bytes  */ public int maxPayloadSize(); ",
    "after": "/**   * Return the maximum payload size that this transport can handle. For example, the payload of the UDP Multicast transport could only be 600 bytes, meaning that the probe might be split up into several smaller probes. But other transports such as JMS or SNS might allow probe payload sizes much larger (practically unlimited).  * @return max payload size in bytes  */ int maxPayloadSize(); "
  },
  {
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 63,
    "nodeStartChar": 2123,
    "before": "/**   * Return the name of the network interface associated with this transport.  * @return the name of the network interface associated with this transport  */ public String getNetworkInterfaceName(); ",
    "after": "/**   * Return the name of the network interface associated with this transport.  * @return the name of the network interface associated with this transport  */ String getNetworkInterfaceName(); "
  },
  {
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 70,
    "nodeStartChar": 2341,
    "before": "/**   * Close the transport.  * @throws ProbeSenderException if something bad happened  */ public void close() throws TransportException ; ",
    "after": "/**   * Close the transport.  * @throws ProbeSenderException if something bad happened  */ void close() throws TransportException ; "
  },
  {
    "commitSHA1": "50e62b068dadeb67ee0c7110c3fa6ff172a54c5e",
    "commitFile": "CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java",
    "patch": "diff --git a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\nindex 1ab7977..9859d28 100644\n--- a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n+++ b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n@@ -63,7 +63,7 @@\n       LOGGER.warning(\"Issues finding ip address of locahost.  Using string \u0027localhost\u0027 for listener address binding\");\n       addr \u003d \"localhost\";\n     }\n-    return UriBuilder.fromUri(\"http://\" + addr + \"/\").port(4005).build();\n+    return UriBuilder.fromUri(\"http://\" + addr ).port(4005).build();\n   }\n \n   /**\ndiff --git a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\nindex 1ab7977..9859d28 100644\n--- a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n+++ b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n@@ -63,7 +63,7 @@\n       LOGGER.warning(\"Issues finding ip address of locahost.  Using string \u0027localhost\u0027 for listener address binding\");\n       addr \u003d \"localhost\";\n     }\n-    return UriBuilder.fromUri(\"http://\" + addr + \"/\").port(4005).build();\n+    return UriBuilder.fromUri(\"http://\" + addr ).port(4005).build();\n   }\n \n   /**\n",
    "projectName": "argo",
    "lineNum": 66,
    "nodeStartChar": 2152,
    "before": "\"http://\" + addr + \"/\"",
    "after": "\"http://\" + addr"
  },
  {
    "commitSHA1": "9453028eff68c58f0ccc7ace41f77cf2ea236dd1",
    "commitFile": "CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java",
    "patch": "diff --git a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\nindex 1ab7977..9859d28 100644\n--- a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n+++ b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n@@ -63,7 +63,7 @@\n       LOGGER.warning(\"Issues finding ip address of locahost.  Using string \u0027localhost\u0027 for listener address binding\");\n       addr \u003d \"localhost\";\n     }\n-    return UriBuilder.fromUri(\"http://\" + addr + \"/\").port(4005).build();\n+    return UriBuilder.fromUri(\"http://\" + addr ).port(4005).build();\n   }\n \n   /**\ndiff --git a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\nindex 1ab7977..9859d28 100644\n--- a/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n+++ b/CLClient/src/main/java/ws/argo/CLClient/listener/ResponseListener.java\n@@ -63,7 +63,7 @@\n       LOGGER.warning(\"Issues finding ip address of locahost.  Using string \u0027localhost\u0027 for listener address binding\");\n       addr \u003d \"localhost\";\n     }\n-    return UriBuilder.fromUri(\"http://\" + addr + \"/\").port(4005).build();\n+    return UriBuilder.fromUri(\"http://\" + addr ).port(4005).build();\n   }\n \n   /**\n",
    "projectName": "argo",
    "lineNum": 66,
    "nodeStartChar": 2152,
    "before": "\"http://\" + addr + \"/\"",
    "after": "\"http://\" + addr"
  },
  {
    "commitSHA1": "b7cc43f5a3c49d0f418eb342c212312e8655cab3",
    "commitFile": "VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java",
    "patch": "diff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\ndiff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\n",
    "projectName": "argo",
    "lineNum": 130,
    "nodeStartChar": 3767,
    "before": "\"ni-list\"",
    "after": "\"nilist\""
  },
  {
    "commitSHA1": "b7cc43f5a3c49d0f418eb342c212312e8655cab3",
    "commitFile": "VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java",
    "patch": "diff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\ndiff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\n",
    "projectName": "argo",
    "lineNum": 167,
    "nodeStartChar": 5005,
    "before": "\"ni-list\"",
    "after": "\"nilist\""
  },
  {
    "commitSHA1": "e3a7c0dde349cf85a1736f932afd86ff33d40324",
    "commitFile": "VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java",
    "patch": "diff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\ndiff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\n",
    "projectName": "argo",
    "lineNum": 130,
    "nodeStartChar": 3767,
    "before": "\"ni-list\"",
    "after": "\"nilist\""
  },
  {
    "commitSHA1": "e3a7c0dde349cf85a1736f932afd86ff33d40324",
    "commitFile": "VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java",
    "patch": "diff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\ndiff --git a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\nindex 7a5528d..41a9f4c 100644\n--- a/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n+++ b/VPNMulticastGateway/src/main/java/ws/argo/MCGateway/comms/MCastMultihome.java\n@@ -96,9 +96,6 @@\n \t\t\t\tif (isNetworkInterfaceSuitable(xface)) {\n \n \t\t\t\t\tlaunchOnNetowrkInterface(xface);\n-\t\t\t\t\t// System.out.println(\"Launching Responder for \"+name);\n-\t\t\t\t\t// new MCastMultihomeResponderThread(xface,\n-\t\t\t\t\t// MULTICAST_IPV4_GROUP, MULTICAST_PORT).start();\n \t\t\t\t}\n \n \t\t\t}\n@@ -127,7 +124,7 @@\n \t\tOptions stdOptions \u003d new Options();\n \t    \t\n \t\tstdOptions.addOption(new Option( \"help\", \"print this message\" ));\n-\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"ni-list\"));\n+\t\tstdOptions.addOption(OptionBuilder.withArgName(\"networkIntfs\").hasArg().withDescription(\"comma separated list of network interface names (from ifconfig)\").create(\"nilist\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastPort\").hasArg().withType(new Integer(0)).withDescription(\"the multicast port to send/listen on\").create(\"mp\"));\n \t\tstdOptions.addOption(OptionBuilder.withArgName(\"multicastAddr\").hasArg().withDescription(\"the multicast group address to send/listen on\").create(\"ma\"));\n \t\t\n@@ -164,7 +161,7 @@\n \t\t\n \t\t//Interface List\n \t\tif (cl.hasOption(\"il\")) {\n-\t\t\tString il \u003d cl.getOptionValue(\"ni-list\");\n+\t\t\tString il \u003d cl.getOptionValue(\"nilist\");\n \t\t\tString[] intfs \u003d il.split(\"[,]\");\n \t\t\tList\u003cString\u003e list \u003d Arrays.asList(intfs);\n \t\t\tvalues.put(\"il\", list);\n",
    "projectName": "argo",
    "lineNum": 167,
    "nodeStartChar": 5005,
    "before": "\"ni-list\"",
    "after": "\"nilist\""
  },
  {
    "commitSHA1": "cfdfb261e794b2fa38816bc6f1995121e87adfb0",
    "commitFile": "src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java",
    "patch": "diff --git a/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java b/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java\nindex c53e083..3292d74 100644\n--- a/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java\n+++ b/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java\n@@ -82,7 +82,7 @@\n     }\n       \n     JsonSchema jsonSchema \u003d jsonSchema(actual);\n-    String jsonString \u003d jsonSchema.toString();\n+    String jsonString \u003d objectMapper.writeValueAsString(jsonSchema);\n     com.trickl.assertj.core.api.Assertions.assertThat(json(jsonString))\n         .allowingAnyArrayOrdering()\n         .writeActualToFileOnFailure()\ndiff --git a/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java b/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java\nindex c53e083..3292d74 100644\n--- a/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java\n+++ b/src/main/java/com/trickl/assertj/core/api/json/AbstractObjectAssert.java\n@@ -82,7 +82,7 @@\n     }\n       \n     JsonSchema jsonSchema \u003d jsonSchema(actual);\n-    String jsonString \u003d jsonSchema.toString();\n+    String jsonString \u003d objectMapper.writeValueAsString(jsonSchema);\n     com.trickl.assertj.core.api.Assertions.assertThat(json(jsonString))\n         .allowingAnyArrayOrdering()\n         .writeActualToFileOnFailure()\n",
    "projectName": "assertj-json",
    "lineNum": 85,
    "nodeStartChar": 2972,
    "before": "jsonSchema.toString()",
    "after": "objectMapper.writeValueAsString(jsonSchema)"
  },
  {
    "commitSHA1": "56ea32d6c379bf4cefea0c108be3d98fdaad64e2",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\nindex ffdc744..7825254 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n@@ -66,12 +66,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] playload)\n     {\n-        this.payload \u003d playload;\n+        this.payload \u003d playload.clone();\n     }\n \n     public PayloadType getType()\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\nindex d089911..49813c1 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n@@ -81,12 +81,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] payload)\n     {\n-        this.payload \u003d payload;\n+        this.payload \u003d payload.clone();\n     }\n \n     @Override\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\nindex ffdc744..7825254 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n@@ -66,12 +66,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] playload)\n     {\n-        this.payload \u003d playload;\n+        this.payload \u003d playload.clone();\n     }\n \n     public PayloadType getType()\n",
    "projectName": "asset-registry",
    "lineNum": 69,
    "nodeStartChar": 1419,
    "before": "payload",
    "after": "payload.clone()"
  },
  {
    "commitSHA1": "56ea32d6c379bf4cefea0c108be3d98fdaad64e2",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\nindex ffdc744..7825254 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n@@ -66,12 +66,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] playload)\n     {\n-        this.payload \u003d playload;\n+        this.payload \u003d playload.clone();\n     }\n \n     public PayloadType getType()\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\nindex d089911..49813c1 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n@@ -81,12 +81,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] payload)\n     {\n-        this.payload \u003d payload;\n+        this.payload \u003d payload.clone();\n     }\n \n     @Override\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\nindex ffdc744..7825254 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/data/ArtefactPayload.java\n@@ -66,12 +66,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] playload)\n     {\n-        this.payload \u003d playload;\n+        this.payload \u003d playload.clone();\n     }\n \n     public PayloadType getType()\n",
    "projectName": "asset-registry",
    "lineNum": 74,
    "nodeStartChar": 1508,
    "before": "playload",
    "after": "playload.clone()"
  },
  {
    "commitSHA1": "56ea32d6c379bf4cefea0c108be3d98fdaad64e2",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\nindex d089911..49813c1 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n@@ -81,12 +81,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] payload)\n     {\n-        this.payload \u003d payload;\n+        this.payload \u003d payload.clone();\n     }\n \n     @Override\n",
    "projectName": "asset-registry",
    "lineNum": 84,
    "nodeStartChar": 1390,
    "before": "payload",
    "after": "payload.clone()"
  },
  {
    "commitSHA1": "56ea32d6c379bf4cefea0c108be3d98fdaad64e2",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\nindex d089911..49813c1 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-datamodel/src/main/java/eu/scasefp7/assetregistry/dto/JsonArtefactPayload.java\n@@ -81,12 +81,12 @@\n \n     public byte[] getPayload()\n     {\n-        return payload;\n+        return payload.clone();\n     }\n \n     public void setPayload(byte[] payload)\n     {\n-        this.payload \u003d payload;\n+        this.payload \u003d payload.clone();\n     }\n \n     @Override\n",
    "projectName": "asset-registry",
    "lineNum": 89,
    "nodeStartChar": 1478,
    "before": "payload",
    "after": "payload.clone()"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 65,
    "nodeStartChar": 1923,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 84,
    "nodeStartChar": 2828,
    "before": "\"Checks whether an artefact exists in the repository\"",
    "after": "\"Checks if an artefact does exist in the repository\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 85,
    "nodeStartChar": 2909,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server errorm\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 107,
    "nodeStartChar": 3757,
    "before": "\"Finds a list of artefacts by search query\"",
    "after": "\"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 108,
    "nodeStartChar": 3828,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 113,
    "nodeStartChar": 4300,
    "before": "\"Elastic Search query string\"",
    "after": "\"Search query in the Elastic Search JSON syntax\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 131,
    "nodeStartChar": 4776,
    "before": "\"Finds a list of artefacts by free text search strings\"",
    "after": "\"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 132,
    "nodeStartChar": 4859,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 156,
    "nodeStartChar": 6181,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content (artefact has been created successfully)\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 187,
    "nodeStartChar": 7664,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\ndiff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\nindex 2ab0199..5b8c2bb 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ArtefactResource.java\n@@ -64,8 +64,7 @@\n     @ApiOperation(value \u003d \"Finds an artefact in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public JsonArtefact get(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n     {\n@@ -81,11 +80,10 @@\n      * @return boolean true if artefact has been false, otherwise false\n      */\n     @GET\n-    @ApiOperation(value \u003d \"Checks whether an artefact exists in the repository\")\n+    @ApiOperation(value \u003d \"Checks if an artefact does exist in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server errorm\")})\n     @Path(\"exists/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public boolean exists(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID\") long id)\n@@ -104,13 +102,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Elastic Search query string\") final String query)\n+    public List\u003cArtefactDTO\u003e searchArtefacts(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query);\n@@ -128,17 +125,16 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of artefacts by free text search strings. \u003cBR\u003eAll query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cArtefactDTO\u003e searchArtefacts(\n-            @QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-            @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain,\n-            @QueryParam(\"type\") @ApiParam(value \u003d \"artefact type\") final String artefacttype)\n+            @QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of an artefact\") final String query,\n+            @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string an artefact should be assigned to\") final String domain,\n+            @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string an artefact should be assigned to\") final String subdomain,\n+            @QueryParam(\"type\") @ApiParam(value \u003d \"The Artefact Type of an artefact (e.g. USE_CASE)\") final String artefacttype)\n     {\n         final List\u003cArtefactDTO\u003e artefacts \u003d artefactService.find(query, domain, subdomain, artefacttype);\n         return artefacts;\n@@ -154,9 +150,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new artefact in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (artefact has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"Artefact to be stored in the Asset Repo\") JsonArtefact artefact) throws URISyntaxException\n     {\n         final Project project \u003d this.projectService.findByName(artefact.getProjectName());\n@@ -186,8 +181,7 @@\n     @ApiOperation(value \u003d \"Updates an artefact in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"artefact id\") long id,\n                            @ApiParam(value \u003d \"The artefact to be updated\") JsonArtefact artefact)\n             throws URISyntaxException\n@@ -208,8 +202,7 @@\n     @ApiOperation(value \u003d \"Deletes an artefact from the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"Artefact ID of the artefact that shall be deleted from the Asset Repo\") long id)\n     {\n         this.artefactService.delete(id);\n",
    "projectName": "asset-registry",
    "lineNum": 209,
    "nodeStartChar": 8770,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\nindex 49ed30e..073270a 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/AssetRegistryRestApp.java\n@@ -64,7 +64,7 @@\n         beanConfig.setVersion(BuildProperties.getBuildVersion());\n         beanConfig.setSchemes(new String[]{\"http\", \"https\"});\n         beanConfig.setHost(\"localhost:8080\");\n-        beanConfig.setBasePath(BASE);\n+        beanConfig.setBasePath(\"/s-case\" + BASE);\n         beanConfig.setResourcePackage(String.format(\"io.swagger.resources,%s\", REST_PACKAGE_NAME));\n         beanConfig.setScan(true);\n \n",
    "projectName": "asset-registry",
    "lineNum": 67,
    "nodeStartChar": 2663,
    "before": "BASE",
    "after": "\"/s-case\" + BASE"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\n",
    "projectName": "asset-registry",
    "lineNum": 41,
    "nodeStartChar": 1218,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\nindex ea56468..d2d9d98 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/DomainResource.java\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n @Path(AssetRegistryRestApp.PART_DOMAIN)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides domains\")\n+@Api(value \u003d AssetRegistryRestApp.PART_DOMAIN, description \u003d \"provides domains\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a domain by ID in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public Domain find(@PathParam(\"id\") @ApiParam(value \u003d \"domain id\") long id)\n     {\n@@ -60,8 +59,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all domains in the repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cDomain\u003e findAll()\n     {\n",
    "projectName": "asset-registry",
    "lineNum": 61,
    "nodeStartChar": 2116,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 55,
    "nodeStartChar": 1623,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 79,
    "nodeStartChar": 2610,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 112,
    "nodeStartChar": 3865,
    "before": "\"Finds a list of projects in the repository by search query\"",
    "after": "\"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 113,
    "nodeStartChar": 3953,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 118,
    "nodeStartChar": 4423,
    "before": "\"search query\"",
    "after": "\"Search query in the Elastic Search JSON syntax\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 135,
    "nodeStartChar": 4832,
    "before": "\"Finds a list of projects by free text search strings\"",
    "after": "\"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\""
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 136,
    "nodeStartChar": 4914,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 158,
    "nodeStartChar": 6192,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content (project has been created successfully)\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 182,
    "nodeStartChar": 7317,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 204,
    "nodeStartChar": 8405,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\nindex 54fd3ea..a9313dd 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/ProjectResource.java\n@@ -32,7 +32,7 @@\n import static eu.scasefp7.assetregistry.rest.ResourceTools.redirect;\n \n @Path(AssetRegistryRestApp.PART_PROJECT)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides projects\")\n+@Api(value \u003d AssetRegistryRestApp.PART_PROJECT, description \u003d \"provides projects\")\n @Produces(\"application/json;charset\u003dUTF-8\")\n @Consumes(\"application/json\")\n @Stateless\n@@ -54,8 +54,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"id\") @ApiParam(value \u003d \"project ID\") long id)\n     {\n         JsonProject jsonProject \u003d null;\n@@ -78,8 +77,7 @@\n     @ApiOperation(value \u003d \"Finds a project in the repository by its name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public JsonProject get(@PathParam(\"name\") @ApiParam(value \u003d \"the name of the project\") String name)\n     {\n \n@@ -109,13 +107,12 @@\n      */\n     @GET\n     @Path(\"directsearch\")\n-    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query\")\n+    @ApiOperation(value \u003d \"Finds a list of projects in the repository by search query. \u003cBR\u003eThe search query has to be submitted in the Elastic Search JSON search syntax.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"search query\") final String query)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"q\") @ApiParam(value \u003d \"Search query in the Elastic Search JSON syntax\") final String query)\n     {\n         LOG.info(\"search \u0027{}\u0027\", query);\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query);\n@@ -132,15 +129,14 @@\n      */\n     @GET\n     @Path(\"search\")\n-    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings\")\n+    @ApiOperation(value \u003d \"Finds a list of projects by free text search strings. \u003cBR\u003e All query parameters are optional and can be combined as needed but at least one parameter has to be submitted.\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n-    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Elastic Search query string\") final String query,\n-                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Elastic Search domain\") final String domain,\n-                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Elastic Search subdomain\") final String subdomain)\n+    public List\u003cProjectDTO\u003e searchProjects(@QueryParam(\"query\") @ApiParam(value \u003d \"Free text string that should be used to search inside of a project\") final String query,\n+                                           @QueryParam(\"domain\") @ApiParam(value \u003d \"Domain name string a project should be assigned to\") final String domain,\n+                                           @QueryParam(\"subdomain\") @ApiParam(value \u003d \"Subdomain name string a project should be assigned to\") final String subdomain)\n     {\n         final List\u003cProjectDTO\u003e projects \u003d projectService.find(query, domain, subdomain);\n         return projects;\n@@ -156,9 +152,8 @@\n     @POST\n     @ApiOperation(value \u003d \"Creates and stores a new project in the repository\")\n     @ApiResponses(value \u003d {\n-            @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 204, message \u003d \"No content (project has been created successfully)\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response create(@ApiParam(value \u003d \"The project to be stored inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n     {\n@@ -181,8 +176,7 @@\n     @ApiOperation(value \u003d \"Updates a project in the Asset Repo\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public Response update(@PathParam(\"id\") @ApiParam(value \u003d \"Project ID\") long id,\n                            @ApiParam(value \u003d \"The project to be updated inside of the Asset Repo\") JsonProject project)\n             throws URISyntaxException\n@@ -203,8 +197,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by ID\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"id\") @ApiParam(value \u003d \"ID of the project to be deleted\") long id)\n     {\n         this.projectService.delete(id);\n@@ -220,8 +213,7 @@\n     @ApiOperation(value \u003d \"Deletes a project from the Asset Repo by name\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public void delete(@PathParam(\"name\") @ApiParam(value \u003d \"name of the project to be deleted\") String name)\n     {\n         this.projectService.delete(name);\n",
    "projectName": "asset-registry",
    "lineNum": 221,
    "nodeStartChar": 9178,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\n",
    "projectName": "asset-registry",
    "lineNum": 41,
    "nodeStartChar": 1247,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\nindex 588606c..5f0e42e 100644\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/SubDomainResource.java\n@@ -40,8 +40,7 @@\n     @ApiOperation(value \u003d \"Finds a subdomain by ID in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public SubDomain find(@PathParam(\"id\") @ApiParam(value \u003d \"subdomain ID\") long id)\n     {\n@@ -58,8 +57,7 @@\n     @ApiOperation(value \u003d \"Retrieves a list of all subdomains in the Asset Repository\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     @Produces(MediaType.APPLICATION_JSON)\n     public List\u003cSubDomain\u003e findAll()\n     {\n",
    "projectName": "asset-registry",
    "lineNum": 59,
    "nodeStartChar": 2156,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "616a2d69733c50c93141a2bc10bc89f2bd11507b",
    "commitFile": "scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java",
    "patch": "diff --git a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\nindex 1615b4d..d6c8745 100755\n--- a/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n+++ b/scase-wp5-asset-registry/scase-wp5-asset-registry-backend-impl/src/main/java/eu/scasefp7/assetregistry/rest/VersionResource.java\n@@ -16,7 +16,7 @@\n  * @author Robert Magnus\n  */\n @Path(AssetRegistryRestApp.PART_VERSION)\n-@Api(value \u003d AssetRegistryRestApp.PART_SUBDOMAIN, description \u003d \"provides version info\")\n+@Api(value \u003d AssetRegistryRestApp.PART_VERSION, description \u003d \"provides version info\")\n public class VersionResource\n {\n     @Inject\n@@ -31,8 +31,7 @@\n     @ApiOperation(value \u003d \"Returns the version number\")\n     @ApiResponses(value \u003d {\n             @ApiResponse(code \u003d 204, message \u003d \"No content\"), @ApiResponse(code \u003d 400, message \u003d \"Request incorrect\"),\n-            @ApiResponse(code \u003d 401, message \u003d \"Unauthorized\"), @ApiResponse(code \u003d 403, message \u003d \"Forbidden\"),\n-            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Server problem\")})\n+            @ApiResponse(code \u003d 404, message \u003d \"Not found\"), @ApiResponse(code \u003d 500, message \u003d \"Internal Server error\")})\n     public String version()\n     {\n         return this.versionService.getVersion();\n",
    "projectName": "asset-registry",
    "lineNum": 32,
    "nodeStartChar": 813,
    "before": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d401,message\u003d\"Unauthorized\"),@ApiResponse(code\u003d403,message\u003d\"Forbidden\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Server problem\")}",
    "after": "{@ApiResponse(code\u003d204,message\u003d\"No content\"),@ApiResponse(code\u003d400,message\u003d\"Request incorrect\"),@ApiResponse(code\u003d404,message\u003d\"Not found\"),@ApiResponse(code\u003d500,message\u003d\"Internal Server error\")}"
  },
  {
    "commitSHA1": "7c3382a7ad0a40658ba15194ff4e6cfed663b018",
    "commitFile": "src/main/java/se/sunet/ati/ladok/atom/AtomClient.java",
    "patch": "diff --git a/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java b/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java\nindex ce9dc71..4b93a6f 100644\n--- a/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java\n+++ b/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java\n@@ -319,7 +319,7 @@\n \t\tfor (Entry entry : unfilteredEntries) {\n \t\t\tindexOfLastReadEntry++;\n \t\t\t\n-\t\t\tif (getEntryId(entry.getContent()).equals(lastReadEntryId)) {\n+\t\t\tif (entry.getId().toString().equals(lastReadEntryId)) {\n \t\t\t\tbreak;\n \t\t\t}\n \ndiff --git a/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java b/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java\nindex ce9dc71..4b93a6f 100644\n--- a/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java\n+++ b/src/main/java/se/sunet/ati/ladok/atom/AtomClient.java\n@@ -319,7 +319,7 @@\n \t\tfor (Entry entry : unfilteredEntries) {\n \t\t\tindexOfLastReadEntry++;\n \t\t\t\n-\t\t\tif (getEntryId(entry.getContent()).equals(lastReadEntryId)) {\n+\t\t\tif (entry.getId().toString().equals(lastReadEntryId)) {\n \t\t\t\tbreak;\n \t\t\t}\n \n",
    "projectName": "ati-ladok3-atom-client",
    "lineNum": 322,
    "nodeStartChar": 10786,
    "before": "getEntryId(entry.getContent())",
    "after": "entry.getId().toString()"
  },
  {
    "commitSHA1": "f1ab688b1833d96fd18270651e3dd5ac897778d3",
    "commitFile": "src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java",
    "patch": "diff --git a/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java b/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java\nindex 6ca1bc7..bf19f76 100644\n--- a/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java\n+++ b/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java\n@@ -36,7 +36,7 @@\n \t\tfor (Entry entry : entries) {\n \t\t\tString feedIdAndEventId \u003d AtomUtil.getFeedIdAndEventId(entry);\n \t\t\t\n-\t\t\tassertEquals(\"1;02cb593f-8f06-4263-b5dd-5665a85f618b\", feedIdAndEventId);\n+\t\t\tassertEquals(\"http://localhost/ladok/feeds/1;02cb593f-8f06-4263-b5dd-5665a85f618b\", feedIdAndEventId);\n \t\t\tbreak;\n \t\t}\n \t}\ndiff --git a/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java b/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java\nindex 6ca1bc7..bf19f76 100644\n--- a/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java\n+++ b/src/test/java/se/sunet/ati/ladok/atom/AtomUtilTest.java\n@@ -36,7 +36,7 @@\n \t\tfor (Entry entry : entries) {\n \t\t\tString feedIdAndEventId \u003d AtomUtil.getFeedIdAndEventId(entry);\n \t\t\t\n-\t\t\tassertEquals(\"1;02cb593f-8f06-4263-b5dd-5665a85f618b\", feedIdAndEventId);\n+\t\t\tassertEquals(\"http://localhost/ladok/feeds/1;02cb593f-8f06-4263-b5dd-5665a85f618b\", feedIdAndEventId);\n \t\t\tbreak;\n \t\t}\n \t}\n",
    "projectName": "ati-ladok3-atom-client",
    "lineNum": 39,
    "nodeStartChar": 1146,
    "before": "\"1;02cb593f-8f06-4263-b5dd-5665a85f618b\"",
    "after": "\"http://localhost/ladok/feeds/1;02cb593f-8f06-4263-b5dd-5665a85f618b\""
  },
  {
    "commitSHA1": "ce21849a77d5c3e88bb15a82b9ade9e668188f0e",
    "commitFile": "aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java",
    "patch": "diff --git a/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java b/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java\nindex 6e7b4b6..66a38ce 100644\n--- a/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java\n+++ b/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java\n@@ -102,7 +102,10 @@\n \n     public VersionNumber adaptTo(VersionNumber example) {\n \n-        int newSize \u003d versionNumberSegments.size() - (versionNumberSegments.size() - 3);\n+        int newSize \u003d example.versionNumberSegments.size() \u003d\u003d 3\n+            ? versionNumberSegments.size()\n+            : versionNumberSegments.size() - (versionNumberSegments.size() - 3);\n+\n         List\u003cString\u003e adaptation \u003d versionNumberSegments.subList(0, newSize);\n         Integers.times((newSize - adaptation.size()), () -\u003e adaptation.add(\"0\"));\n         return new VersionNumber(adaptation, false);\ndiff --git a/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java b/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java\nindex 6e7b4b6..66a38ce 100644\n--- a/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java\n+++ b/aurora-git-version/src/main/java/ske/aurora/version/suggest/VersionNumber.java\n@@ -102,7 +102,10 @@\n \n     public VersionNumber adaptTo(VersionNumber example) {\n \n-        int newSize \u003d versionNumberSegments.size() - (versionNumberSegments.size() - 3);\n+        int newSize \u003d example.versionNumberSegments.size() \u003d\u003d 3\n+            ? versionNumberSegments.size()\n+            : versionNumberSegments.size() - (versionNumberSegments.size() - 3);\n+\n         List\u003cString\u003e adaptation \u003d versionNumberSegments.subList(0, newSize);\n         Integers.times((newSize - adaptation.size()), () -\u003e adaptation.add(\"0\"));\n         return new VersionNumber(adaptation, false);\n",
    "projectName": "aurora-git-version",
    "lineNum": 105,
    "nodeStartChar": 3995,
    "before": "versionNumberSegments.size() - (versionNumberSegments.size() - 3)",
    "after": "example.versionNumberSegments.size() \u003d\u003d 3 ? versionNumberSegments.size() : versionNumberSegments.size() - (versionNumberSegments.size() - 3)"
  },
  {
    "commitSHA1": "bd5025cc2d49e0a5c68106247487cd7423d1e1cc",
    "commitFile": "aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java",
    "patch": "diff --git a/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java b/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java\nindex c3a1870..55bcef8 100644\n--- a/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java\n+++ b/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java\n@@ -57,7 +57,7 @@\n \n     protected GitVersion(Repository repository, Options options) throws IOException {\n         Assert.notNull(repository, \"Repository cannot be null\");\n-        Assert.notNull(options, \"Oepository cannot be null\");\n+        Assert.notNull(options, \"Options cannot be null\");\n         this.repository \u003d repository;\n         this.options \u003d options;\n     }\ndiff --git a/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java b/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java\nindex c3a1870..55bcef8 100644\n--- a/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java\n+++ b/aurora-git-version/src/main/java/ske/aurora/gitversion/GitVersion.java\n@@ -57,7 +57,7 @@\n \n     protected GitVersion(Repository repository, Options options) throws IOException {\n         Assert.notNull(repository, \"Repository cannot be null\");\n-        Assert.notNull(options, \"Oepository cannot be null\");\n+        Assert.notNull(options, \"Options cannot be null\");\n         this.repository \u003d repository;\n         this.options \u003d options;\n     }\n",
    "projectName": "aurora-git-version",
    "lineNum": 60,
    "nodeStartChar": 2580,
    "before": "\"Oepository cannot be null\"",
    "after": "\"Options cannot be null\""
  },
  {
    "commitSHA1": "c9bcfeb1528b89766161c91f53cda516a9139a0d",
    "commitFile": "aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java",
    "patch": "diff --git a/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java b/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java\nindex 7979e2e..f08c5c4 100644\n--- a/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java\n+++ b/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java\n@@ -13,6 +13,6 @@\n         if (args.length \u003d\u003d 1) {\n             path \u003d args[0];\n         }\n-        System.out.print(GitVersion.determineVersion(new File(path)));\n+        System.out.print(GitVersion.determineVersion(new File(path)).getVersion());\n     }\n }\ndiff --git a/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java b/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java\nindex 7979e2e..f08c5c4 100644\n--- a/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java\n+++ b/aurora-git-version-cli/src/main/java/ske/aurora/gitversion/Main.java\n@@ -13,6 +13,6 @@\n         if (args.length \u003d\u003d 1) {\n             path \u003d args[0];\n         }\n-        System.out.print(GitVersion.determineVersion(new File(path)));\n+        System.out.print(GitVersion.determineVersion(new File(path)).getVersion());\n     }\n }\n",
    "projectName": "aurora-git-version",
    "lineNum": 16,
    "nodeStartChar": 323,
    "before": "GitVersion",
    "after": "GitVersion.determineVersion(new File(path))"
  },
  {
    "commitSHA1": "ee056eec2b7b5bd86193ee9db51626b2f908d03e",
    "commitFile": "src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java b/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java\nindex 8e51251..f8bad18 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java\n@@ -66,7 +66,7 @@\n     public String getParameterQuery(final Procedure procedure) {\n         String sql \u003d \"( select  \\n\"\n                 + \"   \u0027name\u0027 \u003d case when parameter_id \u003d 0 then \u0027return_value\u0027 else name end,  \\n\"\n-                + \"   \u0027dtype\u0027   \u003d case when is_cursor_ref \u003d 1 then \u0027cursor\u0027 else type_name(user_type_id) end,  \\n\"\n+                + \"   \u0027dtype\u0027   \u003d case when is_cursor_ref \u003d 1 then \u0027cursor\u0027 else type_name(system_type_id) end,  \\n\"\n                 + \"   \u0027position\u0027  \u003d parameter_id,\\n\"\n                 + \"   \u0027direction\u0027 \u003d case when is_output \u003d 0 then \u0027IN\u0027 else \u0027OUT\u0027 end\\n\"\n                 + \"  from sys.parameters where object_id \u003d object_id(?) )\\n\";\ndiff --git a/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java b/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java\nindex 8e51251..f8bad18 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/db/support/mssql/MsSqlSPGenerator.java\n@@ -66,7 +66,7 @@\n     public String getParameterQuery(final Procedure procedure) {\n         String sql \u003d \"( select  \\n\"\n                 + \"   \u0027name\u0027 \u003d case when parameter_id \u003d 0 then \u0027return_value\u0027 else name end,  \\n\"\n-                + \"   \u0027dtype\u0027   \u003d case when is_cursor_ref \u003d 1 then \u0027cursor\u0027 else type_name(user_type_id) end,  \\n\"\n+                + \"   \u0027dtype\u0027   \u003d case when is_cursor_ref \u003d 1 then \u0027cursor\u0027 else type_name(system_type_id) end,  \\n\"\n                 + \"   \u0027position\u0027  \u003d parameter_id,\\n\"\n                 + \"   \u0027direction\u0027 \u003d case when is_output \u003d 0 then \u0027IN\u0027 else \u0027OUT\u0027 end\\n\"\n                 + \"  from sys.parameters where object_id \u003d object_id(?) )\\n\";\n",
    "projectName": "autoplsp",
    "lineNum": 69,
    "nodeStartChar": 2433,
    "before": "\"   \u0027dtype\u0027   \u003d case when is_cursor_ref \u003d 1 then \u0027cursor\u0027 else type_name(user_type_id) end,  \\n\"",
    "after": "\"   \u0027dtype\u0027   \u003d case when is_cursor_ref \u003d 1 then \u0027cursor\u0027 else type_name(system_type_id) end,  \\n\""
  },
  {
    "commitSHA1": "ce0552977e0fecf53a826de1f761e7bc79fd3f08",
    "commitFile": "src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\nindex a7bedbc..956e71a 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n@@ -208,11 +208,11 @@\n         getLog().info(\"[AutoGenerator] OutParameterCode: \" + outParameterCode);\n         getLog().info(\"[AutoGenerator] OutParameterMessage: \" + outParameterMessage);\n \n-        if (!outputDirectory.mkdirs()) {\n+        if (!outputDirectory.exists() \u0026\u0026 !outputDirectory.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectory + \" directory.\");\n         }\n \n-        if (!outputDirectoryResource.mkdirs()) {\n+        if (!outputDirectoryResource.exists() \u0026\u0026 !outputDirectoryResource.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectoryResource + \" directory.\");\n         }\n \ndiff --git a/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java b/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\nindex 25c17eb..0c4c980 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\n@@ -93,7 +93,7 @@\n         String result \u003d outputDir + File.separatorChar + path + File.separatorChar;\n         File file \u003d new File(result);\n \n-        if (!file.mkdirs()) {\n+        if (!file.exists() \u0026\u0026 !file.mkdirs()) {\n             throw new BusinessException(\"Not was possible made the directory \" + result);\n         }\n \ndiff --git a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\nindex a7bedbc..956e71a 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n@@ -208,11 +208,11 @@\n         getLog().info(\"[AutoGenerator] OutParameterCode: \" + outParameterCode);\n         getLog().info(\"[AutoGenerator] OutParameterMessage: \" + outParameterMessage);\n \n-        if (!outputDirectory.mkdirs()) {\n+        if (!outputDirectory.exists() \u0026\u0026 !outputDirectory.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectory + \" directory.\");\n         }\n \n-        if (!outputDirectoryResource.mkdirs()) {\n+        if (!outputDirectoryResource.exists() \u0026\u0026 !outputDirectoryResource.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectoryResource + \" directory.\");\n         }\n \n",
    "projectName": "autoplsp",
    "lineNum": 211,
    "nodeStartChar": 6237,
    "before": "!outputDirectory.mkdirs()",
    "after": "!outputDirectory.exists() \u0026\u0026 !outputDirectory.mkdirs()"
  },
  {
    "commitSHA1": "ce0552977e0fecf53a826de1f761e7bc79fd3f08",
    "commitFile": "src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\nindex a7bedbc..956e71a 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n@@ -208,11 +208,11 @@\n         getLog().info(\"[AutoGenerator] OutParameterCode: \" + outParameterCode);\n         getLog().info(\"[AutoGenerator] OutParameterMessage: \" + outParameterMessage);\n \n-        if (!outputDirectory.mkdirs()) {\n+        if (!outputDirectory.exists() \u0026\u0026 !outputDirectory.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectory + \" directory.\");\n         }\n \n-        if (!outputDirectoryResource.mkdirs()) {\n+        if (!outputDirectoryResource.exists() \u0026\u0026 !outputDirectoryResource.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectoryResource + \" directory.\");\n         }\n \ndiff --git a/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java b/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\nindex 25c17eb..0c4c980 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\n@@ -93,7 +93,7 @@\n         String result \u003d outputDir + File.separatorChar + path + File.separatorChar;\n         File file \u003d new File(result);\n \n-        if (!file.mkdirs()) {\n+        if (!file.exists() \u0026\u0026 !file.mkdirs()) {\n             throw new BusinessException(\"Not was possible made the directory \" + result);\n         }\n \ndiff --git a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\nindex a7bedbc..956e71a 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/AutoGenerator.java\n@@ -208,11 +208,11 @@\n         getLog().info(\"[AutoGenerator] OutParameterCode: \" + outParameterCode);\n         getLog().info(\"[AutoGenerator] OutParameterMessage: \" + outParameterMessage);\n \n-        if (!outputDirectory.mkdirs()) {\n+        if (!outputDirectory.exists() \u0026\u0026 !outputDirectory.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectory + \" directory.\");\n         }\n \n-        if (!outputDirectoryResource.mkdirs()) {\n+        if (!outputDirectoryResource.exists() \u0026\u0026 !outputDirectoryResource.mkdirs()) {\n             throw new MojoExecutionException(\"Fail make \" + outputDirectoryResource + \" directory.\");\n         }\n \n",
    "projectName": "autoplsp",
    "lineNum": 215,
    "nodeStartChar": 6383,
    "before": "!outputDirectoryResource.mkdirs()",
    "after": "!outputDirectoryResource.exists() \u0026\u0026 !outputDirectoryResource.mkdirs()"
  },
  {
    "commitSHA1": "ce0552977e0fecf53a826de1f761e7bc79fd3f08",
    "commitFile": "src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java b/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\nindex 25c17eb..0c4c980 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/TemplateGenerator.java\n@@ -93,7 +93,7 @@\n         String result \u003d outputDir + File.separatorChar + path + File.separatorChar;\n         File file \u003d new File(result);\n \n-        if (!file.mkdirs()) {\n+        if (!file.exists() \u0026\u0026 !file.mkdirs()) {\n             throw new BusinessException(\"Not was possible made the directory \" + result);\n         }\n \n",
    "projectName": "autoplsp",
    "lineNum": 96,
    "nodeStartChar": 3275,
    "before": "!file.mkdirs()",
    "after": "!file.exists() \u0026\u0026 !file.mkdirs()"
  },
  {
    "commitSHA1": "07e3cd33eb17c6d0b144a5c49b34d4297aa4de05",
    "commitFile": "src/main/java/com/github/yadickson/autoplsp/db/common/Direction.java",
    "patch": "diff --git a/src/main/java/com/github/yadickson/autoplsp/db/common/Direction.java b/src/main/java/com/github/yadickson/autoplsp/db/common/Direction.java\nindex ba1f42c..596c5b5 100644\n--- a/src/main/java/com/github/yadickson/autoplsp/db/common/Direction.java\n+++ b/src/main/java/com/github/yadickson/autoplsp/db/common/Direction.java\n@@ -23,16 +23,8 @@\n  */\n public enum Direction {\n \n-    /**\n-     * Input parameter\n-     */\n-    Input,\n-    /**\n-     * Output parameter\n-     */\n-    Output,\n-    /**\n-     * Dual\n-     */\n-    InputOutput\n+    INPUT,\n+    OUTPUT,\n+    INPUT_OUTPUT\n+\n }\n",
    "projectName": "autoplsp",
    "lineNum": 19,
    "nodeStartChar": 743,
    "before": "/**   * Enum parameter direction  * @author Yadickson Soto  */ public enum Direction {/**   * Input parameter  */ Input, /**   * Output parameter  */ Output, /**   * Dual  */ InputOutput} ",
    "after": "/**   * Enum parameter direction  * @author Yadickson Soto  */ public enum Direction {INPUT, OUTPUT, INPUT_OUTPUT} "
  },
  {
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\n",
    "projectName": "bowman",
    "lineNum": 87,
    "nodeStartChar": 2450,
    "before": "Void",
    "after": "Object"
  },
  {
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\n",
    "projectName": "bowman",
    "lineNum": 262,
    "nodeStartChar": 9540,
    "before": "public HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,BiFunction\u003cHandlerInstantiator,Class\u003c?\u003e,Object\u003e instantiationMethod){   this.clazz\u003dclazz;   this.instantiationMethod\u003dinstantiationMethod; } ",
    "after": "HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,BiFunction\u003cHandlerInstantiator,Class\u003c?\u003e,Object\u003e instantiationMethod){   this.clazz\u003dclazz;   this.instantiationMethod\u003dinstantiationMethod; } "
  },
  {
    "commitSHA1": "b78b4d2376bad919435e9727faee0fe74c5dad7e",
    "commitFile": "client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java",
    "patch": "diff --git a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\nindex b16659d..50e75b2 100644\n--- a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n+++ b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n@@ -67,7 +67,7 @@\n \n \t@Override\n \tpublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametrizedType(Resource.class, Resource.class, type);\n+\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametricType(Resource.class, type);\n \t\t\n \t\tResource\u003cT\u003e resource \u003d p.getCodec().readValue(p, resourceType);\n \t\t\ndiff --git a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\nindex b16659d..50e75b2 100644\n--- a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n+++ b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n@@ -67,7 +67,7 @@\n \n \t@Override\n \tpublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametrizedType(Resource.class, Resource.class, type);\n+\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametricType(Resource.class, type);\n \t\t\n \t\tResource\u003cT\u003e resource \u003d p.getCodec().readValue(p, resourceType);\n \t\t\n",
    "projectName": "bowman",
    "lineNum": 70,
    "nodeStartChar": 2566,
    "before": "ctxt.getTypeFactory().constructParametrizedType(Resource.class,Resource.class,type)",
    "after": "ctxt.getTypeFactory().constructParametricType(Resource.class,type)"
  },
  {
    "commitSHA1": "bb747c9cce8cc89408edacc3464a82f4c10db106",
    "commitFile": "components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java",
    "patch": "diff --git a/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java b/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java\nindex becbb88..754392f 100644\n--- a/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java\n+++ b/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java\n@@ -136,7 +136,7 @@\n         ServiceProviderConfig spConfig \u003d getServiceProvider();\n         if(spConfig \u003d\u003d null) {\n             this.serviceProviderId \u003d null;\n-            throw new InvalidServiceProviderIdException(\"Invalid serviceProviderId \" + serviceProviderId);\n+            throw new InvalidServiceProviderIdException(\"Invalid serviceProviderId: \" + serviceProviderId);\n         }\n     }\n \ndiff --git a/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java b/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java\nindex becbb88..754392f 100644\n--- a/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java\n+++ b/components/org.wso2.carbon.identity.gateway/src/main/java/org/wso2/carbon/identity/gateway/context/AuthenticationContext.java\n@@ -136,7 +136,7 @@\n         ServiceProviderConfig spConfig \u003d getServiceProvider();\n         if(spConfig \u003d\u003d null) {\n             this.serviceProviderId \u003d null;\n-            throw new InvalidServiceProviderIdException(\"Invalid serviceProviderId \" + serviceProviderId);\n+            throw new InvalidServiceProviderIdException(\"Invalid serviceProviderId: \" + serviceProviderId);\n         }\n     }\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 139,
    "nodeStartChar": 5556,
    "before": "\"Invalid serviceProviderId \"",
    "after": "\"Invalid serviceProviderId: \""
  },
  {
    "commitSHA1": "f91f054457c44d95c5825abda99307d22f51893e",
    "commitFile": "components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java",
    "patch": "diff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\nindex 6a0ce87..3bf899b 100644\n--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n@@ -112,10 +112,10 @@\n         Map\u003cString, String\u003e queryParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.QUERY_PARAMETERS);\n         Map\u003cString, String\u003e bodyParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.BODY_PARAMETERS);\n \n-        if (bodyParams.get(paramName) !\u003d null) {\n+        if (bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null) {\n             return bodyParams.get(paramName);\n         } else {\n-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {\n+            if (queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))) {\n                 try {\n                     decode \u003d URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());\n                 } catch (UnsupportedEncodingException e) {\ndiff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\nindex 6a0ce87..3bf899b 100644\n--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n@@ -112,10 +112,10 @@\n         Map\u003cString, String\u003e queryParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.QUERY_PARAMETERS);\n         Map\u003cString, String\u003e bodyParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.BODY_PARAMETERS);\n \n-        if (bodyParams.get(paramName) !\u003d null) {\n+        if (bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null) {\n             return bodyParams.get(paramName);\n         } else {\n-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {\n+            if (queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))) {\n                 try {\n                     decode \u003d URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());\n                 } catch (UnsupportedEncodingException e) {\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 115,
    "nodeStartChar": 4021,
    "before": "bodyParams.get(paramName) !\u003d null",
    "after": "bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null"
  },
  {
    "commitSHA1": "f91f054457c44d95c5825abda99307d22f51893e",
    "commitFile": "components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java",
    "patch": "diff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\nindex 6a0ce87..3bf899b 100644\n--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n@@ -112,10 +112,10 @@\n         Map\u003cString, String\u003e queryParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.QUERY_PARAMETERS);\n         Map\u003cString, String\u003e bodyParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.BODY_PARAMETERS);\n \n-        if (bodyParams.get(paramName) !\u003d null) {\n+        if (bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null) {\n             return bodyParams.get(paramName);\n         } else {\n-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {\n+            if (queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))) {\n                 try {\n                     decode \u003d URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());\n                 } catch (UnsupportedEncodingException e) {\ndiff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\nindex 6a0ce87..3bf899b 100644\n--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n@@ -112,10 +112,10 @@\n         Map\u003cString, String\u003e queryParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.QUERY_PARAMETERS);\n         Map\u003cString, String\u003e bodyParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.BODY_PARAMETERS);\n \n-        if (bodyParams.get(paramName) !\u003d null) {\n+        if (bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null) {\n             return bodyParams.get(paramName);\n         } else {\n-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {\n+            if (queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))) {\n                 try {\n                     decode \u003d URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());\n                 } catch (UnsupportedEncodingException e) {\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 118,
    "nodeStartChar": 4137,
    "before": "StringUtils.isNotBlank(queryParams.get(paramName))",
    "after": "queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))"
  },
  {
    "commitSHA1": "05883fd44c995bec0ba413f80ef97c9f9d2b5e91",
    "commitFile": "tests/test-artifacts/org.wso2.carbon.identity.outbound.sample/src/main/java/org/wso2/carbon/identity/sample/outbound/authenticator/SampleFederatedAuthenticator.java",
    "patch": "diff --git a/tests/test-artifacts/org.wso2.carbon.identity.outbound.sample/src/main/java/org/wso2/carbon/identity/sample/outbound/authenticator/SampleFederatedAuthenticator.java b/tests/test-artifacts/org.wso2.carbon.identity.outbound.sample/src/main/java/org/wso2/carbon/identity/sample/outbound/authenticator/SampleFederatedAuthenticator.java\nindex 4225dee..bdce50c 100644\n--- a/tests/test-artifacts/org.wso2.carbon.identity.outbound.sample/src/main/java/org/wso2/carbon/identity/sample/outbound/authenticator/SampleFederatedAuthenticator.java\n+++ b/tests/test-artifacts/org.wso2.carbon.identity.outbound.sample/src/main/java/org/wso2/carbon/identity/sample/outbound/authenticator/SampleFederatedAuthenticator.java\n@@ -117,7 +117,7 @@\n             log.error(\"Error while accessing parameters\");\n         }\n         Set\u003cClaim\u003e claims \u003d new HashSet\u003cClaim\u003e();\n-        Claim claim \u003d new Claim(\"http://org.harsha/claims\", \"http://org.harsha/claims/email\" , \"harsha@wso2.com\");\n+        Claim claim \u003d new Claim(\"http://wso2.org/claims\", \"http://wso2.org/claims/email\" , \"harsha@wso2.com\");\n         claims.add(claim);\n         federatedUser.setUserClaims(claims);\n         context.getSequenceContext().getCurrentStepContext().setUser(federatedUser);\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 120,
    "nodeStartChar": 4700,
    "before": "new Claim(\"http://org.harsha/claims\",\"http://org.harsha/claims/email\",\"harsha@wso2.com\")",
    "after": "new Claim(\"http://wso2.org/claims\",\"http://wso2.org/claims/email\",\"harsha@wso2.com\")"
  },
  {
    "commitSHA1": "02b05082427c75c8ed4578e236b7348f3fe6d646",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 66,
    "nodeStartChar": 2618,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "commitSHA1": "e49693b98ee6fd6cafe2103477449a593d231bd6",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 66,
    "nodeStartChar": 2618,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "commitSHA1": "4f352bfe87ba198b2ea437cace6e7412ba74d3b8",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 100,
    "nodeStartChar": 4106,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "commitSHA1": "4f352bfe87ba198b2ea437cace6e7412ba74d3b8",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 96,
    "nodeStartChar": 3803,
    "before": "realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null",
    "after": "StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))"
  },
  {
    "commitSHA1": "da53fe4781ac061ba5810eb1159d4c35f362d837",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 100,
    "nodeStartChar": 4106,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "commitSHA1": "da53fe4781ac061ba5810eb1159d4c35f362d837",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 96,
    "nodeStartChar": 3803,
    "before": "realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null",
    "after": "StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))"
  },
  {
    "commitSHA1": "becc0d9b0621157e5926a1e717702b7f8fa70def",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex a0df1ae..4bff6ec 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -140,7 +140,7 @@\n             userStoreCountRetriever.init(realmConfiguration);\n             return userStoreCountRetriever;\n         } else {\n-            throw new UserStoreCounterException(\"Realm Configuration is not ready for count the domain: \" + domain);\n+            return null;\n         }\n     }\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex a0df1ae..4bff6ec 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -140,7 +140,7 @@\n             userStoreCountRetriever.init(realmConfiguration);\n             return userStoreCountRetriever;\n         } else {\n-            throw new UserStoreCounterException(\"Realm Configuration is not ready for count the domain: \" + domain);\n+            return null;\n         }\n     }\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 143,
    "nodeStartChar": 5794,
    "before": "throw new UserStoreCounterException(\"Realm Configuration is not ready for count the domain: \" + domain); ",
    "after": "return null; "
  },
  {
    "commitSHA1": "51a3836cd813bb7f7576a0f87e3231ab6b0e5a5b",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex a0df1ae..4bff6ec 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -140,7 +140,7 @@\n             userStoreCountRetriever.init(realmConfiguration);\n             return userStoreCountRetriever;\n         } else {\n-            throw new UserStoreCounterException(\"Realm Configuration is not ready for count the domain: \" + domain);\n+            return null;\n         }\n     }\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex a0df1ae..4bff6ec 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -140,7 +140,7 @@\n             userStoreCountRetriever.init(realmConfiguration);\n             return userStoreCountRetriever;\n         } else {\n-            throw new UserStoreCounterException(\"Realm Configuration is not ready for count the domain: \" + domain);\n+            return null;\n         }\n     }\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 143,
    "nodeStartChar": 5794,
    "before": "throw new UserStoreCounterException(\"Realm Configuration is not ready for count the domain: \" + domain); ",
    "after": "return null; "
  },
  {
    "commitSHA1": "6767ccaf63878d7e86c3a3b53bf270119d5bf268",
    "commitFile": "rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java",
    "patch": "diff --git a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\nindex 1743200..062ea25 100644\n--- a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n+++ b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n@@ -40,7 +40,7 @@\n \t}\n \n \t@RdfProperty(Rr.objectMap)\n-\t@RdfTypeDecider(String.class)\n+\t@RdfTypeDecider(ObjectMapTypeDecider.class)\n \t@Override\n \tpublic Set\u003cBaseObjectMap\u003e getObjectMaps() {\n \t\treturn objectMaps;\ndiff --git a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\nindex 1743200..062ea25 100644\n--- a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n+++ b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n@@ -40,7 +40,7 @@\n \t}\n \n \t@RdfProperty(Rr.objectMap)\n-\t@RdfTypeDecider(String.class)\n+\t@RdfTypeDecider(ObjectMapTypeDecider.class)\n \t@Override\n \tpublic Set\u003cBaseObjectMap\u003e getObjectMaps() {\n \t\treturn objectMaps;\n",
    "projectName": "carml",
    "lineNum": 43,
    "nodeStartChar": 1230,
    "before": "String",
    "after": "ObjectMapTypeDecider"
  },
  {
    "commitSHA1": "679ed872df0a3df691340aff91bfd00e7435e697",
    "commitFile": "src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java",
    "patch": "diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\ndiff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\n",
    "projectName": "chaos-http-proxy",
    "lineNum": 171,
    "nodeStartChar": 6966,
    "before": "Long.valueOf(headerValue)",
    "after": "Long.parseLong(headerValue)"
  },
  {
    "commitSHA1": "679ed872df0a3df691340aff91bfd00e7435e697",
    "commitFile": "src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java",
    "patch": "diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\ndiff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\n",
    "projectName": "chaos-http-proxy",
    "lineNum": 179,
    "nodeStartChar": 7307,
    "before": "new InputStreamContentProvider(is){   @Override public long getLength(){     return length !\u003d -1 ? length : super.getLength();   } } ",
    "after": "new InputStreamContentProvider(iss){   @Override public long getLength(){     return length !\u003d -1 ? length : super.getLength();   } } "
  },
  {
    "commitSHA1": "26711a5e0c208398e46090d2700eb0005987765a",
    "commitFile": "chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java",
    "patch": "diff --git a/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java b/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java\nindex a189581..914fc89 100644\n--- a/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java\n+++ b/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java\n@@ -108,7 +108,7 @@\n         quotes.add(\"Chuck Norris doesn\u0027t bowl strikes, he just knocks down one pin and the other nine faint.\");\n         quotes.add(\"According to Einstein\u0027s theory of relativity, Chuck Norris can actually roundhouse kick you yesterday.\");\n         quotes.add(\"Chuck Norris\u0027 first job was as a paperboy. There were no survivors.\");\n-        quotes.add(\"Chuck Norris does infinit loops in 4 seconds.\");\n+        quotes.add(\"Chuck Norris does infinite loops in 4 seconds.\");\n         quotes.add(\"Chuck Norris doesn\u0027t pair program.\");\n         quotes.add(\"Paper beats rock, rock beats scissors, and scissors beats paper, but Chuck Norris beats all 3 at the same time.\");\n         quotes.add(\"Chuck Norris qualified with a top speed of 324 mph at the Daytona 500, without a car.\");\ndiff --git a/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java b/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java\nindex a189581..914fc89 100644\n--- a/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java\n+++ b/chucknorrisforactuator/src/main/java/guru/springframework/norris/chuck/ChuckNorrisQuotes.java\n@@ -108,7 +108,7 @@\n         quotes.add(\"Chuck Norris doesn\u0027t bowl strikes, he just knocks down one pin and the other nine faint.\");\n         quotes.add(\"According to Einstein\u0027s theory of relativity, Chuck Norris can actually roundhouse kick you yesterday.\");\n         quotes.add(\"Chuck Norris\u0027 first job was as a paperboy. There were no survivors.\");\n-        quotes.add(\"Chuck Norris does infinit loops in 4 seconds.\");\n+        quotes.add(\"Chuck Norris does infinite loops in 4 seconds.\");\n         quotes.add(\"Chuck Norris doesn\u0027t pair program.\");\n         quotes.add(\"Paper beats rock, rock beats scissors, and scissors beats paper, but Chuck Norris beats all 3 at the same time.\");\n         quotes.add(\"Chuck Norris qualified with a top speed of 324 mph at the Daytona 500, without a car.\");\n",
    "projectName": "chuck-norris-for-actuator",
    "lineNum": 111,
    "nodeStartChar": 9677,
    "before": "\"Chuck Norris does infinit loops in 4 seconds.\"",
    "after": "\"Chuck Norris does infinite loops in 4 seconds.\""
  },
  {
    "commitSHA1": "0e1df061f2a68ded9f1369f26d7fe3b57703172f",
    "commitFile": "src/main/java/com/spotify/sshagenttls/CertKey.java",
    "patch": "diff --git a/src/main/java/com/spotify/sshagenttls/CertKey.java b/src/main/java/com/spotify/sshagenttls/CertKey.java\nindex 4d8320f..8cc5747 100644\n--- a/src/main/java/com/spotify/sshagenttls/CertKey.java\n+++ b/src/main/java/com/spotify/sshagenttls/CertKey.java\n@@ -74,7 +74,7 @@\n     } else if (parsedPem instanceof PrivateKeyInfo) {\n       keyInfo \u003d (PrivateKeyInfo) parsedPem;\n     } else {\n-      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate.\");\n+      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate, received \" + parsedPem.getClass());\n     }\n \n     final PKCS8EncodedKeySpec spec \u003d new PKCS8EncodedKeySpec(keyInfo.getEncoded());\ndiff --git a/src/main/java/com/spotify/sshagenttls/CertKey.java b/src/main/java/com/spotify/sshagenttls/CertKey.java\nindex 4d8320f..8cc5747 100644\n--- a/src/main/java/com/spotify/sshagenttls/CertKey.java\n+++ b/src/main/java/com/spotify/sshagenttls/CertKey.java\n@@ -74,7 +74,7 @@\n     } else if (parsedPem instanceof PrivateKeyInfo) {\n       keyInfo \u003d (PrivateKeyInfo) parsedPem;\n     } else {\n-      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate.\");\n+      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate, received \" + parsedPem.getClass());\n     }\n \n     final PKCS8EncodedKeySpec spec \u003d new PKCS8EncodedKeySpec(keyInfo.getEncoded());\n",
    "projectName": "client-tls-tools",
    "lineNum": 77,
    "nodeStartChar": 2475,
    "before": "\"Unable to parse X.509 certificate.\"",
    "after": "\"Unable to parse X.509 certificate, received \" + parsedPem.getClass()"
  },
  {
    "commitSHA1": "6023de4d22984d6fec363a18b9a322d3531371fd",
    "commitFile": "src/main/java/com/spotify/sshagenttls/CertKey.java",
    "patch": "diff --git a/src/main/java/com/spotify/sshagenttls/CertKey.java b/src/main/java/com/spotify/sshagenttls/CertKey.java\nindex 4d8320f..8cc5747 100644\n--- a/src/main/java/com/spotify/sshagenttls/CertKey.java\n+++ b/src/main/java/com/spotify/sshagenttls/CertKey.java\n@@ -74,7 +74,7 @@\n     } else if (parsedPem instanceof PrivateKeyInfo) {\n       keyInfo \u003d (PrivateKeyInfo) parsedPem;\n     } else {\n-      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate.\");\n+      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate, received \" + parsedPem.getClass());\n     }\n \n     final PKCS8EncodedKeySpec spec \u003d new PKCS8EncodedKeySpec(keyInfo.getEncoded());\ndiff --git a/src/main/java/com/spotify/sshagenttls/CertKey.java b/src/main/java/com/spotify/sshagenttls/CertKey.java\nindex 4d8320f..8cc5747 100644\n--- a/src/main/java/com/spotify/sshagenttls/CertKey.java\n+++ b/src/main/java/com/spotify/sshagenttls/CertKey.java\n@@ -74,7 +74,7 @@\n     } else if (parsedPem instanceof PrivateKeyInfo) {\n       keyInfo \u003d (PrivateKeyInfo) parsedPem;\n     } else {\n-      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate.\");\n+      throw new UnsupportedOperationException(\"Unable to parse X.509 certificate, received \" + parsedPem.getClass());\n     }\n \n     final PKCS8EncodedKeySpec spec \u003d new PKCS8EncodedKeySpec(keyInfo.getEncoded());\n",
    "projectName": "client-tls-tools",
    "lineNum": 77,
    "nodeStartChar": 2475,
    "before": "\"Unable to parse X.509 certificate.\"",
    "after": "\"Unable to parse X.509 certificate, received \" + parsedPem.getClass()"
  },
  {
    "commitSHA1": "7362d63f2791b6638e9b52fc4c047457cd0d0ac1",
    "commitFile": "src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java",
    "patch": "diff --git a/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java b/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java\nindex 0707465..9c636d7 100644\n--- a/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java\n+++ b/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java\n@@ -14,7 +14,7 @@\n     Set\u003cConfigurationField\u003e getConfigurations();\n \n     class Builder {\n-        private final Set\u003cConfigurationField\u003e fields \u003d new HashSet();\n+        private final Set\u003cConfigurationField\u003e fields \u003d new HashSet\u003c\u003e();\n \n         public ConfigurationDescription.Builder withConfigurationField(ConfigurationField field) {\n             this.fields.add(field);\ndiff --git a/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java b/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java\nindex 0707465..9c636d7 100644\n--- a/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java\n+++ b/src/main/java/coffee/synyx/frontpage/plugin/api/ConfigurationDescription.java\n@@ -14,7 +14,7 @@\n     Set\u003cConfigurationField\u003e getConfigurations();\n \n     class Builder {\n-        private final Set\u003cConfigurationField\u003e fields \u003d new HashSet();\n+        private final Set\u003cConfigurationField\u003e fields \u003d new HashSet\u003c\u003e();\n \n         public ConfigurationDescription.Builder withConfigurationField(ConfigurationField field) {\n             this.fields.add(field);\n",
    "projectName": "coffeenet-frontpage-plugin-api",
    "lineNum": 17,
    "nodeStartChar": 468,
    "before": "HashSet",
    "after": "HashSet\u003c\u003e"
  },
  {
    "commitSHA1": "fb6129d588a82f4afa984aa865a065c5841cda6b",
    "commitFile": "src/main/java/org/paukov/combinatorics/Generator.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/Generator.java b/src/main/java/org/paukov/combinatorics/Generator.java\nindex 19833f7..7e7c89c 100644\n--- a/src/main/java/org/paukov/combinatorics/Generator.java\n+++ b/src/main/java/org/paukov/combinatorics/Generator.java\n@@ -91,12 +91,12 @@\n      *\r\n      * @return List of the generated objects/vectors\r\n      */\r\n-    public List\u003cICombinatoricsVector\u003cT\u003e\u003e generateObjectsRange(int startIndex,\r\n-                                                              int stopIndex) {\r\n+    public List\u003cICombinatoricsVector\u003cT\u003e\u003e generateObjectsRange(long startIndex,\r\n+                                                              long stopIndex) {\r\n         assert (startIndex \u003c\u003d stopIndex);\r\n         List\u003cICombinatoricsVector\u003cT\u003e\u003e list \u003d new ArrayList\u003c\u003e();\r\n         Iterator\u003cICombinatoricsVector\u003cT\u003e\u003e iterator \u003d this.iterator();\r\n-        int index \u003d 1;\r\n+        long index \u003d 1;\r\n         while (iterator.hasNext()) {\r\n             if (index \u003e\u003d startIndex \u0026\u0026 index \u003c\u003d stopIndex) {\r\n                 list.add(iterator.next());\r\ndiff --git a/src/main/java/org/paukov/combinatorics/IGenerator.java b/src/main/java/org/paukov/combinatorics/IGenerator.java\nindex 5b6437f..367eb16 100644\n--- a/src/main/java/org/paukov/combinatorics/IGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/IGenerator.java\n@@ -63,5 +63,5 @@\n \t * \r\n \t * @return List of the generated objects/vectors\r\n \t */\r\n-\tList\u003cT\u003e generateObjectsRange(int startIndex, int stopIndex);\r\n+\tList\u003cT\u003e generateObjectsRange(long startIndex, long stopIndex);\r\n }\r\ndiff --git a/src/main/java/org/paukov/combinatorics/Generator.java b/src/main/java/org/paukov/combinatorics/Generator.java\nindex 19833f7..7e7c89c 100644\n--- a/src/main/java/org/paukov/combinatorics/Generator.java\n+++ b/src/main/java/org/paukov/combinatorics/Generator.java\n@@ -91,12 +91,12 @@\n      *\r\n      * @return List of the generated objects/vectors\r\n      */\r\n-    public List\u003cICombinatoricsVector\u003cT\u003e\u003e generateObjectsRange(int startIndex,\r\n-                                                              int stopIndex) {\r\n+    public List\u003cICombinatoricsVector\u003cT\u003e\u003e generateObjectsRange(long startIndex,\r\n+                                                              long stopIndex) {\r\n         assert (startIndex \u003c\u003d stopIndex);\r\n         List\u003cICombinatoricsVector\u003cT\u003e\u003e list \u003d new ArrayList\u003c\u003e();\r\n         Iterator\u003cICombinatoricsVector\u003cT\u003e\u003e iterator \u003d this.iterator();\r\n-        int index \u003d 1;\r\n+        long index \u003d 1;\r\n         while (iterator.hasNext()) {\r\n             if (index \u003e\u003d startIndex \u0026\u0026 index \u003c\u003d stopIndex) {\r\n                 list.add(iterator.next());\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 99,
    "nodeStartChar": 3154,
    "before": "int",
    "after": "long"
  },
  {
    "commitSHA1": "927a9102068a10389864de8c5e48e25302b5a52a",
    "commitFile": "src/main/java/org/paukov/combinatorics/CombinatoricsVector.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\nindex 57bd01b..aedac40 100644\n--- a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n+++ b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n@@ -172,7 +172,7 @@\n \r\n \t\tint count \u003d 0;\r\n \t\tfor (T element : _vector) {\r\n-\t\t\tif (element.equals(value))\r\n+\t\t\tif (element \u003d\u003d value || (element !\u003d null \u0026\u0026 element.equals(value)))\r\n \t\t\t\tcount++;\r\n \t\t}\r\n \t\treturn count;\r\ndiff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\nindex 2ccf6c2..ab7686d 100644\n--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n@@ -125,7 +125,7 @@\n \t\t\tint combinationsLength, boolean isOrderImportant,\r\n \t\t\tboolean excludeEmptySet) {\r\n \r\n-\t\tif (combinationsLength \u003e originalVector.getSize())\r\n+\t\tif (excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize())\r\n \t\t\tthrow new RuntimeException(\r\n \t\t\t\t\t\"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: \"\r\n \t\t\t\t\t\t\t+ combinationsLength\r\ndiff --git a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\nindex 57bd01b..aedac40 100644\n--- a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n+++ b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n@@ -172,7 +172,7 @@\n \r\n \t\tint count \u003d 0;\r\n \t\tfor (T element : _vector) {\r\n-\t\t\tif (element.equals(value))\r\n+\t\t\tif (element \u003d\u003d value || (element !\u003d null \u0026\u0026 element.equals(value)))\r\n \t\t\t\tcount++;\r\n \t\t}\r\n \t\treturn count;\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 175,
    "nodeStartChar": 4383,
    "before": "element.equals(value)",
    "after": "element \u003d\u003d value || (element !\u003d null \u0026\u0026 element.equals(value))"
  },
  {
    "commitSHA1": "927a9102068a10389864de8c5e48e25302b5a52a",
    "commitFile": "src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\nindex 2ccf6c2..ab7686d 100644\n--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n@@ -125,7 +125,7 @@\n \t\t\tint combinationsLength, boolean isOrderImportant,\r\n \t\t\tboolean excludeEmptySet) {\r\n \r\n-\t\tif (combinationsLength \u003e originalVector.getSize())\r\n+\t\tif (excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize())\r\n \t\t\tthrow new RuntimeException(\r\n \t\t\t\t\t\"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: \"\r\n \t\t\t\t\t\t\t+ combinationsLength\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 128,
    "nodeStartChar": 4776,
    "before": "combinationsLength \u003e originalVector.getSize()",
    "after": "excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize()"
  },
  {
    "commitSHA1": "e3f9c81586ca754ba0ab521cf78d13a127559cef",
    "commitFile": "src/main/java/org/paukov/combinatorics/CombinatoricsVector.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\nindex 57bd01b..aedac40 100644\n--- a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n+++ b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n@@ -172,7 +172,7 @@\n \r\n \t\tint count \u003d 0;\r\n \t\tfor (T element : _vector) {\r\n-\t\t\tif (element.equals(value))\r\n+\t\t\tif (element \u003d\u003d value || (element !\u003d null \u0026\u0026 element.equals(value)))\r\n \t\t\t\tcount++;\r\n \t\t}\r\n \t\treturn count;\r\ndiff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\nindex 2ccf6c2..ab7686d 100644\n--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n@@ -125,7 +125,7 @@\n \t\t\tint combinationsLength, boolean isOrderImportant,\r\n \t\t\tboolean excludeEmptySet) {\r\n \r\n-\t\tif (combinationsLength \u003e originalVector.getSize())\r\n+\t\tif (excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize())\r\n \t\t\tthrow new RuntimeException(\r\n \t\t\t\t\t\"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: \"\r\n \t\t\t\t\t\t\t+ combinationsLength\r\ndiff --git a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\nindex 57bd01b..aedac40 100644\n--- a/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n+++ b/src/main/java/org/paukov/combinatorics/CombinatoricsVector.java\n@@ -172,7 +172,7 @@\n \r\n \t\tint count \u003d 0;\r\n \t\tfor (T element : _vector) {\r\n-\t\t\tif (element.equals(value))\r\n+\t\t\tif (element \u003d\u003d value || (element !\u003d null \u0026\u0026 element.equals(value)))\r\n \t\t\t\tcount++;\r\n \t\t}\r\n \t\treturn count;\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 175,
    "nodeStartChar": 4383,
    "before": "element.equals(value)",
    "after": "element \u003d\u003d value || (element !\u003d null \u0026\u0026 element.equals(value))"
  },
  {
    "commitSHA1": "e3f9c81586ca754ba0ab521cf78d13a127559cef",
    "commitFile": "src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\nindex 2ccf6c2..ab7686d 100644\n--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n@@ -125,7 +125,7 @@\n \t\t\tint combinationsLength, boolean isOrderImportant,\r\n \t\t\tboolean excludeEmptySet) {\r\n \r\n-\t\tif (combinationsLength \u003e originalVector.getSize())\r\n+\t\tif (excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize())\r\n \t\t\tthrow new RuntimeException(\r\n \t\t\t\t\t\"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: \"\r\n \t\t\t\t\t\t\t+ combinationsLength\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 128,
    "nodeStartChar": 4776,
    "before": "combinationsLength \u003e originalVector.getSize()",
    "after": "excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize()"
  },
  {
    "commitSHA1": "61fe997954d72e2b77f03b203f8842fe2dbb77c7",
    "commitFile": "configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java",
    "patch": "diff --git a/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java b/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java\nindex 0133429..009f892 100644\n--- a/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java\n+++ b/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java\n@@ -53,7 +53,7 @@\n                 final String original \u003d formattedMessage;\n                 try\n                 {\n-                    formattedMessage \u003d String.format( format, params );\n+                    formattedMessage \u003d String.format( format.replaceAll( \"\\\\{\\\\}\", \"%s\" ), params );\n                 }\n                 catch ( final Error e )\n                 {\ndiff --git a/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java b/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java\nindex 0133429..009f892 100644\n--- a/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java\n+++ b/configuration-api/src/main/java/org/commonjava/web/config/ConfigurationException.java\n@@ -53,7 +53,7 @@\n                 final String original \u003d formattedMessage;\n                 try\n                 {\n-                    formattedMessage \u003d String.format( format, params );\n+                    formattedMessage \u003d String.format( format.replaceAll( \"\\\\{\\\\}\", \"%s\" ), params );\n                 }\n                 catch ( final Error e )\n                 {\n",
    "projectName": "configuration",
    "lineNum": 56,
    "nodeStartChar": 1814,
    "before": "format",
    "after": "format.replaceAll(\"\\\\{\\\\}\",\"%s\")"
  },
  {
    "commitSHA1": "49a868f12c7b686f924540d90ebfbd5fcbd78332",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAAsset.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAAsset.java b/src/main/java/com/contentful/java/cda/CDAAsset.java\nindex 72d3c35..9ebd024 100644\n--- a/src/main/java/com/contentful/java/cda/CDAAsset.java\n+++ b/src/main/java/com/contentful/java/cda/CDAAsset.java\n@@ -49,8 +49,7 @@\n \n     final String mimeType \u003d mimeType();\n     if (mimeType \u003d\u003d null || !mimeType.startsWith(\"image\")) {\n-      throw new IllegalStateException(\"Asset has not image mime type. Please make sure it is \" +\n-          \"of jpg, png, or webp format.\");\n+      throw new IllegalStateException(\"Asset does not have an image mime type.\");\n     }\n \n     final Map\u003cString, ImageOption\u003e mappedOptions\ndiff --git a/src/main/java/com/contentful/java/cda/CDAAsset.java b/src/main/java/com/contentful/java/cda/CDAAsset.java\nindex 72d3c35..9ebd024 100644\n--- a/src/main/java/com/contentful/java/cda/CDAAsset.java\n+++ b/src/main/java/com/contentful/java/cda/CDAAsset.java\n@@ -49,8 +49,7 @@\n \n     final String mimeType \u003d mimeType();\n     if (mimeType \u003d\u003d null || !mimeType.startsWith(\"image\")) {\n-      throw new IllegalStateException(\"Asset has not image mime type. Please make sure it is \" +\n-          \"of jpg, png, or webp format.\");\n+      throw new IllegalStateException(\"Asset does not have an image mime type.\");\n     }\n \n     final Map\u003cString, ImageOption\u003e mappedOptions\n",
    "projectName": "contentful.java",
    "lineNum": 52,
    "nodeStartChar": 1669,
    "before": "\"Asset has not image mime type. Please make sure it is \" + \"of jpg, png, or webp format.\"",
    "after": "\"Asset does not have an image mime type.\""
  },
  {
    "commitSHA1": "48ab3538683c740b187cc3f121ecb7d719a91fe0",
    "commitFile": "src/main/java/com/contentful/java/cda/image/ImageOption.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/image/ImageOption.java b/src/main/java/com/contentful/java/cda/image/ImageOption.java\nindex 4d8f10d..9afaa81 100644\n--- a/src/main/java/com/contentful/java/cda/image/ImageOption.java\n+++ b/src/main/java/com/contentful/java/cda/image/ImageOption.java\n@@ -120,7 +120,7 @@\n    * @see Format\n    */\n   public static ImageOption formatOf(Format format) {\n-    return new ImageOption(\"fmt\", format.name());\n+    return new ImageOption(\"fm\", format.name());\n   }\n \n   /**\ndiff --git a/src/test/java/com/contentful/java/cda/AssetTest.java b/src/test/java/com/contentful/java/cda/AssetTest.java\nindex 24ccdbe..66c630a 100644\n--- a/src/test/java/com/contentful/java/cda/AssetTest.java\n+++ b/src/test/java/com/contentful/java/cda/AssetTest.java\n@@ -91,7 +91,7 @@\n             + \"/4hlteQAXS8iS0YCMU6QMWg\"\n             + \"/2a4d826144f014109364ccf5c891d2dd\"\n             + \"/jake.png\"\n-            + \"?fmt\u003djpg\"\n+            + \"?fm\u003djpg\"\n             + \"\u0026q\u003d89\"\n             + \"\u0026w\u003d100\"\n             + \"\u0026h\u003d100\"\ndiff --git a/src/main/java/com/contentful/java/cda/image/ImageOption.java b/src/main/java/com/contentful/java/cda/image/ImageOption.java\nindex 4d8f10d..9afaa81 100644\n--- a/src/main/java/com/contentful/java/cda/image/ImageOption.java\n+++ b/src/main/java/com/contentful/java/cda/image/ImageOption.java\n@@ -120,7 +120,7 @@\n    * @see Format\n    */\n   public static ImageOption formatOf(Format format) {\n-    return new ImageOption(\"fmt\", format.name());\n+    return new ImageOption(\"fm\", format.name());\n   }\n \n   /**\n",
    "projectName": "contentful.java",
    "lineNum": 123,
    "nodeStartChar": 2217,
    "before": "\"fmt\"",
    "after": "\"fm\""
  },
  {
    "commitSHA1": "48ab3538683c740b187cc3f121ecb7d719a91fe0",
    "commitFile": "src/test/java/com/contentful/java/cda/AssetTest.java",
    "patch": "diff --git a/src/test/java/com/contentful/java/cda/AssetTest.java b/src/test/java/com/contentful/java/cda/AssetTest.java\nindex 24ccdbe..66c630a 100644\n--- a/src/test/java/com/contentful/java/cda/AssetTest.java\n+++ b/src/test/java/com/contentful/java/cda/AssetTest.java\n@@ -91,7 +91,7 @@\n             + \"/4hlteQAXS8iS0YCMU6QMWg\"\n             + \"/2a4d826144f014109364ccf5c891d2dd\"\n             + \"/jake.png\"\n-            + \"?fmt\u003djpg\"\n+            + \"?fm\u003djpg\"\n             + \"\u0026q\u003d89\"\n             + \"\u0026w\u003d100\"\n             + \"\u0026h\u003d100\"\n",
    "projectName": "contentful.java",
    "lineNum": 94,
    "nodeStartChar": 3407,
    "before": "\"?fmt\u003djpg\"",
    "after": "\"?fm\u003djpg\""
  },
  {
    "commitSHA1": "f530098585148c258a45ce920de7d8a5b99c46b5",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAHttpException.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\n",
    "projectName": "contentful.java",
    "lineNum": 92,
    "nodeStartChar": 2380,
    "before": "(\"X-Contentful-RateLimit-Hour-Limit\")",
    "after": "\"X-Contentful-RateLimit-Hour-Limit\""
  },
  {
    "commitSHA1": "f530098585148c258a45ce920de7d8a5b99c46b5",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAHttpException.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\n",
    "projectName": "contentful.java",
    "lineNum": 99,
    "nodeStartChar": 2618,
    "before": "(\"X-Contentful-RateLimit-Hour-Remaining\")",
    "after": "\"X-Contentful-RateLimit-Hour-Remaining\""
  },
  {
    "commitSHA1": "f530098585148c258a45ce920de7d8a5b99c46b5",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAHttpException.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\n",
    "projectName": "contentful.java",
    "lineNum": 106,
    "nodeStartChar": 2813,
    "before": "(\"X-Contentful-RateLimit-Second-Limit\")",
    "after": "\"X-Contentful-RateLimit-Second-Limit\""
  },
  {
    "commitSHA1": "f530098585148c258a45ce920de7d8a5b99c46b5",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAHttpException.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\n",
    "projectName": "contentful.java",
    "lineNum": 113,
    "nodeStartChar": 3045,
    "before": "(\"X-Contentful-RateLimit-Second-Remaining\")",
    "after": "\"X-Contentful-RateLimit-Second-Remaining\""
  },
  {
    "commitSHA1": "f530098585148c258a45ce920de7d8a5b99c46b5",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAHttpException.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAHttpException.java b/src/main/java/com/contentful/java/cda/CDAHttpException.java\nindex 278cfda..3b93e76 100644\n--- a/src/main/java/com/contentful/java/cda/CDAHttpException.java\n+++ b/src/main/java/com/contentful/java/cda/CDAHttpException.java\n@@ -89,35 +89,35 @@\n    * @return the hourly rate limit or -1 if header not send\n    */\n   public int rateLimitHourLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made for the current hour or -1 if header not send\n    */\n   public int rateLimitHourRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Hour-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Hour-Remaining\");\n   }\n \n   /**\n    * @return the per second rate limit or -1 if header not send\n    */\n   public int rateLimitSecondLimit() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Limit\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Limit\");\n   }\n \n   /**\n    * @return the number of remaining requests that can be made per second or -1 if header not send\n    */\n   public int rateLimitSecondRemaining() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Second-Remaining\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Second-Remaining\");\n   }\n \n   /**\n    * @return the number of seconds until the user can make their next request or -1 if header not send\n    */\n   public int rateLimitReset() {\n-    return parseRateLimitHeader((\"X-Contentful-RateLimit-Reset\"));\n+    return parseRateLimitHeader(\"X-Contentful-RateLimit-Reset\");\n   }\n \n   private String headersToString(Headers headers) {\n",
    "projectName": "contentful.java",
    "lineNum": 120,
    "nodeStartChar": 3275,
    "before": "(\"X-Contentful-RateLimit-Reset\")",
    "after": "\"X-Contentful-RateLimit-Reset\""
  },
  {
    "commitSHA1": "40698ef8cb0d775540e8d0c536f1364470bca931",
    "commitFile": "src/test/java/com/contentful/java/cda/integration/Integration.java",
    "patch": "diff --git a/src/test/java/com/contentful/java/cda/integration/Integration.java b/src/test/java/com/contentful/java/cda/integration/Integration.java\nindex 4c6cca0..aa63d66 100644\n--- a/src/test/java/com/contentful/java/cda/integration/Integration.java\n+++ b/src/test/java/com/contentful/java/cda/integration/Integration.java\n@@ -361,7 +361,7 @@\n   public void fetchEntriesEarlierOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00+00:00\")\n+        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\n@@ -374,7 +374,7 @@\n   public void fetchEntriesLaterOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00+00:00\")\n+        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\ndiff --git a/src/test/java/com/contentful/java/cda/integration/Integration.java b/src/test/java/com/contentful/java/cda/integration/Integration.java\nindex 4c6cca0..aa63d66 100644\n--- a/src/test/java/com/contentful/java/cda/integration/Integration.java\n+++ b/src/test/java/com/contentful/java/cda/integration/Integration.java\n@@ -361,7 +361,7 @@\n   public void fetchEntriesEarlierOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00+00:00\")\n+        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\n@@ -374,7 +374,7 @@\n   public void fetchEntriesLaterOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00+00:00\")\n+        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\n",
    "projectName": "contentful.java",
    "lineNum": 364,
    "nodeStartChar": 11864,
    "before": "\"1979-06-18T23:00:00+00:00\"",
    "after": "\"1979-06-18T23:00:00\""
  },
  {
    "commitSHA1": "40698ef8cb0d775540e8d0c536f1364470bca931",
    "commitFile": "src/test/java/com/contentful/java/cda/integration/Integration.java",
    "patch": "diff --git a/src/test/java/com/contentful/java/cda/integration/Integration.java b/src/test/java/com/contentful/java/cda/integration/Integration.java\nindex 4c6cca0..aa63d66 100644\n--- a/src/test/java/com/contentful/java/cda/integration/Integration.java\n+++ b/src/test/java/com/contentful/java/cda/integration/Integration.java\n@@ -361,7 +361,7 @@\n   public void fetchEntriesEarlierOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00+00:00\")\n+        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\n@@ -374,7 +374,7 @@\n   public void fetchEntriesLaterOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00+00:00\")\n+        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\ndiff --git a/src/test/java/com/contentful/java/cda/integration/Integration.java b/src/test/java/com/contentful/java/cda/integration/Integration.java\nindex 4c6cca0..aa63d66 100644\n--- a/src/test/java/com/contentful/java/cda/integration/Integration.java\n+++ b/src/test/java/com/contentful/java/cda/integration/Integration.java\n@@ -361,7 +361,7 @@\n   public void fetchEntriesEarlierOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00+00:00\")\n+        .where(\"fields.birthday\", IsEarlierOrAt, \"1979-06-18T23:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\n@@ -374,7 +374,7 @@\n   public void fetchEntriesLaterOrAt() {\n     CDAArray found \u003d client.fetch(CDAEntry.class)\n         .withContentType(\"cat\")\n-        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00+00:00\")\n+        .where(\"fields.birthday\", IsLaterOrAt, \"2011-04-04T22:00:00\")\n         .all();\n \n     assertThat(found.items().size()).isEqualTo(1);\n",
    "projectName": "contentful.java",
    "lineNum": 377,
    "nodeStartChar": 12346,
    "before": "\"2011-04-04T22:00:00+00:00\"",
    "after": "\"2011-04-04T22:00:00\""
  },
  {
    "commitSHA1": "b471b1d07e22b99b642402e2e56df03afe791e35",
    "commitFile": "src/main/java/com/contentful/java/cda/AbsQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex 3ff2cc8..34e3098 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -17,7 +17,7 @@\n  * @param \u003cResource\u003e The type of the resource to be returned by this query.\n  * @param \u003cQuery\u003e    The query type to be returned on chaining to avoid casting on client side.\n  */\n-abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n+public abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n   private static final String PARAMETER_CONTENT_TYPE \u003d \"content_type\";\n   private static final String PARAMETER_SELECT \u003d \"select\";\n   private static final String PARAMETER_ORDER \u003d \"order\";\n@@ -153,6 +153,7 @@\n    * \u003cp\u003e\n    * Use this for a more controlled and versatile way of doing specialized search requests.\n    *\n+   * @param \u003cT\u003e            value type the operation uses.\n    * @param name           which attribute should be checked?\n    * @param queryOperation specify the queryOperation here.\n    * @param values         a list of values to be checked.\ndiff --git a/src/main/java/com/contentful/java/cda/QueryOperation.java b/src/main/java/com/contentful/java/cda/QueryOperation.java\nindex 0c14b66..8c1b50d 100644\n--- a/src/main/java/com/contentful/java/cda/QueryOperation.java\n+++ b/src/main/java/com/contentful/java/cda/QueryOperation.java\n@@ -3,7 +3,7 @@\n /**\n  * This enumeration will be used to formulate more complex search queries.\n  *\n- * @see FetchQuery\u003cT\u003e.#where(String, QueryOperation, T...)\n+ * @see AbsQuery#where(String, QueryOperation, Object...)\n  */\n public class QueryOperation\u003cT\u003e {\n \ndiff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex 3ff2cc8..34e3098 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -17,7 +17,7 @@\n  * @param \u003cResource\u003e The type of the resource to be returned by this query.\n  * @param \u003cQuery\u003e    The query type to be returned on chaining to avoid casting on client side.\n  */\n-abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n+public abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n   private static final String PARAMETER_CONTENT_TYPE \u003d \"content_type\";\n   private static final String PARAMETER_SELECT \u003d \"select\";\n   private static final String PARAMETER_ORDER \u003d \"order\";\n@@ -153,6 +153,7 @@\n    * \u003cp\u003e\n    * Use this for a more controlled and versatile way of doing specialized search requests.\n    *\n+   * @param \u003cT\u003e            value type the operation uses.\n    * @param name           which attribute should be checked?\n    * @param queryOperation specify the queryOperation here.\n    * @param values         a list of values to be checked.\n",
    "projectName": "contentful.java",
    "lineNum": 11,
    "nodeStartChar": 295,
    "before": "/**   * Root of all queries. \u003cp\u003e This class includes options to query for entries, limit the amount of responses and more.  * @param \u003c Resource \u003e The type of the resource to be returned by this query.  * @param \u003c Query \u003e    The query type to be returned on chaining to avoid casting on client side.  */ abstract class AbsQuery\u003cResource extends CDAResource,Query extends AbsQuery\u003cResource,Query\u003e\u003e {   private static final String PARAMETER_CONTENT_TYPE\u003d\"content_type\";   private static final String PARAMETER_SELECT\u003d\"select\";   private static final String PARAMETER_ORDER\u003d\"order\";   private static final String PARAMETER_LIMIT\u003d\"limit\";   private static final String PARAMETER_SKIP\u003d\"skip\";   private static final String PARAMETER_INCLUDE\u003d\"include\";   final Class\u003cResource\u003e type;   final CDAClient client;   final Map\u003cString,String\u003e params\u003dnew HashMap\u003cString,String\u003e();   AbsQuery(  Class\u003cResource\u003e type,  CDAClient client){     this.type\u003dtype;     this.client\u003dclient;   }   /**   * Requesting a specific content type. \u003cp\u003e The content type is especially useful if you want to limit the result of this query to only one content model type. \u003cp\u003e You must specify a content type \u003cb\u003ebefore\u003c/b\u003e querying a specific \u003cb\u003efield\u003c/b\u003e on a query, an exception will be thrown otherwise.  * @param contentType the content type to be used.  * @return the calling query for chaining.  * @throws IllegalArgumentException if contentType is null.  * @throws IllegalArgumentException if contentType is empty.  * @throws IllegalStateException    if contentType was set before.  */   @SuppressWarnings(\"unchecked\") public Query withContentType(  String contentType){     checkNotEmpty(contentType,\"ContentType must not be empty.\");     if (hasContentTypeSet()) {       throw new IllegalStateException(format(\"ContentType \\\"%s\\\" is already present in query.\",contentType));     }  else {       params.put(PARAMETER_CONTENT_TYPE,contentType);     }     return (Query)this;   }   /**   * Limit response to only selected properties. \u003cp\u003e Returns an object in which fields not specified will be \u003cb\u003enull\u003c/b\u003e, resulting in potentially smaller response from Contentful. \u003cp\u003e The complete \u003cb\u003esys\u003c/b\u003e object will always be returned.  * @param selection to be used. Should be \u0027fields.name\u0027 or similar.  * @return the calling query for chaining.  * @throws NullPointerException     if selection is null.  * @throws IllegalArgumentException if selection is empty.  * @throws IllegalStateException    if no content type was queried for before.  * @throws IllegalArgumentException if tried to request deeper then the name of a selection.  */   @SuppressWarnings(\"unchecked\") public Query select(  String selection){     checkNotEmpty(selection,\"Selection must not be empty.\");     if (countDots(selection) \u003e\u003d 2) {       throw new IllegalArgumentException(\"Cannot request children of fields. \" + \"(\u0027fields.author\u0027(✔) vs. \u0027fields.author.name\u0027(✖))\");     }     if (selection.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"Cannot use field selection without \" + \"specifying a content type first. Use \u0027.withContentType(\\\"{typeid}\\\")\u0027 first.\");     }     if (selection.startsWith(\"sys.\") || selection.equals(\"sys\")) {       if (params.containsKey(PARAMETER_SELECT)) {       }  else {         params.put(PARAMETER_SELECT,\"sys\");       }     }  else     if (params.containsKey(PARAMETER_SELECT)) {       params.put(PARAMETER_SELECT,params.get(PARAMETER_SELECT) + \",\" + selection);     }  else {       params.put(PARAMETER_SELECT,\"sys,\" + selection);     }     return (Query)this;   }   /**   * Convenient method for chaining several select queries together. \u003cp\u003e This method makes it easier to select multiple properties from one method call. It calls select for all of its arguments.  * @param selections field names to be requested.  * @return the calling query for chaining.  * @throws NullPointerException     if a field is null.  * @throws IllegalArgumentException if a field is of zero length, aka empty.  * @throws IllegalStateException    if no contentType was queried for before.  * @throws IllegalArgumentException if tried to request deeper then the name of a field.  * @throws IllegalArgumentException if no selections were requested.  * @see #select(String)  */   @SuppressWarnings(\"unchecked\") public Query select(  String... selections){     checkNotNull(selections,\"Selections cannot be null. Please specify at least one.\");     if (selections.length \u003d\u003d 0) {       throw new IllegalArgumentException(\"Please provide a selection to be selected.\");     }     for (int i\u003d0; i \u003c selections.length; i++) {       try {         select(selections[i]);       }  catch (      IllegalStateException stateException) {         throw new IllegalStateException(stateException);       } catch (      IllegalArgumentException argumentException) {         throw new IllegalArgumentException(format(\"Could not select %d. field (\\\"%s\\\").\",i,selections[i]),argumentException);       }     }     return (Query)this;   }   /**   * Complex where query. \u003cp\u003e Use this for a more controlled and versatile way of doing specialized search requests.  * @param name           which attribute should be checked?  * @param queryOperation specify the queryOperation here.  * @param values         a list of values to be checked.  * @return the calling query for chaining.  * @throws IllegalArgumentException if name is empty or null.  * @throws IllegalArgumentException if queryOperation is not set.  * @throws IllegalArgumentException if values is not set.  * @throws IllegalArgumentException if values does not contain valid values.  * @throws IllegalArgumentException if one value was null or empty.  * @throws IllegalStateException    if no content type was set first, but a field was requested.  * @throws IllegalArgumentException if name does not start with either sys or field.  * @see QueryOperation  */   @SuppressWarnings(\"unchecked\") public \u003cT\u003eQuery where(  String name,  QueryOperation\u003cT\u003e queryOperation,  T... values){     checkNotEmpty(name,\"Name cannot be empty/null, please specify a name to apply operations on.\");     checkNotNull(queryOperation,\"QueryOperation cannot be null.\");     checkNotNull(values,\"Values to be compared with need to be set to something.\");     if (values.length \u003d\u003d 0 \u0026\u0026 !queryOperation.hasDefaultValue()) {       throw new IllegalArgumentException(\"Please specify at least one value to be searched for.\");     }     for (int i\u003d0; i \u003c values.length; ++i) {       final T value\u003dvalues[i];       checkNotNull(value,\"Value at position %d must not be null.\",i);       if (value instanceof CharSequence) {         checkNotEmpty(value.toString(),\"Value at position %d must not be empty.\",i);       }     }     if (!name.startsWith(\"sys.\") \u0026\u0026 !name.startsWith(\"fields.\")) {       throw new IllegalArgumentException(\"Please specify either a \\\"sys.\\\" or a \\\"fields.\\\" \" + \"attribute to be searched for. (Remember to specify a ContentType for \\\"fields.\\\" \" + \"searches.)\");     }     if (name.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"Cannot request fields of an entry without having a \" + \"content type set first.\");     }     if (values.length \u003d\u003d 0) {       params.put(name + queryOperation.operator,queryOperation.defaultValue.toString());     }  else {       params.put(name + queryOperation.operator,join(values));     }     return (Query)this;   }   /**   * Simple `where` query. \u003cp\u003e This query will be used if there are not specialized queries available. Please use the more concrete methods in order to gain type safety and early exceptions, without requesting the API.  * @param key   the key to be added to the query.  * @param value the value to be added.  * @return the calling query for chaining.  */   @SuppressWarnings(\"unchecked\") public Query where(  String key,  String value){     params.put(key,value);     return (Query)this;   }   /**   * Order result by the given key. \u003cp\u003e Please do not forget to include the content type if you are requesting to order by a field.  * @param key the key to be ordered by.  * @return the calling query for chaining.  * @throws IllegalArgumentException if key is null.  * @throws IllegalArgumentException if key is empty.  * @throws IllegalStateException    if key requests a field, but no content type is requested.  * @see #withContentType(String)  */   @SuppressWarnings(\"unchecked\") public Query orderBy(  String key){     checkNotEmpty(key,\"Key to order by must not be empty.\");     if (key.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"\\\"fields.\\\" cannot be used without setting a content type \" + \"first.\");     }     this.params.put(PARAMETER_ORDER,key);     return (Query)this;   }   /**   * Order result by the multiple keys. \u003cp\u003e Please do not forget to include the content type if you are requesting to order by a field.  * @param keys the keys to be ordered by.  * @return the calling query for chaining.  * @throws IllegalArgumentException if keys is null.  * @throws IllegalArgumentException if keys is empty.  * @throws IllegalArgumentException if one key is null.  * @throws IllegalArgumentException if one key is empty.  * @throws IllegalStateException    if one key requests a field, but no content type is requested.  * @see #withContentType(String)  * @see #orderBy(String)  */   @SuppressWarnings(\"unchecked\") public Query orderBy(  String... keys){     checkNotNull(keys,\"Keys should not be null.\");     if (keys.length \u003d\u003d 0) {       throw new IllegalArgumentException(\"Cannot have an empty keys array.\");     }     for (int i\u003d0; i \u003c keys.length; ++i) {       final String key\u003dkeys[i];       checkNotEmpty(key,\"Key at %d to order by must not be empty.\",i);       if (key.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {         throw new IllegalStateException(format(\"Key at %d uses \\\"fields.\\\" but cannot be used\" + \" without setting a content type first.\",i));       }     }     this.params.put(PARAMETER_ORDER,join(keys));     return (Query)this;   }   /**   * Order result by the given key, reversing the order. \u003cp\u003e Please do not forget to include the content type if you are requesting to order by a field.  * @param key the key to be reversely ordered by.  * @return the calling query for chaining.  * @throws IllegalArgumentException if key is null.  * @throws IllegalArgumentException if key is empty.  * @throws IllegalStateException    if key requests a field, but no content type is requested.  * @see #withContentType(String)  */   @SuppressWarnings(\"unchecked\") public Query reverseOrderBy(  String key){     checkNotEmpty(key,\"Key to order by must not be empty\");     if (key.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"\\\"fields.\\\" cannot be used without setting a content type \" + \"first.\");     }     this.params.put(PARAMETER_ORDER,\"-\" + key);     return (Query)this;   }   /**   * Limits the amount of elements to a given number. \u003cp\u003e If more then the number given elements are present, you can use skip(int) and limit(int) to simulate pagination.  * @param limit a non negative number less than 1001 to include elements.  * @return the calling query for chaining.  * @see #skip(int)  */   @SuppressWarnings(\"unchecked\") public Query limit(  int limit){     if (limit \u003c 0) {       throw new IllegalArgumentException(format(\"Limit of %d is negative.\",limit));     }     if (limit \u003e 1000) {       throw new IllegalArgumentException(format(\"Limit of %d is greater than 1000.\",limit));     }     params.put(PARAMETER_LIMIT,Integer.toString(limit));     return (Query)this;   }   /**   * Skips the first elements of a response. \u003cp\u003e If more limit(int) elements are present, you can use skip(int) to simulate pagination.  * @param skip a non negative number to exclude the first elements.  * @return the calling query for chaining.  * @see #limit(int)  */   @SuppressWarnings(\"unchecked\") public Query skip(  int skip){     if (skip \u003c 0) {       throw new IllegalArgumentException(format(\"Limit of %d is negative.\",skip));     }     params.put(PARAMETER_SKIP,Integer.toString(skip));     return (Query)this;   }   /**   * Include references entries and their entries up to the given level. \u003cp\u003e A level of inclusion of 0 means, do not include references referenced, but not requested. Please note also, that more then 10 include levels cannot be specified.  * @param level the number of recursion of inclusion to be used.  * @return the calling query for chaining.  */   @SuppressWarnings(\"unchecked\") public Query include(  int level){     if (level \u003c 0) {       throw new IllegalArgumentException(format(\"Include level of %d is negative.\",level));     }     if (level \u003e 10) {       throw new IllegalArgumentException(format(\"Include level of %d is to high.\",level));     }     params.put(PARAMETER_INCLUDE,Integer.toString(level));     return (Query)this;   }   @SuppressWarnings(\"unchecked\") Query where(  Map\u003cString,String\u003e params){     this.params.clear();     this.params.putAll(params);     return (Query)this;   }   String path(){     return resourcePath(type);   }   private boolean hasContentTypeSet(){     return params.containsKey(PARAMETER_CONTENT_TYPE);   }   private \u003cT\u003eString join(  T[] values){     final StringBuilder builder\u003dnew StringBuilder();     String separator\u003d\"\";     for (    final T value : values) {       builder.append(separator);       separator\u003d\",\";       builder.append(value);     }     return builder.toString();   }   private int countDots(  String text){     int count\u003d0;     for (int i\u003d0; i \u003c text.length(); ++i) {       if (text.charAt(i) \u003d\u003d \u0027.\u0027) {         count++;       }     }     return count;   } } ",
    "after": "/**   * Root of all queries. \u003cp\u003e This class includes options to query for entries, limit the amount of responses and more.  * @param \u003c Resource \u003e The type of the resource to be returned by this query.  * @param \u003c Query \u003e    The query type to be returned on chaining to avoid casting on client side.  */ public abstract class AbsQuery\u003cResource extends CDAResource,Query extends AbsQuery\u003cResource,Query\u003e\u003e {   private static final String PARAMETER_CONTENT_TYPE\u003d\"content_type\";   private static final String PARAMETER_SELECT\u003d\"select\";   private static final String PARAMETER_ORDER\u003d\"order\";   private static final String PARAMETER_LIMIT\u003d\"limit\";   private static final String PARAMETER_SKIP\u003d\"skip\";   private static final String PARAMETER_INCLUDE\u003d\"include\";   final Class\u003cResource\u003e type;   final CDAClient client;   final Map\u003cString,String\u003e params\u003dnew HashMap\u003cString,String\u003e();   AbsQuery(  Class\u003cResource\u003e type,  CDAClient client){     this.type\u003dtype;     this.client\u003dclient;   }   /**   * Requesting a specific content type. \u003cp\u003e The content type is especially useful if you want to limit the result of this query to only one content model type. \u003cp\u003e You must specify a content type \u003cb\u003ebefore\u003c/b\u003e querying a specific \u003cb\u003efield\u003c/b\u003e on a query, an exception will be thrown otherwise.  * @param contentType the content type to be used.  * @return the calling query for chaining.  * @throws IllegalArgumentException if contentType is null.  * @throws IllegalArgumentException if contentType is empty.  * @throws IllegalStateException    if contentType was set before.  */   @SuppressWarnings(\"unchecked\") public Query withContentType(  String contentType){     checkNotEmpty(contentType,\"ContentType must not be empty.\");     if (hasContentTypeSet()) {       throw new IllegalStateException(format(\"ContentType \\\"%s\\\" is already present in query.\",contentType));     }  else {       params.put(PARAMETER_CONTENT_TYPE,contentType);     }     return (Query)this;   }   /**   * Limit response to only selected properties. \u003cp\u003e Returns an object in which fields not specified will be \u003cb\u003enull\u003c/b\u003e, resulting in potentially smaller response from Contentful. \u003cp\u003e The complete \u003cb\u003esys\u003c/b\u003e object will always be returned.  * @param selection to be used. Should be \u0027fields.name\u0027 or similar.  * @return the calling query for chaining.  * @throws NullPointerException     if selection is null.  * @throws IllegalArgumentException if selection is empty.  * @throws IllegalStateException    if no content type was queried for before.  * @throws IllegalArgumentException if tried to request deeper then the name of a selection.  */   @SuppressWarnings(\"unchecked\") public Query select(  String selection){     checkNotEmpty(selection,\"Selection must not be empty.\");     if (countDots(selection) \u003e\u003d 2) {       throw new IllegalArgumentException(\"Cannot request children of fields. \" + \"(\u0027fields.author\u0027(✔) vs. \u0027fields.author.name\u0027(✖))\");     }     if (selection.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"Cannot use field selection without \" + \"specifying a content type first. Use \u0027.withContentType(\\\"{typeid}\\\")\u0027 first.\");     }     if (selection.startsWith(\"sys.\") || selection.equals(\"sys\")) {       if (params.containsKey(PARAMETER_SELECT)) {       }  else {         params.put(PARAMETER_SELECT,\"sys\");       }     }  else     if (params.containsKey(PARAMETER_SELECT)) {       params.put(PARAMETER_SELECT,params.get(PARAMETER_SELECT) + \",\" + selection);     }  else {       params.put(PARAMETER_SELECT,\"sys,\" + selection);     }     return (Query)this;   }   /**   * Convenient method for chaining several select queries together. \u003cp\u003e This method makes it easier to select multiple properties from one method call. It calls select for all of its arguments.  * @param selections field names to be requested.  * @return the calling query for chaining.  * @throws NullPointerException     if a field is null.  * @throws IllegalArgumentException if a field is of zero length, aka empty.  * @throws IllegalStateException    if no contentType was queried for before.  * @throws IllegalArgumentException if tried to request deeper then the name of a field.  * @throws IllegalArgumentException if no selections were requested.  * @see #select(String)  */   @SuppressWarnings(\"unchecked\") public Query select(  String... selections){     checkNotNull(selections,\"Selections cannot be null. Please specify at least one.\");     if (selections.length \u003d\u003d 0) {       throw new IllegalArgumentException(\"Please provide a selection to be selected.\");     }     for (int i\u003d0; i \u003c selections.length; i++) {       try {         select(selections[i]);       }  catch (      IllegalStateException stateException) {         throw new IllegalStateException(stateException);       } catch (      IllegalArgumentException argumentException) {         throw new IllegalArgumentException(format(\"Could not select %d. field (\\\"%s\\\").\",i,selections[i]),argumentException);       }     }     return (Query)this;   }   /**   * Complex where query. \u003cp\u003e Use this for a more controlled and versatile way of doing specialized search requests.  * @param name           which attribute should be checked?  * @param queryOperation specify the queryOperation here.  * @param values         a list of values to be checked.  * @return the calling query for chaining.  * @throws IllegalArgumentException if name is empty or null.  * @throws IllegalArgumentException if queryOperation is not set.  * @throws IllegalArgumentException if values is not set.  * @throws IllegalArgumentException if values does not contain valid values.  * @throws IllegalArgumentException if one value was null or empty.  * @throws IllegalStateException    if no content type was set first, but a field was requested.  * @throws IllegalArgumentException if name does not start with either sys or field.  * @see QueryOperation  */   @SuppressWarnings(\"unchecked\") public \u003cT\u003eQuery where(  String name,  QueryOperation\u003cT\u003e queryOperation,  T... values){     checkNotEmpty(name,\"Name cannot be empty/null, please specify a name to apply operations on.\");     checkNotNull(queryOperation,\"QueryOperation cannot be null.\");     checkNotNull(values,\"Values to be compared with need to be set to something.\");     if (values.length \u003d\u003d 0 \u0026\u0026 !queryOperation.hasDefaultValue()) {       throw new IllegalArgumentException(\"Please specify at least one value to be searched for.\");     }     for (int i\u003d0; i \u003c values.length; ++i) {       final T value\u003dvalues[i];       checkNotNull(value,\"Value at position %d must not be null.\",i);       if (value instanceof CharSequence) {         checkNotEmpty(value.toString(),\"Value at position %d must not be empty.\",i);       }     }     if (!name.startsWith(\"sys.\") \u0026\u0026 !name.startsWith(\"fields.\")) {       throw new IllegalArgumentException(\"Please specify either a \\\"sys.\\\" or a \\\"fields.\\\" \" + \"attribute to be searched for. (Remember to specify a ContentType for \\\"fields.\\\" \" + \"searches.)\");     }     if (name.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"Cannot request fields of an entry without having a \" + \"content type set first.\");     }     if (values.length \u003d\u003d 0) {       params.put(name + queryOperation.operator,queryOperation.defaultValue.toString());     }  else {       params.put(name + queryOperation.operator,join(values));     }     return (Query)this;   }   /**   * Simple `where` query. \u003cp\u003e This query will be used if there are not specialized queries available. Please use the more concrete methods in order to gain type safety and early exceptions, without requesting the API.  * @param key   the key to be added to the query.  * @param value the value to be added.  * @return the calling query for chaining.  */   @SuppressWarnings(\"unchecked\") public Query where(  String key,  String value){     params.put(key,value);     return (Query)this;   }   /**   * Order result by the given key. \u003cp\u003e Please do not forget to include the content type if you are requesting to order by a field.  * @param key the key to be ordered by.  * @return the calling query for chaining.  * @throws IllegalArgumentException if key is null.  * @throws IllegalArgumentException if key is empty.  * @throws IllegalStateException    if key requests a field, but no content type is requested.  * @see #withContentType(String)  */   @SuppressWarnings(\"unchecked\") public Query orderBy(  String key){     checkNotEmpty(key,\"Key to order by must not be empty.\");     if (key.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"\\\"fields.\\\" cannot be used without setting a content type \" + \"first.\");     }     this.params.put(PARAMETER_ORDER,key);     return (Query)this;   }   /**   * Order result by the multiple keys. \u003cp\u003e Please do not forget to include the content type if you are requesting to order by a field.  * @param keys the keys to be ordered by.  * @return the calling query for chaining.  * @throws IllegalArgumentException if keys is null.  * @throws IllegalArgumentException if keys is empty.  * @throws IllegalArgumentException if one key is null.  * @throws IllegalArgumentException if one key is empty.  * @throws IllegalStateException    if one key requests a field, but no content type is requested.  * @see #withContentType(String)  * @see #orderBy(String)  */   @SuppressWarnings(\"unchecked\") public Query orderBy(  String... keys){     checkNotNull(keys,\"Keys should not be null.\");     if (keys.length \u003d\u003d 0) {       throw new IllegalArgumentException(\"Cannot have an empty keys array.\");     }     for (int i\u003d0; i \u003c keys.length; ++i) {       final String key\u003dkeys[i];       checkNotEmpty(key,\"Key at %d to order by must not be empty.\",i);       if (key.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {         throw new IllegalStateException(format(\"Key at %d uses \\\"fields.\\\" but cannot be used\" + \" without setting a content type first.\",i));       }     }     this.params.put(PARAMETER_ORDER,join(keys));     return (Query)this;   }   /**   * Order result by the given key, reversing the order. \u003cp\u003e Please do not forget to include the content type if you are requesting to order by a field.  * @param key the key to be reversely ordered by.  * @return the calling query for chaining.  * @throws IllegalArgumentException if key is null.  * @throws IllegalArgumentException if key is empty.  * @throws IllegalStateException    if key requests a field, but no content type is requested.  * @see #withContentType(String)  */   @SuppressWarnings(\"unchecked\") public Query reverseOrderBy(  String key){     checkNotEmpty(key,\"Key to order by must not be empty\");     if (key.startsWith(\"fields.\") \u0026\u0026 !hasContentTypeSet()) {       throw new IllegalStateException(\"\\\"fields.\\\" cannot be used without setting a content type \" + \"first.\");     }     this.params.put(PARAMETER_ORDER,\"-\" + key);     return (Query)this;   }   /**   * Limits the amount of elements to a given number. \u003cp\u003e If more then the number given elements are present, you can use skip(int) and limit(int) to simulate pagination.  * @param limit a non negative number less than 1001 to include elements.  * @return the calling query for chaining.  * @see #skip(int)  */   @SuppressWarnings(\"unchecked\") public Query limit(  int limit){     if (limit \u003c 0) {       throw new IllegalArgumentException(format(\"Limit of %d is negative.\",limit));     }     if (limit \u003e 1000) {       throw new IllegalArgumentException(format(\"Limit of %d is greater than 1000.\",limit));     }     params.put(PARAMETER_LIMIT,Integer.toString(limit));     return (Query)this;   }   /**   * Skips the first elements of a response. \u003cp\u003e If more limit(int) elements are present, you can use skip(int) to simulate pagination.  * @param skip a non negative number to exclude the first elements.  * @return the calling query for chaining.  * @see #limit(int)  */   @SuppressWarnings(\"unchecked\") public Query skip(  int skip){     if (skip \u003c 0) {       throw new IllegalArgumentException(format(\"Limit of %d is negative.\",skip));     }     params.put(PARAMETER_SKIP,Integer.toString(skip));     return (Query)this;   }   /**   * Include references entries and their entries up to the given level. \u003cp\u003e A level of inclusion of 0 means, do not include references referenced, but not requested. Please note also, that more then 10 include levels cannot be specified.  * @param level the number of recursion of inclusion to be used.  * @return the calling query for chaining.  */   @SuppressWarnings(\"unchecked\") public Query include(  int level){     if (level \u003c 0) {       throw new IllegalArgumentException(format(\"Include level of %d is negative.\",level));     }     if (level \u003e 10) {       throw new IllegalArgumentException(format(\"Include level of %d is to high.\",level));     }     params.put(PARAMETER_INCLUDE,Integer.toString(level));     return (Query)this;   }   @SuppressWarnings(\"unchecked\") Query where(  Map\u003cString,String\u003e params){     this.params.clear();     this.params.putAll(params);     return (Query)this;   }   String path(){     return resourcePath(type);   }   private boolean hasContentTypeSet(){     return params.containsKey(PARAMETER_CONTENT_TYPE);   }   private \u003cT\u003eString join(  T[] values){     final StringBuilder builder\u003dnew StringBuilder();     String separator\u003d\"\";     for (    final T value : values) {       builder.append(separator);       separator\u003d\",\";       builder.append(value);     }     return builder.toString();   }   private int countDots(  String text){     int count\u003d0;     for (int i\u003d0; i \u003c text.length(); ++i) {       if (text.charAt(i) \u003d\u003d \u0027.\u0027) {         count++;       }     }     return count;   } } "
  },
  {
    "commitSHA1": "24b00932bb0ee51ea34bbde1eba7f375e99cf3d8",
    "commitFile": "src/test/java/com/contentful/java/cda/SyncTest.java",
    "patch": "diff --git a/src/test/java/com/contentful/java/cda/SyncTest.java b/src/test/java/com/contentful/java/cda/SyncTest.java\nindex 7207a09..cbcb947 100644\n--- a/src/test/java/com/contentful/java/cda/SyncTest.java\n+++ b/src/test/java/com/contentful/java/cda/SyncTest.java\n@@ -115,7 +115,7 @@\n     assertThat(rawArray).isNotNull();\n     assertThat(rawArray.get(\"en-US\").get(0)).containsKey(\"sys\");\n \n-    String syncToken \u003d HttpUrl.parse(space.nextSyncUrl()).queryParameter(\"syncToken\");\n+    String syncToken \u003d HttpUrl.parse(space.nextSyncUrl()).queryParameter(\"sync_token\");\n     space \u003d client.sync(syncToken).fetch();\n     foo \u003d space.entries().get(\"2k5aHpfw7m0waMKYksC2Ww\");\n     assertThat(foo).isNotNull();\n",
    "projectName": "contentful.java",
    "lineNum": 118,
    "nodeStartChar": 4683,
    "before": "\"syncToken\"",
    "after": "\"sync_token\""
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAAsset.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAAsset.java b/src/main/java/com/contentful/java/cda/CDAAsset.java\nindex 05722ad..7b471f1 100644\n--- a/src/main/java/com/contentful/java/cda/CDAAsset.java\n+++ b/src/main/java/com/contentful/java/cda/CDAAsset.java\n@@ -23,7 +23,7 @@\n   @SuppressWarnings(\"unchecked\")\n   public \u003cT\u003e T fileField(String key) {\n     T result \u003d null;\n-    Map\u003c?, ?\u003e file \u003d getField(\"file\");\n+    Map\u003cString, Object\u003e file \u003d getField(\"file\");\n     if (file !\u003d null) {\n       result \u003d (T) file.get(key);\n     }\ndiff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\ndiff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 6e135b2..107cfc5 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ?\u003e attrs;\n+  Map\u003cString, Object\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ?\u003e attrs() {\n+  public Map\u003cString, Object\u003e attrs() {\n     return attrs;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex f5389a9..7338d98 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -77,7 +77,7 @@\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, String... keys) {\n+  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, Object... keys) {\n     Map\u003c?, ?\u003e curr \u003d source;\n     for (int i \u003d 0; i \u003c keys.length; i++) {\n       if (i \u003d\u003d keys.length - 1) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAAsset.java b/src/main/java/com/contentful/java/cda/CDAAsset.java\nindex 05722ad..7b471f1 100644\n--- a/src/main/java/com/contentful/java/cda/CDAAsset.java\n+++ b/src/main/java/com/contentful/java/cda/CDAAsset.java\n@@ -23,7 +23,7 @@\n   @SuppressWarnings(\"unchecked\")\n   public \u003cT\u003e T fileField(String key) {\n     T result \u003d null;\n-    Map\u003c?, ?\u003e file \u003d getField(\"file\");\n+    Map\u003cString, Object\u003e file \u003d getField(\"file\");\n     if (file !\u003d null) {\n       result \u003d (T) file.get(key);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 26,
    "nodeStartChar": 550,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 21,
    "nodeStartChar": 266,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 23,
    "nodeStartChar": 286,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 53,
    "nodeStartChar": 687,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 57,
    "nodeStartChar": 739,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 6e135b2..107cfc5 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ?\u003e attrs;\n+  Map\u003cString, Object\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ?\u003e attrs() {\n+  public Map\u003cString, Object\u003e attrs() {\n     return attrs;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 10,
    "nodeStartChar": 240,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 6e135b2..107cfc5 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ?\u003e attrs;\n+  Map\u003cString, Object\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ?\u003e attrs() {\n+  public Map\u003cString, Object\u003e attrs() {\n     return attrs;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 21,
    "nodeStartChar": 456,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 11,
    "nodeStartChar": 258,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 13,
    "nodeStartChar": 284,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 35,
    "nodeStartChar": 878,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/Util.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex f5389a9..7338d98 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -77,7 +77,7 @@\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, String... keys) {\n+  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, Object... keys) {\n     Map\u003c?, ?\u003e curr \u003d source;\n     for (int i \u003d 0; i \u003c keys.length; i++) {\n       if (i \u003d\u003d keys.length - 1) {\n",
    "projectName": "contentful.java",
    "lineNum": 80,
    "nodeStartChar": 2744,
    "before": "String",
    "after": "Object"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAAsset.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAAsset.java b/src/main/java/com/contentful/java/cda/CDAAsset.java\nindex 05722ad..7b471f1 100644\n--- a/src/main/java/com/contentful/java/cda/CDAAsset.java\n+++ b/src/main/java/com/contentful/java/cda/CDAAsset.java\n@@ -23,7 +23,7 @@\n   @SuppressWarnings(\"unchecked\")\n   public \u003cT\u003e T fileField(String key) {\n     T result \u003d null;\n-    Map\u003c?, ?\u003e file \u003d getField(\"file\");\n+    Map\u003cString, Object\u003e file \u003d getField(\"file\");\n     if (file !\u003d null) {\n       result \u003d (T) file.get(key);\n     }\ndiff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\ndiff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 6e135b2..107cfc5 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ?\u003e attrs;\n+  Map\u003cString, Object\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ?\u003e attrs() {\n+  public Map\u003cString, Object\u003e attrs() {\n     return attrs;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex f5389a9..7338d98 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -77,7 +77,7 @@\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, String... keys) {\n+  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, Object... keys) {\n     Map\u003c?, ?\u003e curr \u003d source;\n     for (int i \u003d 0; i \u003c keys.length; i++) {\n       if (i \u003d\u003d keys.length - 1) {\ndiff --git a/src/main/java/com/contentful/java/cda/CDAAsset.java b/src/main/java/com/contentful/java/cda/CDAAsset.java\nindex 05722ad..7b471f1 100644\n--- a/src/main/java/com/contentful/java/cda/CDAAsset.java\n+++ b/src/main/java/com/contentful/java/cda/CDAAsset.java\n@@ -23,7 +23,7 @@\n   @SuppressWarnings(\"unchecked\")\n   public \u003cT\u003e T fileField(String key) {\n     T result \u003d null;\n-    Map\u003c?, ?\u003e file \u003d getField(\"file\");\n+    Map\u003cString, Object\u003e file \u003d getField(\"file\");\n     if (file !\u003d null) {\n       result \u003d (T) file.get(key);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 26,
    "nodeStartChar": 550,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 21,
    "nodeStartChar": 266,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 23,
    "nodeStartChar": 286,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 53,
    "nodeStartChar": 687,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAField.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAField.java b/src/main/java/com/contentful/java/cda/CDAField.java\nindex df1fb0e..fb2e85e 100644\n--- a/src/main/java/com/contentful/java/cda/CDAField.java\n+++ b/src/main/java/com/contentful/java/cda/CDAField.java\n@@ -18,9 +18,9 @@\n \n   boolean localized;\n \n-  Map\u003c?, ?\u003e items;\n+  Map\u003cString, Object\u003e items;\n \n-  Map\u003c?, ?\u003e validations;\n+  Map\u003cString, Object\u003e validations;\n \n   public String name() {\n     return name;\n@@ -50,11 +50,11 @@\n     return localized;\n   }\n \n-  public Map\u003c?, ?\u003e items() {\n+  public Map\u003cString, Object\u003e items() {\n     return items;\n   }\n \n-  public Map\u003c?, ?\u003e validations() {\n+  public Map\u003cString, Object\u003e validations() {\n     return validations;\n   }\n }\n",
    "projectName": "contentful.java",
    "lineNum": 57,
    "nodeStartChar": 739,
    "before": "Map\u003c?,?\u003e",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 6e135b2..107cfc5 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ?\u003e attrs;\n+  Map\u003cString, Object\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ?\u003e attrs() {\n+  public Map\u003cString, Object\u003e attrs() {\n     return attrs;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 10,
    "nodeStartChar": 240,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 6e135b2..107cfc5 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ?\u003e attrs;\n+  Map\u003cString, Object\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ?\u003e attrs() {\n+  public Map\u003cString, Object\u003e attrs() {\n     return attrs;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 21,
    "nodeStartChar": 456,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 11,
    "nodeStartChar": 258,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 13,
    "nodeStartChar": 284,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex c41cca3..6c06330 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ?\u003e fields;\n+  Map\u003cString, Object\u003e fields;\n \n-  Map\u003cString, ?\u003e rawFields;\n+  Map\u003cString, Object\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ?\u003e rawFields() {\n+  public Map\u003cString, Object\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 35,
    "nodeStartChar": 878,
    "before": "?",
    "after": "Object"
  },
  {
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/Util.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex f5389a9..7338d98 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -77,7 +77,7 @@\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, String... keys) {\n+  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, Object... keys) {\n     Map\u003c?, ?\u003e curr \u003d source;\n     for (int i \u003d 0; i \u003c keys.length; i++) {\n       if (i \u003d\u003d keys.length - 1) {\n",
    "projectName": "contentful.java",
    "lineNum": 80,
    "nodeStartChar": 2744,
    "before": "String",
    "after": "Object"
  },
  {
    "commitSHA1": "058bfe6cd9b7f542c9b27137c61c9a831defd82e",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\ndiff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex 383af6b..f5389a9 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -83,7 +83,7 @@\n       if (i \u003d\u003d keys.length - 1) {\n         return (T) curr.get(keys[i]);\n       }\n-      curr \u003d (Map) curr.get(keys[i]);\n+      curr \u003d (Map\u003c?, ?\u003e) curr.get(keys[i]);\n       if (curr \u003d\u003d null) {\n         break;\n       }\ndiff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\n",
    "projectName": "contentful.java",
    "lineNum": 102,
    "nodeStartChar": 3367,
    "before": "Map",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "058bfe6cd9b7f542c9b27137c61c9a831defd82e",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\ndiff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex 383af6b..f5389a9 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -83,7 +83,7 @@\n       if (i \u003d\u003d keys.length - 1) {\n         return (T) curr.get(keys[i]);\n       }\n-      curr \u003d (Map) curr.get(keys[i]);\n+      curr \u003d (Map\u003c?, ?\u003e) curr.get(keys[i]);\n       if (curr \u003d\u003d null) {\n         break;\n       }\ndiff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\n",
    "projectName": "contentful.java",
    "lineNum": 129,
    "nodeStartChar": 4252,
    "before": "Map",
    "after": "Map\u003cString,Object\u003e"
  },
  {
    "commitSHA1": "058bfe6cd9b7f542c9b27137c61c9a831defd82e",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\ndiff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex 383af6b..f5389a9 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -83,7 +83,7 @@\n       if (i \u003d\u003d keys.length - 1) {\n         return (T) curr.get(keys[i]);\n       }\n-      curr \u003d (Map) curr.get(keys[i]);\n+      curr \u003d (Map\u003c?, ?\u003e) curr.get(keys[i]);\n       if (curr \u003d\u003d null) {\n         break;\n       }\ndiff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\n",
    "projectName": "contentful.java",
    "lineNum": 152,
    "nodeStartChar": 4864,
    "before": "Map",
    "after": "Map\u003c?,?\u003e"
  },
  {
    "commitSHA1": "058bfe6cd9b7f542c9b27137c61c9a831defd82e",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\ndiff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex 383af6b..f5389a9 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -83,7 +83,7 @@\n       if (i \u003d\u003d keys.length - 1) {\n         return (T) curr.get(keys[i]);\n       }\n-      curr \u003d (Map) curr.get(keys[i]);\n+      curr \u003d (Map\u003c?, ?\u003e) curr.get(keys[i]);\n       if (curr \u003d\u003d null) {\n         break;\n       }\ndiff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex 0886257..3144516 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map\u003cString, Object\u003e) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -149,7 +149,7 @@\n       // already resolved\n       return ((CDAResource) link).id();\n     }\n-    return extractNested((Map) link, \"sys\", \"id\");\n+    return extractNested((Map\u003c?, ?\u003e) link, \"sys\", \"id\");\n   }\n \n   static CDAResource findLinkedResource(ArrayResource array, CDAType linkType,\n@@ -264,7 +264,7 @@\n     Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n-      map.putAll((Map) resource.fields.get(key));\n+      map.putAll((Map\u003cString, ?\u003e) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n     resource.rawFields \u003d rawFields;\n",
    "projectName": "contentful.java",
    "lineNum": 267,
    "nodeStartChar": 8531,
    "before": "Map",
    "after": "Map\u003cString,?\u003e"
  },
  {
    "commitSHA1": "058bfe6cd9b7f542c9b27137c61c9a831defd82e",
    "commitFile": "src/main/java/com/contentful/java/cda/Util.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex 383af6b..f5389a9 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -83,7 +83,7 @@\n       if (i \u003d\u003d keys.length - 1) {\n         return (T) curr.get(keys[i]);\n       }\n-      curr \u003d (Map) curr.get(keys[i]);\n+      curr \u003d (Map\u003c?, ?\u003e) curr.get(keys[i]);\n       if (curr \u003d\u003d null) {\n         break;\n       }\n",
    "projectName": "contentful.java",
    "lineNum": 86,
    "nodeStartChar": 2929,
    "before": "Map",
    "after": "Map\u003c?,?\u003e"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 8252a08..6e135b2 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ? super Object\u003e attrs;\n+  Map\u003cString, ?\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ? super Object\u003e attrs() {\n+  public Map\u003cString, ?\u003e attrs() {\n     return attrs;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex d0a1d33..c41cca3 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ? super Object\u003e fields;\n+  Map\u003cString, ?\u003e fields;\n \n-  Map\u003cString, ? super Object\u003e rawFields;\n+  Map\u003cString, ?\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ? super Object\u003e rawFields() {\n+  public Map\u003cString, ?\u003e rawFields() {\n     return rawFields;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\ndiff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 8252a08..6e135b2 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ? super Object\u003e attrs;\n+  Map\u003cString, ?\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ? super Object\u003e attrs() {\n+  public Map\u003cString, ?\u003e attrs() {\n     return attrs;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 10,
    "nodeStartChar": 240,
    "before": "? super Object",
    "after": "?"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 8252a08..6e135b2 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ? super Object\u003e attrs;\n+  Map\u003cString, ?\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ? super Object\u003e attrs() {\n+  public Map\u003cString, ?\u003e attrs() {\n     return attrs;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex d0a1d33..c41cca3 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ? super Object\u003e fields;\n+  Map\u003cString, ?\u003e fields;\n \n-  Map\u003cString, ? super Object\u003e rawFields;\n+  Map\u003cString, ?\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ? super Object\u003e rawFields() {\n+  public Map\u003cString, ?\u003e rawFields() {\n     return rawFields;\n   }\n \ndiff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\ndiff --git a/src/main/java/com/contentful/java/cda/CDAResource.java b/src/main/java/com/contentful/java/cda/CDAResource.java\nindex 8252a08..6e135b2 100644\n--- a/src/main/java/com/contentful/java/cda/CDAResource.java\n+++ b/src/main/java/com/contentful/java/cda/CDAResource.java\n@@ -7,7 +7,7 @@\n \n public abstract class CDAResource {\n   @SerializedName(\"sys\")\n-  Map\u003cString, ? super Object\u003e attrs;\n+  Map\u003cString, ?\u003e attrs;\n \n   public String id() {\n     return getAttribute(\"id\");\n@@ -18,7 +18,7 @@\n     return CDAType.valueOf(type.toUpperCase(LOCALE));\n   }\n \n-  public Map\u003cString, ? super Object\u003e attrs() {\n+  public Map\u003cString, ?\u003e attrs() {\n     return attrs;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 21,
    "nodeStartChar": 469,
    "before": "? super Object",
    "after": "?"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex d0a1d33..c41cca3 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ? super Object\u003e fields;\n+  Map\u003cString, ?\u003e fields;\n \n-  Map\u003cString, ? super Object\u003e rawFields;\n+  Map\u003cString, ?\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ? super Object\u003e rawFields() {\n+  public Map\u003cString, ?\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 11,
    "nodeStartChar": 258,
    "before": "? super Object",
    "after": "?"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex d0a1d33..c41cca3 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ? super Object\u003e fields;\n+  Map\u003cString, ?\u003e fields;\n \n-  Map\u003cString, ? super Object\u003e rawFields;\n+  Map\u003cString, ?\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ? super Object\u003e rawFields() {\n+  public Map\u003cString, ?\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 13,
    "nodeStartChar": 297,
    "before": "? super Object",
    "after": "?"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/LocalizedResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/LocalizedResource.java b/src/main/java/com/contentful/java/cda/LocalizedResource.java\nindex d0a1d33..c41cca3 100644\n--- a/src/main/java/com/contentful/java/cda/LocalizedResource.java\n+++ b/src/main/java/com/contentful/java/cda/LocalizedResource.java\n@@ -8,9 +8,9 @@\n \n   String defaultLocale;\n \n-  Map\u003cString, ? super Object\u003e fields;\n+  Map\u003cString, ?\u003e fields;\n \n-  Map\u003cString, ? super Object\u003e rawFields;\n+  Map\u003cString, ?\u003e rawFields;\n \n   /**\n    * Extracts a field from the fields set of the active locale, result type is inferred.\n@@ -32,7 +32,7 @@\n   }\n \n   /** Raw unprocessed fields. */\n-  public Map\u003cString, ? super Object\u003e rawFields() {\n+  public Map\u003cString, ?\u003e rawFields() {\n     return rawFields;\n   }\n \n",
    "projectName": "contentful.java",
    "lineNum": 35,
    "nodeStartChar": 904,
    "before": "? super Object",
    "after": "?"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 102,
    "nodeStartChar": 3350,
    "before": "? super Object",
    "after": "Object"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 129,
    "nodeStartChar": 4243,
    "before": "? super Object",
    "after": "Object"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 240,
    "nodeStartChar": 7652,
    "before": "? super Object",
    "after": "Object"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 246,
    "nodeStartChar": 7876,
    "before": "? super Object",
    "after": "Object"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 264,
    "nodeStartChar": 8381,
    "before": "? super Object",
    "after": "Object"
  },
  {
    "commitSHA1": "7c6a874891ad4ff05ce927d3ebe4b8d2e4f946c4",
    "commitFile": "src/main/java/com/contentful/java/cda/ResourceUtils.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ResourceUtils.java b/src/main/java/com/contentful/java/cda/ResourceUtils.java\nindex ac0f1ea..0886257 100644\n--- a/src/main/java/com/contentful/java/cda/ResourceUtils.java\n+++ b/src/main/java/com/contentful/java/cda/ResourceUtils.java\n@@ -99,7 +99,7 @@\n   static void resolveArrayOfLinks(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d\n         CDAType.valueOf(((String) field.items().get(\"linkType\")).toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -126,7 +126,7 @@\n   @SuppressWarnings(\"unchecked\")\n   static void resolveSingleLink(CDAEntry entry, CDAField field, ArrayResource array) {\n     CDAType linkType \u003d CDAType.valueOf(field.linkType().toUpperCase(LOCALE));\n-    Map\u003cString, ? super Object\u003e value \u003d (Map) entry.fields.get(field.id());\n+    Map\u003cString, Object\u003e value \u003d (Map) entry.fields.get(field.id());\n     if (value \u003d\u003d null) {\n       return;\n     }\n@@ -237,13 +237,13 @@\n   }\n \n   static void normalizeFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e fields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n       Object value \u003d resource.fields.get(key);\n       if (value \u003d\u003d null) {\n         continue;\n       }\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.put(resource.locale(), value);\n       fields.put(key, map);\n     }\n@@ -261,9 +261,9 @@\n \n   @SuppressWarnings(\"unchecked\")\n   private static void setRawFields(LocalizedResource resource) {\n-    Map\u003cString, ? super Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n+    Map\u003cString, Object\u003e rawFields \u003d new HashMap\u003cString, Object\u003e();\n     for (String key : resource.fields.keySet()) {\n-      Map\u003cString, ? super Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n+      Map\u003cString, Object\u003e map \u003d new HashMap\u003cString, Object\u003e();\n       map.putAll((Map) resource.fields.get(key));\n       rawFields.put(key, map);\n     }\n",
    "projectName": "contentful.java",
    "lineNum": 266,
    "nodeStartChar": 8508,
    "before": "? super Object",
    "after": "Object"
  },
  {
    "commitSHA1": "d613713c60af3e90dcef39721b0ed282c63bc407",
    "commitFile": "src/main/java/com/contentful/java/cda/AbsQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\ndiff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\ndiff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\n",
    "projectName": "contentful.java",
    "lineNum": 8,
    "nodeStartChar": 141,
    "before": "public abstract class AbsQuery\u003cT extends CDAResource,E extends AbsQuery\u003cT,E\u003e\u003e {   final Class\u003cT\u003e type;   final CDAClient client;   Map\u003cString,String\u003e params;   AbsQuery(  Class\u003cT\u003e type,  CDAClient client){     this.type\u003dtype;     this.client\u003dclient;   }   protected String path(){     return resourcePath(type);   }   @SuppressWarnings(\"unchecked\") public E where(  String key,  String value){     if (params \u003d\u003d null) {       params\u003dnew HashMap\u003cString,String\u003e();     }     params.put(key,value);     return (E)this;   }   @SuppressWarnings(\"unchecked\") protected E where(  Map\u003cString,String\u003e params){     this.params\u003dparams;     return (E)this;   } } ",
    "after": "abstract class AbsQuery\u003cT extends CDAResource,E extends AbsQuery\u003cT,E\u003e\u003e {   final Class\u003cT\u003e type;   final CDAClient client;   Map\u003cString,String\u003e params;   AbsQuery(  Class\u003cT\u003e type,  CDAClient client){     this.type\u003dtype;     this.client\u003dclient;   }   protected String path(){     return resourcePath(type);   }   @SuppressWarnings(\"unchecked\") public E where(  String key,  String value){     if (params \u003d\u003d null) {       params\u003dnew HashMap\u003cString,String\u003e();     }     params.put(key,value);     return (E)this;   }   @SuppressWarnings(\"unchecked\") protected E where(  Map\u003cString,String\u003e params){     this.params\u003dparams;     return (E)this;   } } "
  },
  {
    "commitSHA1": "d613713c60af3e90dcef39721b0ed282c63bc407",
    "commitFile": "src/main/java/com/contentful/java/cda/FetchQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\n",
    "projectName": "contentful.java",
    "lineNum": 3,
    "nodeStartChar": 107,
    "before": "ObserveQuery",
    "after": "FetchQuery"
  },
  {
    "commitSHA1": "b7f9b344236ecfb8de2fbbd921e219d0564ac345",
    "commitFile": "src/main/java/com/contentful/java/cda/AbsQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\ndiff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\ndiff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\n",
    "projectName": "contentful.java",
    "lineNum": 8,
    "nodeStartChar": 141,
    "before": "public abstract class AbsQuery\u003cT extends CDAResource,E extends AbsQuery\u003cT,E\u003e\u003e {   final Class\u003cT\u003e type;   final CDAClient client;   Map\u003cString,String\u003e params;   AbsQuery(  Class\u003cT\u003e type,  CDAClient client){     this.type\u003dtype;     this.client\u003dclient;   }   protected String path(){     return resourcePath(type);   }   @SuppressWarnings(\"unchecked\") public E where(  String key,  String value){     if (params \u003d\u003d null) {       params\u003dnew HashMap\u003cString,String\u003e();     }     params.put(key,value);     return (E)this;   }   @SuppressWarnings(\"unchecked\") protected E where(  Map\u003cString,String\u003e params){     this.params\u003dparams;     return (E)this;   } } ",
    "after": "abstract class AbsQuery\u003cT extends CDAResource,E extends AbsQuery\u003cT,E\u003e\u003e {   final Class\u003cT\u003e type;   final CDAClient client;   Map\u003cString,String\u003e params;   AbsQuery(  Class\u003cT\u003e type,  CDAClient client){     this.type\u003dtype;     this.client\u003dclient;   }   protected String path(){     return resourcePath(type);   }   @SuppressWarnings(\"unchecked\") public E where(  String key,  String value){     if (params \u003d\u003d null) {       params\u003dnew HashMap\u003cString,String\u003e();     }     params.put(key,value);     return (E)this;   }   @SuppressWarnings(\"unchecked\") protected E where(  Map\u003cString,String\u003e params){     this.params\u003dparams;     return (E)this;   } } "
  },
  {
    "commitSHA1": "b7f9b344236ecfb8de2fbbd921e219d0564ac345",
    "commitFile": "src/main/java/com/contentful/java/cda/FetchQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\n",
    "projectName": "contentful.java",
    "lineNum": 3,
    "nodeStartChar": 107,
    "before": "ObserveQuery",
    "after": "FetchQuery"
  },
  {
    "commitSHA1": "0f54ca5ddd4157a1bedf483a4719897276e2a2a3",
    "commitFile": "src/main/java/com/contentful/java/cda/ArrayUtil.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/ArrayUtil.java b/src/main/java/com/contentful/java/cda/ArrayUtil.java\nindex 97b6adc..0f649f1 100644\n--- a/src/main/java/com/contentful/java/cda/ArrayUtil.java\n+++ b/src/main/java/com/contentful/java/cda/ArrayUtil.java\n@@ -41,7 +41,7 @@\n     }\n \n     Response response \u003d\n-        client.service.sync(client.spaceId, false, queryParam(nextPageUrl, \"sync_token\"))\n+        client.service.sync(client.spaceId, null, queryParam(nextPageUrl, \"sync_token\"))\n             .toBlocking()\n             .first();\n \ndiff --git a/src/main/java/com/contentful/java/cda/CDAService.java b/src/main/java/com/contentful/java/cda/CDAService.java\nindex 66fa824..c4968c8 100644\n--- a/src/main/java/com/contentful/java/cda/CDAService.java\n+++ b/src/main/java/com/contentful/java/cda/CDAService.java\n@@ -29,5 +29,5 @@\n   Observable\u003cResponse\u003e sync(\n       @Path(\"space\") String space,\n       @Query(\"initial\") Boolean initial,\n-      @Query(\"syncToken\") String sync_token);\n+      @Query(\"sync_token\") String sync_token);\n }\ndiff --git a/src/main/java/com/contentful/java/cda/SyncQuery.java b/src/main/java/com/contentful/java/cda/SyncQuery.java\nindex b8f0745..22da928 100644\n--- a/src/main/java/com/contentful/java/cda/SyncQuery.java\n+++ b/src/main/java/com/contentful/java/cda/SyncQuery.java\n@@ -37,7 +37,7 @@\n     return client.cacheAll(true)\n         .flatMap(new Func1\u003cCache, Observable\u003cResponse\u003e\u003e() {\n           @Override public Observable\u003cResponse\u003e call(Cache cache) {\n-            return client.service.sync(client.spaceId, token \u003d\u003d null, token);\n+            return client.service.sync(client.spaceId, initial ? initial : null, token);\n           }\n         }).map(new Func1\u003cResponse, SynchronizedSpace\u003e() {\n           @Override public SynchronizedSpace call(Response response) {\ndiff --git a/src/main/java/com/contentful/java/cda/ArrayUtil.java b/src/main/java/com/contentful/java/cda/ArrayUtil.java\nindex 97b6adc..0f649f1 100644\n--- a/src/main/java/com/contentful/java/cda/ArrayUtil.java\n+++ b/src/main/java/com/contentful/java/cda/ArrayUtil.java\n@@ -41,7 +41,7 @@\n     }\n \n     Response response \u003d\n-        client.service.sync(client.spaceId, false, queryParam(nextPageUrl, \"sync_token\"))\n+        client.service.sync(client.spaceId, null, queryParam(nextPageUrl, \"sync_token\"))\n             .toBlocking()\n             .first();\n \n",
    "projectName": "contentful.java",
    "lineNum": 44,
    "nodeStartChar": 1421,
    "before": "false",
    "after": "null"
  },
  {
    "commitSHA1": "0f54ca5ddd4157a1bedf483a4719897276e2a2a3",
    "commitFile": "src/main/java/com/contentful/java/cda/CDAService.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/CDAService.java b/src/main/java/com/contentful/java/cda/CDAService.java\nindex 66fa824..c4968c8 100644\n--- a/src/main/java/com/contentful/java/cda/CDAService.java\n+++ b/src/main/java/com/contentful/java/cda/CDAService.java\n@@ -29,5 +29,5 @@\n   Observable\u003cResponse\u003e sync(\n       @Path(\"space\") String space,\n       @Query(\"initial\") Boolean initial,\n-      @Query(\"syncToken\") String sync_token);\n+      @Query(\"sync_token\") String sync_token);\n }\n",
    "projectName": "contentful.java",
    "lineNum": 32,
    "nodeStartChar": 861,
    "before": "\"syncToken\"",
    "after": "\"sync_token\""
  },
  {
    "commitSHA1": "0f54ca5ddd4157a1bedf483a4719897276e2a2a3",
    "commitFile": "src/main/java/com/contentful/java/cda/SyncQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/SyncQuery.java b/src/main/java/com/contentful/java/cda/SyncQuery.java\nindex b8f0745..22da928 100644\n--- a/src/main/java/com/contentful/java/cda/SyncQuery.java\n+++ b/src/main/java/com/contentful/java/cda/SyncQuery.java\n@@ -37,7 +37,7 @@\n     return client.cacheAll(true)\n         .flatMap(new Func1\u003cCache, Observable\u003cResponse\u003e\u003e() {\n           @Override public Observable\u003cResponse\u003e call(Cache cache) {\n-            return client.service.sync(client.spaceId, token \u003d\u003d null, token);\n+            return client.service.sync(client.spaceId, initial ? initial : null, token);\n           }\n         }).map(new Func1\u003cResponse, SynchronizedSpace\u003e() {\n           @Override public SynchronizedSpace call(Response response) {\n",
    "projectName": "contentful.java",
    "lineNum": 40,
    "nodeStartChar": 1193,
    "before": "token \u003d\u003d null",
    "after": "initial ? initial : null"
  },
  {
    "commitSHA1": "5ba5bea53de75a4c25bdac09de28308c65c9a922",
    "commitFile": "src/main/java/com/contentful/java/api/CDAClient.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/api/CDAClient.java b/src/main/java/com/contentful/java/api/CDAClient.java\nindex 076fe47..bc1efa4 100644\n--- a/src/main/java/com/contentful/java/api/CDAClient.java\n+++ b/src/main/java/com/contentful/java/api/CDAClient.java\n@@ -592,7 +592,7 @@\n             @Override\n             void onSpaceReady() {\n                 service.performSynchronization(spaceKey,\n-                        false,\n+                        null,\n                         syncToken,\n                         new SyncSpaceCallback(null, CDAClient.this, callback));\n             }\ndiff --git a/src/main/java/com/contentful/java/api/CDAService.java b/src/main/java/com/contentful/java/api/CDAService.java\nindex 49d2836..579bacd 100644\n--- a/src/main/java/com/contentful/java/api/CDAService.java\n+++ b/src/main/java/com/contentful/java/api/CDAService.java\n@@ -178,6 +178,7 @@\n      *\n      * @param space    String representing the Space key.\n      * @param initial  Boolean indicating whether this is the initial sync request or not.\n+     * @param syncToken String representing the sync token.\n      * @param callback {@link CDACallback} instance to be used.\n      */\n     @GET(\"/spaces/{space}/sync\")\n@@ -193,6 +194,7 @@\n      *\n      * @param space   String representing the Space key.\n      * @param initial Boolean indicating whether this is the initial sync request or not.\n+     * @param syncToken String representing the sync token.\n      * @return {@link CDASyncedSpace} result.\n      */\n     @GET(\"/spaces/{space}/sync\")\ndiff --git a/src/main/java/com/contentful/java/model/CDASyncedSpace.java b/src/main/java/com/contentful/java/model/CDASyncedSpace.java\nindex 277dbe7..ec41b99 100644\n--- a/src/main/java/com/contentful/java/model/CDASyncedSpace.java\n+++ b/src/main/java/com/contentful/java/model/CDASyncedSpace.java\n@@ -16,10 +16,20 @@\n         return items;\n     }\n \n+    /**\n+     * Gets the next sync URL.\n+     *\n+     * @return String representing the next sync URL for this Space.\n+     */\n     public String getNextSyncUrl() {\n         return nextSyncUrl;\n     }\n \n+    /**\n+     * Gets the sync token from this Space\u0027s {@code nextSyncUrl} value.\n+     *\n+     * @return String representing the next token to be used for the next sync request.\n+     */\n     public String getSyncToken() {\n         if (nextSyncUrl \u003d\u003d null) {\n             return null;\ndiff --git a/src/main/java/com/contentful/java/api/CDAClient.java b/src/main/java/com/contentful/java/api/CDAClient.java\nindex 076fe47..bc1efa4 100644\n--- a/src/main/java/com/contentful/java/api/CDAClient.java\n+++ b/src/main/java/com/contentful/java/api/CDAClient.java\n@@ -592,7 +592,7 @@\n             @Override\n             void onSpaceReady() {\n                 service.performSynchronization(spaceKey,\n-                        false,\n+                        null,\n                         syncToken,\n                         new SyncSpaceCallback(null, CDAClient.this, callback));\n             }\n",
    "projectName": "contentful.java",
    "lineNum": 595,
    "nodeStartChar": 22124,
    "before": "false",
    "after": "null"
  },
  {
    "commitSHA1": "023125e1fb11e19d5513b591b9d117ab7099483b",
    "commitFile": "src/main/java/com/contentful/java/model/CDAResource.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/model/CDAResource.java b/src/main/java/com/contentful/java/model/CDAResource.java\nindex ec5984f..869b544 100644\n--- a/src/main/java/com/contentful/java/model/CDAResource.java\n+++ b/src/main/java/com/contentful/java/model/CDAResource.java\n@@ -10,7 +10,7 @@\n public class CDAResource {\n     private Map\u003cString, Object\u003e sys;\n \n-    private String locale;\n+    protected String locale;\n \n     public CDAResource() {\n         this.locale \u003d Constants.DEFAULT_LOCALE; // todo use Locale of current Space\ndiff --git a/src/main/java/com/contentful/java/model/CDAResource.java b/src/main/java/com/contentful/java/model/CDAResource.java\nindex ec5984f..869b544 100644\n--- a/src/main/java/com/contentful/java/model/CDAResource.java\n+++ b/src/main/java/com/contentful/java/model/CDAResource.java\n@@ -10,7 +10,7 @@\n public class CDAResource {\n     private Map\u003cString, Object\u003e sys;\n \n-    private String locale;\n+    protected String locale;\n \n     public CDAResource() {\n         this.locale \u003d Constants.DEFAULT_LOCALE; // todo use Locale of current Space\n",
    "projectName": "contentful.java",
    "lineNum": 13,
    "nodeStartChar": 212,
    "before": "private",
    "after": "protected"
  },
  {
    "commitSHA1": "19d190144da3d84666ba1a0ca43e5e25f39302f5",
    "commitFile": "src/main/java/com/urbanairship/datacube/DataCubeIo.java",
    "patch": "diff --git a/src/main/java/com/urbanairship/datacube/DataCubeIo.java b/src/main/java/com/urbanairship/datacube/DataCubeIo.java\nindex f3abc36..743a311 100644\n--- a/src/main/java/com/urbanairship/datacube/DataCubeIo.java\n+++ b/src/main/java/com/urbanairship/datacube/DataCubeIo.java\n@@ -84,7 +84,7 @@\n     \n     public DataCubeIo(DataCube\u003cT\u003e cube, DbHarness\u003cT\u003e db, int batchSize, long maxBatchAgeMs,\n             SyncLevel syncLevel) {\n-        this(cube, db, batchSize, maxBatchAgeMs, syncLevel, \"\");\n+        this(cube, db, batchSize, maxBatchAgeMs, syncLevel, null);\n     }\n     \n     /**\n",
    "projectName": "datacube",
    "lineNum": 87,
    "nodeStartChar": 3900,
    "before": "\"\"",
    "after": "null"
  },
  {
    "commitSHA1": "19d190144da3d84666ba1a0ca43e5e25f39302f5",
    "commitFile": "src/main/java/com/urbanairship/datacube/dbharnesses/HBaseDbHarness.java",
    "patch": "diff --git a/src/main/java/com/urbanairship/datacube/dbharnesses/HBaseDbHarness.java b/src/main/java/com/urbanairship/datacube/dbharnesses/HBaseDbHarness.java\nindex 35119be..cce57e3 100644\n--- a/src/main/java/com/urbanairship/datacube/dbharnesses/HBaseDbHarness.java\n+++ b/src/main/java/com/urbanairship/datacube/dbharnesses/HBaseDbHarness.java\n@@ -65,7 +65,7 @@\n             byte[] cf, Deserializer\u003cT\u003e deserializer, IdService idService, CommitType commitType) \n                     throws IOException {\n         this(pool, uniqueCubeName, tableName, cf, deserializer, idService, commitType,\n-                5, 5, 10, \"defaultScope\");\n+                5, 5, 10, null);\n     }\n     \n     public HBaseDbHarness(HTablePool pool, byte[] uniqueCubeName, byte[] tableName, \n",
    "projectName": "datacube",
    "lineNum": 68,
    "nodeStartChar": 2677,
    "before": "\"defaultScope\"",
    "after": "null"
  },
  {
    "commitSHA1": "2a96670eaf82a388f014c4979381053f444efa8b",
    "commitFile": "src/main/java/io/craftsman/Jdk8CompatibilityConverter.java",
    "patch": "diff --git a/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java b/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java\nindex 9476cd2..b3823cf 100644\n--- a/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java\n+++ b/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java\n@@ -24,7 +24,8 @@\n             destination \u003d creatorFactory.createLocalTimeCreator().create(source);\n         } else if (destinationClass.isAssignableFrom(LocalDateTime.class) \u0026\u0026 sourceClass.isAssignableFrom(LocalDateTime.class)) {\n             destination \u003d creatorFactory.createLocalDateTimeCreator().create(source);\n-        } else if (destinationClass.isAssignableFrom(ZoneId.class) \u0026\u0026 sourceClass.isAssignableFrom(ZoneId.class)) {\n+        // use instance of source because otherwise it seems to be not possible to handle the package protected ZoneRegion class\n+        } else if (destinationClass.isAssignableFrom(ZoneId.class) \u0026\u0026 (source instanceof ZoneId)) {\n             destination \u003d creatorFactory.createZoneIdCreator().create(source);\n         } else if (destinationClass.isAssignableFrom(Duration.class) \u0026\u0026 sourceClass.isAssignableFrom(Duration.class)) {\n             destination \u003d creatorFactory.createDurationCreator().create(source);\ndiff --git a/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java b/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java\nindex 9476cd2..b3823cf 100644\n--- a/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java\n+++ b/src/main/java/io/craftsman/Jdk8CompatibilityConverter.java\n@@ -24,7 +24,8 @@\n             destination \u003d creatorFactory.createLocalTimeCreator().create(source);\n         } else if (destinationClass.isAssignableFrom(LocalDateTime.class) \u0026\u0026 sourceClass.isAssignableFrom(LocalDateTime.class)) {\n             destination \u003d creatorFactory.createLocalDateTimeCreator().create(source);\n-        } else if (destinationClass.isAssignableFrom(ZoneId.class) \u0026\u0026 sourceClass.isAssignableFrom(ZoneId.class)) {\n+        // use instance of source because otherwise it seems to be not possible to handle the package protected ZoneRegion class\n+        } else if (destinationClass.isAssignableFrom(ZoneId.class) \u0026\u0026 (source instanceof ZoneId)) {\n             destination \u003d creatorFactory.createZoneIdCreator().create(source);\n         } else if (destinationClass.isAssignableFrom(Duration.class) \u0026\u0026 sourceClass.isAssignableFrom(Duration.class)) {\n             destination \u003d creatorFactory.createDurationCreator().create(source);\n",
    "projectName": "dozer-jdk8-support",
    "lineNum": 28,
    "nodeStartChar": 1378,
    "before": "sourceClass.isAssignableFrom(ZoneId.class)",
    "after": "(source instanceof ZoneId)"
  },
  {
    "commitSHA1": "43d3b2d1173389ad0e49f9c4ab68e268a269e1f5",
    "commitFile": "src/main/java/im/nll/data/dq/DQ.java",
    "patch": "diff --git a/src/main/java/im/nll/data/dq/DQ.java b/src/main/java/im/nll/data/dq/DQ.java\nindex 2eb56f9..e2b1aa7 100644\n--- a/src/main/java/im/nll/data/dq/DQ.java\n+++ b/src/main/java/im/nll/data/dq/DQ.java\n@@ -158,7 +158,7 @@\n \n     private static void validateParameter(Object[] params) {\n         if (params.length \u003e 0) {\n-            Validate.isFalse(params[0] instanceof Map, \"maybe you can use bindGet method! \");\n+            Validate.isFalse(params[0] instanceof Map, \"maybe you can use bind method! \");\n         }\n     }\n \ndiff --git a/src/main/java/im/nll/data/dq/DQ.java b/src/main/java/im/nll/data/dq/DQ.java\nindex 2eb56f9..e2b1aa7 100644\n--- a/src/main/java/im/nll/data/dq/DQ.java\n+++ b/src/main/java/im/nll/data/dq/DQ.java\n@@ -158,7 +158,7 @@\n \n     private static void validateParameter(Object[] params) {\n         if (params.length \u003e 0) {\n-            Validate.isFalse(params[0] instanceof Map, \"maybe you can use bindGet method! \");\n+            Validate.isFalse(params[0] instanceof Map, \"maybe you can use bind method! \");\n         }\n     }\n \n",
    "projectName": "dq",
    "lineNum": 161,
    "nodeStartChar": 5083,
    "before": "\"maybe you can use bindGet method! \"",
    "after": "\"maybe you can use bind method! \""
  },
  {
    "commitSHA1": "9a537a26fa068f545bfdb813fba72bc8ad97211f",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 92339d9..7b4bd55 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -142,7 +142,8 @@\n             }\n \n             final String requestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(key.substring(uriPath.length()));\n-            final String absoluteRequestedResourcePath \u003d this.resourcePath + requestedResourcePath;\n+            final String absoluteRequestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(\n+                    this.resourcePath + requestedResourcePath);\n \n             URL requestedResourceURL \u003d Resources.getResource(absoluteRequestedResourcePath);\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 92339d9..7b4bd55 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -142,7 +142,8 @@\n             }\n \n             final String requestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(key.substring(uriPath.length()));\n-            final String absoluteRequestedResourcePath \u003d this.resourcePath + requestedResourcePath;\n+            final String absoluteRequestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(\n+                    this.resourcePath + requestedResourcePath);\n \n             URL requestedResourceURL \u003d Resources.getResource(absoluteRequestedResourcePath);\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 145,
    "nodeStartChar": 6592,
    "before": "this.resourcePath + requestedResourcePath",
    "after": "CharMatcher.is(\u0027/\u0027).trimFrom(this.resourcePath + requestedResourcePath)"
  },
  {
    "commitSHA1": "d7951bb826994ee95923a3efe59161185057371c",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 92339d9..7b4bd55 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -142,7 +142,8 @@\n             }\n \n             final String requestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(key.substring(uriPath.length()));\n-            final String absoluteRequestedResourcePath \u003d this.resourcePath + requestedResourcePath;\n+            final String absoluteRequestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(\n+                    this.resourcePath + requestedResourcePath);\n \n             URL requestedResourceURL \u003d Resources.getResource(absoluteRequestedResourcePath);\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 92339d9..7b4bd55 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -142,7 +142,8 @@\n             }\n \n             final String requestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(key.substring(uriPath.length()));\n-            final String absoluteRequestedResourcePath \u003d this.resourcePath + requestedResourcePath;\n+            final String absoluteRequestedResourcePath \u003d CharMatcher.is(\u0027/\u0027).trimFrom(\n+                    this.resourcePath + requestedResourcePath);\n \n             URL requestedResourceURL \u003d Resources.getResource(absoluteRequestedResourcePath);\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 145,
    "nodeStartChar": 6592,
    "before": "this.resourcePath + requestedResourcePath",
    "after": "CharMatcher.is(\u0027/\u0027).trimFrom(this.resourcePath + requestedResourcePath)"
  },
  {
    "commitSHA1": "4ec1c42b497c64ffbf9c5cc75363e2cf9b9f324a",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 99,
    "nodeStartChar": 4726,
    "before": "\u0027\"\u0027 + asset.getETag() + \u0027\"\u0027",
    "after": "asset.getETag()"
  },
  {
    "commitSHA1": "4ec1c42b497c64ffbf9c5cc75363e2cf9b9f324a",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 256,
    "nodeStartChar": 10310,
    "before": "newETag",
    "after": "\u0027\"\u0027 + newETag + \u0027\"\u0027"
  },
  {
    "commitSHA1": "cba399bf6eafb05450a93dac85d23d3201756555",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 99,
    "nodeStartChar": 4726,
    "before": "\u0027\"\u0027 + asset.getETag() + \u0027\"\u0027",
    "after": "asset.getETag()"
  },
  {
    "commitSHA1": "cba399bf6eafb05450a93dac85d23d3201756555",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex 4499b44..a0c640d 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n+            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d newETag;\n+                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 256,
    "nodeStartChar": 10310,
    "before": "newETag",
    "after": "\u0027\"\u0027 + newETag + \u0027\"\u0027"
  },
  {
    "commitSHA1": "1f5a112fb676762399bbde35f4a56e86a5777dea",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 99,
    "nodeStartChar": 4726,
    "before": "asset.getETag()",
    "after": "\u0027\"\u0027 + asset.getETag() + \u0027\"\u0027"
  },
  {
    "commitSHA1": "1f5a112fb676762399bbde35f4a56e86a5777dea",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 256,
    "nodeStartChar": 10298,
    "before": "\u0027\"\u0027 + newETag + \u0027\"\u0027",
    "after": "newETag"
  },
  {
    "commitSHA1": "1f5a112fb676762399bbde35f4a56e86a5777dea",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 275,
    "nodeStartChar": 10990,
    "before": "\u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027",
    "after": "Hashing.murmur3_128().hashBytes(resource).toString()"
  },
  {
    "commitSHA1": "7371f4cd82e24959d35f095d93c33af77d76e842",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 99,
    "nodeStartChar": 4726,
    "before": "asset.getETag()",
    "after": "\u0027\"\u0027 + asset.getETag() + \u0027\"\u0027"
  },
  {
    "commitSHA1": "7371f4cd82e24959d35f095d93c33af77d76e842",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 256,
    "nodeStartChar": 10298,
    "before": "\u0027\"\u0027 + newETag + \u0027\"\u0027",
    "after": "newETag"
  },
  {
    "commitSHA1": "7371f4cd82e24959d35f095d93c33af77d76e842",
    "commitFile": "src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java",
    "patch": "diff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \ndiff --git a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\nindex e9a6168..4499b44 100644\n--- a/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n+++ b/src/main/java/com/bazaarvoice/dropwizard/assets/AssetServlet.java\n@@ -96,7 +96,7 @@\n             }\n \n             resp.setDateHeader(HttpHeaders.LAST_MODIFIED, asset.getLastModifiedTime());\n-            resp.setHeader(HttpHeaders.ETAG, asset.getETag());\n+            resp.setHeader(HttpHeaders.ETAG, \u0027\"\u0027 + asset.getETag() + \u0027\"\u0027);\n \n             Buffer mimeType \u003d mimeTypes.getMimeByExtension(req.getRequestURI());\n             if (mimeType \u003d\u003d null) {\n@@ -253,7 +253,7 @@\n                 String newETag \u003d Hashing.murmur3_128().hashBytes(newBytes).toString();\n \n                 bytes \u003d newBytes;\n-                eTag \u003d \u0027\"\u0027 + newETag + \u0027\"\u0027;\n+                eTag \u003d newETag;\n                 lastModifiedTime \u003d file.lastModified();\n             } catch (IOException e) {\n                 // Ignored, don\u0027t update anything\n@@ -272,7 +272,7 @@\n \n         private StaticAsset(byte[] resource, long lastModifiedTime) {\n             this.resource \u003d resource;\n-            this.eTag \u003d \u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027;\n+            this.eTag \u003d Hashing.murmur3_128().hashBytes(resource).toString();\n             this.lastModifiedTime \u003d lastModifiedTime;\n         }\n \n",
    "projectName": "dropwizard-configurable-assets-bundle",
    "lineNum": 275,
    "nodeStartChar": 10990,
    "before": "\u0027\"\u0027 + Hashing.murmur3_128().hashBytes(resource).toString() + \u0027\"\u0027",
    "after": "Hashing.murmur3_128().hashBytes(resource).toString()"
  },
  {
    "commitSHA1": "260f73b85074bd191e58d816186aa2beec6bb1bd",
    "commitFile": "dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java",
    "patch": "diff --git a/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java b/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java\nindex 6eee84c..217bc82 100644\n--- a/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java\n+++ b/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java\n@@ -33,7 +33,7 @@\n     public JobManager(JobConfiguration configuration, Job... jobs) {\n         this.configuration \u003d configuration;\n         this.jobs \u003d jobs;\n-        if (configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n+        if (configuration !\u003d null \u0026\u0026 configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n             defaultTimezone \u003d TimeZone.getTimeZone(configuration.getQuartzConfiguration().get(\"de.spinscale.dropwizard.jobs.timezone\"));\n         } else {\n             defaultTimezone \u003d TimeZone.getDefault();\ndiff --git a/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java b/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java\nindex 6eee84c..217bc82 100644\n--- a/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java\n+++ b/dropwizard-jobs-core/src/main/java/io/dropwizard/jobs/JobManager.java\n@@ -33,7 +33,7 @@\n     public JobManager(JobConfiguration configuration, Job... jobs) {\n         this.configuration \u003d configuration;\n         this.jobs \u003d jobs;\n-        if (configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n+        if (configuration !\u003d null \u0026\u0026 configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n             defaultTimezone \u003d TimeZone.getTimeZone(configuration.getQuartzConfiguration().get(\"de.spinscale.dropwizard.jobs.timezone\"));\n         } else {\n             defaultTimezone \u003d TimeZone.getDefault();\n",
    "projectName": "dropwizard-jobs",
    "lineNum": 36,
    "nodeStartChar": 1061,
    "before": "configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")",
    "after": "configuration !\u003d null \u0026\u0026 configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")"
  },
  {
    "commitSHA1": "12097c6fff1ff4d3529b71766ee905097292035b",
    "commitFile": "dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java",
    "patch": "diff --git a/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java b/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java\nindex 1a6e7be..b7f6c70 100644\n--- a/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java\n+++ b/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java\n@@ -45,7 +45,7 @@\n     public JobManager(JobConfiguration configuration, Job... jobs) {\n         this.configuration \u003d configuration;\n         this.jobs \u003d jobs;\n-        if (configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n+        if (configuration !\u003d null \u0026\u0026 configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n             defaultTimezone \u003d TimeZone.getTimeZone(configuration.getQuartzConfiguration().get(\"de.spinscale.dropwizard.jobs.timezone\"));\n         } else {\n             defaultTimezone \u003d TimeZone.getDefault();\ndiff --git a/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java b/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java\nindex 1a6e7be..b7f6c70 100644\n--- a/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java\n+++ b/dropwizard-jobs-core/src/main/java/de/spinscale/dropwizard/jobs/JobManager.java\n@@ -45,7 +45,7 @@\n     public JobManager(JobConfiguration configuration, Job... jobs) {\n         this.configuration \u003d configuration;\n         this.jobs \u003d jobs;\n-        if (configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n+        if (configuration !\u003d null \u0026\u0026 configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n             defaultTimezone \u003d TimeZone.getTimeZone(configuration.getQuartzConfiguration().get(\"de.spinscale.dropwizard.jobs.timezone\"));\n         } else {\n             defaultTimezone \u003d TimeZone.getDefault();\n",
    "projectName": "dropwizard-jobs",
    "lineNum": 48,
    "nodeStartChar": 1596,
    "before": "configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")",
    "after": "configuration !\u003d null \u0026\u0026 configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")"
  },
  {
    "commitSHA1": "9a0c92126d3c0fd909c232a2c265441253edc1c4",
    "commitFile": "src/test/java/de/spinscale/dropwizard/jobs/JobsBundleTest.java",
    "patch": "diff --git a/src/test/java/de/spinscale/dropwizard/jobs/JobsBundleTest.java b/src/test/java/de/spinscale/dropwizard/jobs/JobsBundleTest.java\nindex 21418c4..dad8b24 100644\n--- a/src/test/java/de/spinscale/dropwizard/jobs/JobsBundleTest.java\n+++ b/src/test/java/de/spinscale/dropwizard/jobs/JobsBundleTest.java\n@@ -20,7 +20,7 @@\n     @Test\n     public void assertJobsBundleIsWorking() {\n \n-        when(environment.lifecycle()).thenReturn(mock(LifecycleEnvironment.class));\n+        when(environment.lifecycle()).thenReturn(applicationContext);\n         new JobsBundle().run(environment);\n \n         final ArgumentCaptor\u003cJobManager\u003e jobManagerCaptor \u003d ArgumentCaptor.forClass(JobManager.class);\n",
    "projectName": "dropwizard-jobs",
    "lineNum": 23,
    "nodeStartChar": 761,
    "before": "mock(LifecycleEnvironment.class)",
    "after": "applicationContext"
  },
  {
    "commitSHA1": "6edad535768ffc7b6cb8f62341eab9dbaeeced97",
    "commitFile": "src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java",
    "patch": "diff --git a/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java b/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java\nindex 53bec76..ac327ed 100644\n--- a/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java\n+++ b/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java\n@@ -87,7 +87,7 @@\n     public abstract StatefulConnection\u003cK, V\u003e build(final HealthCheckRegistry healthChecks, final LifecycleEnvironment lifecycle,\n                                                    final MetricRegistry metrics, @Nullable final Tracing tracing);\n \n-    List\u003cEventVisitor\u003e buildEventVisitors(final MetricRegistry metrics) {\n+    protected List\u003cEventVisitor\u003e buildEventVisitors(final MetricRegistry metrics) {\n         // Extract this, and the event wrapper builders, to Dropwizard factories, if more event types are added frequently enough?\n         return ImmutableList.of(\n                 new ClusterTopologyChangedEventVisitor(name, metrics),\n",
    "projectName": "dropwizard-redis",
    "lineNum": 90,
    "nodeStartChar": 3340,
    "before": "List\u003cEventVisitor\u003e buildEventVisitors(final MetricRegistry metrics){   return ImmutableList.of(new ClusterTopologyChangedEventVisitor(name,metrics),new CommandLatencyEventVisitor(name,metrics),new ConnectedEventVisitor(name,metrics),new ConnectionActivatedEventVisitor(name,metrics),new ConnectionDeactivatedEventVisitor(name,metrics),new DisconnectedEventVisitor(name,metrics)); } ",
    "after": "protected List\u003cEventVisitor\u003e buildEventVisitors(final MetricRegistry metrics){   return ImmutableList.of(new ClusterTopologyChangedEventVisitor(name,metrics),new CommandLatencyEventVisitor(name,metrics),new ConnectedEventVisitor(name,metrics),new ConnectionActivatedEventVisitor(name,metrics),new ConnectionDeactivatedEventVisitor(name,metrics),new DisconnectedEventVisitor(name,metrics)); } "
  },
  {
    "commitSHA1": "882e8d62a63322217d95970a148f41159ad8eff8",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/TypeUtilities.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\nindex 25cccd0..ee329fb 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n@@ -241,7 +241,7 @@\n         }\n         if(sourceType.isPrimitive()) {\n             if(sourceType \u003d\u003d void.class) {\n-                return true; // Void can be losslessly represented by any type\n+                return false; // Void can\u0027t be losslessly represented by any type\n             }\n             if(targetType.isPrimitive()) {\n                 return isProperPrimitiveLosslessSubtype(sourceType, targetType);\ndiff --git a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\nindex 25cccd0..ee329fb 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n@@ -241,7 +241,7 @@\n         }\n         if(sourceType.isPrimitive()) {\n             if(sourceType \u003d\u003d void.class) {\n-                return true; // Void can be losslessly represented by any type\n+                return false; // Void can\u0027t be losslessly represented by any type\n             }\n             if(targetType.isPrimitive()) {\n                 return isProperPrimitiveLosslessSubtype(sourceType, targetType);\n",
    "projectName": "dynalink",
    "lineNum": 244,
    "nodeStartChar": 10927,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "c3d59f2c534e0fc14134281baccb838c88f291cb",
    "commitFile": "src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\nindex 5909ab2..c8a3b7b 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n@@ -54,7 +54,7 @@\n             if(name.startsWith(\"get\") \u0026\u0026 name.length() \u003e 3 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n                 addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n             } else if(name.startsWith(\"is\") \u0026\u0026 name.length() \u003e 2 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n-                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n+                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(2)));\n             }\n         }\n         return descs.values();\ndiff --git a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\nindex 5909ab2..c8a3b7b 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n@@ -54,7 +54,7 @@\n             if(name.startsWith(\"get\") \u0026\u0026 name.length() \u003e 3 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n                 addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n             } else if(name.startsWith(\"is\") \u0026\u0026 name.length() \u003e 2 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n-                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n+                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(2)));\n             }\n         }\n         return descs.values();\n",
    "projectName": "dynalink",
    "lineNum": 57,
    "nodeStartChar": 2411,
    "before": "3",
    "after": "2"
  },
  {
    "commitSHA1": "193fe9a1de6dbee0928768bdfd92cd2cf4875d93",
    "commitFile": "src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java b/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java\nindex 73cd2b2..afb6488 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java\n@@ -74,7 +74,7 @@\n                 return false;\r\n             }\r\n         }\r\n-        return true;\r\n+        return !tok.hasMoreTokens();\r\n     }\r\n \r\n     private static boolean typeNameMatches(String typeName, Class\u003c?\u003e type) {\r\ndiff --git a/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java b/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java\nindex 0ec0ba8..d7eed47 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java\n@@ -72,7 +72,7 @@\n             }\r\n             default: {\r\n                 throw new BootstrapMethodError(\"Can\u0027t choose among \" + matchingMethods + \" for argument types \"\r\n-                        + paramTypes);\r\n+                        + paramTypes + \" for method \" + name);\r\n             }\r\n         }\r\n     }\r\ndiff --git a/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java b/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java\nindex 73cd2b2..afb6488 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/DynamicMethod.java\n@@ -74,7 +74,7 @@\n                 return false;\r\n             }\r\n         }\r\n-        return true;\r\n+        return !tok.hasMoreTokens();\r\n     }\r\n \r\n     private static boolean typeNameMatches(String typeName, Class\u003c?\u003e type) {\r\n",
    "projectName": "dynalink",
    "lineNum": 77,
    "nodeStartChar": 3874,
    "before": "true",
    "after": "!tok.hasMoreTokens()"
  },
  {
    "commitSHA1": "193fe9a1de6dbee0928768bdfd92cd2cf4875d93",
    "commitFile": "src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java b/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java\nindex 0ec0ba8..d7eed47 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/OverloadedDynamicMethod.java\n@@ -72,7 +72,7 @@\n             }\r\n             default: {\r\n                 throw new BootstrapMethodError(\"Can\u0027t choose among \" + matchingMethods + \" for argument types \"\r\n-                        + paramTypes);\r\n+                        + paramTypes + \" for method \" + name);\r\n             }\r\n         }\r\n     }\r\n",
    "projectName": "dynalink",
    "lineNum": 74,
    "nodeStartChar": 2466,
    "before": "\"Can\u0027t choose among \" + matchingMethods + \" for argument types \"+ paramTypes",
    "after": "\"Can\u0027t choose among \" + matchingMethods + \" for argument types \"+ paramTypes+ \" for method \"+ name"
  },
  {
    "commitSHA1": "cc91903e0f3647e8f1f88374b5e2a1f63221a088",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex 94ead0a..3c966a3 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -115,7 +115,7 @@\n         final MethodType toType \u003d newHandle.type();\r\n         final int l \u003d toType.parameterCount();\r\n         if(l !\u003d fromType.parameterCount()) {\r\n-            throw new WrongMethodTypeException(\"Parameter counts differ\");\r\n+            throw new WrongMethodTypeException(\"Parameter counts differ: \" + handle.type() + \" vs. \" + fromType);\r\n         }\r\n         int pos \u003d 0;\r\n         final List\u003cMethodHandle\u003e converters \u003d new LinkedList\u003cMethodHandle\u003e();\r\ndiff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex 94ead0a..3c966a3 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -115,7 +115,7 @@\n         final MethodType toType \u003d newHandle.type();\r\n         final int l \u003d toType.parameterCount();\r\n         if(l !\u003d fromType.parameterCount()) {\r\n-            throw new WrongMethodTypeException(\"Parameter counts differ\");\r\n+            throw new WrongMethodTypeException(\"Parameter counts differ: \" + handle.type() + \" vs. \" + fromType);\r\n         }\r\n         int pos \u003d 0;\r\n         final List\u003cMethodHandle\u003e converters \u003d new LinkedList\u003cMethodHandle\u003e();\r\n",
    "projectName": "dynalink",
    "lineNum": 118,
    "nodeStartChar": 5445,
    "before": "\"Parameter counts differ\"",
    "after": "\"Parameter counts differ: \" + handle.type() + \" vs. \"+ fromType"
  },
  {
    "commitSHA1": "21e82f2c943873a1618ba48773de9cdcdd7ff143",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex 545f200..1b9799e 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -157,7 +157,7 @@\n             if(!TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n                 return Comparison.TYPE_1_BETTER;\r\n             }\r\n-        } else if(TypeUtilities.isMethodInvocationConvertible(targetType2, sourceType)) {\r\n+        } else if(TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n             return Comparison.TYPE_2_BETTER;\r\n         }\r\n         for(ConversionComparator comparator: comparators) {\r\ndiff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex 545f200..1b9799e 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -157,7 +157,7 @@\n             if(!TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n                 return Comparison.TYPE_1_BETTER;\r\n             }\r\n-        } else if(TypeUtilities.isMethodInvocationConvertible(targetType2, sourceType)) {\r\n+        } else if(TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n             return Comparison.TYPE_2_BETTER;\r\n         }\r\n         for(ConversionComparator comparator: comparators) {\r\n",
    "projectName": "dynalink",
    "lineNum": 160,
    "nodeStartChar": 7703,
    "before": "TypeUtilities.isMethodInvocationConvertible(targetType2,sourceType)",
    "after": "TypeUtilities.isMethodInvocationConvertible(sourceType,targetType2)"
  },
  {
    "commitSHA1": "7ebb5c1d44f5ee43016e1db8807e28971f0bdb03",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex f9629b0..8bcb3d3 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -55,7 +55,7 @@\n      *\r\n      * @param factories the {@link GuardingTypeConverterFactory} instances to compose.\r\n      */\r\n-    public TypeConverterFactory(Iterable\u003cGuardingTypeConverterFactory\u003e factories) {\r\n+    public TypeConverterFactory(Iterable\u003c? extends GuardingTypeConverterFactory\u003e factories) {\r\n         final List\u003cGuardingTypeConverterFactory\u003e l \u003d new LinkedList\u003cGuardingTypeConverterFactory\u003e();\r\n         for(GuardingTypeConverterFactory factory: factories) {\r\n             l.add(factory);\r\ndiff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex f9629b0..8bcb3d3 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -55,7 +55,7 @@\n      *\r\n      * @param factories the {@link GuardingTypeConverterFactory} instances to compose.\r\n      */\r\n-    public TypeConverterFactory(Iterable\u003cGuardingTypeConverterFactory\u003e factories) {\r\n+    public TypeConverterFactory(Iterable\u003c? extends GuardingTypeConverterFactory\u003e factories) {\r\n         final List\u003cGuardingTypeConverterFactory\u003e l \u003d new LinkedList\u003cGuardingTypeConverterFactory\u003e();\r\n         for(GuardingTypeConverterFactory factory: factories) {\r\n             l.add(factory);\r\n",
    "projectName": "dynalink",
    "lineNum": 58,
    "nodeStartChar": 2221,
    "before": "GuardingTypeConverterFactory",
    "after": "? extends GuardingTypeConverterFactory"
  },
  {
    "commitSHA1": "b7df316e5f549671890b1c047b72c229bda64dfc",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/Guards.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/Guards.java b/src/main/java/org/dynalang/dynalink/support/Guards.java\nindex 97e732b..3888ba8 100644\n--- a/src/main/java/org/dynalang/dynalink/support/Guards.java\n+++ b/src/main/java/org/dynalang/dynalink/support/Guards.java\n@@ -129,8 +129,9 @@\n         final MethodHandle boundToClass \u003d\r\n                 MethodHandles.insertArguments(test, 0, classOrRef);\r\n         final MethodHandle narrowed \u003d\r\n-                MethodHandles.permuteArguments(boundToClass, type\r\n-                        .changeReturnType(Boolean.TYPE), new int[] { pos });\r\n+                MethodHandles.permuteArguments(boundToClass.asType(\r\n+                        boundToClass.type().changeParameterType(0, type.parameterType(pos))),\r\n+                        type.changeReturnType(Boolean.TYPE), new int[] { pos });\r\n         return narrowed;\r\n     }\r\n \r\ndiff --git a/src/main/java/org/dynalang/dynalink/support/Guards.java b/src/main/java/org/dynalang/dynalink/support/Guards.java\nindex 97e732b..3888ba8 100644\n--- a/src/main/java/org/dynalang/dynalink/support/Guards.java\n+++ b/src/main/java/org/dynalang/dynalink/support/Guards.java\n@@ -129,8 +129,9 @@\n         final MethodHandle boundToClass \u003d\r\n                 MethodHandles.insertArguments(test, 0, classOrRef);\r\n         final MethodHandle narrowed \u003d\r\n-                MethodHandles.permuteArguments(boundToClass, type\r\n-                        .changeReturnType(Boolean.TYPE), new int[] { pos });\r\n+                MethodHandles.permuteArguments(boundToClass.asType(\r\n+                        boundToClass.type().changeParameterType(0, type.parameterType(pos))),\r\n+                        type.changeReturnType(Boolean.TYPE), new int[] { pos });\r\n         return narrowed;\r\n     }\r\n \r\n",
    "projectName": "dynalink",
    "lineNum": 132,
    "nodeStartChar": 5184,
    "before": "boundToClass",
    "after": "boundToClass.asType(boundToClass.type().changeParameterType(0,type.parameterType(pos)))"
  },
  {
    "commitSHA1": "4ec73632a5928dd465f965b432dae370823460d7",
    "commitFile": "easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java",
    "patch": "diff --git a/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java b/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java\nindex 9cfbc08..c32a2bb 100644\n--- a/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java\n+++ b/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java\n@@ -156,7 +156,7 @@\n         // Given\n         when(conditionalRule.evaluate(facts)).thenReturn(true);\n         MyRule rule \u003d new MyRule();\n-        conditionalRuleGroup \u003d new ConditionalRuleGroup(\"myConditinalRule\");\n+        conditionalRuleGroup \u003d new ConditionalRuleGroup(\"myConditionalRule\");\n         conditionalRuleGroup.addRule(rule);\n         when(conditionalRule.compareTo(any(Rule.class))).thenReturn(1);\n         conditionalRuleGroup.addRule(conditionalRule);\n@@ -215,7 +215,7 @@\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n-    public void aRuleWithoutPriorityHasAHighPriororty() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+    public void aRuleWithoutPriorityHasAHighPriority() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n         MyOtherRule rule1 \u003d new MyOtherRule(3);\n         conditionalRuleGroup.addRule(rule1);\n         conditionalRuleGroup.addRule(new UnprioritizedRule());\ndiff --git a/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java b/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java\nindex 9cfbc08..c32a2bb 100644\n--- a/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java\n+++ b/easy-rules-support/src/test/java/org/jeasy/rules/support/ConditionalRuleGroupTest.java\n@@ -156,7 +156,7 @@\n         // Given\n         when(conditionalRule.evaluate(facts)).thenReturn(true);\n         MyRule rule \u003d new MyRule();\n-        conditionalRuleGroup \u003d new ConditionalRuleGroup(\"myConditinalRule\");\n+        conditionalRuleGroup \u003d new ConditionalRuleGroup(\"myConditionalRule\");\n         conditionalRuleGroup.addRule(rule);\n         when(conditionalRule.compareTo(any(Rule.class))).thenReturn(1);\n         conditionalRuleGroup.addRule(conditionalRule);\n@@ -215,7 +215,7 @@\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n-    public void aRuleWithoutPriorityHasAHighPriororty() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+    public void aRuleWithoutPriorityHasAHighPriority() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n         MyOtherRule rule1 \u003d new MyOtherRule(3);\n         conditionalRuleGroup.addRule(rule1);\n         conditionalRuleGroup.addRule(new UnprioritizedRule());\n",
    "projectName": "easy-rules",
    "lineNum": 159,
    "nodeStartChar": 5832,
    "before": "\"myConditinalRule\"",
    "after": "\"myConditionalRule\""
  },
  {
    "commitSHA1": "d1f8422b027651ab6af4c092fa22d83af6baae16",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\nindex 233d3af..11b58c0 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n@@ -47,7 +47,7 @@\n  */\n public final class DefaultRulesEngine implements RulesEngine {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngine.class);\n \n     private RulesEngineParameters parameters;\n     private List\u003cRuleListener\u003e ruleListeners;\ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\nindex 233d3af..11b58c0 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n@@ -47,7 +47,7 @@\n  */\n public final class DefaultRulesEngine implements RulesEngine {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngine.class);\n \n     private RulesEngineParameters parameters;\n     private List\u003cRuleListener\u003e ruleListeners;\n",
    "projectName": "easy-rules",
    "lineNum": 50,
    "nodeStartChar": 2016,
    "before": "DefaultRuleListener",
    "after": "DefaultRulesEngine"
  },
  {
    "commitSHA1": "abad973745bce4abe0ad426079a5bcd214c2f8c6",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\nindex 7434eb2..46bc48b 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n@@ -34,7 +34,7 @@\n \n class DefaultRulesEngineListener implements RulesEngineListener {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngineListener.class);\n \n     private RulesEngineParameters parameters;\n \ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\nindex 7434eb2..46bc48b 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n@@ -34,7 +34,7 @@\n \n class DefaultRulesEngineListener implements RulesEngineListener {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngineListener.class);\n \n     private RulesEngineParameters parameters;\n \n",
    "projectName": "easy-rules",
    "lineNum": 37,
    "nodeStartChar": 1589,
    "before": "DefaultRuleListener",
    "after": "DefaultRulesEngineListener"
  },
  {
    "commitSHA1": "c2f8c4643b33d631be5883dea322dcc77308b915",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\nindex ee0a04e..2a63168 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n@@ -146,7 +146,7 @@\n             if (annotations.length \u003d\u003d 1) {\n                 String factName \u003d ((Fact) (annotations[0])).value(); //validated upfront.\n                 Object fact \u003d facts.get(factName);\n-                if (fact \u003d\u003d null) {\n+                if (fact \u003d\u003d null \u0026\u0026 !facts.asMap().containsKey(factName)) {\n                     throw new NoSuchFactException(format(\"No fact named \u0027%s\u0027 found in known facts: \\n%s\", factName, facts), factName);\n                 }\n                 actualParameters.add(fact);\ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\nindex ee0a04e..2a63168 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n@@ -146,7 +146,7 @@\n             if (annotations.length \u003d\u003d 1) {\n                 String factName \u003d ((Fact) (annotations[0])).value(); //validated upfront.\n                 Object fact \u003d facts.get(factName);\n-                if (fact \u003d\u003d null) {\n+                if (fact \u003d\u003d null \u0026\u0026 !facts.asMap().containsKey(factName)) {\n                     throw new NoSuchFactException(format(\"No fact named \u0027%s\u0027 found in known facts: \\n%s\", factName, facts), factName);\n                 }\n                 actualParameters.add(fact);\n",
    "projectName": "easy-rules",
    "lineNum": 149,
    "nodeStartChar": 6129,
    "before": "fact \u003d\u003d null",
    "after": "fact \u003d\u003d null \u0026\u0026 !facts.asMap().containsKey(factName)"
  },
  {
    "commitSHA1": "7cdefab7c667d8226917f0913b6bb18812ef0aef",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java\nindex d8f849a..dbe88b3 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java\n@@ -63,7 +63,7 @@\n         Enumeration\u003cString\u003e loggerNames \u003d LogManager.getLogManager().getLoggerNames();\n         while (loggerNames.hasMoreElements()) {\n             String loggerName \u003d loggerNames.nextElement();\n-            if (loggerName.startsWith(\"org.easyrules\")) {\n+            if (loggerName.startsWith(\"org.jeasy.rules\")) {\n                 muteLogger(loggerName);\n             }\n         }\ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java\nindex d8f849a..dbe88b3 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/Utils.java\n@@ -63,7 +63,7 @@\n         Enumeration\u003cString\u003e loggerNames \u003d LogManager.getLogManager().getLoggerNames();\n         while (loggerNames.hasMoreElements()) {\n             String loggerName \u003d loggerNames.nextElement();\n-            if (loggerName.startsWith(\"org.easyrules\")) {\n+            if (loggerName.startsWith(\"org.jeasy.rules\")) {\n                 muteLogger(loggerName);\n             }\n         }\n",
    "projectName": "easy-rules",
    "lineNum": 66,
    "nodeStartChar": 2505,
    "before": "\"org.easyrules\"",
    "after": "\"org.jeasy.rules\""
  },
  {
    "commitSHA1": "7562bc72f2a5e70160813e06c68669249e522c91",
    "commitFile": "easyrules-core/src/main/java/org/easyrules/core/BasicRule.java",
    "patch": "diff --git a/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java b/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java\nindex fa62479..ac4bf15 100644\n--- a/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java\n+++ b/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java\n@@ -162,7 +162,7 @@\n         } else if (getPriority() \u003e rule.getPriority()) {\n             return 1;\n         } else {\n-            return name.compareTo(rule.getName());\n+            return getName().compareTo(rule.getName());\n         }\n     }\n \ndiff --git a/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java b/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java\nindex fa62479..ac4bf15 100644\n--- a/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java\n+++ b/easyrules-core/src/main/java/org/easyrules/core/BasicRule.java\n@@ -162,7 +162,7 @@\n         } else if (getPriority() \u003e rule.getPriority()) {\n             return 1;\n         } else {\n-            return name.compareTo(rule.getName());\n+            return getName().compareTo(rule.getName());\n         }\n     }\n \n",
    "projectName": "easy-rules",
    "lineNum": 165,
    "nodeStartChar": 4198,
    "before": "name",
    "after": "getName()"
  },
  {
    "commitSHA1": "074daf8471e04f903a014bb5b4b94d13282e10f0",
    "commitFile": "easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java",
    "patch": "diff --git a/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java b/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java\nindex 99944ba..2a12c0e 100644\n--- a/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java\n+++ b/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java\n@@ -29,7 +29,7 @@\n             engine.fireRules();\n         }\n         catch (Exception e) {\n-            throw new JobExecutionException(\"An exception occurred during batch engine execution\", e);\n+            throw new JobExecutionException(\"An exception occurred during rules engine execution\", e);\n         }\n     }\n }\ndiff --git a/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java b/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java\nindex 99944ba..2a12c0e 100644\n--- a/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java\n+++ b/easyrules-quartz/src/main/java/org/easyrules/quartz/RulesEngineJob.java\n@@ -29,7 +29,7 @@\n             engine.fireRules();\n         }\n         catch (Exception e) {\n-            throw new JobExecutionException(\"An exception occurred during batch engine execution\", e);\n+            throw new JobExecutionException(\"An exception occurred during rules engine execution\", e);\n         }\n     }\n }\n",
    "projectName": "easy-rules",
    "lineNum": 32,
    "nodeStartChar": 746,
    "before": "\"An exception occurred during batch engine execution\"",
    "after": "\"An exception occurred during rules engine execution\""
  },
  {
    "commitSHA1": "cc0005afe432a886bc962c10a2773c16958a9737",
    "commitFile": "easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java",
    "patch": "diff --git a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\nindex de868dc..d36dbe7 100644\n--- a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n+++ b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n@@ -6,7 +6,7 @@\n \n import java.util.Date;\n \n-@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if when minutes are even\")\n+@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if minutes are even\")\n public class TimeRule {\n \n     private Date now;\n@@ -19,7 +19,7 @@\n \n     @Action\n     public void printTime() {\n-        System.out.println(now);\n+        System.out.println(\"Minutes in \" + now + \" are even\");\n     }\n \n }\ndiff --git a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\nindex de868dc..d36dbe7 100644\n--- a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n+++ b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n@@ -6,7 +6,7 @@\n \n import java.util.Date;\n \n-@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if when minutes are even\")\n+@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if minutes are even\")\n public class TimeRule {\n \n     private Date now;\n@@ -19,7 +19,7 @@\n \n     @Action\n     public void printTime() {\n-        System.out.println(now);\n+        System.out.println(\"Minutes in \" + now + \" are even\");\n     }\n \n }\n",
    "projectName": "easy-rules",
    "lineNum": 9,
    "nodeStartChar": 229,
    "before": "\"Print the current time only if when minutes are even\"",
    "after": "\"Print the current time only if minutes are even\""
  },
  {
    "commitSHA1": "cc0005afe432a886bc962c10a2773c16958a9737",
    "commitFile": "easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java",
    "patch": "diff --git a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\nindex de868dc..d36dbe7 100644\n--- a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n+++ b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n@@ -6,7 +6,7 @@\n \n import java.util.Date;\n \n-@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if when minutes are even\")\n+@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if minutes are even\")\n public class TimeRule {\n \n     private Date now;\n@@ -19,7 +19,7 @@\n \n     @Action\n     public void printTime() {\n-        System.out.println(now);\n+        System.out.println(\"Minutes in \" + now + \" are even\");\n     }\n \n }\ndiff --git a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\nindex de868dc..d36dbe7 100644\n--- a/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n+++ b/easyrules-samples/src/main/java/org/easyrules/samples/scheduling/TimeRule.java\n@@ -6,7 +6,7 @@\n \n import java.util.Date;\n \n-@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if when minutes are even\")\n+@Rule(name \u003d \"time rule\", description \u003d \"Print the current time only if minutes are even\")\n public class TimeRule {\n \n     private Date now;\n@@ -19,7 +19,7 @@\n \n     @Action\n     public void printTime() {\n-        System.out.println(now);\n+        System.out.println(\"Minutes in \" + now + \" are even\");\n     }\n \n }\n",
    "projectName": "easy-rules",
    "lineNum": 22,
    "nodeStartChar": 525,
    "before": "now",
    "after": "\"Minutes in \" + now + \" are even\""
  },
  {
    "commitSHA1": "a8b98a03743d6b56e36a4ee93abf90b72e36bb9b",
    "commitFile": "easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java",
    "patch": "diff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\ndiff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\n",
    "projectName": "easy-rules",
    "lineNum": 115,
    "nodeStartChar": 3796,
    "before": "\"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\"",
    "after": "\"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\""
  },
  {
    "commitSHA1": "a8b98a03743d6b56e36a4ee93abf90b72e36bb9b",
    "commitFile": "easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java",
    "patch": "diff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\ndiff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\n",
    "projectName": "easy-rules",
    "lineNum": 122,
    "nodeStartChar": 4147,
    "before": "\"Rule \u0027{}\u0027 triggered.\"",
    "after": "\"Rule {0} triggered.\""
  },
  {
    "commitSHA1": "a8b98a03743d6b56e36a4ee93abf90b72e36bb9b",
    "commitFile": "easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java",
    "patch": "diff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\ndiff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\n",
    "projectName": "easy-rules",
    "lineNum": 125,
    "nodeStartChar": 4310,
    "before": "\"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\"",
    "after": "\"Rule {0} performed successfully.\""
  },
  {
    "commitSHA1": "a8b98a03743d6b56e36a4ee93abf90b72e36bb9b",
    "commitFile": "easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java",
    "patch": "diff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\ndiff --git a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\nindex d894bf2..5dc33b4 100644\n--- a/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n+++ b/easyrules-core/src/main/java/io/github/benas/easyrules/core/DefaultRulesEngine.java\n@@ -112,17 +112,17 @@\n         for (Rule rule : rules) {\n \n             if (rule.getPriority() \u003e rulePriorityThreshold) {\n-                LOGGER.log(Level.INFO, \"Rules priority threshold {} exceeded at rule {} (priority\u003d{}), next applicable rules will be skipped.\",\n+                LOGGER.log(Level.INFO, \"Rules priority threshold {0} exceeded at rule {1} (priority\u003d{2}), next applicable rules will be skipped.\",\n                         new Object[] {rulePriorityThreshold, rule.getName(), rule.getPriority()});\n                 break;\n             }\n \n             //apply rule\n             if (rule.evaluateConditions()) {\n-                LOGGER.log(Level.INFO, \"Rule \u0027{}\u0027 triggered.\", new Object[]{rule.getName()});\n+                LOGGER.log(Level.INFO, \"Rule {0} triggered.\", new Object[]{rule.getName()});\n                 try {\n                     rule.performActions();\n-                    LOGGER.log(Level.INFO, \"Rule \u0027\" + rule.getName() + \"\u0027 performed successfully.\", new Object[]{rule.getName()});\n+                    LOGGER.log(Level.INFO, \"Rule {0} performed successfully.\", new Object[]{rule.getName()});\n \n                     if (skipOnFirstAppliedRule) {\n                         LOGGER.info(\"Next rules will be skipped according to parameter skipOnFirstAppliedRule.\");\n@@ -162,7 +162,7 @@\n             name \u003d new ObjectName(\"io.github.benas.easyrules.jmx:type\u003d\" + JmxManagedRule.class.getSimpleName() + \",name\u003d\" + rule.getName());\n             if (!mBeanServer.isRegistered(name)) {\n                 mBeanServer.registerMBean(rule, name);\n-                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {} for rule: {}\", new Object[]{name.getCanonicalName(), rule.getName()});\n+                LOGGER.log(Level.INFO, \"JMX MBean registered successfully as: {0} for rule: {1}\", new Object[]{name.getCanonicalName(), rule.getName()});\n             }\n         } catch (Exception e) {\n             LOGGER.log(Level.SEVERE, \"Unable to register JMX MBean for rule: \" + rule.getName(), e);\n",
    "projectName": "easy-rules",
    "lineNum": 165,
    "nodeStartChar": 5700,
    "before": "\"JMX MBean registered successfully as: {} for rule: {}\"",
    "after": "\"JMX MBean registered successfully as: {0} for rule: {1}\""
  },
  {
    "commitSHA1": "12aa7383de941dc6b89febc7b672f577d530bffc",
    "commitFile": "src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\nindex fed18f5..ce85902 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n@@ -100,7 +100,7 @@\n     }\n \n     if (vowelHarmonyExceptions \u003d\u003d null) {\n-      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultLastConsonantSet();\n+      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultVowelHarmonySet();\n     }\n \n     return vowelHarmonyExceptions;\ndiff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\nindex fed18f5..ce85902 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n@@ -100,7 +100,7 @@\n     }\n \n     if (vowelHarmonyExceptions \u003d\u003d null) {\n-      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultLastConsonantSet();\n+      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultVowelHarmonySet();\n     }\n \n     return vowelHarmonyExceptions;\n",
    "projectName": "elasticsearch-analysis-turkishstemmer",
    "lineNum": 103,
    "nodeStartChar": 3696,
    "before": "TurkishStemmer.getDefaultLastConsonantSet()",
    "after": "TurkishStemmer.getDefaultVowelHarmonySet()"
  },
  {
    "commitSHA1": "f609741e3bef91e2882812af651094a03a94ac81",
    "commitFile": "src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java",
    "patch": "diff --git a/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java b/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java\nindex 3795673..bf75ccd 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java\n@@ -9,7 +9,7 @@\n \n   //   name       pattern       optional letter     check harmony\n   S16 (\"-nDAn\",   \"ndan|ntan|nden|nten\", null,      true),\n-  S7  (\"-lArl\",   \"larl|lerl\",           null,      true),\n+  S7  (\"-lArI\",   \"ları|leri\",           null,      true),\n   S3  (\"-(U)mUz\", \"mız|miz|muz|müz\",     \"ı|i|u|ü\", true),\n   S5  (\"-(U)nUz\", \"nız|niz|nuz|nüz\",     \"ı|i|u|ü\", true),\n   S1  (\"-lAr\",    \"lar|ler\",             null,      true),\ndiff --git a/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java b/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java\nindex 3795673..bf75ccd 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/stemmer/turkish/suffixes/NounSuffix.java\n@@ -9,7 +9,7 @@\n \n   //   name       pattern       optional letter     check harmony\n   S16 (\"-nDAn\",   \"ndan|ntan|nden|nten\", null,      true),\n-  S7  (\"-lArl\",   \"larl|lerl\",           null,      true),\n+  S7  (\"-lArI\",   \"ları|leri\",           null,      true),\n   S3  (\"-(U)mUz\", \"mız|miz|muz|müz\",     \"ı|i|u|ü\", true),\n   S5  (\"-(U)nUz\", \"nız|niz|nuz|nüz\",     \"ı|i|u|ü\", true),\n   S1  (\"-lAr\",    \"lar|ler\",             null,      true),\n",
    "projectName": "elasticsearch-analysis-turkishstemmer",
    "lineNum": 12,
    "nodeStartChar": 453,
    "before": "S7(\"-lArl\",\"larl|lerl\",null,true)",
    "after": "S7(\"-lArI\",\"ları|leri\",null,true)"
  },
  {
    "commitSHA1": "67abfa81129b5b8f4be552ff0a180d5a517cd3ff",
    "commitFile": "src/main/java/org/elasticsearch/module/WordDelimiterService.java",
    "patch": "diff --git a/src/main/java/org/elasticsearch/module/WordDelimiterService.java b/src/main/java/org/elasticsearch/module/WordDelimiterService.java\nindex 9241073..89f8683 100644\n--- a/src/main/java/org/elasticsearch/module/WordDelimiterService.java\n+++ b/src/main/java/org/elasticsearch/module/WordDelimiterService.java\n@@ -6,7 +6,7 @@\n import org.elasticsearch.client.Client;\n import org.elasticsearch.ElasticsearchException;\n \n-public class WordDelimiterService extends AbstractLifecycleComponent\u003cWordDelimiterService\u003e {\n+public class WordDelimiterService extends AbstractLifecycleComponent {\n   public static final int WAIT_INTERVAL \u003d 100;\n   private final Thread syncWordsThread;\n   private final WordDelimiterRunnable runnable;\ndiff --git a/src/main/java/org/elasticsearch/module/WordDelimiterService.java b/src/main/java/org/elasticsearch/module/WordDelimiterService.java\nindex 9241073..89f8683 100644\n--- a/src/main/java/org/elasticsearch/module/WordDelimiterService.java\n+++ b/src/main/java/org/elasticsearch/module/WordDelimiterService.java\n@@ -6,7 +6,7 @@\n import org.elasticsearch.client.Client;\n import org.elasticsearch.ElasticsearchException;\n \n-public class WordDelimiterService extends AbstractLifecycleComponent\u003cWordDelimiterService\u003e {\n+public class WordDelimiterService extends AbstractLifecycleComponent {\n   public static final int WAIT_INTERVAL \u003d 100;\n   private final Thread syncWordsThread;\n   private final WordDelimiterRunnable runnable;\n",
    "projectName": "elasticsearch-dynamic-word-delimiter",
    "lineNum": 9,
    "nodeStartChar": 335,
    "before": "AbstractLifecycleComponent\u003cWordDelimiterService\u003e",
    "after": "AbstractLifecycleComponent"
  },
  {
    "commitSHA1": "69d2014924208ce91a634b17b43fe4dc5076d089",
    "commitFile": "src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex be6770b..e0fe00e 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -86,7 +86,7 @@\n \n     @Override\n     public TokenStream create(TokenStream tokenStream) {\n-\t\treturn new WordDelimiterFilter(version, tokenStream,\n+\t\treturn new WordDelimiterFilter(tokenStream,\n \t\t\t\tcharTypeTable,\n \t\t\t\tflags,\n \t\t\t\tprotoWords);\ndiff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex be6770b..e0fe00e 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -86,7 +86,7 @@\n \n     @Override\n     public TokenStream create(TokenStream tokenStream) {\n-\t\treturn new WordDelimiterFilter(version, tokenStream,\n+\t\treturn new WordDelimiterFilter(tokenStream,\n \t\t\t\tcharTypeTable,\n \t\t\t\tflags,\n \t\t\t\tprotoWords);\n",
    "projectName": "elasticsearch-dynamic-word-delimiter",
    "lineNum": 89,
    "nodeStartChar": 4404,
    "before": "new WordDelimiterFilter(version,tokenStream,charTypeTable,flags,protoWords)",
    "after": "new WordDelimiterFilter(tokenStream,charTypeTable,flags,protoWords)"
  },
  {
    "commitSHA1": "a31b20196f626f4fcfa6f27e803e45747cbcd8b9",
    "commitFile": "src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex 231c85a..be6770b 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -80,7 +80,7 @@\n         flags |\u003d getFlag(STEM_ENGLISH_POSSESSIVE, settings, \"stem_english_possessive\", true);\n         // If not null is the set of tokens to protect from being delimited\n         Set\u003c?\u003e protectedWords \u003d Analysis.getWordSet(env, settings, \"protected_words\", version);\n-        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(Lucene.VERSION, protectedWords);\n+        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(protectedWords);\n         this.flags \u003d flags;\n     }\n \ndiff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex 231c85a..be6770b 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -80,7 +80,7 @@\n         flags |\u003d getFlag(STEM_ENGLISH_POSSESSIVE, settings, \"stem_english_possessive\", true);\n         // If not null is the set of tokens to protect from being delimited\n         Set\u003c?\u003e protectedWords \u003d Analysis.getWordSet(env, settings, \"protected_words\", version);\n-        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(Lucene.VERSION, protectedWords);\n+        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(protectedWords);\n         this.flags \u003d flags;\n     }\n \n",
    "projectName": "elasticsearch-dynamic-word-delimiter",
    "lineNum": 83,
    "nodeStartChar": 4254,
    "before": "CharArraySet.copy(Lucene.VERSION,protectedWords)",
    "after": "CharArraySet.copy(protectedWords)"
  },
  {
    "commitSHA1": "fedac510962ffe066db260000c43e5ea4cd74770",
    "commitFile": "src/main/java/org/opengis/cite/cat30/ETSAssert.java",
    "patch": "diff --git a/src/main/java/org/opengis/cite/cat30/ETSAssert.java b/src/main/java/org/opengis/cite/cat30/ETSAssert.java\nindex 4bf7add..cbef802 100644\n--- a/src/main/java/org/opengis/cite/cat30/ETSAssert.java\n+++ b/src/main/java/org/opengis/cite/cat30/ETSAssert.java\n@@ -158,7 +158,7 @@\n             msg.append(e.getMessage());\n             throw new AssertionError(msg);\n         }\n-        DOMResult result \u003d validator.validate(xmlSource);\n+        DOMResult result \u003d (DOMResult) validator.validate(xmlSource);\n         Assert.assertFalse(validator.ruleViolationsDetected(), ErrorMessage\n                 .format(ErrorMessageKeys.NOT_SCHEMA_VALID,\n                         validator.getRuleViolationCount(),\n",
    "projectName": "ets-cat30",
    "lineNum": 161,
    "nodeStartChar": 6403,
    "before": "validator.validate(xmlSource)",
    "after": "(DOMResult)validator.validate(xmlSource)"
  },
  {
    "commitSHA1": "7dffe4110213e95c5feaa16efde7dae5d98e620a",
    "commitFile": "src/main/java/org/opengis/cite/cat30/basic/BasicGetRecordsTests.java",
    "patch": "diff --git a/src/main/java/org/opengis/cite/cat30/basic/BasicGetRecordsTests.java b/src/main/java/org/opengis/cite/cat30/basic/BasicGetRecordsTests.java\nindex 7cf527a..40a64ef 100644\n--- a/src/main/java/org/opengis/cite/cat30/basic/BasicGetRecordsTests.java\n+++ b/src/main/java/org/opengis/cite/cat30/basic/BasicGetRecordsTests.java\n@@ -336,7 +336,7 @@\n         Element results \u003d (Element) entity.getElementsByTagNameNS(\n                 Namespaces.CSW, CAT3.SEARCH_RESULTS).item(0);\n         ETSAssert.assertXPath(\n-                \"not(exists(csw:SummaryRecord[dc:type or dc:subject or dc:format or ows:BoundingBox]))\",\n+                \"not(csw:SummaryRecord[dc:type or dc:subject or dc:format or ows:BoundingBox])\",\n                 results, null);\n     }\n \n",
    "projectName": "ets-cat30",
    "lineNum": 339,
    "nodeStartChar": 15733,
    "before": "\"not(exists(csw:SummaryRecord[dc:type or dc:subject or dc:format or ows:BoundingBox]))\"",
    "after": "\"not(csw:SummaryRecord[dc:type or dc:subject or dc:format or ows:BoundingBox])\""
  },
  {
    "commitSHA1": "9717c1c89d6d5a302c73ecb75c6cc03f72c2bd89",
    "commitFile": "src/main/java/org/opengis/cite/cat30/TestNGController.java",
    "patch": "diff --git a/src/main/java/org/opengis/cite/cat30/TestNGController.java b/src/main/java/org/opengis/cite/cat30/TestNGController.java\nindex 4670aca..b773781 100644\n--- a/src/main/java/org/opengis/cite/cat30/TestNGController.java\n+++ b/src/main/java/org/opengis/cite/cat30/TestNGController.java\n@@ -34,13 +34,11 @@\n     /**\n      * A convenience method to facilitate test development.\n      *\n-     * @param args\n-     *            Test run arguments (optional). The first argument must refer\n-     *            to an XML properties file containing the expected set of test\n-     *            run arguments. If no argument is supplied, the file located at\n+     * @param args Test run arguments (optional). The first argument must refer\n+     * to an XML properties file containing the expected set of test run\n+     * arguments. If no argument is supplied, the file located at\n      *            ${user.home}/test-run-props.xml will be used.\n-     * @throws Exception\n-     *             If the test run cannot be executed (usually due to\n+     * @throws Exception If the test run cannot be executed (usually due to\n      *             unsatisfied pre-conditions).\n      */\n     public static void main(String[] args) throws Exception {\n@@ -75,9 +73,8 @@\n     /**\n      * Construct a controller that writes results to the given output directory.\n      * \n-     * @param outputDirUri\n-     *            A file URI that specifies the location of the directory in\n-     *            which test results will be written. It will be created if it\n+     * @param outputDirUri A file URI that specifies the location of the\n+     * directory in which test results will be written. It will be created if it\n      *            does not exist.\n      */\n     public TestNGController(String outputDirUri) {\n@@ -120,16 +117,15 @@\n     }\n \n     /**\n-     * Validates the test run arguments. The test run is aborted if any of \n-     * these checks fail.\n+     * Validates the test run arguments. The test run is aborted if any of these\n+     * checks fail.\n      *\n-     * @param testRunArgs\n-     *            A DOM Document containing a set of XML properties (key-value\n-     *            pairs).\n-     * @throws IllegalArgumentException\n-     *             If any arguments are missing or invalid for some reason.\n+     * @param testRunArgs A DOM Document containing a set of XML properties\n+     * (key-value pairs).\n+     * @throws IllegalArgumentException If any test run arguments are missing or\n+     * invalid.\n      */\n-    void validateTestRunArgs(Document testRunArgs) throws Exception {\n+    void validateTestRunArgs(Document testRunArgs) throws IllegalArgumentException {\n         if (null \u003d\u003d testRunArgs\n                 || !testRunArgs.getDocumentElement().getNodeName()\n                         .equals(\"properties\")) {\n@@ -141,7 +137,7 @@\n         if (entries.getLength() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"No test run arguments found.\");\n         }\n-        Map\u003cString, String\u003e args \u003d new HashMap\u003cString, String\u003e();\n+        Map\u003cString, String\u003e args \u003d new HashMap\u003c\u003e();\n         for (int i \u003d 0; i \u003c entries.getLength(); i++) {\n             Element entry \u003d (Element) entries.item(i);\n             args.put(entry.getAttribute(\"key\"), entry.getTextContent());\n",
    "projectName": "ets-cat30",
    "lineNum": 132,
    "nodeStartChar": 4817,
    "before": "Exception",
    "after": "IllegalArgumentException"
  },
  {
    "commitSHA1": "9717c1c89d6d5a302c73ecb75c6cc03f72c2bd89",
    "commitFile": "src/main/java/org/opengis/cite/cat30/TestNGController.java",
    "patch": "diff --git a/src/main/java/org/opengis/cite/cat30/TestNGController.java b/src/main/java/org/opengis/cite/cat30/TestNGController.java\nindex 4670aca..b773781 100644\n--- a/src/main/java/org/opengis/cite/cat30/TestNGController.java\n+++ b/src/main/java/org/opengis/cite/cat30/TestNGController.java\n@@ -34,13 +34,11 @@\n     /**\n      * A convenience method to facilitate test development.\n      *\n-     * @param args\n-     *            Test run arguments (optional). The first argument must refer\n-     *            to an XML properties file containing the expected set of test\n-     *            run arguments. If no argument is supplied, the file located at\n+     * @param args Test run arguments (optional). The first argument must refer\n+     * to an XML properties file containing the expected set of test run\n+     * arguments. If no argument is supplied, the file located at\n      *            ${user.home}/test-run-props.xml will be used.\n-     * @throws Exception\n-     *             If the test run cannot be executed (usually due to\n+     * @throws Exception If the test run cannot be executed (usually due to\n      *             unsatisfied pre-conditions).\n      */\n     public static void main(String[] args) throws Exception {\n@@ -75,9 +73,8 @@\n     /**\n      * Construct a controller that writes results to the given output directory.\n      * \n-     * @param outputDirUri\n-     *            A file URI that specifies the location of the directory in\n-     *            which test results will be written. It will be created if it\n+     * @param outputDirUri A file URI that specifies the location of the\n+     * directory in which test results will be written. It will be created if it\n      *            does not exist.\n      */\n     public TestNGController(String outputDirUri) {\n@@ -120,16 +117,15 @@\n     }\n \n     /**\n-     * Validates the test run arguments. The test run is aborted if any of \n-     * these checks fail.\n+     * Validates the test run arguments. The test run is aborted if any of these\n+     * checks fail.\n      *\n-     * @param testRunArgs\n-     *            A DOM Document containing a set of XML properties (key-value\n-     *            pairs).\n-     * @throws IllegalArgumentException\n-     *             If any arguments are missing or invalid for some reason.\n+     * @param testRunArgs A DOM Document containing a set of XML properties\n+     * (key-value pairs).\n+     * @throws IllegalArgumentException If any test run arguments are missing or\n+     * invalid.\n      */\n-    void validateTestRunArgs(Document testRunArgs) throws Exception {\n+    void validateTestRunArgs(Document testRunArgs) throws IllegalArgumentException {\n         if (null \u003d\u003d testRunArgs\n                 || !testRunArgs.getDocumentElement().getNodeName()\n                         .equals(\"properties\")) {\n@@ -141,7 +137,7 @@\n         if (entries.getLength() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"No test run arguments found.\");\n         }\n-        Map\u003cString, String\u003e args \u003d new HashMap\u003cString, String\u003e();\n+        Map\u003cString, String\u003e args \u003d new HashMap\u003c\u003e();\n         for (int i \u003d 0; i \u003c entries.getLength(); i++) {\n             Element entry \u003d (Element) entries.item(i);\n             args.put(entry.getAttribute(\"key\"), entry.getTextContent());\n",
    "projectName": "ets-cat30",
    "lineNum": 144,
    "nodeStartChar": 5377,
    "before": "HashMap\u003cString,String\u003e",
    "after": "HashMap\u003c\u003e"
  },
  {
    "commitSHA1": "a06ccd583d402d8e175e53ea275352d7b5ed2bf8",
    "commitFile": "src/main/java/io/corbel/eventbus/ioc/RabbitEventBusIoc.java",
    "patch": "diff --git a/src/main/java/io/corbel/eventbus/ioc/RabbitEventBusIoc.java b/src/main/java/io/corbel/eventbus/ioc/RabbitEventBusIoc.java\nindex 569f5fa..7d3d080 100644\n--- a/src/main/java/io/corbel/eventbus/ioc/RabbitEventBusIoc.java\n+++ b/src/main/java/io/corbel/eventbus/ioc/RabbitEventBusIoc.java\n@@ -67,7 +67,7 @@\n \n     @Override\n     protected Optional\u003cString\u003e configPrefix() {\n-        return Optional.of(\"io/corbel/eventbus\");\n+        return Optional.of(\"eventbus\");\n     }\n \n \n",
    "projectName": "event-bus",
    "lineNum": 70,
    "nodeStartChar": 2205,
    "before": "\"io/corbel/eventbus\"",
    "after": "\"eventbus\""
  },
  {
    "commitSHA1": "4f68c27b2df3bd87ff05d5e3671545d41e094547",
    "commitFile": "brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java",
    "patch": "diff --git a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\nindex 1cf8cd9..0d30df3 100644\n--- a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n+++ b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n@@ -244,7 +244,7 @@\n \n     private String valueToAcronym(final String value) {\n         // index only short, name-like values, avoiding free-form text if possible\n-        if (value.length() \u003c\u003d 100) {\n+        if (null !\u003d value \u0026\u0026 value.length() \u003c\u003d 100) {\n             String clean \u003d cleanForAcronym(value);\n             StringBuilder acronym \u003d new StringBuilder();\n             boolean isInside \u003d false;\ndiff --git a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\nindex 1cf8cd9..0d30df3 100644\n--- a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n+++ b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n@@ -244,7 +244,7 @@\n \n     private String valueToAcronym(final String value) {\n         // index only short, name-like values, avoiding free-form text if possible\n-        if (value.length() \u003c\u003d 100) {\n+        if (null !\u003d value \u0026\u0026 value.length() \u003c\u003d 100) {\n             String clean \u003d cleanForAcronym(value);\n             StringBuilder acronym \u003d new StringBuilder();\n             boolean isInside \u003d false;\n",
    "projectName": "extendo",
    "lineNum": 247,
    "nodeStartChar": 7055,
    "before": "value.length() \u003c\u003d 100",
    "after": "null !\u003d value \u0026\u0026 value.length() \u003c\u003d 100"
  },
  {
    "commitSHA1": "595e94f21b718a38f901e62eb44cce08cf3143ed",
    "commitFile": "smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java",
    "patch": "diff --git a/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java b/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java\nindex 8a92ede..8cb2e88 100644\n--- a/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java\n+++ b/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java\n@@ -6,7 +6,7 @@\n     private static final EdgeTSVFormat instance \u003d new EdgeTSVFormat();\n \n     private EdgeTSVFormat() {\n-        super(\"Edge\", new String[]{\"tsv\"});\n+        super(\"Edges\", new String[]{\"tsv\"});\n     }\n \n     public static EdgeTSVFormat getInstance() {\ndiff --git a/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java b/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java\nindex 8a92ede..8cb2e88 100644\n--- a/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java\n+++ b/smsn-server/src/main/java/net/fortytwo/smsn/brain/io/edges/EdgeTSVFormat.java\n@@ -6,7 +6,7 @@\n     private static final EdgeTSVFormat instance \u003d new EdgeTSVFormat();\n \n     private EdgeTSVFormat() {\n-        super(\"Edge\", new String[]{\"tsv\"});\n+        super(\"Edges\", new String[]{\"tsv\"});\n     }\n \n     public static EdgeTSVFormat getInstance() {\n",
    "projectName": "extendo",
    "lineNum": 9,
    "nodeStartChar": 246,
    "before": "\"Edge\"",
    "after": "\"Edges\""
  },
  {
    "commitSHA1": "c28166f54d11022c32c1e9fab386993c52adb437",
    "commitFile": "src/main/java/gate/merger/AnnotationMergingMain.java",
    "patch": "diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java\nindex f79fc05..b93cc8d 100644\n--- a/src/main/java/gate/merger/AnnotationMergingMain.java\n+++ b/src/main/java/gate/merger/AnnotationMergingMain.java\n@@ -182,7 +182,7 @@\n         StringBuffer annNames \u003d new StringBuffer();\r\n         for(int i \u003d 0; i \u003c annIndex.length; ++i) {\r\n           if(i \u003e 0) annNames.append(\"/\");\r\n-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);\r\n+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);\r\n         }\r\n         featM.put(\"annotators\", annNames.toString());\r\n         try {\r\ndiff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java\nindex f79fc05..b93cc8d 100644\n--- a/src/main/java/gate/merger/AnnotationMergingMain.java\n+++ b/src/main/java/gate/merger/AnnotationMergingMain.java\n@@ -182,7 +182,7 @@\n         StringBuffer annNames \u003d new StringBuffer();\r\n         for(int i \u003d 0; i \u003c annIndex.length; ++i) {\r\n           if(i \u003e 0) annNames.append(\"/\");\r\n-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);\r\n+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);\r\n         }\r\n         featM.put(\"annotators\", annNames.toString());\r\n         try {\r\n",
    "projectName": "gateplugin-Annotation_Merging",
    "lineNum": 185,
    "nodeStartChar": 7311,
    "before": "Integer.valueOf(annIndex[i])",
    "after": "Integer.parseInt(annIndex[i])"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 95,
    "nodeStartChar": 4459,
    "before": "createNamespace.execute(tableStore)",
    "after": "createNamespace.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 103,
    "nodeStartChar": 4942,
    "before": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,CHANGELOG_TABLE)",
    "after": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,CHANGELOG_TABLE,\"Contains the changelog of Genesis.\")"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 113,
    "nodeStartChar": 5594,
    "before": "table.execute(tableStore)",
    "after": "table.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 118,
    "nodeStartChar": 5901,
    "before": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,MIGRATIONLOG_TABLE)",
    "after": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,MIGRATIONLOG_TABLE,\"Contains the migration log of Genesis which is a collection of the logs of the steps.\")"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 128,
    "nodeStartChar": 6591,
    "before": "table.execute(tableStore)",
    "after": "table.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 133,
    "nodeStartChar": 6916,
    "before": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,LAST_TRANSFORMATIONS_TABLE)",
    "after": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,LAST_TRANSFORMATIONS_TABLE,\"Contains the last transformation of Genesis.\")"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 146,
    "nodeStartChar": 7764,
    "before": "table.execute(tableStore)",
    "after": "table.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 254,
    "nodeStartChar": 14229,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 261,
    "nodeStartChar": 14759,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 278,
    "nodeStartChar": 15413,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 294,
    "nodeStartChar": 16088,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 296,
    "nodeStartChar": 16243,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 313,
    "nodeStartChar": 16917,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 318,
    "nodeStartChar": 17193,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 334,
    "nodeStartChar": 17807,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "commitSHA1": "ce31da043ebeb57571249b1ab5cc7e8e53019218",
    "commitFile": "transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java",
    "patch": "diff --git a/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java b/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java\nindex 715652d..19275cf 100644\n--- a/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java\n+++ b/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java\n@@ -12,11 +12,11 @@\n \r\n     public AbstractTitanTransformationStep(\r\n \t    TitanTransformationSequence sequence, String developer,\r\n-\t    String comment) {\r\n+\t    String command, String comment) {\r\n \tsuper();\r\n \tthis.sequence \u003d sequence;\r\n \tmetadata \u003d new TransformationMetadata(sequence.getMetadata(),\r\n-\t\tdeveloper, getClass().getName(), comment);\r\n+\t\tdeveloper, command, comment);\r\n \r\n     }\r\n \r\ndiff --git a/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java b/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java\nindex 715652d..19275cf 100644\n--- a/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java\n+++ b/transformation/titan/src/main/java/com/puresoltechnologies/genesis/transformation/titan/AbstractTitanTransformationStep.java\n@@ -12,11 +12,11 @@\n \r\n     public AbstractTitanTransformationStep(\r\n \t    TitanTransformationSequence sequence, String developer,\r\n-\t    String comment) {\r\n+\t    String command, String comment) {\r\n \tsuper();\r\n \tthis.sequence \u003d sequence;\r\n \tmetadata \u003d new TransformationMetadata(sequence.getMetadata(),\r\n-\t\tdeveloper, getClass().getName(), comment);\r\n+\t\tdeveloper, command, comment);\r\n \r\n     }\r\n \r\n",
    "projectName": "genesis",
    "lineNum": 19,
    "nodeStartChar": 698,
    "before": "getClass().getName()",
    "after": "command"
  },
  {
    "commitSHA1": "2527d8ba73a9b4ff2d1df44f4faf38f612b0e60c",
    "commitFile": "src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java",
    "patch": "diff --git a/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java b/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java\nindex b2b5ed3..777d367 100644\n--- a/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java\n+++ b/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java\n@@ -81,27 +81,27 @@\n \t}\n \n \t/**\n-\t * Delete by tile matrix set name\n+\t * Delete by table name\n \t * \n-\t * @param tileMatrixSetName\n-\t *            tile matrix set name\n+\t * @param tableName\n+\t *            table name\n \t * @return deleted count\n \t */\n-\tpublic int delete(String tileMatrixSetName) {\n+\tpublic int delete(String tableName) {\n \t\tDeleteBuilder\u003cGriddedCoverage, Long\u003e db \u003d deleteBuilder();\n \n \t\tint deleted \u003d 0;\n \n \t\ttry {\n \t\t\tdb.where().eq(GriddedCoverage.COLUMN_TILE_MATRIX_SET_NAME,\n-\t\t\t\t\ttileMatrixSetName);\n+\t\t\t\t\ttableName);\n \n \t\t\tPreparedDelete\u003cGriddedCoverage\u003e deleteQuery \u003d db.prepare();\n \t\t\tdeleted \u003d delete(deleteQuery);\n \t\t} catch (SQLException e) {\n \t\t\tthrow new GeoPackageException(\n-\t\t\t\t\t\"Failed to delete Gridded Coverage by Tile Matrix Set Name: \"\n-\t\t\t\t\t\t\t+ tileMatrixSetName, e);\n+\t\t\t\t\t\"Failed to delete Gridded Coverage by Table Name: \"\n+\t\t\t\t\t\t\t+ tableName, e);\n \t\t}\n \n \t\treturn deleted;\ndiff --git a/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java b/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java\nindex b2b5ed3..777d367 100644\n--- a/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java\n+++ b/src/main/java/mil/nga/geopackage/extension/coverage/GriddedCoverageDao.java\n@@ -81,27 +81,27 @@\n \t}\n \n \t/**\n-\t * Delete by tile matrix set name\n+\t * Delete by table name\n \t * \n-\t * @param tileMatrixSetName\n-\t *            tile matrix set name\n+\t * @param tableName\n+\t *            table name\n \t * @return deleted count\n \t */\n-\tpublic int delete(String tileMatrixSetName) {\n+\tpublic int delete(String tableName) {\n \t\tDeleteBuilder\u003cGriddedCoverage, Long\u003e db \u003d deleteBuilder();\n \n \t\tint deleted \u003d 0;\n \n \t\ttry {\n \t\t\tdb.where().eq(GriddedCoverage.COLUMN_TILE_MATRIX_SET_NAME,\n-\t\t\t\t\ttileMatrixSetName);\n+\t\t\t\t\ttableName);\n \n \t\t\tPreparedDelete\u003cGriddedCoverage\u003e deleteQuery \u003d db.prepare();\n \t\t\tdeleted \u003d delete(deleteQuery);\n \t\t} catch (SQLException e) {\n \t\t\tthrow new GeoPackageException(\n-\t\t\t\t\t\"Failed to delete Gridded Coverage by Tile Matrix Set Name: \"\n-\t\t\t\t\t\t\t+ tileMatrixSetName, e);\n+\t\t\t\t\t\"Failed to delete Gridded Coverage by Table Name: \"\n+\t\t\t\t\t\t\t+ tableName, e);\n \t\t}\n \n \t\treturn deleted;\n",
    "projectName": "geopackage-core-java",
    "lineNum": 103,
    "nodeStartChar": 2687,
    "before": "\"Failed to delete Gridded Coverage by Tile Matrix Set Name: \"",
    "after": "\"Failed to delete Gridded Coverage by Table Name: \""
  },
  {
    "commitSHA1": "dfacad1f30c5104ad9e110b33f94d04e19f5c127",
    "commitFile": "src/main/java/mil/nga/geopackage/user/UserColumn.java",
    "patch": "diff --git a/src/main/java/mil/nga/geopackage/user/UserColumn.java b/src/main/java/mil/nga/geopackage/user/UserColumn.java\nindex 9f3070e..6db6893 100644\n--- a/src/main/java/mil/nga/geopackage/user/UserColumn.java\n+++ b/src/main/java/mil/nga/geopackage/user/UserColumn.java\n@@ -103,7 +103,7 @@\n \t * @since 3.0.1\n \t */\n \tpublic boolean isNamed(String name) {\n-\t\treturn name.equals(name);\n+\t\treturn this.name !\u003d null \u0026\u0026 this.name.equals(name);\n \t}\n \n \t/**\ndiff --git a/src/main/java/mil/nga/geopackage/user/UserColumn.java b/src/main/java/mil/nga/geopackage/user/UserColumn.java\nindex 9f3070e..6db6893 100644\n--- a/src/main/java/mil/nga/geopackage/user/UserColumn.java\n+++ b/src/main/java/mil/nga/geopackage/user/UserColumn.java\n@@ -103,7 +103,7 @@\n \t * @since 3.0.1\n \t */\n \tpublic boolean isNamed(String name) {\n-\t\treturn name.equals(name);\n+\t\treturn this.name !\u003d null \u0026\u0026 this.name.equals(name);\n \t}\n \n \t/**\n",
    "projectName": "geopackage-core-java",
    "lineNum": 106,
    "nodeStartChar": 1860,
    "before": "name.equals(name)",
    "after": "this.name !\u003d null \u0026\u0026 this.name.equals(name)"
  },
  {
    "commitSHA1": "ab89d8c240789934a1acf9956c2906c3f680ac95",
    "commitFile": "src/main/java/mil/nga/geopackage/user/UserColumn.java",
    "patch": "diff --git a/src/main/java/mil/nga/geopackage/user/UserColumn.java b/src/main/java/mil/nga/geopackage/user/UserColumn.java\nindex 9f3070e..6db6893 100644\n--- a/src/main/java/mil/nga/geopackage/user/UserColumn.java\n+++ b/src/main/java/mil/nga/geopackage/user/UserColumn.java\n@@ -103,7 +103,7 @@\n \t * @since 3.0.1\n \t */\n \tpublic boolean isNamed(String name) {\n-\t\treturn name.equals(name);\n+\t\treturn this.name !\u003d null \u0026\u0026 this.name.equals(name);\n \t}\n \n \t/**\ndiff --git a/src/main/java/mil/nga/geopackage/user/UserColumn.java b/src/main/java/mil/nga/geopackage/user/UserColumn.java\nindex 9f3070e..6db6893 100644\n--- a/src/main/java/mil/nga/geopackage/user/UserColumn.java\n+++ b/src/main/java/mil/nga/geopackage/user/UserColumn.java\n@@ -103,7 +103,7 @@\n \t * @since 3.0.1\n \t */\n \tpublic boolean isNamed(String name) {\n-\t\treturn name.equals(name);\n+\t\treturn this.name !\u003d null \u0026\u0026 this.name.equals(name);\n \t}\n \n \t/**\n",
    "projectName": "geopackage-core-java",
    "lineNum": 106,
    "nodeStartChar": 1860,
    "before": "name.equals(name)",
    "after": "this.name !\u003d null \u0026\u0026 this.name.equals(name)"
  },
  {
    "commitSHA1": "e3cd8ba2d02fcf0935f8e2eb37b6051c94b8998b",
    "commitFile": "src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java",
    "patch": "diff --git a/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java b/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java\nindex 726fee2..5aeb616 100644\n--- a/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java\n+++ b/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java\n@@ -580,7 +580,7 @@\n \t\t\t\t\tthrow new GeoPackageException(\n \t\t\t\t\t\t\t\"The related table must be a \"\n \t\t\t\t\t\t\t\t\t+ relationType.getName()\n-\t\t\t\t\t\t\t\t\t+ \" table. Related Table: \" + baseTableName\n+\t\t\t\t\t\t\t\t\t+ \" table. Related Table: \" + relatedTableName\n \t\t\t\t\t\t\t\t\t+ \", Type: \"\n \t\t\t\t\t\t\t\t\t+ geoPackage.getTableType(relatedTableName));\n \t\t\t\t}\n",
    "projectName": "geopackage-core-java",
    "lineNum": 581,
    "nodeStartChar": 17588,
    "before": "\"The related table must be a \" + relationType.getName() + \" table. Related Table: \"+ baseTableName+ \", Type: \"+ geoPackage.getTableType(relatedTableName)",
    "after": "\"The related table must be a \" + relationType.getName() + \" table. Related Table: \"+ relatedTableName+ \", Type: \"+ geoPackage.getTableType(relatedTableName)"
  },
  {
    "commitSHA1": "40af043bfc52b97d2ac3b099eb232e42ab74e050",
    "commitFile": "src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java",
    "patch": "diff --git a/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java b/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java\nindex df136d9..5e812f5 100644\n--- a/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java\n+++ b/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java\n@@ -365,7 +365,7 @@\n \t\tif (tempMaxY % 1 \u003d\u003d 0) {\n \t\t\tmaxY--;\n \t\t}\n-\t\tmaxX \u003d Math.min(maxX, tilesPerSide - 1);\n+\t\tmaxY \u003d Math.min(maxY, tilesPerSide - 1);\n \n \t\tTileGrid grid \u003d new TileGrid(minX, maxX, minY, maxY);\n \ndiff --git a/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java b/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java\nindex df136d9..5e812f5 100644\n--- a/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java\n+++ b/src/main/java/mil/nga/giat/geopackage/tiles/TileBoundingBoxUtils.java\n@@ -365,7 +365,7 @@\n \t\tif (tempMaxY % 1 \u003d\u003d 0) {\n \t\t\tmaxY--;\n \t\t}\n-\t\tmaxX \u003d Math.min(maxX, tilesPerSide - 1);\n+\t\tmaxY \u003d Math.min(maxY, tilesPerSide - 1);\n \n \t\tTileGrid grid \u003d new TileGrid(minX, maxX, minY, maxY);\n \n",
    "projectName": "geopackage-core-java",
    "lineNum": 368,
    "nodeStartChar": 10049,
    "before": "maxX\u003dMath.min(maxX,tilesPerSide - 1)",
    "after": "maxY\u003dMath.min(maxY,tilesPerSide - 1)"
  },
  {
    "commitSHA1": "a76e0ee658d3dd810ed1534ae3c74e88cfb8a390",
    "commitFile": "src/test/java/it/SingleModuleIT.java",
    "patch": "diff --git a/src/test/java/it/SingleModuleIT.java b/src/test/java/it/SingleModuleIT.java\nindex 3a53a75..33a4b4d 100644\n--- a/src/test/java/it/SingleModuleIT.java\n+++ b/src/test/java/it/SingleModuleIT.java\n@@ -9,9 +9,9 @@\n  * Created by Petr Kozelka.\n  */\n public class SingleModuleIT {\n-    public static boolean prepare(File basedir, File localRepositoryPath, Map\u003cString,String\u003e context) throws CommandLineException, IOException {\n+    public static boolean prepare(File basedir, File localRepositoryPath, String branchName, Map\u003cString,String\u003e context) throws CommandLineException, IOException {\n         final File gitwc \u003d new File(basedir, \"target/gitsiterepo\");\n-        IntegrationTestUtils.createGitRepo(gitwc, \"singlemodule/gitsite\");\n+        IntegrationTestUtils.createGitRepo(gitwc, branchName);\n         return true;\n     }\n \n",
    "projectName": "gitsite-maven-plugin",
    "lineNum": 14,
    "nodeStartChar": 472,
    "before": "\"singlemodule/gitsite\"",
    "after": "branchName"
  },
  {
    "commitSHA1": "cc3b2b5f7cf0efb9adc11406eaf34b07fbb5f44c",
    "commitFile": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java",
    "patch": "diff --git a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java\nindex 0b3acdf..f7f8a96 100644\n--- a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java\n+++ b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java\n@@ -140,6 +140,7 @@\n     // of ResourceFilter/MultiBundleResourceFilter interface instead. Revisit this later.\n     public static boolean isJavaType(String type) {\n         type \u003d type.toUpperCase(Locale.ROOT);\n-        return type.equals(Filter.JAVA.name()) || type.equals(Filter.JAVAUTF8.name());\n+        return type.equals(Filter.JAVA.name()) || type.equals(Filter.JAVAUTF8.name())\n+                || type.equals(Filter.JAVAMSG.name()) || type.equals(Filter.JAVAMSGUTF8.name());\n     }\n }\ndiff --git a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java\nindex 0b3acdf..f7f8a96 100644\n--- a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java\n+++ b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/DefaultResourceFilterProvider.java\n@@ -140,6 +140,7 @@\n     // of ResourceFilter/MultiBundleResourceFilter interface instead. Revisit this later.\n     public static boolean isJavaType(String type) {\n         type \u003d type.toUpperCase(Locale.ROOT);\n-        return type.equals(Filter.JAVA.name()) || type.equals(Filter.JAVAUTF8.name());\n+        return type.equals(Filter.JAVA.name()) || type.equals(Filter.JAVAUTF8.name())\n+                || type.equals(Filter.JAVAMSG.name()) || type.equals(Filter.JAVAMSGUTF8.name());\n     }\n }\n",
    "projectName": "gp-java-tools",
    "lineNum": 143,
    "nodeStartChar": 4681,
    "before": "type.equals(Filter.JAVA.name()) || type.equals(Filter.JAVAUTF8.name())",
    "after": "type.equals(Filter.JAVA.name()) || type.equals(Filter.JAVAUTF8.name()) || type.equals(Filter.JAVAMSG.name())|| type.equals(Filter.JAVAMSGUTF8.name())"
  },
  {
    "commitSHA1": "c2e6e25555dbbd78092b6225baf8313c17952a0c",
    "commitFile": "gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java",
    "patch": "diff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java\nindex 6cb701e..dadb5f6 100644\n--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java\n+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java\n@@ -76,7 +76,7 @@\n \n     @Parameter(\n             names \u003d {\"-r\", \"--reviewedOnly\"},\n-            description \u003d \"Includes only reviewed transaltion.\",\n+            description \u003d \"Includes only reviewed translation.\",\n             required \u003d false)\n     private boolean reviewedOnly \u003d false;\n \ndiff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java\nindex 6cb701e..dadb5f6 100644\n--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java\n+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ExportCmd.java\n@@ -76,7 +76,7 @@\n \n     @Parameter(\n             names \u003d {\"-r\", \"--reviewedOnly\"},\n-            description \u003d \"Includes only reviewed transaltion.\",\n+            description \u003d \"Includes only reviewed translation.\",\n             required \u003d false)\n     private boolean reviewedOnly \u003d false;\n \n",
    "projectName": "gp-java-tools",
    "lineNum": 79,
    "nodeStartChar": 2694,
    "before": "\"Includes only reviewed transaltion.\"",
    "after": "\"Includes only reviewed translation.\""
  },
  {
    "commitSHA1": "cb04c924cf95ac9ef56dadf64269f6911b57b561",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex e717a7e..b58560a 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -234,7 +234,7 @@\n             mergeTranslation(bundle, language, bf.getType(), bf.getFile(), outputFile);\n             break;\n \n-        case REVIEWD_WITH_FALLBACK:\n+        case REVIEWED_WITH_FALLBACK:\n             bundle \u003d getBundle(client, bf.getBundleId(), language, true, true);\n             exportTranslation(bundle, language, bf.getType(), outputFile);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 237,
    "nodeStartChar": 9630,
    "before": "case REVIEWD_WITH_FALLBACK: ",
    "after": "case REVIEWED_WITH_FALLBACK: "
  },
  {
    "commitSHA1": "cb04c924cf95ac9ef56dadf64269f6911b57b561",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java\nindex 7f83442..da35288 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java\n@@ -52,7 +52,7 @@\n      * is not available or, not marked as reviewed, the value from the\n      * source bundle is used.\n      */\n-    REVIEWD_WITH_FALLBACK,\n+    REVIEWED_WITH_FALLBACK,\n \n     /**\n      * Exports only translated resources marked as reviewed.\n",
    "projectName": "gp-java-tools",
    "lineNum": 50,
    "nodeStartChar": 1504,
    "before": "/**   * Exports translated resources marked as reviewed. If translation is not available or, not marked as reviewed, the value from the source bundle is used.  */ REVIEWD_WITH_FALLBACK",
    "after": "/**   * Exports translated resources marked as reviewed. If translation is not available or, not marked as reviewed, the value from the source bundle is used.  */ REVIEWED_WITH_FALLBACK"
  },
  {
    "commitSHA1": "dcd9a57f4a1f7710926ab9487cf00701a31e668e",
    "commitFile": "gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java",
    "patch": "diff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\nindex 4cd0d50..4ef8f10 100644\n--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n@@ -1,5 +1,5 @@\n /*  \n- * Copyright IBM Corp. 2015\n+ * Copyright IBM Corp. 2015, 2016\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,7 @@\n  * \n  * @author Yoshito Umaoka\n  */\n-class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n+public class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n \n     @Override\n     public ResourceType convert(String type) {\ndiff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\nindex 4cd0d50..4ef8f10 100644\n--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n@@ -1,5 +1,5 @@\n /*  \n- * Copyright IBM Corp. 2015\n+ * Copyright IBM Corp. 2015, 2016\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,7 @@\n  * \n  * @author Yoshito Umaoka\n  */\n-class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n+public class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n \n     @Override\n     public ResourceType convert(String type) {\n",
    "projectName": "gp-java-tools",
    "lineNum": 24,
    "nodeStartChar": 807,
    "before": "/**   * Convert resource type parameter String to ResourceType.  * @author Yoshito Umaoka  */ class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e {   @Override public ResourceType convert(  String type){     try {       return ResourceType.valueOf(type.toUpperCase(Locale.ENGLISH));     }  catch (    IllegalArgumentException e) {       throw new ParameterException(\"Parameter value \" + type + \" is not valid for resource type option.\");     }   } } ",
    "after": "/**   * Convert resource type parameter String to ResourceType.  * @author Yoshito Umaoka  */ public class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e {   @Override public ResourceType convert(  String type){     try {       return ResourceType.valueOf(type.toUpperCase(Locale.ENGLISH));     }  catch (    IllegalArgumentException e) {       throw new ParameterException(\"Parameter value \" + type + \" is not valid for resource type option.\");     }   } } "
  },
  {
    "commitSHA1": "adf9248f9fce0fc3a39a0ca8180b27319d80e6de",
    "commitFile": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java",
    "patch": "diff --git a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java\nindex e909288..ce69b79 100644\n--- a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java\n+++ b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java\n@@ -59,7 +59,7 @@\n     \r\n     public void addNotes(List\u003cString\u003e inputNotes) {\r\n         for (String note : inputNotes) {\r\n-            notes.add(note);\r\n+            addNote(note);\r\n         }\r\n     }\r\n \r\ndiff --git a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java\nindex e909288..ce69b79 100644\n--- a/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java\n+++ b/gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/Bundle.java\n@@ -59,7 +59,7 @@\n     \r\n     public void addNotes(List\u003cString\u003e inputNotes) {\r\n         for (String note : inputNotes) {\r\n-            notes.add(note);\r\n+            addNote(note);\r\n         }\r\n     }\r\n \r\n",
    "projectName": "gp-java-tools",
    "lineNum": 62,
    "nodeStartChar": 1879,
    "before": "notes.add(note)",
    "after": "addNote(note)"
  },
  {
    "commitSHA1": "5ef4817275c6146a2486f0920862c3752f73c77b",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 156,
    "nodeStartChar": 6366,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "commitSHA1": "5ef4817275c6146a2486f0920862c3752f73c77b",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 169,
    "nodeStartChar": 6949,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "commitSHA1": "5ef4817275c6146a2486f0920862c3752f73c77b",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 175,
    "nodeStartChar": 7228,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "commitSHA1": "3ec277cd511746df9a5d1e0342294fa8b472a673",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 156,
    "nodeStartChar": 6366,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "commitSHA1": "3ec277cd511746df9a5d1e0342294fa8b472a673",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 169,
    "nodeStartChar": 6949,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "commitSHA1": "3ec277cd511746df9a5d1e0342294fa8b472a673",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 175,
    "nodeStartChar": 7228,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "commitSHA1": "7460ca65eb1db7a5a2ded9eca8ef53b6cf58b909",
    "commitFile": "src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java",
    "patch": "diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\ndiff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\n",
    "projectName": "grison",
    "lineNum": 21,
    "nodeStartChar": 687,
    "before": "VerifyReqDtoParser",
    "after": "VerifyReqTextDtoParser"
  },
  {
    "commitSHA1": "7460ca65eb1db7a5a2ded9eca8ef53b6cf58b909",
    "commitFile": "src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java",
    "patch": "diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\ndiff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\n",
    "projectName": "grison",
    "lineNum": 24,
    "nodeStartChar": 778,
    "before": "VerifyRespDtoParser",
    "after": "VerifyRespTextDtoParser"
  },
  {
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\n",
    "projectName": "hal-client",
    "lineNum": 87,
    "nodeStartChar": 2450,
    "before": "Void",
    "after": "Object"
  },
  {
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\n",
    "projectName": "hal-client",
    "lineNum": 262,
    "nodeStartChar": 9540,
    "before": "public HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,BiFunction\u003cHandlerInstantiator,Class\u003c?\u003e,Object\u003e instantiationMethod){   this.clazz\u003dclazz;   this.instantiationMethod\u003dinstantiationMethod; } ",
    "after": "HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,BiFunction\u003cHandlerInstantiator,Class\u003c?\u003e,Object\u003e instantiationMethod){   this.clazz\u003dclazz;   this.instantiationMethod\u003dinstantiationMethod; } "
  },
  {
    "commitSHA1": "b78b4d2376bad919435e9727faee0fe74c5dad7e",
    "commitFile": "client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java",
    "patch": "diff --git a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\nindex b16659d..50e75b2 100644\n--- a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n+++ b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n@@ -67,7 +67,7 @@\n \n \t@Override\n \tpublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametrizedType(Resource.class, Resource.class, type);\n+\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametricType(Resource.class, type);\n \t\t\n \t\tResource\u003cT\u003e resource \u003d p.getCodec().readValue(p, resourceType);\n \t\t\ndiff --git a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\nindex b16659d..50e75b2 100644\n--- a/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n+++ b/client/src/main/java/uk/co/blackpepper/bowman/InlineAssociationDeserializer.java\n@@ -67,7 +67,7 @@\n \n \t@Override\n \tpublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametrizedType(Resource.class, Resource.class, type);\n+\t\tJavaType resourceType \u003d ctxt.getTypeFactory().constructParametricType(Resource.class, type);\n \t\t\n \t\tResource\u003cT\u003e resource \u003d p.getCodec().readValue(p, resourceType);\n \t\t\n",
    "projectName": "hal-client",
    "lineNum": 70,
    "nodeStartChar": 2566,
    "before": "ctxt.getTypeFactory().constructParametrizedType(Resource.class,Resource.class,type)",
    "after": "ctxt.getTypeFactory().constructParametricType(Resource.class,type)"
  },
  {
    "commitSHA1": "938bfff01487a69481176448e7e5fae5000e4831",
    "commitFile": "src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java",
    "patch": "diff --git a/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java b/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java\nindex 86ed251..b858da3 100644\n--- a/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java\n+++ b/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java\n@@ -331,7 +331,7 @@\n \t@Test\r\n \tpublic void isNotSameFileDescription() {\r\n \t\tString description \u003d mismatchDescriptionFor(noFile, sameFile(testFile));\r\n-\t\tassertThat(description, both(containsString(\"\\\\test-file\u003e but was \u003c\")).and(containsString(\"\\\\no-file\u003e\")));\r\n+\t\tassertThat(description, both(containsString(\"test-file\u003e but was \u003c\")).and(containsString(\"no-file\u003e\")));\r\n \t}\r\n \r\n \t// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\ndiff --git a/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java b/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java\nindex 86ed251..b858da3 100644\n--- a/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java\n+++ b/src/test/java/ca/seinesoftware/hamcrest/path/PathMatcherTest.java\n@@ -331,7 +331,7 @@\n \t@Test\r\n \tpublic void isNotSameFileDescription() {\r\n \t\tString description \u003d mismatchDescriptionFor(noFile, sameFile(testFile));\r\n-\t\tassertThat(description, both(containsString(\"\\\\test-file\u003e but was \u003c\")).and(containsString(\"\\\\no-file\u003e\")));\r\n+\t\tassertThat(description, both(containsString(\"test-file\u003e but was \u003c\")).and(containsString(\"no-file\u003e\")));\r\n \t}\r\n \r\n \t// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n",
    "projectName": "hamcrest-path",
    "lineNum": 334,
    "nodeStartChar": 9477,
    "before": "\"\\\\test-file\u003e but was \u003c\"",
    "after": "\"test-file\u003e but was \u003c\""
  },
  {
    "commitSHA1": "dbeb36a6a4ee5cd06aa9dda2f48655cc7e9aa0c1",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java\nindex 25b5bbd..c0035d7 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java\n@@ -89,7 +89,7 @@\n             return aciResponseInputStream;\n         } finally {\n             if (aciResponseInputStream !\u003d null) {\n-                messageBuilder.append(aciResponseInputStream.getStatusCode() + \u0027\\t\u0027);\n+                messageBuilder.append(aciResponseInputStream.getStatusCode()).append(\u0027\\t\u0027);\n                 messageBuilder.append(generateMessage(serverDetails, parameters));\n                 log.info(IDOL, messageBuilder.toString());\n             }\ndiff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java\nindex 25b5bbd..c0035d7 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/logging/IdolLoggingAspect.java\n@@ -89,7 +89,7 @@\n             return aciResponseInputStream;\n         } finally {\n             if (aciResponseInputStream !\u003d null) {\n-                messageBuilder.append(aciResponseInputStream.getStatusCode() + \u0027\\t\u0027);\n+                messageBuilder.append(aciResponseInputStream.getStatusCode()).append(\u0027\\t\u0027);\n                 messageBuilder.append(generateMessage(serverDetails, parameters));\n                 log.info(IDOL, messageBuilder.toString());\n             }\n",
    "projectName": "haven-search-components",
    "lineNum": 92,
    "nodeStartChar": 3922,
    "before": "messageBuilder",
    "after": "messageBuilder.append(aciResponseInputStream.getStatusCode())"
  },
  {
    "commitSHA1": "78be51fab8812c6b5ace60ad7f0294ba8f14c4ad",
    "commitFile": "core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java",
    "patch": "diff --git a/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java b/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java\nindex 918f8ef..f568eba 100644\n--- a/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java\n+++ b/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java\n@@ -29,7 +29,8 @@\n         }\n     }),\n     NUMBER(Number.class, Double::parseDouble),\n-    BOOLEAN(Boolean.class, Boolean::parseBoolean);\n+    BOOLEAN(Boolean.class, Boolean::parseBoolean),\n+    GEOINDEX(String.class, value -\u003e value);\n \n     private final Class\u003c?\u003e type;\n     @SuppressWarnings(\"NonSerializableFieldInSerializableClass\")\ndiff --git a/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java b/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java\nindex 918f8ef..f568eba 100644\n--- a/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java\n+++ b/core/src/main/java/com/hp/autonomy/searchcomponents/core/config/FieldType.java\n@@ -29,7 +29,8 @@\n         }\n     }),\n     NUMBER(Number.class, Double::parseDouble),\n-    BOOLEAN(Boolean.class, Boolean::parseBoolean);\n+    BOOLEAN(Boolean.class, Boolean::parseBoolean),\n+    GEOINDEX(String.class, value -\u003e value);\n \n     private final Class\u003c?\u003e type;\n     @SuppressWarnings(\"NonSerializableFieldInSerializableClass\")\n",
    "projectName": "haven-search-components",
    "lineNum": 13,
    "nodeStartChar": 379,
    "before": "/**   * The different possible Idol field value types and how to convert them to  {@link String}  */ public enum FieldType {STRING(String.class,value -\u003e value), DATE(ZonedDateTime.class,value -\u003e {   try {     final long epoch\u003dLong.parseLong(value);     return ZonedDateTime.ofInstant(Instant.ofEpochSecond(epoch),ZoneOffset.UTC);   }  catch (  final NumberFormatException ignore) {     try {       return ZonedDateTime.parse(value);     }  catch (    final IllegalArgumentException ignored) {       return null;     }   } } ), NUMBER(Number.class,Double::parseDouble), BOOLEAN(Boolean.class,Boolean::parseBoolean); private final Class\u003c?\u003e type; @SuppressWarnings(\"NonSerializableFieldInSerializableClass\") private final Function\u003cString,?\u003e parser; FieldType(final Class\u003c?\u003e type,final Function\u003cString,?\u003e parser){   this.type\u003dtype;   this.parser\u003dparser; } public Class\u003c?\u003e getType(){   return type; } public \u003cT\u003eT parseValue(final Class\u003cT\u003e type,final String stringValue){   return type.cast(parser.apply(stringValue)); } } ",
    "after": "/**   * The different possible Idol field value types and how to convert them to  {@link String}  */ public enum FieldType {STRING(String.class,value -\u003e value), DATE(ZonedDateTime.class,value -\u003e {   try {     final long epoch\u003dLong.parseLong(value);     return ZonedDateTime.ofInstant(Instant.ofEpochSecond(epoch),ZoneOffset.UTC);   }  catch (  final NumberFormatException ignore) {     try {       return ZonedDateTime.parse(value);     }  catch (    final IllegalArgumentException ignored) {       return null;     }   } } ), NUMBER(Number.class,Double::parseDouble), BOOLEAN(Boolean.class,Boolean::parseBoolean), GEOINDEX(String.class,value -\u003e value); private final Class\u003c?\u003e type; @SuppressWarnings(\"NonSerializableFieldInSerializableClass\") private final Function\u003cString,?\u003e parser; FieldType(final Class\u003c?\u003e type,final Function\u003cString,?\u003e parser){   this.type\u003dtype;   this.parser\u003dparser; } public Class\u003c?\u003e getType(){   return type; } public \u003cT\u003eT parseValue(final Class\u003cT\u003e type,final String stringValue){   return type.cast(parser.apply(stringValue)); } } "
  },
  {
    "commitSHA1": "b67d0c4795dde3275f31105ebf3a82d15edbfe7d",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/answer/ask/AskAnswerServerServiceImpl.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/answer/ask/AskAnswerServerServiceImpl.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/answer/ask/AskAnswerServerServiceImpl.java\nindex b75bd45..fe7bf57 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/answer/ask/AskAnswerServerServiceImpl.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/answer/ask/AskAnswerServerServiceImpl.java\n@@ -52,7 +52,7 @@\n         aciParameters.add(AskParams.FirstResult.name(), request.getFirstResult());\n         aciParameters.add(AskParams.MaxResults.name(), request.getMaxResults());\n         aciParameters.add(AskParams.MinScore.name(), request.getMinScore());\n-        aciParameters.add(\"customizationData\", request.getCustomizationData());\n+        aciParameters.add(AskParams.CustomizationData.name(), request.getCustomizationData());\n \n         final Map\u003cString, String\u003e proxiedParams \u003d request.getProxiedParams();\n         if (proxiedParams !\u003d null) {\n",
    "projectName": "haven-search-components",
    "lineNum": 55,
    "nodeStartChar": 2754,
    "before": "\"customizationData\"",
    "after": "AskParams.CustomizationData.name()"
  },
  {
    "commitSHA1": "f485cfdd68ee8b95da4908f8b1032507d1b5f6db",
    "commitFile": "idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java",
    "patch": "diff --git a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\nindex adc751a..b18501b 100644\n--- a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n+++ b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n@@ -24,7 +24,7 @@\n @Configuration\n @ConditionalOnProperty(value \u003d \"mock.configuration\", matchIfMissing \u003d true)\n public class IdolTestConfiguration {\n-    private static final String DEFAULT_IDOL_HOST \u003d \"iso-idol\";\n+    private static final String DEFAULT_IDOL_HOST \u003d \"ida-idol\";\n     private static final int DEFAULT_CONTENT_PORT \u003d 9000;\n     private static final int DEFAULT_VIEW_SERVER_PORT \u003d 9080;\n     private static final String REFERENCE_FIELD_NAME \u003d \"DREREFERENCE\";\ndiff --git a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\nindex adc751a..b18501b 100644\n--- a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n+++ b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n@@ -24,7 +24,7 @@\n @Configuration\n @ConditionalOnProperty(value \u003d \"mock.configuration\", matchIfMissing \u003d true)\n public class IdolTestConfiguration {\n-    private static final String DEFAULT_IDOL_HOST \u003d \"iso-idol\";\n+    private static final String DEFAULT_IDOL_HOST \u003d \"ida-idol\";\n     private static final int DEFAULT_CONTENT_PORT \u003d 9000;\n     private static final int DEFAULT_VIEW_SERVER_PORT \u003d 9080;\n     private static final String REFERENCE_FIELD_NAME \u003d \"DREREFERENCE\";\n",
    "projectName": "haven-search-components",
    "lineNum": 27,
    "nodeStartChar": 1274,
    "before": "\"iso-idol\"",
    "after": "\"ida-idol\""
  },
  {
    "commitSHA1": "53f4e89d4eb69c06fb7282682b87e08ab08210f4",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex 4638afb..7f65b44 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -28,7 +28,7 @@\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\n \n-    StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n+    public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n         statProcessor \u003d processorFactory.forClass(Statistic.class);\n     }\n \ndiff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex 4638afb..7f65b44 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -28,7 +28,7 @@\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\n \n-    StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n+    public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n         statProcessor \u003d processorFactory.forClass(Statistic.class);\n     }\n \n",
    "projectName": "haven-search-components",
    "lineNum": 31,
    "nodeStartChar": 1175,
    "before": "StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory){   statProcessor\u003dprocessorFactory.forClass(Statistic.class); } ",
    "after": "public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory){   statProcessor\u003dprocessorFactory.forClass(Statistic.class); } "
  },
  {
    "commitSHA1": "525ec67618f76ad839e7cbabd09eb3fc32263284",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex d5d9f72..4638afb 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -22,7 +22,8 @@\n  * Implementation of {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of\n  * {@link Statistic}.\n  */\n-class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n+@SuppressWarnings(\"WeakerAccess\")\n+public class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n     private static final long serialVersionUID \u003d -5289889557164139830L;\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\ndiff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex d5d9f72..4638afb 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -22,7 +22,8 @@\n  * Implementation of {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of\n  * {@link Statistic}.\n  */\n-class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n+@SuppressWarnings(\"WeakerAccess\")\n+public class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n     private static final long serialVersionUID \u003d -5289889557164139830L;\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\n",
    "projectName": "haven-search-components",
    "lineNum": 21,
    "nodeStartChar": 774,
    "before": "/**   * Implementation of  {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of{@link Statistic}.  */ class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {   private static final long serialVersionUID\u003d-5289889557164139830L;   private final StAXProcessor\u003cStatistic\u003e statProcessor;   StatisticProcessor(  final IdolAnnotationsProcessorFactory processorFactory){     statProcessor\u003dprocessorFactory.forClass(Statistic.class);   }   @Override public Set\u003cStatistic\u003e process(  final XMLStreamReader xmlStreamReader){     final Set\u003cStatistic\u003e statistics\u003dnew HashSet\u003c\u003e();     try {       if (isErrorResponse(xmlStreamReader)) {         setErrorProcessor(new ErrorProcessor());         processErrorResponse(xmlStreamReader);       }       while (xmlStreamReader.hasNext()) {         if (xmlStreamReader.next() \u003d\u003d XMLEvent.START_ELEMENT \u0026\u0026 \"idol\".equals(xmlStreamReader.getLocalName())) {           statistics.addAll(processIdol(xmlStreamReader));         }       }     }  catch (    final XMLStreamException e) {       throw new ProcessorException(e);     }     return statistics;   }   private Collection\u003cStatistic\u003e processIdol(  final XMLStreamReader xmlStreamReader) throws XMLStreamException {     final Collection\u003cStatistic\u003e statistics\u003dnew HashSet\u003c\u003e();     String idol\u003dnull;     while (xmlStreamReader.hasNext()) {       final int next\u003dxmlStreamReader.next();       if (next \u003d\u003d XMLEvent.START_ELEMENT) {         final String localName\u003dxmlStreamReader.getLocalName();         if (\"name\".equals(localName)) {           idol\u003dxmlStreamReader.getElementText();         }  else         if (\"stat\".equals(localName)) {           statistics.add(statProcessor.process(xmlStreamReader));         }       }  else       if (next \u003d\u003d XMLEvent.END_ELEMENT \u0026\u0026 \"idol\".equals(xmlStreamReader.getLocalName())) {         if (!statistics.isEmpty() \u0026\u0026 idol \u003d\u003d null) {           throw new ProcessorException(\"No name found for idol\");         }         for (        final Statistic statistic : statistics) {           statistic.setIdol(idol);         }         return statistics;       }     }     throw new ProcessorException(\"No closing tag found for idol\");   } } ",
    "after": "/**   * Implementation of  {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of{@link Statistic}.  */ @SuppressWarnings(\"WeakerAccess\") public class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {   private static final long serialVersionUID\u003d-5289889557164139830L;   private final StAXProcessor\u003cStatistic\u003e statProcessor;   StatisticProcessor(  final IdolAnnotationsProcessorFactory processorFactory){     statProcessor\u003dprocessorFactory.forClass(Statistic.class);   }   @Override public Set\u003cStatistic\u003e process(  final XMLStreamReader xmlStreamReader){     final Set\u003cStatistic\u003e statistics\u003dnew HashSet\u003c\u003e();     try {       if (isErrorResponse(xmlStreamReader)) {         setErrorProcessor(new ErrorProcessor());         processErrorResponse(xmlStreamReader);       }       while (xmlStreamReader.hasNext()) {         if (xmlStreamReader.next() \u003d\u003d XMLEvent.START_ELEMENT \u0026\u0026 \"idol\".equals(xmlStreamReader.getLocalName())) {           statistics.addAll(processIdol(xmlStreamReader));         }       }     }  catch (    final XMLStreamException e) {       throw new ProcessorException(e);     }     return statistics;   }   private Collection\u003cStatistic\u003e processIdol(  final XMLStreamReader xmlStreamReader) throws XMLStreamException {     final Collection\u003cStatistic\u003e statistics\u003dnew HashSet\u003c\u003e();     String idol\u003dnull;     while (xmlStreamReader.hasNext()) {       final int next\u003dxmlStreamReader.next();       if (next \u003d\u003d XMLEvent.START_ELEMENT) {         final String localName\u003dxmlStreamReader.getLocalName();         if (\"name\".equals(localName)) {           idol\u003dxmlStreamReader.getElementText();         }  else         if (\"stat\".equals(localName)) {           statistics.add(statProcessor.process(xmlStreamReader));         }       }  else       if (next \u003d\u003d XMLEvent.END_ELEMENT \u0026\u0026 \"idol\".equals(xmlStreamReader.getLocalName())) {         if (!statistics.isEmpty() \u0026\u0026 idol \u003d\u003d null) {           throw new ProcessorException(\"No name found for idol\");         }         for (        final Statistic statistic : statistics) {           statistic.setIdol(idol);         }         return statistics;       }     }     throw new ProcessorException(\"No closing tag found for idol\");   } } "
  },
  {
    "commitSHA1": "b7c8060704dd37cf0e9802b5496c713f28ab782c",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java\nindex b52296a..33e850a 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java\n@@ -48,7 +48,7 @@\n public class IdolParametricValuesService implements ParametricValuesService\u003cIdolParametricRequest, String, AciErrorException\u003e {\n     private static final String VALUE_NODE_NAME \u003d \"value\";\n     private static final Pattern CSV_SEPARATOR_PATTERN \u003d Pattern.compile(\",\\\\s*\");\n-    private static final String IDOL_PARAMETRIC_DATE_FORMAT \u003d \"hh:mm:ss dd/MM/yyyy\";\n+    private static final String IDOL_PARAMETRIC_DATE_FORMAT \u003d \"HH:mm:ss dd/MM/yyyy\";\n \n     private final HavenSearchAciParameterHandler parameterHandler;\n     private final FieldsService\u003cIdolFieldsRequest, AciErrorException\u003e fieldsService;\ndiff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java\nindex b52296a..33e850a 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/parametricvalues/IdolParametricValuesService.java\n@@ -48,7 +48,7 @@\n public class IdolParametricValuesService implements ParametricValuesService\u003cIdolParametricRequest, String, AciErrorException\u003e {\n     private static final String VALUE_NODE_NAME \u003d \"value\";\n     private static final Pattern CSV_SEPARATOR_PATTERN \u003d Pattern.compile(\",\\\\s*\");\n-    private static final String IDOL_PARAMETRIC_DATE_FORMAT \u003d \"hh:mm:ss dd/MM/yyyy\";\n+    private static final String IDOL_PARAMETRIC_DATE_FORMAT \u003d \"HH:mm:ss dd/MM/yyyy\";\n \n     private final HavenSearchAciParameterHandler parameterHandler;\n     private final FieldsService\u003cIdolFieldsRequest, AciErrorException\u003e fieldsService;\n",
    "projectName": "haven-search-components",
    "lineNum": 51,
    "nodeStartChar": 2454,
    "before": "\"hh:mm:ss dd/MM/yyyy\"",
    "after": "\"HH:mm:ss dd/MM/yyyy\""
  },
  {
    "commitSHA1": "c980adc7679cad17e663223298652f83bf2cea96",
    "commitFile": "idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java",
    "patch": "diff --git a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\nindex ba38af6..c712637 100644\n--- a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n+++ b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n@@ -69,7 +69,7 @@\n \n         final AciServerDetails contentAciServerDetails \u003d new AciServerDetails(\n                 environment.getProperty(\"test.content.host\", DEFAULT_IDOL_HOST),\n-                Integer.parseInt(environment.getProperty(\"test.view.port\", String.valueOf(DEFAULT_CONTENT_PORT)))\n+                Integer.parseInt(environment.getProperty(\"test.content.port\", String.valueOf(DEFAULT_CONTENT_PORT)))\n         );\n \n         final IdolSearchCapable config \u003d mock(IdolSearchCapable.class);\ndiff --git a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\nindex ba38af6..c712637 100644\n--- a/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n+++ b/idol/src/test/java/com/hp/autonomy/searchcomponents/idol/test/IdolTestConfiguration.java\n@@ -69,7 +69,7 @@\n \n         final AciServerDetails contentAciServerDetails \u003d new AciServerDetails(\n                 environment.getProperty(\"test.content.host\", DEFAULT_IDOL_HOST),\n-                Integer.parseInt(environment.getProperty(\"test.view.port\", String.valueOf(DEFAULT_CONTENT_PORT)))\n+                Integer.parseInt(environment.getProperty(\"test.content.port\", String.valueOf(DEFAULT_CONTENT_PORT)))\n         );\n \n         final IdolSearchCapable config \u003d mock(IdolSearchCapable.class);\n",
    "projectName": "haven-search-components",
    "lineNum": 72,
    "nodeStartChar": 3663,
    "before": "\"test.view.port\"",
    "after": "\"test.content.port\""
  },
  {
    "commitSHA1": "04ac92ab6a89120993023328199f80232547fa1a",
    "commitFile": "hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java",
    "patch": "diff --git a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\nindex 095ab94..18b0c04 100644\n--- a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n+++ b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n@@ -92,7 +92,7 @@\n         final List\u003cHodSearchResult\u003e documentList \u003d new LinkedList\u003c\u003e();\n         addDomainToSearchResults(documentList, suggestRequest.getQueryRestrictions().getDatabases(), results.getDocuments());\n \n-        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection());\n+        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection(), results.getWarnings());\n     }\n \n     @Cacheable(CacheNames.GET_DOCUMENT_CONTENT)\ndiff --git a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\nindex 095ab94..18b0c04 100644\n--- a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n+++ b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n@@ -92,7 +92,7 @@\n         final List\u003cHodSearchResult\u003e documentList \u003d new LinkedList\u003c\u003e();\n         addDomainToSearchResults(documentList, suggestRequest.getQueryRestrictions().getDatabases(), results.getDocuments());\n \n-        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection());\n+        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection(), results.getWarnings());\n     }\n \n     @Cacheable(CacheNames.GET_DOCUMENT_CONTENT)\n",
    "projectName": "haven-search-components",
    "lineNum": 95,
    "nodeStartChar": 5442,
    "before": "new Documents\u003c\u003e(documentList,results.getTotalResults(),results.getExpandedQuery(),results.getSuggestion(),results.getAutoCorrection())",
    "after": "new Documents\u003c\u003e(documentList,results.getTotalResults(),results.getExpandedQuery(),results.getSuggestion(),results.getAutoCorrection(),results.getWarnings())"
  },
  {
    "commitSHA1": "337c1961f20659f67f4aa0e5cfd65984f30de567",
    "commitFile": "hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java",
    "patch": "diff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\ndiff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\n",
    "projectName": "hbc",
    "lineNum": 61,
    "nodeStartChar": 2366,
    "before": "makeControlStreamRequest(request)",
    "after": "consumeHttpEntityContent(makeControlStreamRequest(request))"
  },
  {
    "commitSHA1": "337c1961f20659f67f4aa0e5cfd65984f30de567",
    "commitFile": "hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java",
    "patch": "diff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\ndiff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\n",
    "projectName": "hbc",
    "lineNum": 69,
    "nodeStartChar": 2758,
    "before": "makeControlStreamRequest(request)",
    "after": "consumeHttpEntityContent(makeControlStreamRequest(request))"
  },
  {
    "commitSHA1": "6b0584dc1ad97847e7e0cd07c099b5a7cda62249",
    "commitFile": "hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java",
    "patch": "diff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\ndiff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\n",
    "projectName": "hbc",
    "lineNum": 61,
    "nodeStartChar": 2366,
    "before": "makeControlStreamRequest(request)",
    "after": "consumeHttpEntityContent(makeControlStreamRequest(request))"
  },
  {
    "commitSHA1": "6b0584dc1ad97847e7e0cd07c099b5a7cda62249",
    "commitFile": "hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java",
    "patch": "diff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\ndiff --git a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\nindex 60beb56..1a59828 100644\n--- a/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n+++ b/hbc-core/src/main/java/com/twitter/hbc/SitestreamController.java\n@@ -58,7 +58,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public void removeUser(String streamId, long userId) throws IOException, ControlStreamException {\n@@ -66,7 +66,7 @@\n     endpoint.addPostParameter(Constants.USER_ID_PARAM, Long.toString(userId));\n \n     HttpUriRequest request \u003d HttpConstants.constructRequest(hosts.nextHost(), endpoint, auth);\n-    makeControlStreamRequest(request);\n+    consumeHttpEntityContent(makeControlStreamRequest(request));\n   }\n \n   public String getFriends(String streamId, long userId) throws IOException, ControlStreamException {\n",
    "projectName": "hbc",
    "lineNum": 69,
    "nodeStartChar": 2758,
    "before": "makeControlStreamRequest(request)",
    "after": "consumeHttpEntityContent(makeControlStreamRequest(request))"
  },
  {
    "commitSHA1": "6f46e49e9510bb8e15f124d905f7516419417fad",
    "commitFile": "src/main/java/org/holmes/HolmesEngine.java",
    "patch": "diff --git a/src/main/java/org/holmes/HolmesEngine.java b/src/main/java/org/holmes/HolmesEngine.java\nindex dd883a1..3e89fb0 100644\n--- a/src/main/java/org/holmes/HolmesEngine.java\n+++ b/src/main/java/org/holmes/HolmesEngine.java\n@@ -126,15 +126,15 @@\n \t}\n \n \t/**\n-\t * Creates a new {@link Rule} for a {@link Object} target type.\n+\t * Creates a new {@link Rule} for a generic {@link Object} target type.\n \t * \n \t * @param object\n \t *            the target\n \t * @return an appropriated {@link Evaluator} for the given target type.\n \t */\n-\tpublic ObjectEvaluator\u003cObject\u003e ensureThat(final Object object) {\n+\tpublic \u003cT\u003e ObjectEvaluator\u003cT\u003e ensureThat(final T object) {\n \n-\t\treturn configure(new ObjectEvaluator\u003cObject\u003e(object));\n+\t\treturn configure(new ObjectEvaluator\u003cT\u003e(object));\n \t}\n \n \t/**\ndiff --git a/src/main/java/org/holmes/HolmesEngine.java b/src/main/java/org/holmes/HolmesEngine.java\nindex dd883a1..3e89fb0 100644\n--- a/src/main/java/org/holmes/HolmesEngine.java\n+++ b/src/main/java/org/holmes/HolmesEngine.java\n@@ -126,15 +126,15 @@\n \t}\n \n \t/**\n-\t * Creates a new {@link Rule} for a {@link Object} target type.\n+\t * Creates a new {@link Rule} for a generic {@link Object} target type.\n \t * \n \t * @param object\n \t *            the target\n \t * @return an appropriated {@link Evaluator} for the given target type.\n \t */\n-\tpublic ObjectEvaluator\u003cObject\u003e ensureThat(final Object object) {\n+\tpublic \u003cT\u003e ObjectEvaluator\u003cT\u003e ensureThat(final T object) {\n \n-\t\treturn configure(new ObjectEvaluator\u003cObject\u003e(object));\n+\t\treturn configure(new ObjectEvaluator\u003cT\u003e(object));\n \t}\n \n \t/**\n",
    "projectName": "holmes-validation",
    "lineNum": 137,
    "nodeStartChar": 3455,
    "before": "Object",
    "after": "T"
  },
  {
    "commitSHA1": "6e75a4eb53446fbe9d0a582f56b3ca1c158560b6",
    "commitFile": "src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java",
    "patch": "diff --git a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\nindex b720c9c..482f636 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n@@ -201,7 +201,7 @@\n     public JSONArray getQualityProfileConfigurationChanges(String instanceUrl,String qualityProfile) throws ParseException{\n     \tString url \u003d instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;\n     \ttry {\n-    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(instanceUrl, \"events\");\n+    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(url, \"events\");\n     \t\treturn qualityProfileConfigChanges;\n     \t} catch (ParseException e) {\n     \t\tLOG.error(\"Could not parse response from: \" + url, e);\ndiff --git a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\nindex b720c9c..482f636 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n@@ -201,7 +201,7 @@\n     public JSONArray getQualityProfileConfigurationChanges(String instanceUrl,String qualityProfile) throws ParseException{\n     \tString url \u003d instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;\n     \ttry {\n-    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(instanceUrl, \"events\");\n+    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(url, \"events\");\n     \t\treturn qualityProfileConfigChanges;\n     \t} catch (ParseException e) {\n     \t\tLOG.error(\"Could not parse response from: \" + url, e);\n",
    "projectName": "hygieia-codequality-sonar-collector",
    "lineNum": 204,
    "nodeStartChar": 8764,
    "before": "this.parseAsArray(instanceUrl,\"events\")",
    "after": "this.parseAsArray(url,\"events\")"
  },
  {
    "commitSHA1": "fa54c2d5f8922245e50103d0ca9b5c003e9d9ef4",
    "commitFile": "src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java",
    "patch": "diff --git a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\nindex 40ce82a..0424447 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n@@ -17,6 +17,6 @@\n     }\n \n     public SonarClient getSonarClient(Double version) {\n-        return ((version \u003d\u003d null) || (version \u003c 6.0)) ? sonarClient : sonar6Client;\n+        return ((version \u003d\u003d null) || (version \u003c 6.3)) ? sonarClient : sonar6Client;\n     }\n }\ndiff --git a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\nindex 40ce82a..0424447 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n@@ -17,6 +17,6 @@\n     }\n \n     public SonarClient getSonarClient(Double version) {\n-        return ((version \u003d\u003d null) || (version \u003c 6.0)) ? sonarClient : sonar6Client;\n+        return ((version \u003d\u003d null) || (version \u003c 6.3)) ? sonarClient : sonar6Client;\n     }\n }\n",
    "projectName": "hygieia-codequality-sonar-collector",
    "lineNum": 20,
    "nodeStartChar": 616,
    "before": "6.0",
    "after": "6.3"
  },
  {
    "commitSHA1": "8186d7b4551e79814c3614ed73540752ee85f43b",
    "commitFile": "src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java",
    "patch": "diff --git a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\nindex 6ae0be0..58ee935 100644\n--- a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n+++ b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n@@ -17,20 +17,20 @@\n \n     @Test(expected \u003d TypeNotResolvedException.class)\n     public void testNotRegistered() {\n-        DataObject dataObject \u003d mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n+        @SuppressWarnings(\"unused\") DataObject dataObject \u003d mInjector.resolve(DataObject.class);\n     }\n \n     @Test\n     public void testRegister() {\n         mInjector.register(DataObject.class, DerivedDataObject.class);\n \n-        Assert.assertTrue(mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject);\n+        Assert.assertTrue(mInjector.resolve(DataObject.class) instanceof DerivedDataObject);\n     }\n \n     @Test(expected \u003d ConstructorException.class)\n     public void testRegisterConstructorless() {\n         mInjector.register(DataObject.class, ConstructorlessDataObject.class);\n \n-        mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n+        mInjector.resolve(DataObject.class);\n     }\n }\n",
    "projectName": "inject",
    "lineNum": 20,
    "nodeStartChar": 489,
    "before": "DataObject dataObject\u003dmInjector.\u003cDataObject\u003eresolve(DataObject.class); ",
    "after": "@SuppressWarnings(\"unused\") DataObject dataObject\u003dmInjector.resolve(DataObject.class); "
  },
  {
    "commitSHA1": "8186d7b4551e79814c3614ed73540752ee85f43b",
    "commitFile": "src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java",
    "patch": "diff --git a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\nindex 6ae0be0..58ee935 100644\n--- a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n+++ b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n@@ -17,20 +17,20 @@\n \n     @Test(expected \u003d TypeNotResolvedException.class)\n     public void testNotRegistered() {\n-        DataObject dataObject \u003d mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n+        @SuppressWarnings(\"unused\") DataObject dataObject \u003d mInjector.resolve(DataObject.class);\n     }\n \n     @Test\n     public void testRegister() {\n         mInjector.register(DataObject.class, DerivedDataObject.class);\n \n-        Assert.assertTrue(mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject);\n+        Assert.assertTrue(mInjector.resolve(DataObject.class) instanceof DerivedDataObject);\n     }\n \n     @Test(expected \u003d ConstructorException.class)\n     public void testRegisterConstructorless() {\n         mInjector.register(DataObject.class, ConstructorlessDataObject.class);\n \n-        mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n+        mInjector.resolve(DataObject.class);\n     }\n }\n",
    "projectName": "inject",
    "lineNum": 27,
    "nodeStartChar": 710,
    "before": "mInjector.\u003cDataObject\u003eresolve(DataObject.class)",
    "after": "mInjector.resolve(DataObject.class)"
  },
  {
    "commitSHA1": "8186d7b4551e79814c3614ed73540752ee85f43b",
    "commitFile": "src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java",
    "patch": "diff --git a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\nindex 6ae0be0..58ee935 100644\n--- a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n+++ b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n@@ -17,20 +17,20 @@\n \n     @Test(expected \u003d TypeNotResolvedException.class)\n     public void testNotRegistered() {\n-        DataObject dataObject \u003d mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n+        @SuppressWarnings(\"unused\") DataObject dataObject \u003d mInjector.resolve(DataObject.class);\n     }\n \n     @Test\n     public void testRegister() {\n         mInjector.register(DataObject.class, DerivedDataObject.class);\n \n-        Assert.assertTrue(mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject);\n+        Assert.assertTrue(mInjector.resolve(DataObject.class) instanceof DerivedDataObject);\n     }\n \n     @Test(expected \u003d ConstructorException.class)\n     public void testRegisterConstructorless() {\n         mInjector.register(DataObject.class, ConstructorlessDataObject.class);\n \n-        mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n+        mInjector.resolve(DataObject.class);\n     }\n }\n",
    "projectName": "inject",
    "lineNum": 34,
    "nodeStartChar": 981,
    "before": "mInjector.\u003cDataObject\u003eresolve(DataObject.class)",
    "after": "mInjector.resolve(DataObject.class)"
  },
  {
    "commitSHA1": "e1062b4f7fe16f46c2992bf38369a63ff8bd1845",
    "commitFile": "src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java",
    "patch": "diff --git a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\nindex fd2c1fa..6ae0be0 100644\n--- a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n+++ b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n@@ -17,20 +17,20 @@\n \n     @Test(expected \u003d TypeNotResolvedException.class)\n     public void testNotRegistered() {\n-        DataObject dataObject \u003d (DataObject) mInjector.resolve(DataObject.class);\n+        DataObject dataObject \u003d mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n     }\n \n     @Test\n     public void testRegister() {\n         mInjector.register(DataObject.class, DerivedDataObject.class);\n \n-        Assert.assertTrue(mInjector.resolve(DataObject.class) instanceof DataObject);\n+        Assert.assertTrue(mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject);\n     }\n \n     @Test(expected \u003d ConstructorException.class)\n     public void testRegisterConstructorless() {\n         mInjector.register(DataObject.class, ConstructorlessDataObject.class);\n \n-        mInjector.resolve(DataObject.class);\n+        mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n     }\n }\n",
    "projectName": "inject",
    "lineNum": 20,
    "nodeStartChar": 513,
    "before": "(DataObject)mInjector.resolve(DataObject.class)",
    "after": "mInjector.\u003cDataObject\u003eresolve(DataObject.class)"
  },
  {
    "commitSHA1": "e1062b4f7fe16f46c2992bf38369a63ff8bd1845",
    "commitFile": "src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java",
    "patch": "diff --git a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\nindex fd2c1fa..6ae0be0 100644\n--- a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n+++ b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n@@ -17,20 +17,20 @@\n \n     @Test(expected \u003d TypeNotResolvedException.class)\n     public void testNotRegistered() {\n-        DataObject dataObject \u003d (DataObject) mInjector.resolve(DataObject.class);\n+        DataObject dataObject \u003d mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n     }\n \n     @Test\n     public void testRegister() {\n         mInjector.register(DataObject.class, DerivedDataObject.class);\n \n-        Assert.assertTrue(mInjector.resolve(DataObject.class) instanceof DataObject);\n+        Assert.assertTrue(mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject);\n     }\n \n     @Test(expected \u003d ConstructorException.class)\n     public void testRegisterConstructorless() {\n         mInjector.register(DataObject.class, ConstructorlessDataObject.class);\n \n-        mInjector.resolve(DataObject.class);\n+        mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n     }\n }\n",
    "projectName": "inject",
    "lineNum": 27,
    "nodeStartChar": 711,
    "before": "mInjector.resolve(DataObject.class) instanceof DataObject",
    "after": "mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject"
  },
  {
    "commitSHA1": "e1062b4f7fe16f46c2992bf38369a63ff8bd1845",
    "commitFile": "src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java",
    "patch": "diff --git a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\nindex fd2c1fa..6ae0be0 100644\n--- a/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n+++ b/src/test/java/nl/svendubbeld/inject/InjectorJavaTest.java\n@@ -17,20 +17,20 @@\n \n     @Test(expected \u003d TypeNotResolvedException.class)\n     public void testNotRegistered() {\n-        DataObject dataObject \u003d (DataObject) mInjector.resolve(DataObject.class);\n+        DataObject dataObject \u003d mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n     }\n \n     @Test\n     public void testRegister() {\n         mInjector.register(DataObject.class, DerivedDataObject.class);\n \n-        Assert.assertTrue(mInjector.resolve(DataObject.class) instanceof DataObject);\n+        Assert.assertTrue(mInjector.\u003cDataObject\u003eresolve(DataObject.class) instanceof DerivedDataObject);\n     }\n \n     @Test(expected \u003d ConstructorException.class)\n     public void testRegisterConstructorless() {\n         mInjector.register(DataObject.class, ConstructorlessDataObject.class);\n \n-        mInjector.resolve(DataObject.class);\n+        mInjector.\u003cDataObject\u003eresolve(DataObject.class);\n     }\n }\n",
    "projectName": "inject",
    "lineNum": 34,
    "nodeStartChar": 963,
    "before": "mInjector.resolve(DataObject.class)",
    "after": "mInjector.\u003cDataObject\u003eresolve(DataObject.class)"
  },
  {
    "commitSHA1": "7ec0740ae7612c5c8df219db01332df65d5032a1",
    "commitFile": "invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java",
    "patch": "diff --git a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\nindex a770988..ecc2983 100644\n--- a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n+++ b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n@@ -27,10 +27,10 @@\n     @Steps\n     SearchSteps searchSteps;\n \n-    @TestData(\"data/search/xml.yaml\")\n+    @TestData(\"data/search/xml.yml\")\n     SearchData xml;\n \n-    @TestData(\"data/search/json.yaml\")\n+    @TestData(\"data/search/json.yml\")\n     SearchData json;\n \n     @Test\ndiff --git a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\nindex a770988..ecc2983 100644\n--- a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n+++ b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n@@ -27,10 +27,10 @@\n     @Steps\n     SearchSteps searchSteps;\n \n-    @TestData(\"data/search/xml.yaml\")\n+    @TestData(\"data/search/xml.yml\")\n     SearchData xml;\n \n-    @TestData(\"data/search/json.yaml\")\n+    @TestData(\"data/search/json.yml\")\n     SearchData json;\n \n     @Test\n",
    "projectName": "invictum-test",
    "lineNum": 30,
    "nodeStartChar": 883,
    "before": "\"data/search/xml.yaml\"",
    "after": "\"data/search/xml.yml\""
  },
  {
    "commitSHA1": "7ec0740ae7612c5c8df219db01332df65d5032a1",
    "commitFile": "invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java",
    "patch": "diff --git a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\nindex a770988..ecc2983 100644\n--- a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n+++ b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n@@ -27,10 +27,10 @@\n     @Steps\n     SearchSteps searchSteps;\n \n-    @TestData(\"data/search/xml.yaml\")\n+    @TestData(\"data/search/xml.yml\")\n     SearchData xml;\n \n-    @TestData(\"data/search/json.yaml\")\n+    @TestData(\"data/search/json.yml\")\n     SearchData json;\n \n     @Test\ndiff --git a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\nindex a770988..ecc2983 100644\n--- a/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n+++ b/invictum-junit-archetype/src/main/resources/archetype-resources/src/test/java/WikiSearchTest.java\n@@ -27,10 +27,10 @@\n     @Steps\n     SearchSteps searchSteps;\n \n-    @TestData(\"data/search/xml.yaml\")\n+    @TestData(\"data/search/xml.yml\")\n     SearchData xml;\n \n-    @TestData(\"data/search/json.yaml\")\n+    @TestData(\"data/search/json.yml\")\n     SearchData json;\n \n     @Test\n",
    "projectName": "invictum-test",
    "lineNum": 33,
    "nodeStartChar": 942,
    "before": "\"data/search/json.yaml\"",
    "after": "\"data/search/json.yml\""
  },
  {
    "commitSHA1": "7e034ff8352c350a27b9603fc8c684643681de0b",
    "commitFile": "src/main/java/com/github/invictum/utils/ResourceProvider.java",
    "patch": "diff --git a/src/main/java/com/github/invictum/utils/ResourceProvider.java b/src/main/java/com/github/invictum/utils/ResourceProvider.java\nindex 1abe795..22a4bfd 100644\n--- a/src/main/java/com/github/invictum/utils/ResourceProvider.java\n+++ b/src/main/java/com/github/invictum/utils/ResourceProvider.java\n@@ -15,7 +15,7 @@\n     @SuppressWarnings(\"all\")\n     private static File getRoot(String rootPath) {\n         try {\n-            return new File(ResourceProvider.class.getClassLoader().getResource(rootPath).getFile());\n+            return new File(Thread.currentThread().getContextClassLoader().getResource(rootPath).getFile());\n         } catch (RuntimeException e) {\n             throw new IllegalStateException(String.format(\"Failed to detect root at %s\", rootPath));\n         }\ndiff --git a/src/main/java/com/github/invictum/utils/ResourceProvider.java b/src/main/java/com/github/invictum/utils/ResourceProvider.java\nindex 1abe795..22a4bfd 100644\n--- a/src/main/java/com/github/invictum/utils/ResourceProvider.java\n+++ b/src/main/java/com/github/invictum/utils/ResourceProvider.java\n@@ -15,7 +15,7 @@\n     @SuppressWarnings(\"all\")\n     private static File getRoot(String rootPath) {\n         try {\n-            return new File(ResourceProvider.class.getClassLoader().getResource(rootPath).getFile());\n+            return new File(Thread.currentThread().getContextClassLoader().getResource(rootPath).getFile());\n         } catch (RuntimeException e) {\n             throw new IllegalStateException(String.format(\"Failed to detect root at %s\", rootPath));\n         }\n",
    "projectName": "invictum-test",
    "lineNum": 18,
    "nodeStartChar": 485,
    "before": "ResourceProvider.class",
    "after": "Thread.currentThread()"
  },
  {
    "commitSHA1": "963c0824577f287736c67d242dd2826fce2e24a0",
    "commitFile": "src/main/java/com/github/invictum/utils/ResourceProvider.java",
    "patch": "diff --git a/src/main/java/com/github/invictum/utils/ResourceProvider.java b/src/main/java/com/github/invictum/utils/ResourceProvider.java\nindex 22a4bfd..1abe795 100644\n--- a/src/main/java/com/github/invictum/utils/ResourceProvider.java\n+++ b/src/main/java/com/github/invictum/utils/ResourceProvider.java\n@@ -15,7 +15,7 @@\n     @SuppressWarnings(\"all\")\n     private static File getRoot(String rootPath) {\n         try {\n-            return new File(Thread.currentThread().getContextClassLoader().getResource(rootPath).getFile());\n+            return new File(ResourceProvider.class.getClassLoader().getResource(rootPath).getFile());\n         } catch (RuntimeException e) {\n             throw new IllegalStateException(String.format(\"Failed to detect root at %s\", rootPath));\n         }\ndiff --git a/src/main/java/com/github/invictum/utils/ResourceProvider.java b/src/main/java/com/github/invictum/utils/ResourceProvider.java\nindex 22a4bfd..1abe795 100644\n--- a/src/main/java/com/github/invictum/utils/ResourceProvider.java\n+++ b/src/main/java/com/github/invictum/utils/ResourceProvider.java\n@@ -15,7 +15,7 @@\n     @SuppressWarnings(\"all\")\n     private static File getRoot(String rootPath) {\n         try {\n-            return new File(Thread.currentThread().getContextClassLoader().getResource(rootPath).getFile());\n+            return new File(ResourceProvider.class.getClassLoader().getResource(rootPath).getFile());\n         } catch (RuntimeException e) {\n             throw new IllegalStateException(String.format(\"Failed to detect root at %s\", rootPath));\n         }\n",
    "projectName": "invictum-test",
    "lineNum": 18,
    "nodeStartChar": 485,
    "before": "Thread.currentThread()",
    "after": "ResourceProvider.class"
  },
  {
    "commitSHA1": "f331eb9eb376cfc6cfedfc3ebb05dd123a2e4dd1",
    "commitFile": "src/main/java/j2html/tags/DomContentJoiner.java",
    "patch": "diff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\ndiff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\n",
    "projectName": "j2html",
    "lineNum": 9,
    "nodeStartChar": 369,
    "before": "\" \"",
    "after": "delimiter"
  },
  {
    "commitSHA1": "f331eb9eb376cfc6cfedfc3ebb05dd123a2e4dd1",
    "commitFile": "src/main/java/j2html/tags/DomContentJoiner.java",
    "patch": "diff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\ndiff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\n",
    "projectName": "j2html",
    "lineNum": 11,
    "nodeStartChar": 492,
    "before": "\" \"",
    "after": "delimiter"
  },
  {
    "commitSHA1": "d37dc1cac6b59c3a94cab01038eafaa758965b35",
    "commitFile": "src/main/java/j2html/tags/DomContentJoiner.java",
    "patch": "diff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\ndiff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\n",
    "projectName": "j2html",
    "lineNum": 9,
    "nodeStartChar": 369,
    "before": "\" \"",
    "after": "delimiter"
  },
  {
    "commitSHA1": "d37dc1cac6b59c3a94cab01038eafaa758965b35",
    "commitFile": "src/main/java/j2html/tags/DomContentJoiner.java",
    "patch": "diff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\ndiff --git a/src/main/java/j2html/tags/DomContentJoiner.java b/src/main/java/j2html/tags/DomContentJoiner.java\nindex f04db3c..f80ee25 100644\n--- a/src/main/java/j2html/tags/DomContentJoiner.java\n+++ b/src/main/java/j2html/tags/DomContentJoiner.java\n@@ -6,9 +6,9 @@\n         StringBuilder sb \u003d new StringBuilder();\n         for (Object o : stringOrDomObjects) {\n             if (o instanceof String) {\n-                sb.append(((String) o).trim()).append(\" \");\n+                sb.append(((String) o).trim()).append(delimiter);\n             } else if (o instanceof DomContent) {\n-                sb.append(((DomContent) o).render().trim()).append(\" \");\n+                sb.append(((DomContent) o).render().trim()).append(delimiter);\n             } else {\n                 throw new RuntimeException(\"You can only join DomContent and String objects\");\n             }\n",
    "projectName": "j2html",
    "lineNum": 11,
    "nodeStartChar": 492,
    "before": "\" \"",
    "after": "delimiter"
  },
  {
    "commitSHA1": "d1613b0570bfdff0968c235959f7ca1df0a50cc4",
    "commitFile": "src/main/java/j2html/tags/ContainerTag.java",
    "patch": "diff --git a/src/main/java/j2html/tags/ContainerTag.java b/src/main/java/j2html/tags/ContainerTag.java\nindex 64be8b2..8d13b9a 100644\n--- a/src/main/java/j2html/tags/ContainerTag.java\n+++ b/src/main/java/j2html/tags/ContainerTag.java\n@@ -22,7 +22,7 @@\n      */\n     public ContainerTag with(DomContent child) {\n         if (this \u003d\u003d child) {\n-            throw new Error(\"Cannot append a tag to itself.\");\n+            throw new RuntimeException(\"Cannot append a tag to itself.\");\n         }\n         children.add(child);\n         return this;\ndiff --git a/src/main/java/j2html/tags/ContainerTag.java b/src/main/java/j2html/tags/ContainerTag.java\nindex 64be8b2..8d13b9a 100644\n--- a/src/main/java/j2html/tags/ContainerTag.java\n+++ b/src/main/java/j2html/tags/ContainerTag.java\n@@ -22,7 +22,7 @@\n      */\n     public ContainerTag with(DomContent child) {\n         if (this \u003d\u003d child) {\n-            throw new Error(\"Cannot append a tag to itself.\");\n+            throw new RuntimeException(\"Cannot append a tag to itself.\");\n         }\n         children.add(child);\n         return this;\n",
    "projectName": "j2html",
    "lineNum": 25,
    "nodeStartChar": 592,
    "before": "Error",
    "after": "RuntimeException"
  },
  {
    "commitSHA1": "673a19faaa5922051eba8b0a2822dc210b1cf888",
    "commitFile": "src/test/java/j2html/tags/TagCreatorTest.java",
    "patch": "diff --git a/src/test/java/j2html/tags/TagCreatorTest.java b/src/test/java/j2html/tags/TagCreatorTest.java\nindex d075b16..a8bb25d 100644\n--- a/src/test/java/j2html/tags/TagCreatorTest.java\n+++ b/src/test/java/j2html/tags/TagCreatorTest.java\n@@ -73,7 +73,7 @@\n         assertEquals(scriptWithInlineFile_min(\"/test.js\").render(), \"\u003cscript\u003e(function(){console.log(15)})();\u003c/script\u003e\");\n         assertEquals(fileAsString(\"/test.html\").render(), \"\u003cbody\u003e\" + EOL + \"    Any content\" + EOL + \"\u003c/body\u003e\" + EOL);\n         assertEquals(fileAsEscapedString(\"/test.html\").render(), \"\u0026lt;body\u0026gt;\" + EOL + \"    Any content\" + EOL + \"\u0026lt;/body\u0026gt;\" + EOL);\n-        assertEquals(fileAsString(\"/test.java\").render(), \"public class AnyContent{}\" + EOL);\n+        assertEquals(fileAsString(\"/AnyContent.java\").render(), \"public class AnyContent{}\" + EOL);\n \n         //EmptyTags\n         assertEquals(document().render(), \"\u003c!DOCTYPE html\u003e\");\ndiff --git a/src/test/java/j2html/tags/TagCreatorTest.java b/src/test/java/j2html/tags/TagCreatorTest.java\nindex d075b16..a8bb25d 100644\n--- a/src/test/java/j2html/tags/TagCreatorTest.java\n+++ b/src/test/java/j2html/tags/TagCreatorTest.java\n@@ -73,7 +73,7 @@\n         assertEquals(scriptWithInlineFile_min(\"/test.js\").render(), \"\u003cscript\u003e(function(){console.log(15)})();\u003c/script\u003e\");\n         assertEquals(fileAsString(\"/test.html\").render(), \"\u003cbody\u003e\" + EOL + \"    Any content\" + EOL + \"\u003c/body\u003e\" + EOL);\n         assertEquals(fileAsEscapedString(\"/test.html\").render(), \"\u0026lt;body\u0026gt;\" + EOL + \"    Any content\" + EOL + \"\u0026lt;/body\u0026gt;\" + EOL);\n-        assertEquals(fileAsString(\"/test.java\").render(), \"public class AnyContent{}\" + EOL);\n+        assertEquals(fileAsString(\"/AnyContent.java\").render(), \"public class AnyContent{}\" + EOL);\n \n         //EmptyTags\n         assertEquals(document().render(), \"\u003c!DOCTYPE html\u003e\");\n",
    "projectName": "j2html",
    "lineNum": 76,
    "nodeStartChar": 3477,
    "before": "\"/test.java\"",
    "after": "\"/AnyContent.java\""
  },
  {
    "commitSHA1": "d09eb8597cb1cb0d38a305b9ca75f6f91fbe077c",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 620,
    "nodeStartChar": 22589,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "d09eb8597cb1cb0d38a305b9ca75f6f91fbe077c",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 632,
    "nodeStartChar": 22838,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "d09eb8597cb1cb0d38a305b9ca75f6f91fbe077c",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 644,
    "nodeStartChar": 23089,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "d09eb8597cb1cb0d38a305b9ca75f6f91fbe077c",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 64578cf..288ad99 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -617,7 +617,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -629,7 +629,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -641,7 +641,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -653,7 +653,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 656,
    "nodeStartChar": 23341,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "b11af765fab0965d0be27d297d2be7437a905591",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 618,
    "nodeStartChar": 22560,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "b11af765fab0965d0be27d297d2be7437a905591",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 630,
    "nodeStartChar": 22809,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "b11af765fab0965d0be27d297d2be7437a905591",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 642,
    "nodeStartChar": 23060,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "b11af765fab0965d0be27d297d2be7437a905591",
    "commitFile": "src/main/java/j2html/utils/CSSMin.java",
    "patch": "diff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\ndiff --git a/src/main/java/j2html/utils/CSSMin.java b/src/main/java/j2html/utils/CSSMin.java\nindex 73b04cf..a830b83 100644\n--- a/src/main/java/j2html/utils/CSSMin.java\n+++ b/src/main/java/j2html/utils/CSSMin.java\n@@ -615,7 +615,7 @@\n }\n \n class IncompletePropertyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompletePropertyException(String message) {\n         this.message \u003d message;\n@@ -627,7 +627,7 @@\n }\n \n class EmptySelectorBodyException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     EmptySelectorBodyException(String message) {\n         this.message \u003d message;\n@@ -639,7 +639,7 @@\n }\n \n class UnterminatedSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     UnterminatedSelectorException(String message) {\n         this.message \u003d message;\n@@ -651,7 +651,7 @@\n }\n \n class IncompleteSelectorException extends Exception {\n-    private String message \u003d null;\n+    private final String message;\n \n     IncompleteSelectorException(String message) {\n         this.message \u003d message;\n",
    "projectName": "j2html",
    "lineNum": 654,
    "nodeStartChar": 23312,
    "before": "private String message\u003dnull; ",
    "after": "private final String message; "
  },
  {
    "commitSHA1": "7372ca7978bf63825315bd3b38e04bc2375c7039",
    "commitFile": "src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java",
    "patch": "diff --git a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\nindex 207aa45..604a0ea 100644\n--- a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n+++ b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n@@ -291,7 +291,7 @@\n         // Events - there can be multiple so check them all\n         if(event.contains(Returned) \u0026\u0026 \n                 ((Returned.getIntId()\u0026 eventMask) \u003d\u003d Returned.getIntId())) {\n-            fireChangeEvent(new EscrowedEvent(evt));\n+            fireChangeEvent(new ReturnedEvent(evt));\n         }\n         if(event.contains(Cheated) \u0026\u0026 \n                 ((Cheated.getIntId()\u0026 eventMask) \u003d\u003d Cheated.getIntId())) {\ndiff --git a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\nindex 207aa45..604a0ea 100644\n--- a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n+++ b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n@@ -291,7 +291,7 @@\n         // Events - there can be multiple so check them all\n         if(event.contains(Returned) \u0026\u0026 \n                 ((Returned.getIntId()\u0026 eventMask) \u003d\u003d Returned.getIntId())) {\n-            fireChangeEvent(new EscrowedEvent(evt));\n+            fireChangeEvent(new ReturnedEvent(evt));\n         }\n         if(event.contains(Cheated) \u0026\u0026 \n                 ((Cheated.getIntId()\u0026 eventMask) \u003d\u003d Cheated.getIntId())) {\n",
    "projectName": "jPyramid-RS-232",
    "lineNum": 294,
    "nodeStartChar": 10608,
    "before": "EscrowedEvent",
    "after": "ReturnedEvent"
  },
  {
    "commitSHA1": "c334d5cdebf4a2ea34b5b7065bba5f054bfdff3c",
    "commitFile": "util/src/main/java/org/jabsaw/util/Modules.java",
    "patch": "diff --git a/util/src/main/java/org/jabsaw/util/Modules.java b/util/src/main/java/org/jabsaw/util/Modules.java\nindex 6eb2b6d..861f5ff 100644\n--- a/util/src/main/java/org/jabsaw/util/Modules.java\n+++ b/util/src/main/java/org/jabsaw/util/Modules.java\n@@ -177,7 +177,7 @@\n \t * provided error list.\n \t */\n \tpublic static void checkAllClassesInModule(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkAllClassesInModule(errors);\n+\t\tModules.getProjectModel().checkAllClassesInModule(errors);\n \t}\n \n \t/**\n@@ -185,7 +185,7 @@\n \t * modules. All errors are added to the provided error list.\n \t */\n \tpublic static void checkClassAccessibility(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkClassAccessibility(errors);\n+\t\tModules.getProjectModel().checkClassAccessibility(errors);\n \t}\n \n \t/**\n@@ -193,6 +193,6 @@\n \t * errors are added to the provided error list.\n \t */\n \tpublic static void checkDependencyCycles(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkDependencyCycles(errors);\n+\t\tModules.getProjectModel().checkDependencyCycles(errors);\n \t}\n }\ndiff --git a/util/src/main/java/org/jabsaw/util/Modules.java b/util/src/main/java/org/jabsaw/util/Modules.java\nindex 6eb2b6d..861f5ff 100644\n--- a/util/src/main/java/org/jabsaw/util/Modules.java\n+++ b/util/src/main/java/org/jabsaw/util/Modules.java\n@@ -177,7 +177,7 @@\n \t * provided error list.\n \t */\n \tpublic static void checkAllClassesInModule(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkAllClassesInModule(errors);\n+\t\tModules.getProjectModel().checkAllClassesInModule(errors);\n \t}\n \n \t/**\n@@ -185,7 +185,7 @@\n \t * modules. All errors are added to the provided error list.\n \t */\n \tpublic static void checkClassAccessibility(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkClassAccessibility(errors);\n+\t\tModules.getProjectModel().checkClassAccessibility(errors);\n \t}\n \n \t/**\n@@ -193,6 +193,6 @@\n \t * errors are added to the provided error list.\n \t */\n \tpublic static void checkDependencyCycles(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkDependencyCycles(errors);\n+\t\tModules.getProjectModel().checkDependencyCycles(errors);\n \t}\n }\n",
    "projectName": "jabsaw",
    "lineNum": 180,
    "nodeStartChar": 5330,
    "before": "Modules.projectModel",
    "after": "Modules.getProjectModel()"
  },
  {
    "commitSHA1": "c334d5cdebf4a2ea34b5b7065bba5f054bfdff3c",
    "commitFile": "util/src/main/java/org/jabsaw/util/Modules.java",
    "patch": "diff --git a/util/src/main/java/org/jabsaw/util/Modules.java b/util/src/main/java/org/jabsaw/util/Modules.java\nindex 6eb2b6d..861f5ff 100644\n--- a/util/src/main/java/org/jabsaw/util/Modules.java\n+++ b/util/src/main/java/org/jabsaw/util/Modules.java\n@@ -177,7 +177,7 @@\n \t * provided error list.\n \t */\n \tpublic static void checkAllClassesInModule(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkAllClassesInModule(errors);\n+\t\tModules.getProjectModel().checkAllClassesInModule(errors);\n \t}\n \n \t/**\n@@ -185,7 +185,7 @@\n \t * modules. All errors are added to the provided error list.\n \t */\n \tpublic static void checkClassAccessibility(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkClassAccessibility(errors);\n+\t\tModules.getProjectModel().checkClassAccessibility(errors);\n \t}\n \n \t/**\n@@ -193,6 +193,6 @@\n \t * errors are added to the provided error list.\n \t */\n \tpublic static void checkDependencyCycles(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkDependencyCycles(errors);\n+\t\tModules.getProjectModel().checkDependencyCycles(errors);\n \t}\n }\ndiff --git a/util/src/main/java/org/jabsaw/util/Modules.java b/util/src/main/java/org/jabsaw/util/Modules.java\nindex 6eb2b6d..861f5ff 100644\n--- a/util/src/main/java/org/jabsaw/util/Modules.java\n+++ b/util/src/main/java/org/jabsaw/util/Modules.java\n@@ -177,7 +177,7 @@\n \t * provided error list.\n \t */\n \tpublic static void checkAllClassesInModule(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkAllClassesInModule(errors);\n+\t\tModules.getProjectModel().checkAllClassesInModule(errors);\n \t}\n \n \t/**\n@@ -185,7 +185,7 @@\n \t * modules. All errors are added to the provided error list.\n \t */\n \tpublic static void checkClassAccessibility(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkClassAccessibility(errors);\n+\t\tModules.getProjectModel().checkClassAccessibility(errors);\n \t}\n \n \t/**\n@@ -193,6 +193,6 @@\n \t * errors are added to the provided error list.\n \t */\n \tpublic static void checkDependencyCycles(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkDependencyCycles(errors);\n+\t\tModules.getProjectModel().checkDependencyCycles(errors);\n \t}\n }\n",
    "projectName": "jabsaw",
    "lineNum": 188,
    "nodeStartChar": 5606,
    "before": "Modules.projectModel",
    "after": "Modules.getProjectModel()"
  },
  {
    "commitSHA1": "c334d5cdebf4a2ea34b5b7065bba5f054bfdff3c",
    "commitFile": "util/src/main/java/org/jabsaw/util/Modules.java",
    "patch": "diff --git a/util/src/main/java/org/jabsaw/util/Modules.java b/util/src/main/java/org/jabsaw/util/Modules.java\nindex 6eb2b6d..861f5ff 100644\n--- a/util/src/main/java/org/jabsaw/util/Modules.java\n+++ b/util/src/main/java/org/jabsaw/util/Modules.java\n@@ -177,7 +177,7 @@\n \t * provided error list.\n \t */\n \tpublic static void checkAllClassesInModule(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkAllClassesInModule(errors);\n+\t\tModules.getProjectModel().checkAllClassesInModule(errors);\n \t}\n \n \t/**\n@@ -185,7 +185,7 @@\n \t * modules. All errors are added to the provided error list.\n \t */\n \tpublic static void checkClassAccessibility(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkClassAccessibility(errors);\n+\t\tModules.getProjectModel().checkClassAccessibility(errors);\n \t}\n \n \t/**\n@@ -193,6 +193,6 @@\n \t * errors are added to the provided error list.\n \t */\n \tpublic static void checkDependencyCycles(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkDependencyCycles(errors);\n+\t\tModules.getProjectModel().checkDependencyCycles(errors);\n \t}\n }\ndiff --git a/util/src/main/java/org/jabsaw/util/Modules.java b/util/src/main/java/org/jabsaw/util/Modules.java\nindex 6eb2b6d..861f5ff 100644\n--- a/util/src/main/java/org/jabsaw/util/Modules.java\n+++ b/util/src/main/java/org/jabsaw/util/Modules.java\n@@ -177,7 +177,7 @@\n \t * provided error list.\n \t */\n \tpublic static void checkAllClassesInModule(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkAllClassesInModule(errors);\n+\t\tModules.getProjectModel().checkAllClassesInModule(errors);\n \t}\n \n \t/**\n@@ -185,7 +185,7 @@\n \t * modules. All errors are added to the provided error list.\n \t */\n \tpublic static void checkClassAccessibility(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkClassAccessibility(errors);\n+\t\tModules.getProjectModel().checkClassAccessibility(errors);\n \t}\n \n \t/**\n@@ -193,6 +193,6 @@\n \t * errors are added to the provided error list.\n \t */\n \tpublic static void checkDependencyCycles(List\u003cString\u003e errors) {\n-\t\tModules.projectModel.checkDependencyCycles(errors);\n+\t\tModules.getProjectModel().checkDependencyCycles(errors);\n \t}\n }\n",
    "projectName": "jabsaw",
    "lineNum": 196,
    "nodeStartChar": 5864,
    "before": "Modules.projectModel",
    "after": "Modules.getProjectModel()"
  },
  {
    "commitSHA1": "b68a671abac97ae0745eeed666212c858ec6983f",
    "commitFile": "src/main/java/me/zzp/ar/DB.java",
    "patch": "diff --git a/src/main/java/me/zzp/ar/DB.java b/src/main/java/me/zzp/ar/DB.java\nindex cbaefe2..da1f379 100644\n--- a/src/main/java/me/zzp/ar/DB.java\n+++ b/src/main/java/me/zzp/ar/DB.java\n@@ -134,7 +134,7 @@\n   public PreparedStatement prepare(String sql, Object[] params, int[] types) {\n     try {\n       PreparedStatement call;\n-      if (sql.trim().startsWith(\"insert\")) {\n+      if (sql.trim().toLowerCase().startsWith(\"insert\")) {\n         call \u003d base.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\n       } else {\n         call \u003d base.prepareStatement(sql);\ndiff --git a/src/main/java/me/zzp/ar/DB.java b/src/main/java/me/zzp/ar/DB.java\nindex cbaefe2..da1f379 100644\n--- a/src/main/java/me/zzp/ar/DB.java\n+++ b/src/main/java/me/zzp/ar/DB.java\n@@ -134,7 +134,7 @@\n   public PreparedStatement prepare(String sql, Object[] params, int[] types) {\n     try {\n       PreparedStatement call;\n-      if (sql.trim().startsWith(\"insert\")) {\n+      if (sql.trim().toLowerCase().startsWith(\"insert\")) {\n         call \u003d base.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\n       } else {\n         call \u003d base.prepareStatement(sql);\n",
    "projectName": "jactiverecord",
    "lineNum": 137,
    "nodeStartChar": 4410,
    "before": "sql",
    "after": "sql.trim()"
  },
  {
    "commitSHA1": "68334fa0e51e7e7a84d04a264256d5e8e3b3f725",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex c2db926..b0c1b53 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -26,7 +26,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"100\",\"131\",\"153\"};\n+    private static String[] ignoredCases \u003d new String[]{\"131\",\"153\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex c2db926..b0c1b53 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -26,7 +26,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"100\",\"131\",\"153\"};\n+    private static String[] ignoredCases \u003d new String[]{\"131\",\"153\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 29,
    "nodeStartChar": 975,
    "before": "{\"100\",\"131\",\"153\"}",
    "after": "{\"131\",\"153\"}"
  },
  {
    "commitSHA1": "f0ade34194d2d15216fbc82312b222c407c120ec",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex a779b82..19bf649 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"68\",\"78\",\"100\"};\n+    private static String[] ignoredCases \u003d new String[]{\"68\",\"78\",\"100\",\"129\",\"131\",\"132\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex a779b82..19bf649 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"68\",\"78\",\"100\"};\n+    private static String[] ignoredCases \u003d new String[]{\"68\",\"78\",\"100\",\"129\",\"131\",\"132\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 27,
    "nodeStartChar": 815,
    "before": "{\"68\",\"78\",\"100\"}",
    "after": "{\"68\",\"78\",\"100\",\"129\",\"131\",\"132\"}"
  },
  {
    "commitSHA1": "600b8d5b1242a4f392fcd597b0a06c867e78937d",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex a68ef54..05fbe1d 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -76,7 +76,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n                 data.add(new String[]{file.getName()});\n             }\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex a68ef54..05fbe1d 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -76,7 +76,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n                 data.add(new String[]{file.getName()});\n             }\n \n",
    "projectName": "jade4j",
    "lineNum": 79,
    "nodeStartChar": 3339,
    "before": "ArrayUtils.contains(ignoredCases,file.getName().replace(\".jade\",\"\"))",
    "after": "!ArrayUtils.contains(ignoredCases,file.getName().replace(\".jade\",\"\"))"
  },
  {
    "commitSHA1": "b400513f35b3188f4869afbd75a57d6182702e4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/BlockNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/BlockNode.java b/src/main/java/de/neuland/jade4j/parser/node/BlockNode.java\nindex d79f17e..2416169 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/BlockNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/BlockNode.java\n@@ -58,7 +58,7 @@\n \t}\n \n \tpublic BlockNode getIncludeBlock() {\n-\t\tBlockNode ret \u003d null;\n+\t\tBlockNode ret \u003d this;\n \t\tfor (Node node : getNodes()) {\n \t\t\tif (node instanceof BlockNode \u0026\u0026 ((BlockNode) node).isYield()) {\n \t\t\t\treturn (BlockNode) node;\n",
    "projectName": "jade4j",
    "lineNum": 61,
    "nodeStartChar": 1882,
    "before": "null",
    "after": "this"
  },
  {
    "commitSHA1": "b400513f35b3188f4869afbd75a57d6182702e4a",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex 892532a..f9b7063 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -29,7 +29,7 @@\n              \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\",\n              \"mixin.merge\",  \"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\n             \"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\n-            \"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\"};\n+            \"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 28,
    "nodeStartChar": 886,
    "before": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"mixin.merge\",\"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\"}",
    "after": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"mixin.merge\",\"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\"}"
  },
  {
    "commitSHA1": "dd5a963f2cb13100a1a47b9ecb84bc896ec870b9",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex a66fc04..aac407a 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -29,7 +29,7 @@\n              \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\",\n              \"mixin.blocks\", \"mixin.merge\",  \"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\n             \"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\n-            \"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\",\"interpolation.escape\",\"layout.multi.append.prepend.block\",\"source\"};\n+            \"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\",\"layout.multi.append.prepend.block\",\"source\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex a66fc04..aac407a 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -29,7 +29,7 @@\n              \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\",\n              \"mixin.blocks\", \"mixin.merge\",  \"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\n             \"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\n-            \"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\",\"interpolation.escape\",\"layout.multi.append.prepend.block\",\"source\"};\n+            \"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\",\"layout.multi.append.prepend.block\",\"source\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 28,
    "nodeStartChar": 886,
    "before": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"mixin.blocks\",\"mixin.merge\",\"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\",\"interpolation.escape\",\"layout.multi.append.prepend.block\",\"source\"}",
    "after": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"mixin.blocks\",\"mixin.merge\",\"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\",\"mixins.rest-args\",\"filters.cdata\",\"block-code\",\"attrs-data\",\"attrs.interpolation\",\"include-extends-of-common-template\",\"include-with-text\",\"layout.multi.append.prepend.block\",\"source\"}"
  },
  {
    "commitSHA1": "dd4739704e204253b3d3fe94c1fedd74847e7769",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/EachNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\nindex c62623c..e1acf68 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n@@ -68,7 +68,7 @@\n \t\t\texecuteElseNode(model, writer, template);\n \t\t\treturn;\n \t\t}\n-\t\tfor (String key : keys) {\n+\t\tfor (Object key : keys) {\n \t\t\tmodel.put(getValue(), result.get(key));\n \t\t\tmodel.put(getKey(), key);\n \t\t\tgetBlock().execute(writer, model, template);\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\nindex c62623c..e1acf68 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n@@ -68,7 +68,7 @@\n \t\t\texecuteElseNode(model, writer, template);\n \t\t\treturn;\n \t\t}\n-\t\tfor (String key : keys) {\n+\t\tfor (Object key : keys) {\n \t\t\tmodel.put(getValue(), result.get(key));\n \t\t\tmodel.put(getKey(), key);\n \t\t\tgetBlock().execute(writer, model, template);\n",
    "projectName": "jade4j",
    "lineNum": 71,
    "nodeStartChar": 2256,
    "before": "String",
    "after": "Object"
  },
  {
    "commitSHA1": "114e886f1de668d3721abb187c90cf23f4e3883d",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\nindex a0ccd5f..717aedf 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n@@ -126,7 +126,7 @@\n                 if(o!\u003dnull) {\n                     for (Map.Entry\u003cString, String\u003e entry : o.entrySet()) {\n                         Attr attr \u003d new Attr();\n-                        attr.setName(entry.getKey());\n+                        attr.setName(String.valueOf(entry.getKey()));\n                         attr.setValue(entry.getValue());\n                         newAttributes.add(attr);\n                     }\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\nindex a0ccd5f..717aedf 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n@@ -126,7 +126,7 @@\n                 if(o!\u003dnull) {\n                     for (Map.Entry\u003cString, String\u003e entry : o.entrySet()) {\n                         Attr attr \u003d new Attr();\n-                        attr.setName(entry.getKey());\n+                        attr.setName(String.valueOf(entry.getKey()));\n                         attr.setValue(entry.getValue());\n                         newAttributes.add(attr);\n                     }\n",
    "projectName": "jade4j",
    "lineNum": 129,
    "nodeStartChar": 4285,
    "before": "entry.getKey()",
    "after": "String.valueOf(entry.getKey())"
  },
  {
    "commitSHA1": "29b76db5ac8ee40efd8e68f382c310e5adc7a067",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 7c785cd..4c95385 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"100\",\"101\"};\n+    private static String[] ignoredCases \u003d new String[]{\"78\",\"100\",\"101\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 7c785cd..4c95385 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"100\",\"101\"};\n+    private static String[] ignoredCases \u003d new String[]{\"78\",\"100\",\"101\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 27,
    "nodeStartChar": 815,
    "before": "{\"100\",\"101\"}",
    "after": "{\"78\",\"100\",\"101\"}"
  },
  {
    "commitSHA1": "d7999e858a8ac3e0a0953714455406e0ecb2ae4b",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 5715602..8afb437 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\",\"101\"};\n+    private static String[] ignoredCases \u003d new String[]{\"101\"};\n \n     private String file;\n \n@@ -71,7 +71,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\")) \u0026\u0026 !file.getName().startsWith(\"_\")) {\n                 data.add(new String[]{file.getName()});\n             }\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 5715602..8afb437 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\",\"101\"};\n+    private static String[] ignoredCases \u003d new String[]{\"101\"};\n \n     private String file;\n \n@@ -71,7 +71,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\")) \u0026\u0026 !file.getName().startsWith(\"_\")) {\n                 data.add(new String[]{file.getName()});\n             }\n \n",
    "projectName": "jade4j",
    "lineNum": 27,
    "nodeStartChar": 815,
    "before": "{\"104b_mixin\",\"layout\",\"101\"}",
    "after": "{\"101\"}"
  },
  {
    "commitSHA1": "d7999e858a8ac3e0a0953714455406e0ecb2ae4b",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 5715602..8afb437 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\",\"101\"};\n+    private static String[] ignoredCases \u003d new String[]{\"101\"};\n \n     private String file;\n \n@@ -71,7 +71,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\")) \u0026\u0026 !file.getName().startsWith(\"_\")) {\n                 data.add(new String[]{file.getName()});\n             }\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 5715602..8afb437 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\",\"101\"};\n+    private static String[] ignoredCases \u003d new String[]{\"101\"};\n \n     private String file;\n \n@@ -71,7 +71,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\")) \u0026\u0026 !file.getName().startsWith(\"_\")) {\n                 data.add(new String[]{file.getName()});\n             }\n \n",
    "projectName": "jade4j",
    "lineNum": 74,
    "nodeStartChar": 2803,
    "before": "!ArrayUtils.contains(ignoredCases,file.getName().replace(\".jade\",\"\"))",
    "after": "!ArrayUtils.contains(ignoredCases,file.getName().replace(\".jade\",\"\")) \u0026\u0026 !file.getName().startsWith(\"_\")"
  },
  {
    "commitSHA1": "0fb2eb14bdbf855567c5de96a6ec3e7386d44a6c",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 7e3545b..5715602 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\"};\n+    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\",\"101\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex 7e3545b..5715602 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\"};\n+    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\",\"101\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 27,
    "nodeStartChar": 815,
    "before": "{\"104b_mixin\",\"layout\"}",
    "after": "{\"104b_mixin\",\"layout\",\"101\"}"
  },
  {
    "commitSHA1": "5f3900484c12294716cbddd774d85917492cb0ae",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/IssuesTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex a011a5a..7e3545b 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"attrs\"};\n+    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\nindex a011a5a..7e3545b 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/IssuesTest.java\n@@ -24,7 +24,7 @@\n \n @RunWith(Parameterized.class)\n public class IssuesTest {\n-    private static String[] ignoredCases \u003d new String[]{\"attrs\"};\n+    private static String[] ignoredCases \u003d new String[]{\"104b_mixin\",\"layout\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 27,
    "nodeStartChar": 815,
    "before": "{\"attrs\"}",
    "after": "{\"104b_mixin\",\"layout\"}"
  },
  {
    "commitSHA1": "7ec711596bcce2a0b5297b3d78253a5912055f4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 96b565f..bb8e892 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -163,7 +163,7 @@\n       String text;\n       if (body instanceof PipelessText) {\n         this.advance();\n-        text \u003d StringUtils.join(\"\\n\",body.getValues());\n+        text \u003d StringUtils.join(body.getValues(),\"\\n\");\n       } else {\n         text \u003d \"\";\n       }\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\nindex 9530696..b2b20ed 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n@@ -173,7 +173,7 @@\n         LinkedHashMap\u003cString,String\u003e finalAttributes \u003d new LinkedHashMap\u003cString,String\u003e();\n         finalAttributes.putAll(newAttributes);\n         if(!classes.isEmpty()){\n-            finalAttributes.put(\"class\",StringUtils.join(\" \",classes));\n+            finalAttributes.put(\"class\", StringUtils.join(classes,\" \"));\n         }\n         return finalAttributes;\n     }\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\nindex 9cc2aad..684d520 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n@@ -40,7 +40,7 @@\n \t\t\t\tvalues.add(node.getValue());\n \t\t}\n \n-\t\tString result \u003d StringUtils.join(\"\\n\", values);\n+\t\tString result \u003d StringUtils.join(values, \"\\n\");\n \t\tif (filter !\u003d null) {\n             result \u003d filter.convert(result, attributes, model);\n \t\t}\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 96b565f..bb8e892 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -163,7 +163,7 @@\n       String text;\n       if (body instanceof PipelessText) {\n         this.advance();\n-        text \u003d StringUtils.join(\"\\n\",body.getValues());\n+        text \u003d StringUtils.join(body.getValues(),\"\\n\");\n       } else {\n         text \u003d \"\";\n       }\n",
    "projectName": "jade4j",
    "lineNum": 166,
    "nodeStartChar": 5384,
    "before": "StringUtils.join(\"\\n\",body.getValues())",
    "after": "StringUtils.join(body.getValues(),\"\\n\")"
  },
  {
    "commitSHA1": "7ec711596bcce2a0b5297b3d78253a5912055f4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\nindex 9530696..b2b20ed 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n@@ -173,7 +173,7 @@\n         LinkedHashMap\u003cString,String\u003e finalAttributes \u003d new LinkedHashMap\u003cString,String\u003e();\n         finalAttributes.putAll(newAttributes);\n         if(!classes.isEmpty()){\n-            finalAttributes.put(\"class\",StringUtils.join(\" \",classes));\n+            finalAttributes.put(\"class\", StringUtils.join(classes,\" \"));\n         }\n         return finalAttributes;\n     }\n",
    "projectName": "jade4j",
    "lineNum": 176,
    "nodeStartChar": 6121,
    "before": "StringUtils.join(\" \",classes)",
    "after": "StringUtils.join(classes,\" \")"
  },
  {
    "commitSHA1": "7ec711596bcce2a0b5297b3d78253a5912055f4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/FilterNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\nindex 9cc2aad..684d520 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n@@ -40,7 +40,7 @@\n \t\t\t\tvalues.add(node.getValue());\n \t\t}\n \n-\t\tString result \u003d StringUtils.join(\"\\n\", values);\n+\t\tString result \u003d StringUtils.join(values, \"\\n\");\n \t\tif (filter !\u003d null) {\n             result \u003d filter.convert(result, attributes, model);\n \t\t}\n",
    "projectName": "jade4j",
    "lineNum": 43,
    "nodeStartChar": 1221,
    "before": "StringUtils.join(\"\\n\",values)",
    "after": "StringUtils.join(values,\"\\n\")"
  },
  {
    "commitSHA1": "f5ed37b953ace1eaed0142deda522cf08bf60820",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex 751d988..a9f20f8 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -27,7 +27,7 @@\n public class OriginalJade20150515Test {\n     private static String[] ignoredCases \u003d new String[]{\"attrs\", \"attrs.js\", \"code.conditionals\", \"code.iteration\",\n              \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\",\n-             \"mixin.blocks\", \"mixin.merge\",  \"styles\"};\n+             \"mixin.blocks\", \"mixin.merge\",  \"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\"};\n \n     private String file;\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex 751d988..a9f20f8 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -27,7 +27,7 @@\n public class OriginalJade20150515Test {\n     private static String[] ignoredCases \u003d new String[]{\"attrs\", \"attrs.js\", \"code.conditionals\", \"code.iteration\",\n              \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\",\n-             \"mixin.blocks\", \"mixin.merge\",  \"styles\"};\n+             \"mixin.blocks\", \"mixin.merge\",  \"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\"};\n \n     private String file;\n \n",
    "projectName": "jade4j",
    "lineNum": 28,
    "nodeStartChar": 886,
    "before": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"mixin.blocks\",\"mixin.merge\",\"styles\"}",
    "after": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"mixin.blocks\",\"mixin.merge\",\"styles\",\"regression.784\",\"mixin.attrs\",\"include-filter-stylus\",\"include-filter\",\"filters-empty\",\"each.else\",\"classes\",\"blocks-in-if\"}"
  },
  {
    "commitSHA1": "6a28e750a91a08aea6931a939198380e19b5f9c3",
    "commitFile": "src/main/java/de/neuland/jade4j/lexer/Lexer.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/lexer/Lexer.java b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\nindex c6912b2..4ed0ea4 100644\n--- a/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n+++ b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n@@ -589,7 +589,7 @@\n             int end \u003d matcher.end();\n             consume(end);\n             String name \u003d matcher.group(1);\n-            if(name !\u003d null \u0026\u0026 name.trim() \u003d\u003d \"5\")\n+            if(name !\u003d null \u0026\u0026 \"5\".equals(name.trim()))\n                 throw new JadeLexerException(\"`doctype 5` is deprecated, you must now use `doctype html`\", filename, getLineno(), templateLoader);\n             return new Doctype(name, lineno);\n         }\ndiff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java\nindex 26e175f..3360dbe 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java\n@@ -27,7 +27,7 @@\n     private static String[] ignoredCases \u003d new String[]{\"attrs\", \"attrs.js\", \"code.conditionals\", \"code.iteration\", \"comments\",\n             \"escape-chars\", \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\", \"html\", \"include-only-text-body\",\n             \"include-only-text\", \"include-with-text-head\", \"include-with-text\", \"mixin.blocks\", \"mixin.merge\", \"quotes\", \"script.whitespace\", \"scripts\", \"scripts.non-js\",\n-            \"source\", \"styles\", \"template\", \"text-block\", \"text\", \"vars\", \"yield-title\", \"doctype.default\"};\n+            \"source\", \"styles\", \"template\", \"text-block\", \"text\", \"vars\", \"yield-title\", \"doctype.default\",\"comments.conditional\",\"html5\"};\n \n     private File file;\n \ndiff --git a/src/main/java/de/neuland/jade4j/lexer/Lexer.java b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\nindex c6912b2..4ed0ea4 100644\n--- a/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n+++ b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n@@ -589,7 +589,7 @@\n             int end \u003d matcher.end();\n             consume(end);\n             String name \u003d matcher.group(1);\n-            if(name !\u003d null \u0026\u0026 name.trim() \u003d\u003d \"5\")\n+            if(name !\u003d null \u0026\u0026 \"5\".equals(name.trim()))\n                 throw new JadeLexerException(\"`doctype 5` is deprecated, you must now use `doctype html`\", filename, getLineno(), templateLoader);\n             return new Doctype(name, lineno);\n         }\n",
    "projectName": "jade4j",
    "lineNum": 592,
    "nodeStartChar": 18324,
    "before": "name.trim() \u003d\u003d \"5\"",
    "after": "\"5\".equals(name.trim())"
  },
  {
    "commitSHA1": "6a28e750a91a08aea6931a939198380e19b5f9c3",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java\nindex 26e175f..3360dbe 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJadeTest.java\n@@ -27,7 +27,7 @@\n     private static String[] ignoredCases \u003d new String[]{\"attrs\", \"attrs.js\", \"code.conditionals\", \"code.iteration\", \"comments\",\n             \"escape-chars\", \"filters.coffeescript\", \"filters.less\", \"filters.markdown\", \"filters.stylus\", \"html\", \"include-only-text-body\",\n             \"include-only-text\", \"include-with-text-head\", \"include-with-text\", \"mixin.blocks\", \"mixin.merge\", \"quotes\", \"script.whitespace\", \"scripts\", \"scripts.non-js\",\n-            \"source\", \"styles\", \"template\", \"text-block\", \"text\", \"vars\", \"yield-title\", \"doctype.default\"};\n+            \"source\", \"styles\", \"template\", \"text-block\", \"text\", \"vars\", \"yield-title\", \"doctype.default\",\"comments.conditional\",\"html5\"};\n \n     private File file;\n \n",
    "projectName": "jade4j",
    "lineNum": 27,
    "nodeStartChar": 822,
    "before": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"comments\",\"escape-chars\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"html\",\"include-only-text-body\",\"include-only-text\",\"include-with-text-head\",\"include-with-text\",\"mixin.blocks\",\"mixin.merge\",\"quotes\",\"script.whitespace\",\"scripts\",\"scripts.non-js\",\"source\",\"styles\",\"template\",\"text-block\",\"text\",\"vars\",\"yield-title\",\"doctype.default\"}",
    "after": "{\"attrs\",\"attrs.js\",\"code.conditionals\",\"code.iteration\",\"comments\",\"escape-chars\",\"filters.coffeescript\",\"filters.less\",\"filters.markdown\",\"filters.stylus\",\"html\",\"include-only-text-body\",\"include-only-text\",\"include-with-text-head\",\"include-with-text\",\"mixin.blocks\",\"mixin.merge\",\"quotes\",\"script.whitespace\",\"scripts\",\"scripts.non-js\",\"source\",\"styles\",\"template\",\"text-block\",\"text\",\"vars\",\"yield-title\",\"doctype.default\",\"comments.conditional\",\"html5\"}"
  },
  {
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 632,
    "nodeStartChar": 21588,
    "before": "matcher.matches()",
    "after": "matcher.find(0) \u0026\u0026 matcher.groupCount() \u003e 1"
  },
  {
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 635,
    "nodeStartChar": 21758,
    "before": "matcher.end()",
    "after": "matcher.start()"
  },
  {
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 646,
    "nodeStartChar": 22352,
    "before": "matcher.end()",
    "after": "matcher.start()"
  },
  {
    "commitSHA1": "68c68f0e855ecf7c8a744c24b81d4ec6c59bab61",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/CompilerTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\nindex ce1d66d..2242365 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n@@ -445,7 +445,7 @@\n             assertEquals(testName, expected.trim(), html.trim());\n         } catch (JadeCompilerException e) {\n             e.printStackTrace();\n-            fail();\n+            fail(e.getMessage());\n         }\n     }\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\nindex ce1d66d..2242365 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n@@ -445,7 +445,7 @@\n             assertEquals(testName, expected.trim(), html.trim());\n         } catch (JadeCompilerException e) {\n             e.printStackTrace();\n-            fail();\n+            fail(e.getMessage());\n         }\n     }\n \n",
    "projectName": "jade4j",
    "lineNum": 448,
    "nodeStartChar": 9689,
    "before": "fail()",
    "after": "fail(e.getMessage())"
  },
  {
    "commitSHA1": "d9e23362643a43c8e3eecd1ffce72d174e32058d",
    "commitFile": "src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java b/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java\nindex 550d412..794cd91 100644\n--- a/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java\n+++ b/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java\n@@ -63,7 +63,7 @@\n \t\t\t\t\n \t\t\t\tif (\"\".equals(cleanValue) \u0026\u0026 quote \u003d\u003d \u0027 \u0027) {\n \t\t\t\t\ttoken.addBooleanAttribute(name, Boolean.TRUE);\n-\t\t\t\t} else if (value.matches(\"^\\\".*\\\"$\") || value.matches(\"^\u0027.*\u0027$\")) {\n+\t\t\t\t} else if (value.matches(\"^\\\"[^\\\"]*\\\"$\") || value.matches(\"^\u0027[^\u0027]*\u0027$\")) {\n \t\t\t\t\ttoken.addAttribute(name, cleanValue);\n \t\t\t\t} else {\n \t\t\t\t\ttoken.addExpressionAttribute(name, value);\ndiff --git a/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java b/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java\nindex 550d412..794cd91 100644\n--- a/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java\n+++ b/src/main/java/de/neuland/jade4j/lexer/AttributeLexer.java\n@@ -63,7 +63,7 @@\n \t\t\t\t\n \t\t\t\tif (\"\".equals(cleanValue) \u0026\u0026 quote \u003d\u003d \u0027 \u0027) {\n \t\t\t\t\ttoken.addBooleanAttribute(name, Boolean.TRUE);\n-\t\t\t\t} else if (value.matches(\"^\\\".*\\\"$\") || value.matches(\"^\u0027.*\u0027$\")) {\n+\t\t\t\t} else if (value.matches(\"^\\\"[^\\\"]*\\\"$\") || value.matches(\"^\u0027[^\u0027]*\u0027$\")) {\n \t\t\t\t\ttoken.addAttribute(name, cleanValue);\n \t\t\t\t} else {\n \t\t\t\t\ttoken.addExpressionAttribute(name, value);\n",
    "projectName": "jade4j",
    "lineNum": 66,
    "nodeStartChar": 1434,
    "before": "\"^\\\".*\\\"$\"",
    "after": "\"^\\\"[^\\\"]*\\\"$\""
  },
  {
    "commitSHA1": "99b5851dec3e2aef6dab4d80c987c21c31ad542c",
    "commitFile": "src/main/java/de/neuland/jade4j/lexer/Lexer.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/lexer/Lexer.java b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\nindex 595a8b9..cc2eb11 100644\n--- a/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n+++ b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n@@ -421,7 +421,7 @@\n \t}\n \n \tprivate Token block() {\n-\t\tMatcher matcher \u003d scanner.getMatcherForPattern(\"^block+(?:(prepend|append) +)?([^\\\\n]+)\");\n+\t\tMatcher matcher \u003d scanner.getMatcherForPattern(\"^block *(?:(prepend|append) +)?([^\\\\n]*)\");\n \t\tif (matcher.find(0) \u0026\u0026 matcher.groupCount() \u003e 1) {\n \t\t\tString val \u003d matcher.group(1);\n \t\t\tString mode \u003d StringUtils.isNotBlank(val) ? val : \"replace\";\ndiff --git a/src/main/java/de/neuland/jade4j/lexer/Lexer.java b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\nindex 595a8b9..cc2eb11 100644\n--- a/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n+++ b/src/main/java/de/neuland/jade4j/lexer/Lexer.java\n@@ -421,7 +421,7 @@\n \t}\n \n \tprivate Token block() {\n-\t\tMatcher matcher \u003d scanner.getMatcherForPattern(\"^block+(?:(prepend|append) +)?([^\\\\n]+)\");\n+\t\tMatcher matcher \u003d scanner.getMatcherForPattern(\"^block *(?:(prepend|append) +)?([^\\\\n]*)\");\n \t\tif (matcher.find(0) \u0026\u0026 matcher.groupCount() \u003e 1) {\n \t\t\tString val \u003d matcher.group(1);\n \t\t\tString mode \u003d StringUtils.isNotBlank(val) ? val : \"replace\";\n",
    "projectName": "jade4j",
    "lineNum": 424,
    "nodeStartChar": 9909,
    "before": "\"^block+(?:(prepend|append) +)?([^\\\\n]+)\"",
    "after": "\"^block *(?:(prepend|append) +)?([^\\\\n]*)\""
  },
  {
    "commitSHA1": "9c3bc94bcf295d41ada6a4cb18c585313a56b6b8",
    "commitFile": "core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java",
    "patch": "diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\nindex ca7cf7d..c8f79aa 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n@@ -23,9 +23,9 @@\n public class AddressInformationCollector implements BootUpInformationCollector {\n   @Override\n   public String collect() {\n-    return \"service center: \"\n+    return \"Service Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ServiceCenter\"))\n-        + \"\\n\" + \"config center: \"\n+        + \"\\n\" + \"Config Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ConfigCenter\"));\n   }\n \ndiff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\nindex d1fd864..d299b92 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n@@ -27,9 +27,9 @@\n     return \"AppID: \" + RegistryUtils.getMicroservice().getAppId()\n         + \"\\n\" + \"ServiceName: \" + RegistryUtils.getMicroservice().getServiceName()\n         + \"\\n\" + \"Version: \" + RegistryUtils.getMicroservice().getVersion()\n-        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroserviceInstance().getEnvironment()\n+        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroservice().getEnvironment()\n         + \"\\n\" + \"ServiceID: \" + RegistryUtils.getMicroserviceInstance().getServiceId()\n-        + \"\\n\" + \"InstanceID; \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n+        + \"\\n\" + \"Instance ID: \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n   }\n \n   @Override\ndiff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\nindex ca7cf7d..c8f79aa 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n@@ -23,9 +23,9 @@\n public class AddressInformationCollector implements BootUpInformationCollector {\n   @Override\n   public String collect() {\n-    return \"service center: \"\n+    return \"Service Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ServiceCenter\"))\n-        + \"\\n\" + \"config center: \"\n+        + \"\\n\" + \"Config Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ConfigCenter\"));\n   }\n \n",
    "projectName": "java-chassis",
    "lineNum": 26,
    "nodeStartChar": 1096,
    "before": "\"service center: \"",
    "after": "\"Service Center: \""
  },
  {
    "commitSHA1": "9c3bc94bcf295d41ada6a4cb18c585313a56b6b8",
    "commitFile": "core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java",
    "patch": "diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\nindex ca7cf7d..c8f79aa 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n@@ -23,9 +23,9 @@\n public class AddressInformationCollector implements BootUpInformationCollector {\n   @Override\n   public String collect() {\n-    return \"service center: \"\n+    return \"Service Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ServiceCenter\"))\n-        + \"\\n\" + \"config center: \"\n+        + \"\\n\" + \"Config Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ConfigCenter\"));\n   }\n \ndiff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\nindex d1fd864..d299b92 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n@@ -27,9 +27,9 @@\n     return \"AppID: \" + RegistryUtils.getMicroservice().getAppId()\n         + \"\\n\" + \"ServiceName: \" + RegistryUtils.getMicroservice().getServiceName()\n         + \"\\n\" + \"Version: \" + RegistryUtils.getMicroservice().getVersion()\n-        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroserviceInstance().getEnvironment()\n+        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroservice().getEnvironment()\n         + \"\\n\" + \"ServiceID: \" + RegistryUtils.getMicroserviceInstance().getServiceId()\n-        + \"\\n\" + \"InstanceID; \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n+        + \"\\n\" + \"Instance ID: \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n   }\n \n   @Override\ndiff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\nindex ca7cf7d..c8f79aa 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/AddressInformationCollector.java\n@@ -23,9 +23,9 @@\n public class AddressInformationCollector implements BootUpInformationCollector {\n   @Override\n   public String collect() {\n-    return \"service center: \"\n+    return \"Service Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ServiceCenter\"))\n-        + \"\\n\" + \"config center: \"\n+        + \"\\n\" + \"Config Center: \"\n         + getCenterInfo(Deployment.getSystemBootStrapInfo(\"ConfigCenter\"));\n   }\n \n",
    "projectName": "java-chassis",
    "lineNum": 28,
    "nodeStartChar": 1208,
    "before": "\"config center: \"",
    "after": "\"Config Center: \""
  },
  {
    "commitSHA1": "9c3bc94bcf295d41ada6a4cb18c585313a56b6b8",
    "commitFile": "core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java",
    "patch": "diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\nindex d1fd864..d299b92 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n@@ -27,9 +27,9 @@\n     return \"AppID: \" + RegistryUtils.getMicroservice().getAppId()\n         + \"\\n\" + \"ServiceName: \" + RegistryUtils.getMicroservice().getServiceName()\n         + \"\\n\" + \"Version: \" + RegistryUtils.getMicroservice().getVersion()\n-        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroserviceInstance().getEnvironment()\n+        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroservice().getEnvironment()\n         + \"\\n\" + \"ServiceID: \" + RegistryUtils.getMicroserviceInstance().getServiceId()\n-        + \"\\n\" + \"InstanceID; \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n+        + \"\\n\" + \"Instance ID: \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 30,
    "nodeStartChar": 1294,
    "before": "RegistryUtils.getMicroserviceInstance()",
    "after": "RegistryUtils.getMicroservice()"
  },
  {
    "commitSHA1": "9c3bc94bcf295d41ada6a4cb18c585313a56b6b8",
    "commitFile": "core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java",
    "patch": "diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\nindex d1fd864..d299b92 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n@@ -27,9 +27,9 @@\n     return \"AppID: \" + RegistryUtils.getMicroservice().getAppId()\n         + \"\\n\" + \"ServiceName: \" + RegistryUtils.getMicroservice().getServiceName()\n         + \"\\n\" + \"Version: \" + RegistryUtils.getMicroservice().getVersion()\n-        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroserviceInstance().getEnvironment()\n+        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroservice().getEnvironment()\n         + \"\\n\" + \"ServiceID: \" + RegistryUtils.getMicroserviceInstance().getServiceId()\n-        + \"\\n\" + \"InstanceID; \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n+        + \"\\n\" + \"Instance ID: \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 32,
    "nodeStartChar": 1456,
    "before": "\"InstanceID; \"",
    "after": "\"Instance ID: \""
  },
  {
    "commitSHA1": "a91284e93b9548a701b62ba11eb3373a2dc5d00c",
    "commitFile": "samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java",
    "patch": "diff --git a/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java b/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java\nindex 5c2759c..1d70a18 100644\n--- a/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java\n+++ b/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java\n@@ -39,6 +39,6 @@\n   }\n \n   private double roundToOnePrecision(double value) {\n-    return new BigDecimal.valueOf(value).setScale(1, RoundingMode.HALF_UP).doubleValue();\n+    return BigDecimal.valueOf(value).setScale(1, RoundingMode.HALF_UP).doubleValue();\n   }\n }\ndiff --git a/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java b/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java\nindex 5c2759c..1d70a18 100644\n--- a/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java\n+++ b/samples/bmi/calculator/src/main/java/org/apache/servicecomb/samples/bmi/CalculatorServiceImpl.java\n@@ -39,6 +39,6 @@\n   }\n \n   private double roundToOnePrecision(double value) {\n-    return new BigDecimal.valueOf(value).setScale(1, RoundingMode.HALF_UP).doubleValue();\n+    return BigDecimal.valueOf(value).setScale(1, RoundingMode.HALF_UP).doubleValue();\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 42,
    "nodeStartChar": 1455,
    "before": "new BigDecimal.valueOf(value)",
    "after": "BigDecimal.valueOf(value)"
  },
  {
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\nindex 2eadf0c..eb8ecc8 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n@@ -130,7 +130,7 @@\n \n     // 将这些body包装为一个class，整体做为一个body参数\n     String bodyParamName \u003d ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());\n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);\n     BodyParameter bodyParameter \u003d\n         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);\n     swaggerParameters.add(bodyParameter);\ndiff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\nindex 320466b..a1c0ea2 100644\n--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n@@ -75,7 +75,7 @@\n     SwaggerGenerator generator \u003d UnitTestSwaggerUtils.generateSwagger(Impl.class);\n     OperationGenerator operationGenerator \u003d generator.getOperationGeneratorMap().get(\"getUser\");\n \n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null, \"getUserBody\");\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null);\n     Assert.assertEquals(\"gen.swagger.getUserBody\", cls.getName());\n     Assert.assertEquals(\"java.util.List\u003cjava.lang.String\u003e\", cls.getField(\"p1\").getGenericType().getTypeName());\n     Assert.assertEquals(\"java.util.List\u003corg.apache.servicecomb.foundation.test.scaffolding.model.User\u003e\",\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\n",
    "projectName": "java-chassis",
    "lineNum": 439,
    "nodeStartChar": 20966,
    "before": "\"10\"",
    "after": "\"30\""
  },
  {
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\nindex 2eadf0c..eb8ecc8 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n@@ -130,7 +130,7 @@\n \n     // 将这些body包装为一个class，整体做为一个body参数\n     String bodyParamName \u003d ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());\n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);\n     BodyParameter bodyParameter \u003d\n         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);\n     swaggerParameters.add(bodyParameter);\ndiff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\nindex 320466b..a1c0ea2 100644\n--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n@@ -75,7 +75,7 @@\n     SwaggerGenerator generator \u003d UnitTestSwaggerUtils.generateSwagger(Impl.class);\n     OperationGenerator operationGenerator \u003d generator.getOperationGeneratorMap().get(\"getUser\");\n \n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null, \"getUserBody\");\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null);\n     Assert.assertEquals(\"gen.swagger.getUserBody\", cls.getName());\n     Assert.assertEquals(\"java.util.List\u003cjava.lang.String\u003e\", cls.getField(\"p1\").getGenericType().getTypeName());\n     Assert.assertEquals(\"java.util.List\u003corg.apache.servicecomb.foundation.test.scaffolding.model.User\u003e\",\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\n",
    "projectName": "java-chassis",
    "lineNum": 448,
    "nodeStartChar": 21513,
    "before": "20",
    "after": "30"
  },
  {
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\nindex 2eadf0c..eb8ecc8 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n@@ -130,7 +130,7 @@\n \n     // 将这些body包装为一个class，整体做为一个body参数\n     String bodyParamName \u003d ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());\n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);\n     BodyParameter bodyParameter \u003d\n         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);\n     swaggerParameters.add(bodyParameter);\ndiff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\nindex 320466b..a1c0ea2 100644\n--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n@@ -75,7 +75,7 @@\n     SwaggerGenerator generator \u003d UnitTestSwaggerUtils.generateSwagger(Impl.class);\n     OperationGenerator operationGenerator \u003d generator.getOperationGeneratorMap().get(\"getUser\");\n \n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null, \"getUserBody\");\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null);\n     Assert.assertEquals(\"gen.swagger.getUserBody\", cls.getName());\n     Assert.assertEquals(\"java.util.List\u003cjava.lang.String\u003e\", cls.getField(\"p1\").getGenericType().getTypeName());\n     Assert.assertEquals(\"java.util.List\u003corg.apache.servicecomb.foundation.test.scaffolding.model.User\u003e\",\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\n",
    "projectName": "java-chassis",
    "lineNum": 577,
    "nodeStartChar": 27740,
    "before": "\"10\"",
    "after": "\"30\""
  },
  {
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\nindex 2eadf0c..eb8ecc8 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n@@ -130,7 +130,7 @@\n \n     // 将这些body包装为一个class，整体做为一个body参数\n     String bodyParamName \u003d ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());\n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);\n     BodyParameter bodyParameter \u003d\n         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);\n     swaggerParameters.add(bodyParameter);\ndiff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\nindex 320466b..a1c0ea2 100644\n--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n@@ -75,7 +75,7 @@\n     SwaggerGenerator generator \u003d UnitTestSwaggerUtils.generateSwagger(Impl.class);\n     OperationGenerator operationGenerator \u003d generator.getOperationGeneratorMap().get(\"getUser\");\n \n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null, \"getUserBody\");\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null);\n     Assert.assertEquals(\"gen.swagger.getUserBody\", cls.getName());\n     Assert.assertEquals(\"java.util.List\u003cjava.lang.String\u003e\", cls.getField(\"p1\").getGenericType().getTypeName());\n     Assert.assertEquals(\"java.util.List\u003corg.apache.servicecomb.foundation.test.scaffolding.model.User\u003e\",\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\n",
    "projectName": "java-chassis",
    "lineNum": 586,
    "nodeStartChar": 28287,
    "before": "20",
    "after": "30"
  },
  {
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java",
    "patch": "diff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\n",
    "projectName": "java-chassis",
    "lineNum": 55,
    "nodeStartChar": 2363,
    "before": "bodyParamName",
    "after": "ParamUtils.generateBodyParameterName(method)"
  },
  {
    "commitSHA1": "35ace9e7e2dd36da52dd7b69f79b88ce026c0472",
    "commitFile": "swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java",
    "patch": "diff --git a/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java b/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\nindex bc22169..047710b 100644\n--- a/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\n+++ b/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"Processing param failed, method\u003dorg.apache.servicecomb.swagger.generator.jaxrs.processor\"\n               + \".annotation.BeanParamAnnotationProcessorTest$TestProvider:testBeanParamComplexField, beanParamIdx\u003d0\",\n@@ -133,7 +133,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"Processing param failed, method\u003dorg.apache.servicecomb.swagger.generator.jaxrs.processor\"\n               + \".annotation.BeanParamAnnotationProcessorTest$TestProvider:testBeanParamComplexSetter, beanParamIdx\u003d0\",\n@@ -152,7 +152,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"There is a field[name] cannot be mapped to swagger param. \"\n               + \"Maybe you should tag @JsonIgnore on it.\",\n",
    "projectName": "java-chassis",
    "lineNum": 117,
    "nodeStartChar": 5199,
    "before": "\"A error is expected!\"",
    "after": "\"An error is expected!\""
  },
  {
    "commitSHA1": "35ace9e7e2dd36da52dd7b69f79b88ce026c0472",
    "commitFile": "swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java",
    "patch": "diff --git a/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java b/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\nindex bc22169..047710b 100644\n--- a/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\n+++ b/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"Processing param failed, method\u003dorg.apache.servicecomb.swagger.generator.jaxrs.processor\"\n               + \".annotation.BeanParamAnnotationProcessorTest$TestProvider:testBeanParamComplexField, beanParamIdx\u003d0\",\n@@ -133,7 +133,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"Processing param failed, method\u003dorg.apache.servicecomb.swagger.generator.jaxrs.processor\"\n               + \".annotation.BeanParamAnnotationProcessorTest$TestProvider:testBeanParamComplexSetter, beanParamIdx\u003d0\",\n@@ -152,7 +152,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"There is a field[name] cannot be mapped to swagger param. \"\n               + \"Maybe you should tag @JsonIgnore on it.\",\n",
    "projectName": "java-chassis",
    "lineNum": 136,
    "nodeStartChar": 6077,
    "before": "\"A error is expected!\"",
    "after": "\"An error is expected!\""
  },
  {
    "commitSHA1": "35ace9e7e2dd36da52dd7b69f79b88ce026c0472",
    "commitFile": "swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java",
    "patch": "diff --git a/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java b/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\nindex bc22169..047710b 100644\n--- a/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\n+++ b/swagger/swagger-generator/generator-jaxrs/src/test/java/org/apache/servicecomb/swagger/generator/jaxrs/processor/annotation/BeanParamAnnotationProcessorTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"Processing param failed, method\u003dorg.apache.servicecomb.swagger.generator.jaxrs.processor\"\n               + \".annotation.BeanParamAnnotationProcessorTest$TestProvider:testBeanParamComplexField, beanParamIdx\u003d0\",\n@@ -133,7 +133,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"Processing param failed, method\u003dorg.apache.servicecomb.swagger.generator.jaxrs.processor\"\n               + \".annotation.BeanParamAnnotationProcessorTest$TestProvider:testBeanParamComplexSetter, beanParamIdx\u003d0\",\n@@ -152,7 +152,7 @@\n \n     try {\n       processor.process(null, operationGenerator, 0);\n-      fail(\"A error is expected!\");\n+      fail(\"An error is expected!\");\n     } catch (Error e) {\n       assertEquals(\"There is a field[name] cannot be mapped to swagger param. \"\n               + \"Maybe you should tag @JsonIgnore on it.\",\n",
    "projectName": "java-chassis",
    "lineNum": 155,
    "nodeStartChar": 6954,
    "before": "\"A error is expected!\"",
    "after": "\"An error is expected!\""
  },
  {
    "commitSHA1": "3ec7912706efcc977db206d04880bd17880097cf",
    "commitFile": "java-chassis-spring-boot/spring-boot-starter/spring-boot-starter-discovery/src/main/java/org/apache/servicecomb/springboot/starter/discovery/ScbDiscoveryClient.java",
    "patch": "diff --git a/java-chassis-spring-boot/spring-boot-starter/spring-boot-starter-discovery/src/main/java/org/apache/servicecomb/springboot/starter/discovery/ScbDiscoveryClient.java b/java-chassis-spring-boot/spring-boot-starter/spring-boot-starter-discovery/src/main/java/org/apache/servicecomb/springboot/starter/discovery/ScbDiscoveryClient.java\nindex 22565b6..90af794 100644\n--- a/java-chassis-spring-boot/spring-boot-starter/spring-boot-starter-discovery/src/main/java/org/apache/servicecomb/springboot/starter/discovery/ScbDiscoveryClient.java\n+++ b/java-chassis-spring-boot/spring-boot-starter/spring-boot-starter-discovery/src/main/java/org/apache/servicecomb/springboot/starter/discovery/ScbDiscoveryClient.java\n@@ -28,8 +28,8 @@\n public class ScbDiscoveryClient extends AbstractDiscoveryClient implements DiscoveryClient {\n \n   public ScbDiscoveryClient() {\n-    super(new InstanceDiscoveryFilter((String name, URIEndpointObject uri) -\u003e\n-        new DefaultServiceInstance(name, uri.getHostOrIp(), uri.getPort(), uri.isSslEnabled())));\n+    super(new InstanceDiscoveryFilter((String instanceId, String serviceId, URIEndpointObject uri) -\u003e\n+        new DefaultServiceInstance(serviceId, uri.getHostOrIp(), uri.getPort(), uri.isSslEnabled())));\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 31,
    "nodeStartChar": 1458,
    "before": "(String name,URIEndpointObject uri) -\u003e new DefaultServiceInstance(name,uri.getHostOrIp(),uri.getPort(),uri.isSslEnabled())",
    "after": "(String instanceId,String serviceId,URIEndpointObject uri) -\u003e new DefaultServiceInstance(serviceId,uri.getHostOrIp(),uri.getPort(),uri.isSslEnabled())"
  },
  {
    "commitSHA1": "3ec7912706efcc977db206d04880bd17880097cf",
    "commitFile": "java-chassis-spring-boot/spring-boot2-starter-parent/spring-boot2-starter-discovery/src/main/java/org/apache/servicecomb/springboot2/starter/discovery/ScbDiscoveryClient.java",
    "patch": "diff --git a/java-chassis-spring-boot/spring-boot2-starter-parent/spring-boot2-starter-discovery/src/main/java/org/apache/servicecomb/springboot2/starter/discovery/ScbDiscoveryClient.java b/java-chassis-spring-boot/spring-boot2-starter-parent/spring-boot2-starter-discovery/src/main/java/org/apache/servicecomb/springboot2/starter/discovery/ScbDiscoveryClient.java\nindex eddafc3..22507af 100644\n--- a/java-chassis-spring-boot/spring-boot2-starter-parent/spring-boot2-starter-discovery/src/main/java/org/apache/servicecomb/springboot2/starter/discovery/ScbDiscoveryClient.java\n+++ b/java-chassis-spring-boot/spring-boot2-starter-parent/spring-boot2-starter-discovery/src/main/java/org/apache/servicecomb/springboot2/starter/discovery/ScbDiscoveryClient.java\n@@ -28,8 +28,8 @@\n public class ScbDiscoveryClient extends AbstractDiscoveryClient implements DiscoveryClient {\n \n   public ScbDiscoveryClient() {\n-    super(new InstanceDiscoveryFilter((String name, URIEndpointObject uri) -\u003e\n-        new DefaultServiceInstance(name, uri.getHostOrIp(), uri.getPort(), uri.isSslEnabled())));\n+    super(new InstanceDiscoveryFilter((String instanceId, String serviceId, URIEndpointObject uri) -\u003e\n+        new DefaultServiceInstance(instanceId, serviceId, uri.getHostOrIp(), uri.getPort(), uri.isSslEnabled())));\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 31,
    "nodeStartChar": 1459,
    "before": "(String name,URIEndpointObject uri) -\u003e new DefaultServiceInstance(name,uri.getHostOrIp(),uri.getPort(),uri.isSslEnabled())",
    "after": "(String instanceId,String serviceId,URIEndpointObject uri) -\u003e new DefaultServiceInstance(instanceId,serviceId,uri.getHostOrIp(),uri.getPort(),uri.isSslEnabled())"
  },
  {
    "commitSHA1": "3dbf6a989cd1adadce014ee8ee22798b7e96fdf5",
    "commitFile": "metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java",
    "patch": "diff --git a/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java b/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java\nindex af62c09..30633e0 100644\n--- a/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java\n+++ b/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java\n@@ -93,7 +93,7 @@\n       }\n     }\n \n-    familySamples.add(new MetricFamilySamples(\"ServiceComb Metrics\", Type.UNTYPED, \"ServiceComb Metrics\", samples));\n+    familySamples.add(new MetricFamilySamples(\"ServiceComb_Metrics\", Type.UNTYPED, \"ServiceComb Metrics\", samples));\n \n     return familySamples;\n   }\ndiff --git a/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java b/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java\nindex cc10b4e..8c99c97 100644\n--- a/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java\n+++ b/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java\n@@ -96,8 +96,8 @@\n     URL url \u003d new URL(\"http://localhost:\" + server.getAddress().getPort() + \"/metrics\");\n     HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();\n     try (InputStream is \u003d conn.getInputStream()) {\n-      Assert.assertEquals(\"# HELP ServiceComb Metrics ServiceComb Metrics\\n\" +\n-          \"# TYPE ServiceComb Metrics untyped\\n\" +\n+      Assert.assertEquals(\"# HELP ServiceComb_Metrics ServiceComb Metrics\\n\" +\n+          \"# TYPE ServiceComb_Metrics untyped\\n\" +\n           \"count_name{tag1\u003d\\\"tag1v\\\",tag2\u003d\\\"tag2v\\\",} 1.0\\n\", IOUtils.toString(is));\n     }\n \ndiff --git a/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java b/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java\nindex af62c09..30633e0 100644\n--- a/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java\n+++ b/metrics/metrics-integration/metrics-prometheus/src/main/java/org/apache/servicecomb/metrics/prometheus/PrometheusPublisher.java\n@@ -93,7 +93,7 @@\n       }\n     }\n \n-    familySamples.add(new MetricFamilySamples(\"ServiceComb Metrics\", Type.UNTYPED, \"ServiceComb Metrics\", samples));\n+    familySamples.add(new MetricFamilySamples(\"ServiceComb_Metrics\", Type.UNTYPED, \"ServiceComb Metrics\", samples));\n \n     return familySamples;\n   }\n",
    "projectName": "java-chassis",
    "lineNum": 96,
    "nodeStartChar": 3850,
    "before": "\"ServiceComb Metrics\"",
    "after": "\"ServiceComb_Metrics\""
  },
  {
    "commitSHA1": "3dbf6a989cd1adadce014ee8ee22798b7e96fdf5",
    "commitFile": "metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java",
    "patch": "diff --git a/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java b/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java\nindex cc10b4e..8c99c97 100644\n--- a/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java\n+++ b/metrics/metrics-integration/metrics-prometheus/src/test/java/org/apache/servicecomb/metrics/prometheus/TestPrometheusPublisher.java\n@@ -96,8 +96,8 @@\n     URL url \u003d new URL(\"http://localhost:\" + server.getAddress().getPort() + \"/metrics\");\n     HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();\n     try (InputStream is \u003d conn.getInputStream()) {\n-      Assert.assertEquals(\"# HELP ServiceComb Metrics ServiceComb Metrics\\n\" +\n-          \"# TYPE ServiceComb Metrics untyped\\n\" +\n+      Assert.assertEquals(\"# HELP ServiceComb_Metrics ServiceComb Metrics\\n\" +\n+          \"# TYPE ServiceComb_Metrics untyped\\n\" +\n           \"count_name{tag1\u003d\\\"tag1v\\\",tag2\u003d\\\"tag2v\\\",} 1.0\\n\", IOUtils.toString(is));\n     }\n \n",
    "projectName": "java-chassis",
    "lineNum": 99,
    "nodeStartChar": 3703,
    "before": "\"# HELP ServiceComb Metrics ServiceComb Metrics\\n\"",
    "after": "\"# HELP ServiceComb_Metrics ServiceComb Metrics\\n\""
  },
  {
    "commitSHA1": "b5160b401356a4aa7e70a74c67e7f98f0415c896",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\nindex 0d4e003..10dfed3 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n@@ -121,6 +121,6 @@\n     }\n     long taken \u003d System.currentTimeMillis() - begin;\n     System.out.println(\"taken \" + taken);\n-    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 2, true); // 5 * times make slow machine happy\n+    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 5, true); // 5 * times make slow machine happy\n   }\n }\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\nindex 0d4e003..10dfed3 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n@@ -121,6 +121,6 @@\n     }\n     long taken \u003d System.currentTimeMillis() - begin;\n     System.out.println(\"taken \" + taken);\n-    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 2, true); // 5 * times make slow machine happy\n+    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 5, true); // 5 * times make slow machine happy\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 124,
    "nodeStartChar": 5257,
    "before": "2",
    "after": "5"
  },
  {
    "commitSHA1": "4c0213c39aea954b9333bcead0437ac07fa211f3",
    "commitFile": "integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java",
    "patch": "diff --git a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\nindex 3709106..fec1f81 100644\n--- a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n+++ b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n@@ -94,7 +94,7 @@\n     Assert.assertEquals(4, dataTypeJaxrsSchema.intCookie(4));\n     Assert.assertEquals(5, dataTypeJaxrsSchema.intForm(5));\n     Assert.assertEquals(6, dataTypeJaxrsSchema.intBody(6));\n-    Assert.assertEquals(7, dataTypeJaxrsSchema.add(3, 4));\n+    Assert.assertEquals(7, dataTypeJaxrsSchema.intAdd(3, 4));\n     Assert.assertEquals(\"abc\", dataTypeJaxrsSchema.stringPath(\"abc\"));\n     Assert.assertEquals(\"def\", dataTypeJaxrsSchema.stringQuery(\"def\"));\n     Assert.assertEquals(\"ghi\", dataTypeJaxrsSchema.stringHeader(\"ghi\"));\n@@ -107,7 +107,7 @@\n   @Test\n   public void testAsyncInvoke_RPC() throws ExecutionException, InterruptedException {\n     Holder\u003cBoolean\u003e addChecked \u003d new Holder\u003c\u003e(false);\n-    dataTypeJaxrsSchemaAsync.add(5, 6).whenComplete((result, t) -\u003e {\n+    dataTypeJaxrsSchemaAsync.intAdd(5, 6).whenComplete((result, t) -\u003e {\n       Assert.assertEquals(11, result.intValue());\n       Assert.assertNull(t);\n       addChecked.value \u003d true;\n@@ -136,7 +136,7 @@\n     RestTemplate restTemplate \u003d RestTemplateBuilder.create();\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d restTemplate\n         .getForEntity(\n-            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             int.class);\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n     Assert.assertEquals(33, responseEntity.getBody().intValue());\n@@ -154,7 +154,8 @@\n     CseAsyncRestTemplate cseAsyncRestTemplate \u003d new CseAsyncRestTemplate();\n     ListenableFuture\u003cResponseEntity\u003cInteger\u003e\u003e responseFuture \u003d cseAsyncRestTemplate\n         .getForEntity(\n-            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME\n+                + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             Integer.class);\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d responseFuture.get();\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n@@ -195,9 +196,9 @@\n     @POST\n     int intBody(int input);\n \n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    int add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    int intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     //strinnum1\n     @Path(\"stringPath/{input}\")\n@@ -231,9 +232,9 @@\n \n   @Path(\"/rest/it-producer/v1/dataTypeJaxrs\")\n   interface DataTypeJaxrsSchemaAsyncIntf {\n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    CompletableFuture\u003cInteger\u003e add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    CompletableFuture\u003cInteger\u003e intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     @Path(\"stringBody\")\n     @POST\ndiff --git a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\nindex 3709106..fec1f81 100644\n--- a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n+++ b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n@@ -94,7 +94,7 @@\n     Assert.assertEquals(4, dataTypeJaxrsSchema.intCookie(4));\n     Assert.assertEquals(5, dataTypeJaxrsSchema.intForm(5));\n     Assert.assertEquals(6, dataTypeJaxrsSchema.intBody(6));\n-    Assert.assertEquals(7, dataTypeJaxrsSchema.add(3, 4));\n+    Assert.assertEquals(7, dataTypeJaxrsSchema.intAdd(3, 4));\n     Assert.assertEquals(\"abc\", dataTypeJaxrsSchema.stringPath(\"abc\"));\n     Assert.assertEquals(\"def\", dataTypeJaxrsSchema.stringQuery(\"def\"));\n     Assert.assertEquals(\"ghi\", dataTypeJaxrsSchema.stringHeader(\"ghi\"));\n@@ -107,7 +107,7 @@\n   @Test\n   public void testAsyncInvoke_RPC() throws ExecutionException, InterruptedException {\n     Holder\u003cBoolean\u003e addChecked \u003d new Holder\u003c\u003e(false);\n-    dataTypeJaxrsSchemaAsync.add(5, 6).whenComplete((result, t) -\u003e {\n+    dataTypeJaxrsSchemaAsync.intAdd(5, 6).whenComplete((result, t) -\u003e {\n       Assert.assertEquals(11, result.intValue());\n       Assert.assertNull(t);\n       addChecked.value \u003d true;\n@@ -136,7 +136,7 @@\n     RestTemplate restTemplate \u003d RestTemplateBuilder.create();\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d restTemplate\n         .getForEntity(\n-            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             int.class);\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n     Assert.assertEquals(33, responseEntity.getBody().intValue());\n@@ -154,7 +154,8 @@\n     CseAsyncRestTemplate cseAsyncRestTemplate \u003d new CseAsyncRestTemplate();\n     ListenableFuture\u003cResponseEntity\u003cInteger\u003e\u003e responseFuture \u003d cseAsyncRestTemplate\n         .getForEntity(\n-            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME\n+                + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             Integer.class);\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d responseFuture.get();\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n@@ -195,9 +196,9 @@\n     @POST\n     int intBody(int input);\n \n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    int add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    int intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     //strinnum1\n     @Path(\"stringPath/{input}\")\n@@ -231,9 +232,9 @@\n \n   @Path(\"/rest/it-producer/v1/dataTypeJaxrs\")\n   interface DataTypeJaxrsSchemaAsyncIntf {\n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    CompletableFuture\u003cInteger\u003e add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    CompletableFuture\u003cInteger\u003e intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     @Path(\"stringBody\")\n     @POST\n",
    "projectName": "java-chassis",
    "lineNum": 139,
    "nodeStartChar": 5950,
    "before": "\"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\"",
    "after": "\"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\""
  },
  {
    "commitSHA1": "4c0213c39aea954b9333bcead0437ac07fa211f3",
    "commitFile": "integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java",
    "patch": "diff --git a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\nindex 3709106..fec1f81 100644\n--- a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n+++ b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n@@ -94,7 +94,7 @@\n     Assert.assertEquals(4, dataTypeJaxrsSchema.intCookie(4));\n     Assert.assertEquals(5, dataTypeJaxrsSchema.intForm(5));\n     Assert.assertEquals(6, dataTypeJaxrsSchema.intBody(6));\n-    Assert.assertEquals(7, dataTypeJaxrsSchema.add(3, 4));\n+    Assert.assertEquals(7, dataTypeJaxrsSchema.intAdd(3, 4));\n     Assert.assertEquals(\"abc\", dataTypeJaxrsSchema.stringPath(\"abc\"));\n     Assert.assertEquals(\"def\", dataTypeJaxrsSchema.stringQuery(\"def\"));\n     Assert.assertEquals(\"ghi\", dataTypeJaxrsSchema.stringHeader(\"ghi\"));\n@@ -107,7 +107,7 @@\n   @Test\n   public void testAsyncInvoke_RPC() throws ExecutionException, InterruptedException {\n     Holder\u003cBoolean\u003e addChecked \u003d new Holder\u003c\u003e(false);\n-    dataTypeJaxrsSchemaAsync.add(5, 6).whenComplete((result, t) -\u003e {\n+    dataTypeJaxrsSchemaAsync.intAdd(5, 6).whenComplete((result, t) -\u003e {\n       Assert.assertEquals(11, result.intValue());\n       Assert.assertNull(t);\n       addChecked.value \u003d true;\n@@ -136,7 +136,7 @@\n     RestTemplate restTemplate \u003d RestTemplateBuilder.create();\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d restTemplate\n         .getForEntity(\n-            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             int.class);\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n     Assert.assertEquals(33, responseEntity.getBody().intValue());\n@@ -154,7 +154,8 @@\n     CseAsyncRestTemplate cseAsyncRestTemplate \u003d new CseAsyncRestTemplate();\n     ListenableFuture\u003cResponseEntity\u003cInteger\u003e\u003e responseFuture \u003d cseAsyncRestTemplate\n         .getForEntity(\n-            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME\n+                + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             Integer.class);\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d responseFuture.get();\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n@@ -195,9 +196,9 @@\n     @POST\n     int intBody(int input);\n \n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    int add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    int intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     //strinnum1\n     @Path(\"stringPath/{input}\")\n@@ -231,9 +232,9 @@\n \n   @Path(\"/rest/it-producer/v1/dataTypeJaxrs\")\n   interface DataTypeJaxrsSchemaAsyncIntf {\n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    CompletableFuture\u003cInteger\u003e add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    CompletableFuture\u003cInteger\u003e intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     @Path(\"stringBody\")\n     @POST\ndiff --git a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\nindex 3709106..fec1f81 100644\n--- a/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n+++ b/integration-tests/it-consumer/src/main/java/org/apache/servicecomb/it/testcase/thirdparty/Test3rdPartyInvocation.java\n@@ -94,7 +94,7 @@\n     Assert.assertEquals(4, dataTypeJaxrsSchema.intCookie(4));\n     Assert.assertEquals(5, dataTypeJaxrsSchema.intForm(5));\n     Assert.assertEquals(6, dataTypeJaxrsSchema.intBody(6));\n-    Assert.assertEquals(7, dataTypeJaxrsSchema.add(3, 4));\n+    Assert.assertEquals(7, dataTypeJaxrsSchema.intAdd(3, 4));\n     Assert.assertEquals(\"abc\", dataTypeJaxrsSchema.stringPath(\"abc\"));\n     Assert.assertEquals(\"def\", dataTypeJaxrsSchema.stringQuery(\"def\"));\n     Assert.assertEquals(\"ghi\", dataTypeJaxrsSchema.stringHeader(\"ghi\"));\n@@ -107,7 +107,7 @@\n   @Test\n   public void testAsyncInvoke_RPC() throws ExecutionException, InterruptedException {\n     Holder\u003cBoolean\u003e addChecked \u003d new Holder\u003c\u003e(false);\n-    dataTypeJaxrsSchemaAsync.add(5, 6).whenComplete((result, t) -\u003e {\n+    dataTypeJaxrsSchemaAsync.intAdd(5, 6).whenComplete((result, t) -\u003e {\n       Assert.assertEquals(11, result.intValue());\n       Assert.assertNull(t);\n       addChecked.value \u003d true;\n@@ -136,7 +136,7 @@\n     RestTemplate restTemplate \u003d RestTemplateBuilder.create();\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d restTemplate\n         .getForEntity(\n-            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             int.class);\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n     Assert.assertEquals(33, responseEntity.getBody().intValue());\n@@ -154,7 +154,8 @@\n     CseAsyncRestTemplate cseAsyncRestTemplate \u003d new CseAsyncRestTemplate();\n     ListenableFuture\u003cResponseEntity\u003cInteger\u003e\u003e responseFuture \u003d cseAsyncRestTemplate\n         .getForEntity(\n-            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME + \"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\",\n+            \"cse://\" + ASYNC_THIRD_PARTY_MICROSERVICE_NAME\n+                + \"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\",\n             Integer.class);\n     ResponseEntity\u003cInteger\u003e responseEntity \u003d responseFuture.get();\n     Assert.assertEquals(200, responseEntity.getStatusCodeValue());\n@@ -195,9 +196,9 @@\n     @POST\n     int intBody(int input);\n \n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    int add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    int intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     //strinnum1\n     @Path(\"stringPath/{input}\")\n@@ -231,9 +232,9 @@\n \n   @Path(\"/rest/it-producer/v1/dataTypeJaxrs\")\n   interface DataTypeJaxrsSchemaAsyncIntf {\n-    @Path(\"add\")\n+    @Path(\"intAdd\")\n     @GET\n-    CompletableFuture\u003cInteger\u003e add(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n+    CompletableFuture\u003cInteger\u003e intAdd(@QueryParam(\"num1\") int num1, @QueryParam(\"num2\") int num2);\n \n     @Path(\"stringBody\")\n     @POST\n",
    "projectName": "java-chassis",
    "lineNum": 158,
    "nodeStartChar": 6919,
    "before": "\"/rest/it-producer/v1/dataTypeJaxrs/add?num1\u003d11\u0026num2\u003d22\"",
    "after": "\"/rest/it-producer/v1/dataTypeJaxrs/intAdd?num1\u003d11\u0026num2\u003d22\""
  },
  {
    "commitSHA1": "d12f88cb12717c7557428c62d3e057ad451f0955",
    "commitFile": "demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java",
    "patch": "diff --git a/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java b/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java\nindex 2481e52..38ae6e9 100644\n--- a/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java\n+++ b/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java\n@@ -110,7 +110,7 @@\n   private void test404(RestTemplate template) {\n     HttpClientErrorException exception \u003d null;\n     try {\n-      template.getForEntity(\"http://127.0.0.1:8086/aPathNotExist\", String.class);\n+      template.getForEntity(\"http://127.0.0.1:8080/aPathNotExist\", String.class);\n     } catch (RestClientException e) {\n       if (e instanceof HttpClientErrorException) {\n         exception \u003d (HttpClientErrorException) e;\ndiff --git a/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java b/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java\nindex 2481e52..38ae6e9 100644\n--- a/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java\n+++ b/demo/demo-jaxrs/jaxrs-client/src/main/java/org/apache/servicecomb/demo/jaxrs/client/CodeFirstRestTemplateJaxrs.java\n@@ -110,7 +110,7 @@\n   private void test404(RestTemplate template) {\n     HttpClientErrorException exception \u003d null;\n     try {\n-      template.getForEntity(\"http://127.0.0.1:8086/aPathNotExist\", String.class);\n+      template.getForEntity(\"http://127.0.0.1:8080/aPathNotExist\", String.class);\n     } catch (RestClientException e) {\n       if (e instanceof HttpClientErrorException) {\n         exception \u003d (HttpClientErrorException) e;\n",
    "projectName": "java-chassis",
    "lineNum": 113,
    "nodeStartChar": 4485,
    "before": "\"http://127.0.0.1:8086/aPathNotExist\"",
    "after": "\"http://127.0.0.1:8080/aPathNotExist\""
  },
  {
    "commitSHA1": "c4c2f4f3c8c40491b121a3df53aab4e3f7f13bc1",
    "commitFile": "demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java",
    "patch": "diff --git a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\nindex 4d64a34..0e1bc17 100644\n--- a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n+++ b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n@@ -52,10 +52,10 @@\n   }\n \n   @GetMapping(\"/query2\")\n-  public String query2(@RequestParam(\"e\") int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n+  public String query2(@RequestParam(name \u003d \"e\", required \u003d false) int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n       @RequestParam(name \u003d \"b\", defaultValue \u003d \"bobo\") String b,\n       @RequestParam(name \u003d \"c\", defaultValue \u003d \"40\") Integer c,\n-      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(\"d\") int d) {\n+      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(name \u003d \"d\", required \u003d false) int d) {\n     return \"Hello \" + a + b + c + d + e;\n   }\n \ndiff --git a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\nindex 4d64a34..0e1bc17 100644\n--- a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n+++ b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n@@ -52,10 +52,10 @@\n   }\n \n   @GetMapping(\"/query2\")\n-  public String query2(@RequestParam(\"e\") int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n+  public String query2(@RequestParam(name \u003d \"e\", required \u003d false) int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n       @RequestParam(name \u003d \"b\", defaultValue \u003d \"bobo\") String b,\n       @RequestParam(name \u003d \"c\", defaultValue \u003d \"40\") Integer c,\n-      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(\"d\") int d) {\n+      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(name \u003d \"d\", required \u003d false) int d) {\n     return \"Hello \" + a + b + c + d + e;\n   }\n \n",
    "projectName": "java-chassis",
    "lineNum": 55,
    "nodeStartChar": 2424,
    "before": "@RequestParam(\"e\")",
    "after": "@RequestParam(name\u003d\"e\",required\u003dfalse)"
  },
  {
    "commitSHA1": "c4c2f4f3c8c40491b121a3df53aab4e3f7f13bc1",
    "commitFile": "demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java",
    "patch": "diff --git a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\nindex 4d64a34..0e1bc17 100644\n--- a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n+++ b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n@@ -52,10 +52,10 @@\n   }\n \n   @GetMapping(\"/query2\")\n-  public String query2(@RequestParam(\"e\") int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n+  public String query2(@RequestParam(name \u003d \"e\", required \u003d false) int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n       @RequestParam(name \u003d \"b\", defaultValue \u003d \"bobo\") String b,\n       @RequestParam(name \u003d \"c\", defaultValue \u003d \"40\") Integer c,\n-      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(\"d\") int d) {\n+      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(name \u003d \"d\", required \u003d false) int d) {\n     return \"Hello \" + a + b + c + d + e;\n   }\n \ndiff --git a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\nindex 4d64a34..0e1bc17 100644\n--- a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n+++ b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n@@ -52,10 +52,10 @@\n   }\n \n   @GetMapping(\"/query2\")\n-  public String query2(@RequestParam(\"e\") int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n+  public String query2(@RequestParam(name \u003d \"e\", required \u003d false) int e, @RequestParam(name \u003d \"a\", defaultValue \u003d \"20\") int a,\n       @RequestParam(name \u003d \"b\", defaultValue \u003d \"bobo\") String b,\n       @RequestParam(name \u003d \"c\", defaultValue \u003d \"40\") Integer c,\n-      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(\"d\") int d) {\n+      @Min(value \u003d 20) @Max(value \u003d 30) @RequestParam(name \u003d \"d\", required \u003d false) int d) {\n     return \"Hello \" + a + b + c + d + e;\n   }\n \n",
    "projectName": "java-chassis",
    "lineNum": 58,
    "nodeStartChar": 2673,
    "before": "@RequestParam(\"d\")",
    "after": "@RequestParam(name\u003d\"d\",required\u003dfalse)"
  },
  {
    "commitSHA1": "d929f658eee5c2e0277b10a1b5d33131c20a5a9d",
    "commitFile": "demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java",
    "patch": "diff --git a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\nindex 70e80a1..4d64a34 100644\n--- a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n+++ b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n@@ -65,18 +65,18 @@\n   }\n \n   @PostMapping(\"/javaprimitive1\")\n-  public String springJavaPrim1(@RequestParam(name \u003d \"a\") int a,\n+  public String springJavaPrim1(@RequestParam(name \u003d \"a\", required \u003d false) int a,\n       @RequestParam(name \u003d \"b\", defaultValue \u003d \"bobo\") String b) {\n     return \"Hello \" + a + b;\n   }\n \n   @PostMapping(\"/javaprimitive2\")\n-  public String springJavaPrim2(@RequestParam(name \u003d \"a\") float a, @RequestParam(name \u003d \"b\") boolean b) {\n+  public String springJavaPrim2(@RequestParam(name \u003d \"a\", required \u003d false) float a, @RequestParam(name \u003d \"b\", required \u003d false) boolean b) {\n     return \"Hello \" + a + b;\n   }\n \n   @PostMapping(\"/javaprimitive3\")\n-  public String springJavaPrim3(@RequestParam(name \u003d \"a\") int a, @RequestParam(name \u003d \"b\") String b) {\n+  public String springJavaPrim3(@RequestParam(name \u003d \"a\", required \u003d false) int a, @RequestParam(name \u003d \"b\", required \u003d false) String b) {\n     if (b \u003d\u003d null || b.equals(\"\")) {\n       return \"Hello\";\n     }\n@@ -85,7 +85,7 @@\n   }\n \n   @PostMapping(\"/javaprimitive4\")\n-  public String springJavaPrim4(@RequestParam(name \u003d \"a\") Integer a, @RequestParam(name \u003d \"b\") Float b) {\n+  public String springJavaPrim4(@RequestParam(name \u003d \"a\", required \u003d false) Integer a, @RequestParam(name \u003d \"b\", required \u003d false) Float b) {\n     return \"Hello \" + a + b;\n   }\n }\ndiff --git a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\nindex 70e80a1..4d64a34 100644\n--- a/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n+++ b/demo/demo-springmvc/springmvc-server/src/main/java/org/apache/servicecomb/demo/springmvc/server/SpringMvcDefaultValues.java\n@@ -65,18 +65,18 @@\n   }\n \n   @PostMapping(\"/javaprimitive1\")\n-  public String springJavaPrim1(@RequestParam(name \u003d \"a\") int a,\n+  public String springJavaPrim1(@RequestParam(name \u003d \"a\", required \u003d false) int a,\n       @RequestParam(name \u003d \"b\", defaultValue \u003d \"bobo\") String b) {\n     return \"Hello \" + a + b;\n   }\n \n   @PostMapping(\"/javaprimitive2\")\n-  public String springJavaPrim2(@RequestParam(name \u003d \"a\") float a, @RequestParam(name \u003d \"b\") boolean b) {\n+  public String springJavaPrim2(@RequestParam(name \u003d \"a\", required \u003d false) float a, @RequestParam(name \u003d \"b\", required \u003d false) boolean b) {\n     return \"Hello \" + a + b;\n   }\n \n   @PostMapping(\"/javaprimitive3\")\n-  public String springJavaPrim3(@RequestParam(name \u003d \"a\") int a, @RequestParam(name \u003d \"b\") String b) {\n+  public String springJavaPrim3(@RequestParam(name \u003d \"a\", required \u003d false) int a, @RequestParam(name \u003d \"b\", required \u003d false) String b) {\n     if (b \u003d\u003d null || b.equals(\"\")) {\n       return \"Hello\";\n     }\n@@ -85,7 +85,7 @@\n   }\n \n   @PostMapping(\"/javaprimitive4\")\n-  public String springJavaPrim4(@RequestParam(name \u003d \"a\") Integer a, @RequestParam(name \u003d \"b\") Float b) {\n+  public String springJavaPrim4(@RequestParam(name \u003d \"a\", required \u003d false) Integer a, @RequestParam(name \u003d \"b\", required \u003d false) Float b) {\n     return \"Hello \" + a + b;\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 68,
    "nodeStartChar": 2969,
    "before": "@RequestParam(name\u003d\"a\")",
    "after": "@RequestParam(name\u003d\"a\",required\u003dfalse)"
  },
  {
    "commitSHA1": "1a4a1dd1ba982827fb3d29db96faecf4fcab9cd8",
    "commitFile": "integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java",
    "patch": "diff --git a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\nindex b67cd53..7eb6f43 100644\n--- a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n+++ b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n@@ -68,7 +68,7 @@\n \n     assertThat(result, is(\"Hello Message slow\"));\n     assertThat(elapsedTime,\n-        is(both(greaterThan(5000L)).and(lessThan(6000L))));\n+        is(both(greaterThan(4000L)).and(lessThan(7000L))));\n   }\n \n   @Test\ndiff --git a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\nindex b67cd53..7eb6f43 100644\n--- a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n+++ b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n@@ -68,7 +68,7 @@\n \n     assertThat(result, is(\"Hello Message slow\"));\n     assertThat(elapsedTime,\n-        is(both(greaterThan(5000L)).and(lessThan(6000L))));\n+        is(both(greaterThan(4000L)).and(lessThan(7000L))));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 71,
    "nodeStartChar": 2744,
    "before": "5000L",
    "after": "4000L"
  },
  {
    "commitSHA1": "42845706fba8d282332cda6bfd61007e675fdaa9",
    "commitFile": "handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java",
    "patch": "diff --git a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\nindex 4014307..8bc147b 100644\n--- a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n+++ b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n@@ -31,7 +31,7 @@\n   private AtomicLong requestCount \u003d new AtomicLong();\n \n   // 本周期之前的请求数\n-  private volatile long lastRequestCount \u003d 0;\n+  private volatile long lastRequestCount \u003d 1;\n \n   private static final int CYCLE_LENGTH \u003d 1000;\n \ndiff --git a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\nindex 4014307..8bc147b 100644\n--- a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n+++ b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n@@ -31,7 +31,7 @@\n   private AtomicLong requestCount \u003d new AtomicLong();\n \n   // 本周期之前的请求数\n-  private volatile long lastRequestCount \u003d 0;\n+  private volatile long lastRequestCount \u003d 1;\n \n   private static final int CYCLE_LENGTH \u003d 1000;\n \n",
    "projectName": "java-chassis",
    "lineNum": 34,
    "nodeStartChar": 1150,
    "before": "0",
    "after": "1"
  },
  {
    "commitSHA1": "f9fd79c04bd3d2cf06feb9a8ba0d78509305c03d",
    "commitFile": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java",
    "patch": "diff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\nindex d8b186b..f207b46 100644\n--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n@@ -154,7 +154,7 @@\n       String schemaId \u003d entry.getKey();\n       String content \u003d entry.getValue();\n       GetSchemaResponse existSchema \u003d extractSchema(schemaId, existSchemas);\n-      boolean exists \u003d existSchema !\u003d null;\n+      boolean exists \u003d existSchema !\u003d null \u0026\u0026 existSchema.getSummary() !\u003d null;\n       LOGGER.info(\"schemaId [{}] exists {}\", schemaId, exists);\n       if (!exists) {\n         if (!srClient.registerSchema(microservice.getServiceId(), schemaId, content)) {\n@@ -164,7 +164,7 @@\n         String curSchemaSumary \u003d existSchema.getSummary();\n         String schemaSummary \u003d Hashing.sha256().newHasher().putString(content, Charsets.UTF_8).hash().toString();\n         if (!schemaSummary.equals(curSchemaSumary)) {\n-          if (curSchemaSumary \u003d\u003d null || microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n+          if (microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n             LOGGER.info(\n                 \"schemaId [{}]\u0027s content changes and the current enviroment is development, so re-register it!\",\n                 schemaId);\ndiff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\nindex d8b186b..f207b46 100644\n--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n@@ -154,7 +154,7 @@\n       String schemaId \u003d entry.getKey();\n       String content \u003d entry.getValue();\n       GetSchemaResponse existSchema \u003d extractSchema(schemaId, existSchemas);\n-      boolean exists \u003d existSchema !\u003d null;\n+      boolean exists \u003d existSchema !\u003d null \u0026\u0026 existSchema.getSummary() !\u003d null;\n       LOGGER.info(\"schemaId [{}] exists {}\", schemaId, exists);\n       if (!exists) {\n         if (!srClient.registerSchema(microservice.getServiceId(), schemaId, content)) {\n@@ -164,7 +164,7 @@\n         String curSchemaSumary \u003d existSchema.getSummary();\n         String schemaSummary \u003d Hashing.sha256().newHasher().putString(content, Charsets.UTF_8).hash().toString();\n         if (!schemaSummary.equals(curSchemaSumary)) {\n-          if (curSchemaSumary \u003d\u003d null || microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n+          if (microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n             LOGGER.info(\n                 \"schemaId [{}]\u0027s content changes and the current enviroment is development, so re-register it!\",\n                 schemaId);\n",
    "projectName": "java-chassis",
    "lineNum": 157,
    "nodeStartChar": 5990,
    "before": "existSchema !\u003d null",
    "after": "existSchema !\u003d null \u0026\u0026 existSchema.getSummary() !\u003d null"
  },
  {
    "commitSHA1": "f9fd79c04bd3d2cf06feb9a8ba0d78509305c03d",
    "commitFile": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java",
    "patch": "diff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\nindex d8b186b..f207b46 100644\n--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n@@ -154,7 +154,7 @@\n       String schemaId \u003d entry.getKey();\n       String content \u003d entry.getValue();\n       GetSchemaResponse existSchema \u003d extractSchema(schemaId, existSchemas);\n-      boolean exists \u003d existSchema !\u003d null;\n+      boolean exists \u003d existSchema !\u003d null \u0026\u0026 existSchema.getSummary() !\u003d null;\n       LOGGER.info(\"schemaId [{}] exists {}\", schemaId, exists);\n       if (!exists) {\n         if (!srClient.registerSchema(microservice.getServiceId(), schemaId, content)) {\n@@ -164,7 +164,7 @@\n         String curSchemaSumary \u003d existSchema.getSummary();\n         String schemaSummary \u003d Hashing.sha256().newHasher().putString(content, Charsets.UTF_8).hash().toString();\n         if (!schemaSummary.equals(curSchemaSumary)) {\n-          if (curSchemaSumary \u003d\u003d null || microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n+          if (microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n             LOGGER.info(\n                 \"schemaId [{}]\u0027s content changes and the current enviroment is development, so re-register it!\",\n                 schemaId);\ndiff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\nindex d8b186b..f207b46 100644\n--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/task/MicroserviceRegisterTask.java\n@@ -154,7 +154,7 @@\n       String schemaId \u003d entry.getKey();\n       String content \u003d entry.getValue();\n       GetSchemaResponse existSchema \u003d extractSchema(schemaId, existSchemas);\n-      boolean exists \u003d existSchema !\u003d null;\n+      boolean exists \u003d existSchema !\u003d null \u0026\u0026 existSchema.getSummary() !\u003d null;\n       LOGGER.info(\"schemaId [{}] exists {}\", schemaId, exists);\n       if (!exists) {\n         if (!srClient.registerSchema(microservice.getServiceId(), schemaId, content)) {\n@@ -164,7 +164,7 @@\n         String curSchemaSumary \u003d existSchema.getSummary();\n         String schemaSummary \u003d Hashing.sha256().newHasher().putString(content, Charsets.UTF_8).hash().toString();\n         if (!schemaSummary.equals(curSchemaSumary)) {\n-          if (curSchemaSumary \u003d\u003d null || microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n+          if (microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")) {\n             LOGGER.info(\n                 \"schemaId [{}]\u0027s content changes and the current enviroment is development, so re-register it!\",\n                 schemaId);\n",
    "projectName": "java-chassis",
    "lineNum": 167,
    "nodeStartChar": 6474,
    "before": "curSchemaSumary \u003d\u003d null || microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")",
    "after": "microservice.getInstance().getEnvironment().equalsIgnoreCase(\"development\")"
  },
  {
    "commitSHA1": "48481f77b1179671dfc3b2d81c417b8dc4f8b0f9",
    "commitFile": "integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java",
    "patch": "diff --git a/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java b/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java\nindex c37c84e..611916c 100644\n--- a/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java\n+++ b/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java\n@@ -327,7 +327,7 @@\n \n     ResponseEntity\u003cString\u003e response \u003d restTemplate\n         .postForEntity(codeFirstUrl + \"uploadWithoutAnnotation\", new HttpEntity\u003c\u003e(map, headers), String.class);\n-    assertThat(response.getStatusCodeValue(), is(response.getStatusCodeValue()));\n+    assertThat(response.getStatusCodeValue(), is(590));\n     assertThat(response.getBody(), is(\"CommonExceptionData [message\u003dCse Internal Server Error]\"));\n   }\n \ndiff --git a/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java b/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java\nindex c37c84e..611916c 100644\n--- a/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java\n+++ b/integration-tests/springmvc-tests/src/test/java/org/apache/servicecomb/demo/springmvc/tests/SpringMvcIntegrationTestBase.java\n@@ -327,7 +327,7 @@\n \n     ResponseEntity\u003cString\u003e response \u003d restTemplate\n         .postForEntity(codeFirstUrl + \"uploadWithoutAnnotation\", new HttpEntity\u003c\u003e(map, headers), String.class);\n-    assertThat(response.getStatusCodeValue(), is(response.getStatusCodeValue()));\n+    assertThat(response.getStatusCodeValue(), is(590));\n     assertThat(response.getBody(), is(\"CommonExceptionData [message\u003dCse Internal Server Error]\"));\n   }\n \n",
    "projectName": "java-chassis",
    "lineNum": 330,
    "nodeStartChar": 13875,
    "before": "response.getStatusCodeValue()",
    "after": "590"
  },
  {
    "commitSHA1": "3b38cdd7346cfadc7057ea232e351100aeb8464a",
    "commitFile": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java",
    "patch": "diff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java\nindex eb28ed7..113fed0 100644\n--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java\n+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java\n@@ -130,7 +130,7 @@\n     ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     uriList.forEach(anUriList -\u003e {\n       try {\n-        URI uri \u003d new URI(anUriList);\n+        URI uri \u003d new URI(anUriList.trim());\n         this.ssl \u003d \"https\".equals(uri.getScheme());\n         ipPortList.add(NetUtils.parseIpPort(uri.getScheme(), uri.getAuthority()));\n       } catch (Exception e) {\ndiff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java\nindex eb28ed7..113fed0 100644\n--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java\n+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/config/ServiceRegistryConfig.java\n@@ -130,7 +130,7 @@\n     ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     uriList.forEach(anUriList -\u003e {\n       try {\n-        URI uri \u003d new URI(anUriList);\n+        URI uri \u003d new URI(anUriList.trim());\n         this.ssl \u003d \"https\".equals(uri.getScheme());\n         ipPortList.add(NetUtils.parseIpPort(uri.getScheme(), uri.getAuthority()));\n       } catch (Exception e) {\n",
    "projectName": "java-chassis",
    "lineNum": 133,
    "nodeStartChar": 4709,
    "before": "anUriList",
    "after": "anUriList.trim()"
  },
  {
    "commitSHA1": "5ea3718cceee1d9d6b01e66abd4170fe2ba201a6",
    "commitFile": "common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java",
    "patch": "diff --git a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\nindex 73c4c7f..a69eb0f 100644\n--- a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n+++ b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n@@ -152,7 +152,7 @@\n   public void multiWrapper() throws Exception {\n     ClassConfig classConfig \u003d new ClassConfig();\n     classConfig.setClassName(\"cse.ut.multi.Wrapper\");\n-    classConfig.addField(\"intField\", (Type) int.class);\n+    classConfig.addField(\"intField\", int.class);\n     classConfig.addField(\"strField\", String.class);\n \n     JavassistUtils.genMultiWrapperInterface(classConfig);\n@@ -161,7 +161,7 @@\n \n     MultiWrapper instance \u003d (MultiWrapper) wrapperClass.newInstance();\n     instance.writeFields(new Object[] {100, \"test\"});\n-    Object[] fieldValues \u003d (Object[]) instance.readFields();\n+    Object[] fieldValues \u003d instance.readFields();\n     Assert.assertEquals(100, fieldValues[0]);\n     Assert.assertEquals(\"test\", fieldValues[1]);\n   }\ndiff --git a/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java b/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\nindex f1c985f..8fd1e89 100644\n--- a/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\n+++ b/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\n@@ -178,7 +178,7 @@\n     return getOrCreateSchema(type, () -\u003e {\n       if (!isArgsNeedWrap(method)) {\n         // 可以直接使用\n-        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) method.getParameterTypes()[0];\n+        Class\u003c?\u003e cls \u003d method.getParameterTypes()[0];\n         Schema\u003c?\u003e schema \u003d RuntimeSchema.createFrom(cls);\n         return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n       }\ndiff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\nindex c38b038..95659e8 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\n@@ -29,6 +29,6 @@\n \n   @Override\n   public void write(StringBuilder builder, Object[] args) throws Exception {\n-    builder.append((Object) getParamValue(args));\n+    builder.append(getParamValue(args));\n   }\n }\ndiff --git a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\nindex 73c4c7f..a69eb0f 100644\n--- a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n+++ b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n@@ -152,7 +152,7 @@\n   public void multiWrapper() throws Exception {\n     ClassConfig classConfig \u003d new ClassConfig();\n     classConfig.setClassName(\"cse.ut.multi.Wrapper\");\n-    classConfig.addField(\"intField\", (Type) int.class);\n+    classConfig.addField(\"intField\", int.class);\n     classConfig.addField(\"strField\", String.class);\n \n     JavassistUtils.genMultiWrapperInterface(classConfig);\n@@ -161,7 +161,7 @@\n \n     MultiWrapper instance \u003d (MultiWrapper) wrapperClass.newInstance();\n     instance.writeFields(new Object[] {100, \"test\"});\n-    Object[] fieldValues \u003d (Object[]) instance.readFields();\n+    Object[] fieldValues \u003d instance.readFields();\n     Assert.assertEquals(100, fieldValues[0]);\n     Assert.assertEquals(\"test\", fieldValues[1]);\n   }\n",
    "projectName": "java-chassis",
    "lineNum": 155,
    "nodeStartChar": 6184,
    "before": "(Type)int.class",
    "after": "int.class"
  },
  {
    "commitSHA1": "5ea3718cceee1d9d6b01e66abd4170fe2ba201a6",
    "commitFile": "common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java",
    "patch": "diff --git a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\nindex 73c4c7f..a69eb0f 100644\n--- a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n+++ b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n@@ -152,7 +152,7 @@\n   public void multiWrapper() throws Exception {\n     ClassConfig classConfig \u003d new ClassConfig();\n     classConfig.setClassName(\"cse.ut.multi.Wrapper\");\n-    classConfig.addField(\"intField\", (Type) int.class);\n+    classConfig.addField(\"intField\", int.class);\n     classConfig.addField(\"strField\", String.class);\n \n     JavassistUtils.genMultiWrapperInterface(classConfig);\n@@ -161,7 +161,7 @@\n \n     MultiWrapper instance \u003d (MultiWrapper) wrapperClass.newInstance();\n     instance.writeFields(new Object[] {100, \"test\"});\n-    Object[] fieldValues \u003d (Object[]) instance.readFields();\n+    Object[] fieldValues \u003d instance.readFields();\n     Assert.assertEquals(100, fieldValues[0]);\n     Assert.assertEquals(\"test\", fieldValues[1]);\n   }\ndiff --git a/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java b/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\nindex f1c985f..8fd1e89 100644\n--- a/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\n+++ b/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\n@@ -178,7 +178,7 @@\n     return getOrCreateSchema(type, () -\u003e {\n       if (!isArgsNeedWrap(method)) {\n         // 可以直接使用\n-        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) method.getParameterTypes()[0];\n+        Class\u003c?\u003e cls \u003d method.getParameterTypes()[0];\n         Schema\u003c?\u003e schema \u003d RuntimeSchema.createFrom(cls);\n         return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n       }\ndiff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\nindex c38b038..95659e8 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\n@@ -29,6 +29,6 @@\n \n   @Override\n   public void write(StringBuilder builder, Object[] args) throws Exception {\n-    builder.append((Object) getParamValue(args));\n+    builder.append(getParamValue(args));\n   }\n }\ndiff --git a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\nindex 73c4c7f..a69eb0f 100644\n--- a/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n+++ b/common/common-javassist/src/test/java/org/apache/servicecomb/common/javassist/TestJavassistUtils.java\n@@ -152,7 +152,7 @@\n   public void multiWrapper() throws Exception {\n     ClassConfig classConfig \u003d new ClassConfig();\n     classConfig.setClassName(\"cse.ut.multi.Wrapper\");\n-    classConfig.addField(\"intField\", (Type) int.class);\n+    classConfig.addField(\"intField\", int.class);\n     classConfig.addField(\"strField\", String.class);\n \n     JavassistUtils.genMultiWrapperInterface(classConfig);\n@@ -161,7 +161,7 @@\n \n     MultiWrapper instance \u003d (MultiWrapper) wrapperClass.newInstance();\n     instance.writeFields(new Object[] {100, \"test\"});\n-    Object[] fieldValues \u003d (Object[]) instance.readFields();\n+    Object[] fieldValues \u003d instance.readFields();\n     Assert.assertEquals(100, fieldValues[0]);\n     Assert.assertEquals(\"test\", fieldValues[1]);\n   }\n",
    "projectName": "java-chassis",
    "lineNum": 164,
    "nodeStartChar": 6537,
    "before": "(Object[])instance.readFields()",
    "after": "instance.readFields()"
  },
  {
    "commitSHA1": "5ea3718cceee1d9d6b01e66abd4170fe2ba201a6",
    "commitFile": "common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java",
    "patch": "diff --git a/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java b/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\nindex f1c985f..8fd1e89 100644\n--- a/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\n+++ b/common/common-protobuf/src/main/java/org/apache/servicecomb/codec/protobuf/utils/ProtobufSchemaUtils.java\n@@ -178,7 +178,7 @@\n     return getOrCreateSchema(type, () -\u003e {\n       if (!isArgsNeedWrap(method)) {\n         // 可以直接使用\n-        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) method.getParameterTypes()[0];\n+        Class\u003c?\u003e cls \u003d method.getParameterTypes()[0];\n         Schema\u003c?\u003e schema \u003d RuntimeSchema.createFrom(cls);\n         return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n       }\n",
    "projectName": "java-chassis",
    "lineNum": 181,
    "nodeStartChar": 6178,
    "before": "(Class\u003c?\u003e)method.getParameterTypes()[0]",
    "after": "method.getParameterTypes()[0]"
  },
  {
    "commitSHA1": "5ea3718cceee1d9d6b01e66abd4170fe2ba201a6",
    "commitFile": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java",
    "patch": "diff --git a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\nindex c38b038..95659e8 100644\n--- a/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\n+++ b/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/definition/path/PathVarParamWriter.java\n@@ -29,6 +29,6 @@\n \n   @Override\n   public void write(StringBuilder builder, Object[] args) throws Exception {\n-    builder.append((Object) getParamValue(args));\n+    builder.append(getParamValue(args));\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 32,
    "nodeStartChar": 1198,
    "before": "(Object)getParamValue(args)",
    "after": "getParamValue(args)"
  },
  {
    "commitSHA1": "cec097ec5446366fd246eecc6c1fe9208af13d1d",
    "commitFile": "transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java",
    "patch": "diff --git a/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java b/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java\nindex 0193c7d..b082835 100644\n--- a/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java\n+++ b/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java\n@@ -63,7 +63,7 @@\n \n   @Test\n   public void testConstructor() {\n-    AccessLogItem[] elements \u003d Deencapsulation.getField(ACCESS_LOG_GENERATOR, \"accessLogElements\");\n+    AccessLogItem[] elements \u003d Deencapsulation.getField(ACCESS_LOG_GENERATOR, \"accessLogItems\");\n     assertEquals(3, elements.length);\n     assertEquals(HttpMethodItem.class, elements[0].getClass());\n     assertEquals(PlainTextItem.class, elements[1].getClass());\ndiff --git a/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java b/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java\nindex 0193c7d..b082835 100644\n--- a/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java\n+++ b/transports/transport-rest/transport-rest-vertx/src/test/java/org/apache/servicecomb/transport/rest/vertx/accesslog/AccessLogGeneratorTest.java\n@@ -63,7 +63,7 @@\n \n   @Test\n   public void testConstructor() {\n-    AccessLogItem[] elements \u003d Deencapsulation.getField(ACCESS_LOG_GENERATOR, \"accessLogElements\");\n+    AccessLogItem[] elements \u003d Deencapsulation.getField(ACCESS_LOG_GENERATOR, \"accessLogItems\");\n     assertEquals(3, elements.length);\n     assertEquals(HttpMethodItem.class, elements[0].getClass());\n     assertEquals(PlainTextItem.class, elements[1].getClass());\n",
    "projectName": "java-chassis",
    "lineNum": 66,
    "nodeStartChar": 3004,
    "before": "\"accessLogElements\"",
    "after": "\"accessLogItems\""
  },
  {
    "commitSHA1": "29c75630f1b18ca30fcc95e740228c7de72b1cb4",
    "commitFile": "demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java",
    "patch": "diff --git a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\nindex a278441..e2505ed 100644\n--- a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n+++ b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n@@ -55,7 +55,7 @@\n       return buildFromMemoryResponse(id);\n     }\n \n-    return intf.syncQuery(id, step, all, fromDB);\n+    return intf.syncQuery(id, step + 1, all, fromDB);\n   }\n \n   public String buildFromMemoryResponse(String id) {\n@@ -76,6 +76,6 @@\n       return future;\n     }\n \n-    return intf.asyncQuery(id, step, all, fromDB);\n+    return intf.asyncQuery(id, step + 1, all, fromDB);\n   }\n }\ndiff --git a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\nindex a278441..e2505ed 100644\n--- a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n+++ b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n@@ -55,7 +55,7 @@\n       return buildFromMemoryResponse(id);\n     }\n \n-    return intf.syncQuery(id, step, all, fromDB);\n+    return intf.syncQuery(id, step + 1, all, fromDB);\n   }\n \n   public String buildFromMemoryResponse(String id) {\n@@ -76,6 +76,6 @@\n       return future;\n     }\n \n-    return intf.asyncQuery(id, step, all, fromDB);\n+    return intf.asyncQuery(id, step + 1, all, fromDB);\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 58,
    "nodeStartChar": 2313,
    "before": "step",
    "after": "step + 1"
  },
  {
    "commitSHA1": "29c75630f1b18ca30fcc95e740228c7de72b1cb4",
    "commitFile": "demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java",
    "patch": "diff --git a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\nindex a278441..e2505ed 100644\n--- a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n+++ b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n@@ -55,7 +55,7 @@\n       return buildFromMemoryResponse(id);\n     }\n \n-    return intf.syncQuery(id, step, all, fromDB);\n+    return intf.syncQuery(id, step + 1, all, fromDB);\n   }\n \n   public String buildFromMemoryResponse(String id) {\n@@ -76,6 +76,6 @@\n       return future;\n     }\n \n-    return intf.asyncQuery(id, step, all, fromDB);\n+    return intf.asyncQuery(id, step + 1, all, fromDB);\n   }\n }\ndiff --git a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\nindex a278441..e2505ed 100644\n--- a/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n+++ b/demo/perf/src/main/java/org/apache/servicecomb/demo/perf/Impl.java\n@@ -55,7 +55,7 @@\n       return buildFromMemoryResponse(id);\n     }\n \n-    return intf.syncQuery(id, step, all, fromDB);\n+    return intf.syncQuery(id, step + 1, all, fromDB);\n   }\n \n   public String buildFromMemoryResponse(String id) {\n@@ -76,6 +76,6 @@\n       return future;\n     }\n \n-    return intf.asyncQuery(id, step, all, fromDB);\n+    return intf.asyncQuery(id, step + 1, all, fromDB);\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 79,
    "nodeStartChar": 2995,
    "before": "step",
    "after": "step + 1"
  },
  {
    "commitSHA1": "cbb41a26feaacc82a59e39e3766dea90e1f904cb",
    "commitFile": "metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java",
    "patch": "diff --git a/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java b/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java\nindex 4b08a7a..29958ec 100644\n--- a/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java\n+++ b/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java\n@@ -57,7 +57,7 @@\n \n     ConsumerInvocationMetric instanceConsumerInvocationMetric \u003d new ConsumerInvocationMetric(\"instance\",\n         MetricsConst.INSTANCE_CONSUMER_PREFIX,\n-        new TimerMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".producerLatency\"),\n+        new TimerMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".consumerLatency\"),\n         new CallMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".consumerCall\"));\n     ProducerInvocationMetric instanceProducerInvocationMetric \u003d new ProducerInvocationMetric(\"instance\",\n         MetricsConst.INSTANCE_PRODUCER_PREFIX, 0,\ndiff --git a/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java b/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java\nindex 4b08a7a..29958ec 100644\n--- a/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java\n+++ b/metrics/metrics-common/src/main/java/io/servicecomb/metrics/common/RegistryMetric.java\n@@ -57,7 +57,7 @@\n \n     ConsumerInvocationMetric instanceConsumerInvocationMetric \u003d new ConsumerInvocationMetric(\"instance\",\n         MetricsConst.INSTANCE_CONSUMER_PREFIX,\n-        new TimerMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".producerLatency\"),\n+        new TimerMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".consumerLatency\"),\n         new CallMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".consumerCall\"));\n     ProducerInvocationMetric instanceProducerInvocationMetric \u003d new ProducerInvocationMetric(\"instance\",\n         MetricsConst.INSTANCE_PRODUCER_PREFIX, 0,\n",
    "projectName": "java-chassis",
    "lineNum": 60,
    "nodeStartChar": 2327,
    "before": "\".producerLatency\"",
    "after": "\".consumerLatency\""
  },
  {
    "commitSHA1": "aaa6785646c5dd94a7ce829c4507fdd23229b855",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex 7c6ced3..6ae2a95 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -250,7 +250,7 @@\n     Assert.assertEquals(model.getConsumerMetrics().get(\"fun2\").getConsumerCall().getTotal(), 1);\n \n     Map\u003cString, Number\u003e metrics \u003d model.toMap();\n-    Assert.assertEquals(metrics.size(), 72);\n+    Assert.assertEquals(96, metrics.size());\n \n     Assert.assertEquals(model.getInstanceMetric().getSystemMetric().getCpuLoad(), 1.0, 0);\n     Assert.assertEquals(model.getInstanceMetric().getSystemMetric().getCpuRunningThreads(), 2, 0);\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\nindex 4c60167..790299a 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\n@@ -45,11 +45,11 @@\n \n     RegistryMetric registryMetric \u003d publisher.metrics();\n     Map\u003cString, Number\u003e metricsMap \u003d registryMetric.toMap();\n-    Assert.assertEquals(metricsMap.size(), 30);\n+    Assert.assertEquals(35, metricsMap.size());\n \n     registryMetric \u003d publisher.metricsWithWindowTimeIndex(1000);\n     metricsMap \u003d registryMetric.toMap();\n-    Assert.assertEquals(metricsMap.size(), 30);\n+    Assert.assertEquals(35, metricsMap.size());\n \n     List\u003cLong\u003e appliedWindowTime \u003d publisher.getAppliedWindowTime();\n     Assert.assertEquals(appliedWindowTime.size(), 3);\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex 7c6ced3..6ae2a95 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -250,7 +250,7 @@\n     Assert.assertEquals(model.getConsumerMetrics().get(\"fun2\").getConsumerCall().getTotal(), 1);\n \n     Map\u003cString, Number\u003e metrics \u003d model.toMap();\n-    Assert.assertEquals(metrics.size(), 72);\n+    Assert.assertEquals(96, metrics.size());\n \n     Assert.assertEquals(model.getInstanceMetric().getSystemMetric().getCpuLoad(), 1.0, 0);\n     Assert.assertEquals(model.getInstanceMetric().getSystemMetric().getCpuRunningThreads(), 2, 0);\n",
    "projectName": "java-chassis",
    "lineNum": 253,
    "nodeStartChar": 13161,
    "before": "Assert.assertEquals(metrics.size(),72)",
    "after": "Assert.assertEquals(96,metrics.size())"
  },
  {
    "commitSHA1": "aaa6785646c5dd94a7ce829c4507fdd23229b855",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\nindex 4c60167..790299a 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\n@@ -45,11 +45,11 @@\n \n     RegistryMetric registryMetric \u003d publisher.metrics();\n     Map\u003cString, Number\u003e metricsMap \u003d registryMetric.toMap();\n-    Assert.assertEquals(metricsMap.size(), 30);\n+    Assert.assertEquals(35, metricsMap.size());\n \n     registryMetric \u003d publisher.metricsWithWindowTimeIndex(1000);\n     metricsMap \u003d registryMetric.toMap();\n-    Assert.assertEquals(metricsMap.size(), 30);\n+    Assert.assertEquals(35, metricsMap.size());\n \n     List\u003cLong\u003e appliedWindowTime \u003d publisher.getAppliedWindowTime();\n     Assert.assertEquals(appliedWindowTime.size(), 3);\n",
    "projectName": "java-chassis",
    "lineNum": 48,
    "nodeStartChar": 1941,
    "before": "Assert.assertEquals(metricsMap.size(),30)",
    "after": "Assert.assertEquals(35,metricsMap.size())"
  },
  {
    "commitSHA1": "aaa6785646c5dd94a7ce829c4507fdd23229b855",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\nindex 4c60167..790299a 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestPublisher.java\n@@ -45,11 +45,11 @@\n \n     RegistryMetric registryMetric \u003d publisher.metrics();\n     Map\u003cString, Number\u003e metricsMap \u003d registryMetric.toMap();\n-    Assert.assertEquals(metricsMap.size(), 30);\n+    Assert.assertEquals(35, metricsMap.size());\n \n     registryMetric \u003d publisher.metricsWithWindowTimeIndex(1000);\n     metricsMap \u003d registryMetric.toMap();\n-    Assert.assertEquals(metricsMap.size(), 30);\n+    Assert.assertEquals(35, metricsMap.size());\n \n     List\u003cLong\u003e appliedWindowTime \u003d publisher.getAppliedWindowTime();\n     Assert.assertEquals(appliedWindowTime.size(), 3);\n",
    "projectName": "java-chassis",
    "lineNum": 52,
    "nodeStartChar": 2096,
    "before": "Assert.assertEquals(metricsMap.size(),30)",
    "after": "Assert.assertEquals(35,metricsMap.size())"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "core/src/main/java/io/servicecomb/core/Invocation.java",
    "patch": "diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\ndiff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 199,
    "nodeStartChar": 5792,
    "before": "new InvocationStartProcessingEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,startProcessingTime,startProcessingTime - startTime)",
    "after": "new InvocationStartProcessingEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,startProcessingTime - startTime)"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "core/src/main/java/io/servicecomb/core/Invocation.java",
    "patch": "diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\ndiff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 206,
    "nodeStartChar": 6082,
    "before": "new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,finishedTime,finishedTime - startProcessingTime,finishedTime - startTime)",
    "after": "new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,finishedTime - startProcessingTime,finishedTime - startTime)"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 80,
    "nodeStartChar": 3555,
    "before": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(100))",
    "after": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(100))"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 83,
    "nodeStartChar": 3729,
    "before": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))",
    "after": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 88,
    "nodeStartChar": 4042,
    "before": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(300))",
    "after": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(300))"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 91,
    "nodeStartChar": 4216,
    "before": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(400),TimeUnit.MILLISECONDS.toNanos(700))",
    "after": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(400),TimeUnit.MILLISECONDS.toNanos(700))"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 97,
    "nodeStartChar": 4582,
    "before": "new InvocationStartProcessingEvent(\"fun3\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(500))",
    "after": "new InvocationStartProcessingEvent(\"fun3\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(500))"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 103,
    "nodeStartChar": 4926,
    "before": "new InvocationStartProcessingEvent(\"fun2\",InvocationType.CONSUMER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(100))",
    "after": "new InvocationStartProcessingEvent(\"fun2\",InvocationType.CONSUMER,TimeUnit.MILLISECONDS.toNanos(100))"
  },
  {
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 106,
    "nodeStartChar": 5100,
    "before": "new InvocationFinishedEvent(\"fun2\",InvocationType.CONSUMER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))",
    "after": "new InvocationFinishedEvent(\"fun2\",InvocationType.CONSUMER,TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))"
  },
  {
    "commitSHA1": "e6fee4c6384b799d9decdef772f4090ce2bd40e3",
    "commitFile": "demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java",
    "patch": "diff --git a/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java b/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java\nindex 822bb9f..4272e0e 100644\n--- a/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java\n+++ b/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java\n@@ -170,7 +170,7 @@\n \n     result \u003d\n         InvokerUtils.syncInvoke(\"pojo\",\n-            \"0.0.1\",\n+            \"0.0.4\",\n             transport,\n             \"server\",\n             \"splitParam\",\ndiff --git a/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java b/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java\nindex 822bb9f..4272e0e 100644\n--- a/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java\n+++ b/demo/demo-pojo/pojo-client/src/main/java/io/servicecomb/demo/pojo/client/PojoClient.java\n@@ -170,7 +170,7 @@\n \n     result \u003d\n         InvokerUtils.syncInvoke(\"pojo\",\n-            \"0.0.1\",\n+            \"0.0.4\",\n             transport,\n             \"server\",\n             \"splitParam\",\n",
    "projectName": "java-chassis",
    "lineNum": 173,
    "nodeStartChar": 5465,
    "before": "\"0.0.1\"",
    "after": "\"0.0.4\""
  },
  {
    "commitSHA1": "44aca977055eaa8731706cf144a30efd397add7d",
    "commitFile": "core/src/main/java/io/servicecomb/core/Invocation.java",
    "patch": "diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex e577cf8..bb94aa9 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -192,8 +192,7 @@\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            String.valueOf(this.invocationType), finishedTime,\n-            finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\nindex 1d68e5e..030a5a4 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n@@ -46,21 +46,21 @@\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(100)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun1\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(300)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun12\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun12\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(500)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun12\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun12\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(600), TimeUnit.MILLISECONDS.toNanos(1100)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun11\", System.nanoTime()));\ndiff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex e577cf8..bb94aa9 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -192,8 +192,7 @@\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            String.valueOf(this.invocationType), finishedTime,\n-            finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 195,
    "nodeStartChar": 5877,
    "before": "String.valueOf(this.invocationType)",
    "after": "this.invocationType"
  },
  {
    "commitSHA1": "44aca977055eaa8731706cf144a30efd397add7d",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\nindex 1d68e5e..030a5a4 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n@@ -46,21 +46,21 @@\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(100)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun1\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(300)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun12\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun12\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(500)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun12\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun12\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(600), TimeUnit.MILLISECONDS.toNanos(1100)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun11\", System.nanoTime()));\n",
    "projectName": "java-chassis",
    "lineNum": 49,
    "nodeStartChar": 2084,
    "before": "String.valueOf(InvocationType.CONSUMER)",
    "after": "InvocationType.CONSUMER"
  },
  {
    "commitSHA1": "44aca977055eaa8731706cf144a30efd397add7d",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\nindex 1d68e5e..030a5a4 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n@@ -46,21 +46,21 @@\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(100)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun1\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(300)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun12\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun12\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(500)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun12\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun12\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(600), TimeUnit.MILLISECONDS.toNanos(1100)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun11\", System.nanoTime()));\n",
    "projectName": "java-chassis",
    "lineNum": 56,
    "nodeStartChar": 2552,
    "before": "String.valueOf(InvocationType.CONSUMER)",
    "after": "InvocationType.CONSUMER"
  },
  {
    "commitSHA1": "44aca977055eaa8731706cf144a30efd397add7d",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\nindex 1d68e5e..030a5a4 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestDefaultMetricsEventListenerManager.java\n@@ -46,21 +46,21 @@\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(100)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun1\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun1\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(300)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun12\", System.nanoTime()));\n     MetricsEventManager.triggerEvent(\n         new InvocationStartProcessingEvent(\"fun12\", System.nanoTime(), TimeUnit.MILLISECONDS.toNanos(500)));\n     MetricsEventManager\n-        .triggerEvent(new InvocationFinishedEvent(\"fun12\", String.valueOf(InvocationType.CONSUMER), System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun12\", InvocationType.CONSUMER, System.nanoTime(),\n             TimeUnit.MILLISECONDS.toNanos(600), TimeUnit.MILLISECONDS.toNanos(1100)));\n \n     MetricsEventManager.triggerEvent(new InvocationStartedEvent(\"fun11\", System.nanoTime()));\n",
    "projectName": "java-chassis",
    "lineNum": 63,
    "nodeStartChar": 3023,
    "before": "String.valueOf(InvocationType.CONSUMER)",
    "after": "InvocationType.CONSUMER"
  },
  {
    "commitSHA1": "00d0998cf592239c850ae3bef8515c8fa5a5aea5",
    "commitFile": "common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java",
    "patch": "diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\nindex 86f7844..340fdf6 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n@@ -49,7 +49,7 @@\n \n   private static Map\u003cString, String\u003e header \u003d new HashMap\u003c\u003e();\n \n-  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null) {\n+  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null, null) {\n     public void putHeader(String name, String value) {\n       header.put(name, value);\n     }\ndiff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\nindex 12c9c92..922dffa 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n@@ -33,7 +33,7 @@\n \n   @Test\n   public void testForm() throws Exception {\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addForm(\"abc\", \"Hello\");\n     restClientRequest.addForm(\"def\", \"world\");\n     restClientRequest.addForm(\"ghi\", null);\n@@ -58,7 +58,7 @@\n         return map;\n       }\n     }.getMockInstance();\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addCookie(\"sessionid\", \"abcdefghijklmnopqrstuvwxyz\");\n     restClientRequest.addCookie(\"region\", \"china-north\");\n     restClientRequest.write(Buffer.buffer(\"I love servicecomb\"));\ndiff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\nindex 86f7844..340fdf6 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n@@ -49,7 +49,7 @@\n \n   private static Map\u003cString, String\u003e header \u003d new HashMap\u003c\u003e();\n \n-  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null) {\n+  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null, null) {\n     public void putHeader(String name, String value) {\n       header.put(name, value);\n     }\n",
    "projectName": "java-chassis",
    "lineNum": 52,
    "nodeStartChar": 1767,
    "before": "new RestClientRequestImpl(null,null){   public void putHeader(  String name,  String value){     header.put(name,value);   } } ",
    "after": "new RestClientRequestImpl(null,null,null){   public void putHeader(  String name,  String value){     header.put(name,value);   } } "
  },
  {
    "commitSHA1": "00d0998cf592239c850ae3bef8515c8fa5a5aea5",
    "commitFile": "common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
    "patch": "diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\nindex 12c9c92..922dffa 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n@@ -33,7 +33,7 @@\n \n   @Test\n   public void testForm() throws Exception {\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addForm(\"abc\", \"Hello\");\n     restClientRequest.addForm(\"def\", \"world\");\n     restClientRequest.addForm(\"ghi\", null);\n@@ -58,7 +58,7 @@\n         return map;\n       }\n     }.getMockInstance();\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addCookie(\"sessionid\", \"abcdefghijklmnopqrstuvwxyz\");\n     restClientRequest.addCookie(\"region\", \"china-north\");\n     restClientRequest.write(Buffer.buffer(\"I love servicecomb\"));\n",
    "projectName": "java-chassis",
    "lineNum": 36,
    "nodeStartChar": 1164,
    "before": "new RestClientRequestImpl(request,null)",
    "after": "new RestClientRequestImpl(request,null,null)"
  },
  {
    "commitSHA1": "00d0998cf592239c850ae3bef8515c8fa5a5aea5",
    "commitFile": "common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
    "patch": "diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\nindex 12c9c92..922dffa 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n@@ -33,7 +33,7 @@\n \n   @Test\n   public void testForm() throws Exception {\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addForm(\"abc\", \"Hello\");\n     restClientRequest.addForm(\"def\", \"world\");\n     restClientRequest.addForm(\"ghi\", null);\n@@ -58,7 +58,7 @@\n         return map;\n       }\n     }.getMockInstance();\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addCookie(\"sessionid\", \"abcdefghijklmnopqrstuvwxyz\");\n     restClientRequest.addCookie(\"region\", \"china-north\");\n     restClientRequest.write(Buffer.buffer(\"I love servicecomb\"));\n",
    "projectName": "java-chassis",
    "lineNum": 61,
    "nodeStartChar": 1938,
    "before": "new RestClientRequestImpl(request,null)",
    "after": "new RestClientRequestImpl(request,null,null)"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java",
    "patch": "diff --git a/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java b/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java\nindex 81ed440..9030bc4 100644\n--- a/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java\n+++ b/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java\n@@ -82,7 +82,7 @@\n         RuntimeMapField\u003cT, Object, Object\u003e runtimeMapField \u003d\n             (RuntimeMapField\u003cT, Object, Object\u003e) org.create(number, name, field, strategy);\n \n-        return new RuntimeMapFieldProtobuf\u003cT\u003e(runtimeMapField, field);\n+        return new RuntimeMapFieldProtobuf\u003c\u003e(runtimeMapField, field);\n       }\n     };\n \ndiff --git a/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java b/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java\nindex aa9e37c..11066c9 100644\n--- a/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java\n+++ b/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java\n@@ -40,7 +40,7 @@\n \n   static ReaderHelpData readerHelpData \u003d Mockito.mock(ReaderHelpData.class);\n \n-  static Map\u003cString, ReaderHelpData\u003e readerHelpDataMap \u003d new HashMap\u003cString, ReaderHelpData\u003e();\n+  static Map\u003cString, ReaderHelpData\u003e readerHelpDataMap \u003d new HashMap\u003c\u003e();\n \n   public static void setReaderHelpDataMap(Map\u003cString, ReaderHelpData\u003e readerHelpDataMap) {\n     TestAbstractDeserializer.readerHelpDataMap \u003d readerHelpDataMap;\ndiff --git a/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java b/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java\nindex 1139562..c61bbe4 100644\n--- a/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java\n+++ b/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java\n@@ -54,7 +54,7 @@\n \n   protected final Pattern pattern;\n \n-  protected final List\u003cString\u003e varNames \u003d new ArrayList\u003cString\u003e();\n+  protected final List\u003cString\u003e varNames \u003d new ArrayList\u003c\u003e();\n \n   public static String ensureEndWithSlash(String path) {\n     if (path.endsWith(SLASH)) {\ndiff --git a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java\nindex 0569c1b..56e72c5 100644\n--- a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java\n+++ b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java\n@@ -45,7 +45,7 @@\n \n   private final Map\u003cString, Object\u003e valueCache \u003d Maps.newConcurrentMap();\n \n-  private final List\u003cWatchedUpdateListener\u003e listeners \u003d new CopyOnWriteArrayList\u003cWatchedUpdateListener\u003e();\n+  private final List\u003cWatchedUpdateListener\u003e listeners \u003d new CopyOnWriteArrayList\u003c\u003e();\n \n   private UpdateHandler updateHandler \u003d new UpdateHandler();\n \ndiff --git a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java\nindex 0ef8a3f..919227a 100644\n--- a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java\n+++ b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java\n@@ -338,7 +338,7 @@\n           if (!queryParams.containsKey(key)) {\n             queryParams.put(key, new String[] {value});\n           } else {\n-            List\u003cString\u003e vals \u003d new ArrayList\u003cString\u003e(Arrays.asList(queryParams.get(key)));\n+            List\u003cString\u003e vals \u003d new ArrayList\u003c\u003e(Arrays.asList(queryParams.get(key)));\n             vals.add(value);\n             queryParams.put(key, vals.toArray(new String[vals.size()]));\n           }\ndiff --git a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\nindex 310a4ba..129be8c 100644\n--- a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n+++ b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n@@ -44,7 +44,7 @@\n \n   @Test\n   public void testLoadBalancerFullOperationWithoutException() {\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     newServers.add(server);\n \n@@ -66,7 +66,7 @@\n   @Test\n   public void testAddServerException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -87,7 +87,7 @@\n   @Test\n   public void testServerListException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -108,7 +108,7 @@\n   @Test\n   public void testMarkServerDownException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -137,7 +137,7 @@\n \n   @Test\n   public void testGetAllServers() {\n-    List\u003cServer\u003e servers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e servers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     servers.add(server);\n     loadBalancer.setServerList(servers);\ndiff --git a/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java b/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\nindex c37b427..c98831d 100644\n--- a/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\n+++ b/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\n@@ -63,7 +63,7 @@\n   public void testGetAvailableAddress(@Injectable ServiceRegistryConfig config,\n       @Injectable InstanceCacheManager cacheManager,\n       @Injectable InstanceCache cache) {\n-    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003cIpPort\u003e();\n+    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9980));\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9981));\n \n@@ -139,7 +139,7 @@\n   @Test\n   public void testCreateServiceRegistryCacheWithInstanceCache() {\n \n-    List\u003cMicroserviceInstance\u003e list \u003d new ArrayList\u003cMicroserviceInstance\u003e();\n+    List\u003cMicroserviceInstance\u003e list \u003d new ArrayList\u003c\u003e();\n     MicroserviceInstance e1 \u003d new MicroserviceInstance();\n     list.add(e1);\n \ndiff --git a/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java b/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java\nindex c378872..950baa8 100644\n--- a/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java\n+++ b/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java\n@@ -62,7 +62,7 @@\n \n   @Test\n   public void testLifeCycle(@Injectable ServiceRegistryConfig config, @Injectable MicroserviceDefinition definition) {\n-    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003cIpPort\u003e();\n+    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9980));\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9981));\n \ndiff --git a/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java b/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java\nindex 3ac69d9..ca13fee 100644\n--- a/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java\n+++ b/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java\n@@ -58,7 +58,7 @@\n     AsyncResponse asyncResp \u003d Mockito.mock(AsyncResponse.class);\n     commonHighwayMock(invocation);\n \n-    Holder\u003cBoolean\u003e sended \u003d new Holder\u003cBoolean\u003e(false);\n+    Holder\u003cBoolean\u003e sended \u003d new Holder\u003c\u003e(false);\n     new MockUp\u003cHighwayClient\u003e() {\n       @Mock\n       public void send(Invocation invocation, AsyncResponse asyncResp) throws Exception {\ndiff --git a/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java b/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java\nindex 81ed440..9030bc4 100644\n--- a/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java\n+++ b/common/common-protobuf/src/main/java/io/protostuff/runtime/ProtobufCompatibleUtils.java\n@@ -82,7 +82,7 @@\n         RuntimeMapField\u003cT, Object, Object\u003e runtimeMapField \u003d\n             (RuntimeMapField\u003cT, Object, Object\u003e) org.create(number, name, field, strategy);\n \n-        return new RuntimeMapFieldProtobuf\u003cT\u003e(runtimeMapField, field);\n+        return new RuntimeMapFieldProtobuf\u003c\u003e(runtimeMapField, field);\n       }\n     };\n \n",
    "projectName": "java-chassis",
    "lineNum": 85,
    "nodeStartChar": 2529,
    "before": "RuntimeMapFieldProtobuf\u003cT\u003e",
    "after": "RuntimeMapFieldProtobuf\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java",
    "patch": "diff --git a/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java b/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java\nindex aa9e37c..11066c9 100644\n--- a/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java\n+++ b/common/common-protobuf/src/test/java/io/servicecomb/codec/protobuf/jackson/TestAbstractDeserializer.java\n@@ -40,7 +40,7 @@\n \n   static ReaderHelpData readerHelpData \u003d Mockito.mock(ReaderHelpData.class);\n \n-  static Map\u003cString, ReaderHelpData\u003e readerHelpDataMap \u003d new HashMap\u003cString, ReaderHelpData\u003e();\n+  static Map\u003cString, ReaderHelpData\u003e readerHelpDataMap \u003d new HashMap\u003c\u003e();\n \n   public static void setReaderHelpDataMap(Map\u003cString, ReaderHelpData\u003e readerHelpDataMap) {\n     TestAbstractDeserializer.readerHelpDataMap \u003d readerHelpDataMap;\n",
    "projectName": "java-chassis",
    "lineNum": 43,
    "nodeStartChar": 1461,
    "before": "HashMap\u003cString,ReaderHelpData\u003e",
    "after": "HashMap\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java",
    "patch": "diff --git a/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java b/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java\nindex 1139562..c61bbe4 100644\n--- a/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java\n+++ b/common/common-rest/src/main/java/io/servicecomb/common/rest/definition/path/PathRegExp.java\n@@ -54,7 +54,7 @@\n \n   protected final Pattern pattern;\n \n-  protected final List\u003cString\u003e varNames \u003d new ArrayList\u003cString\u003e();\n+  protected final List\u003cString\u003e varNames \u003d new ArrayList\u003c\u003e();\n \n   public static String ensureEndWithSlash(String path) {\n     if (path.endsWith(SLASH)) {\n",
    "projectName": "java-chassis",
    "lineNum": 57,
    "nodeStartChar": 1535,
    "before": "ArrayList\u003cString\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java",
    "patch": "diff --git a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java\nindex 0569c1b..56e72c5 100644\n--- a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java\n+++ b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/archaius/sources/ConfigCenterConfigurationSourceImpl.java\n@@ -45,7 +45,7 @@\n \n   private final Map\u003cString, Object\u003e valueCache \u003d Maps.newConcurrentMap();\n \n-  private final List\u003cWatchedUpdateListener\u003e listeners \u003d new CopyOnWriteArrayList\u003cWatchedUpdateListener\u003e();\n+  private final List\u003cWatchedUpdateListener\u003e listeners \u003d new CopyOnWriteArrayList\u003c\u003e();\n \n   private UpdateHandler updateHandler \u003d new UpdateHandler();\n \n",
    "projectName": "java-chassis",
    "lineNum": 48,
    "nodeStartChar": 1781,
    "before": "CopyOnWriteArrayList\u003cWatchedUpdateListener\u003e",
    "after": "CopyOnWriteArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java",
    "patch": "diff --git a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java\nindex 0ef8a3f..919227a 100644\n--- a/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java\n+++ b/foundations/foundation-config-cc/src/main/java/io/servicecomb/config/client/ConfigCenterClient.java\n@@ -338,7 +338,7 @@\n           if (!queryParams.containsKey(key)) {\n             queryParams.put(key, new String[] {value});\n           } else {\n-            List\u003cString\u003e vals \u003d new ArrayList\u003cString\u003e(Arrays.asList(queryParams.get(key)));\n+            List\u003cString\u003e vals \u003d new ArrayList\u003c\u003e(Arrays.asList(queryParams.get(key)));\n             vals.add(value);\n             queryParams.put(key, vals.toArray(new String[vals.size()]));\n           }\n",
    "projectName": "java-chassis",
    "lineNum": 341,
    "nodeStartChar": 13780,
    "before": "ArrayList\u003cString\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\nindex 310a4ba..129be8c 100644\n--- a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n+++ b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n@@ -44,7 +44,7 @@\n \n   @Test\n   public void testLoadBalancerFullOperationWithoutException() {\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     newServers.add(server);\n \n@@ -66,7 +66,7 @@\n   @Test\n   public void testAddServerException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -87,7 +87,7 @@\n   @Test\n   public void testServerListException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -108,7 +108,7 @@\n   @Test\n   public void testMarkServerDownException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -137,7 +137,7 @@\n \n   @Test\n   public void testGetAllServers() {\n-    List\u003cServer\u003e servers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e servers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     servers.add(server);\n     loadBalancer.setServerList(servers);\n",
    "projectName": "java-chassis",
    "lineNum": 47,
    "nodeStartChar": 1489,
    "before": "ArrayList\u003cServer\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\nindex 310a4ba..129be8c 100644\n--- a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n+++ b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n@@ -44,7 +44,7 @@\n \n   @Test\n   public void testLoadBalancerFullOperationWithoutException() {\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     newServers.add(server);\n \n@@ -66,7 +66,7 @@\n   @Test\n   public void testAddServerException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -87,7 +87,7 @@\n   @Test\n   public void testServerListException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -108,7 +108,7 @@\n   @Test\n   public void testMarkServerDownException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -137,7 +137,7 @@\n \n   @Test\n   public void testGetAllServers() {\n-    List\u003cServer\u003e servers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e servers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     servers.add(server);\n     loadBalancer.setServerList(servers);\n",
    "projectName": "java-chassis",
    "lineNum": 69,
    "nodeStartChar": 2104,
    "before": "ArrayList\u003cServer\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\nindex 310a4ba..129be8c 100644\n--- a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n+++ b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n@@ -44,7 +44,7 @@\n \n   @Test\n   public void testLoadBalancerFullOperationWithoutException() {\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     newServers.add(server);\n \n@@ -66,7 +66,7 @@\n   @Test\n   public void testAddServerException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -87,7 +87,7 @@\n   @Test\n   public void testServerListException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -108,7 +108,7 @@\n   @Test\n   public void testMarkServerDownException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -137,7 +137,7 @@\n \n   @Test\n   public void testGetAllServers() {\n-    List\u003cServer\u003e servers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e servers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     servers.add(server);\n     loadBalancer.setServerList(servers);\n",
    "projectName": "java-chassis",
    "lineNum": 90,
    "nodeStartChar": 2527,
    "before": "ArrayList\u003cServer\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\nindex 310a4ba..129be8c 100644\n--- a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n+++ b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n@@ -44,7 +44,7 @@\n \n   @Test\n   public void testLoadBalancerFullOperationWithoutException() {\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     newServers.add(server);\n \n@@ -66,7 +66,7 @@\n   @Test\n   public void testAddServerException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -87,7 +87,7 @@\n   @Test\n   public void testServerListException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -108,7 +108,7 @@\n   @Test\n   public void testMarkServerDownException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -137,7 +137,7 @@\n \n   @Test\n   public void testGetAllServers() {\n-    List\u003cServer\u003e servers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e servers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     servers.add(server);\n     loadBalancer.setServerList(servers);\n",
    "projectName": "java-chassis",
    "lineNum": 111,
    "nodeStartChar": 2962,
    "before": "ArrayList\u003cServer\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\nindex 310a4ba..129be8c 100644\n--- a/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n+++ b/handlers/handler-loadbalance/src/test/java/io/servicecomb/loadbalance/TestLoadBalancer.java\n@@ -44,7 +44,7 @@\n \n   @Test\n   public void testLoadBalancerFullOperationWithoutException() {\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     newServers.add(server);\n \n@@ -66,7 +66,7 @@\n   @Test\n   public void testAddServerException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -87,7 +87,7 @@\n   @Test\n   public void testServerListException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -108,7 +108,7 @@\n   @Test\n   public void testMarkServerDownException() {\n     boolean status \u003d true;\n-    List\u003cServer\u003e newServers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e newServers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n \n     newServers.add(server);\n@@ -137,7 +137,7 @@\n \n   @Test\n   public void testGetAllServers() {\n-    List\u003cServer\u003e servers \u003d new ArrayList\u003cServer\u003e();\n+    List\u003cServer\u003e servers \u003d new ArrayList\u003c\u003e();\n     Server server \u003d Mockito.mock(Server.class);\n     servers.add(server);\n     loadBalancer.setServerList(servers);\n",
    "projectName": "java-chassis",
    "lineNum": 140,
    "nodeStartChar": 3628,
    "before": "ArrayList\u003cServer\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java",
    "patch": "diff --git a/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java b/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\nindex c37b427..c98831d 100644\n--- a/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\n+++ b/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\n@@ -63,7 +63,7 @@\n   public void testGetAvailableAddress(@Injectable ServiceRegistryConfig config,\n       @Injectable InstanceCacheManager cacheManager,\n       @Injectable InstanceCache cache) {\n-    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003cIpPort\u003e();\n+    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9980));\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9981));\n \n@@ -139,7 +139,7 @@\n   @Test\n   public void testCreateServiceRegistryCacheWithInstanceCache() {\n \n-    List\u003cMicroserviceInstance\u003e list \u003d new ArrayList\u003cMicroserviceInstance\u003e();\n+    List\u003cMicroserviceInstance\u003e list \u003d new ArrayList\u003c\u003e();\n     MicroserviceInstance e1 \u003d new MicroserviceInstance();\n     list.add(e1);\n \n",
    "projectName": "java-chassis",
    "lineNum": 66,
    "nodeStartChar": 2232,
    "before": "ArrayList\u003cIpPort\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java",
    "patch": "diff --git a/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java b/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\nindex c37b427..c98831d 100644\n--- a/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\n+++ b/service-registry/src/test/java/io/servicecomb/serviceregistry/client/TestIpPortManager.java\n@@ -63,7 +63,7 @@\n   public void testGetAvailableAddress(@Injectable ServiceRegistryConfig config,\n       @Injectable InstanceCacheManager cacheManager,\n       @Injectable InstanceCache cache) {\n-    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003cIpPort\u003e();\n+    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9980));\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9981));\n \n@@ -139,7 +139,7 @@\n   @Test\n   public void testCreateServiceRegistryCacheWithInstanceCache() {\n \n-    List\u003cMicroserviceInstance\u003e list \u003d new ArrayList\u003cMicroserviceInstance\u003e();\n+    List\u003cMicroserviceInstance\u003e list \u003d new ArrayList\u003c\u003e();\n     MicroserviceInstance e1 \u003d new MicroserviceInstance();\n     list.add(e1);\n \n",
    "projectName": "java-chassis",
    "lineNum": 142,
    "nodeStartChar": 4870,
    "before": "ArrayList\u003cMicroserviceInstance\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java",
    "patch": "diff --git a/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java b/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java\nindex c378872..950baa8 100644\n--- a/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java\n+++ b/service-registry/src/test/java/io/servicecomb/serviceregistry/registry/TestRemoteServiceRegistry.java\n@@ -62,7 +62,7 @@\n \n   @Test\n   public void testLifeCycle(@Injectable ServiceRegistryConfig config, @Injectable MicroserviceDefinition definition) {\n-    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003cIpPort\u003e();\n+    ArrayList\u003cIpPort\u003e ipPortList \u003d new ArrayList\u003c\u003e();\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9980));\n     ipPortList.add(new IpPort(\"127.0.0.1\", 9981));\n \n",
    "projectName": "java-chassis",
    "lineNum": 65,
    "nodeStartChar": 2510,
    "before": "ArrayList\u003cIpPort\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "94f2c73f8ffd5cdf8536ec70a90f16b74f6087bf",
    "commitFile": "transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java",
    "patch": "diff --git a/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java b/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java\nindex 3ac69d9..ca13fee 100644\n--- a/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java\n+++ b/transports/transport-highway/src/test/java/io/servicecomb/transport/highway/TestHighwayTransport.java\n@@ -58,7 +58,7 @@\n     AsyncResponse asyncResp \u003d Mockito.mock(AsyncResponse.class);\n     commonHighwayMock(invocation);\n \n-    Holder\u003cBoolean\u003e sended \u003d new Holder\u003cBoolean\u003e(false);\n+    Holder\u003cBoolean\u003e sended \u003d new Holder\u003c\u003e(false);\n     new MockUp\u003cHighwayClient\u003e() {\n       @Mock\n       public void send(Invocation invocation, AsyncResponse asyncResp) throws Exception {\n",
    "projectName": "java-chassis",
    "lineNum": 61,
    "nodeStartChar": 1802,
    "before": "Holder\u003cBoolean\u003e",
    "after": "Holder\u003c\u003e"
  },
  {
    "commitSHA1": "badb29d8dd54fd04c866bfe424e9234becd7f928",
    "commitFile": "transports/transport-rest/transport-rest-client/src/main/java/io/servicecomb/transport/rest/client/http/VertxHttpMethod.java",
    "patch": "diff --git a/transports/transport-rest/transport-rest-client/src/main/java/io/servicecomb/transport/rest/client/http/VertxHttpMethod.java b/transports/transport-rest/transport-rest-client/src/main/java/io/servicecomb/transport/rest/client/http/VertxHttpMethod.java\nindex 0b56fbc..fc40986 100644\n--- a/transports/transport-rest/transport-rest-client/src/main/java/io/servicecomb/transport/rest/client/http/VertxHttpMethod.java\n+++ b/transports/transport-rest/transport-rest-client/src/main/java/io/servicecomb/transport/rest/client/http/VertxHttpMethod.java\n@@ -104,7 +104,7 @@\n       try {\n         restClientRequest.end();\n       } catch (Exception e) {\n-        LOGGER.error(\"send http reqeust failed,\", e);\n+        LOGGER.error(\"send http request failed,\", e);\n         asyncResp.fail(invocation.getInvocationType(), e);\n       }\n     });\n",
    "projectName": "java-chassis",
    "lineNum": 107,
    "nodeStartChar": 4581,
    "before": "\"send http reqeust failed,\"",
    "after": "\"send http request failed,\""
  },
  {
    "commitSHA1": "7b37c315b58e75754bef9721d4284f8d50dd684f",
    "commitFile": "swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java",
    "patch": "diff --git a/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java b/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java\nindex f61a853..7f8e5eb 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java\n@@ -90,7 +90,7 @@\n     if (type.getRawClass().equals(Object.class)) {\n       LOGGER.warn(\"***********************\");\n       LOGGER.warn(type.getRawClass().getName() + \" have some potential problems when working with \"\n-          + \"different platforms and transports. It\u0027s recommented to change your service defintion. \"\n+          + \"different platforms and transports. It\u0027s recommended to change your service definition. \"\n           + \"This feature will be removed without notice in the future.\");\n       LOGGER.warn(\"***********************\");\n     }\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java b/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java\nindex f61a853..7f8e5eb 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/io/servicecomb/swagger/extend/ModelResolverExt.java\n@@ -90,7 +90,7 @@\n     if (type.getRawClass().equals(Object.class)) {\n       LOGGER.warn(\"***********************\");\n       LOGGER.warn(type.getRawClass().getName() + \" have some potential problems when working with \"\n-          + \"different platforms and transports. It\u0027s recommented to change your service defintion. \"\n+          + \"different platforms and transports. It\u0027s recommended to change your service definition. \"\n           + \"This feature will be removed without notice in the future.\");\n       LOGGER.warn(\"***********************\");\n     }\n",
    "projectName": "java-chassis",
    "lineNum": 93,
    "nodeStartChar": 3111,
    "before": "\"different platforms and transports. It\u0027s recommented to change your service defintion. \"",
    "after": "\"different platforms and transports. It\u0027s recommended to change your service definition. \""
  },
  {
    "commitSHA1": "92c296b29f14b8ab20e35e0e5875b8f1eae8b325",
    "commitFile": "foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java",
    "patch": "diff --git a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\nindex f2839dc..2e185d5 100644\n--- a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n+++ b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n@@ -31,7 +31,7 @@\n   }\n \n   public static boolean isEnable() {\n-    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", true).get();\n+    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", false).get();\n   }\n \n   @Override\ndiff --git a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\nindex f2839dc..2e185d5 100644\n--- a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n+++ b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n@@ -31,7 +31,7 @@\n   }\n \n   public static boolean isEnable() {\n-    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", true).get();\n+    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", false).get();\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 34,
    "nodeStartChar": 1186,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "321abb7da4b0d53fdedc2b26c8cadaea7bc2b859",
    "commitFile": "spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java",
    "patch": "diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex 3adf785..2c623ad 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -42,7 +42,7 @@\n \n @Configuration\n @ConditionalOnProperty(value \u003d CONFIG_TRACING_ENABLED_KEY, havingValue \u003d \"true\", matchIfMissing \u003d true)\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\ndiff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex 3adf785..2c623ad 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -42,7 +42,7 @@\n \n @Configuration\n @ConditionalOnProperty(value \u003d CONFIG_TRACING_ENABLED_KEY, havingValue \u003d \"true\", matchIfMissing \u003d true)\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\n",
    "projectName": "java-chassis",
    "lineNum": 43,
    "nodeStartChar": 1629,
    "before": "@Configuration @ConditionalOnProperty(value\u003dCONFIG_TRACING_ENABLED_KEY,havingValue\u003d\"true\",matchIfMissing\u003dtrue) class SpringTracingConfiguration {   @Bean FilterRegistrationBean traceWebFilter(  HttpTracing httpTracing){     FilterRegistrationBean filterRegistrationBean\u003dnew FilterRegistrationBean(TracingFilter.create(httpTracing));     filterRegistrationBean.setDispatcherTypes(ASYNC,ERROR,FORWARD,INCLUDE,REQUEST);     filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);     return filterRegistrationBean;   }   @SuppressWarnings(\"unchecked\") @Bean HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e httpClientHandler(  HttpTracing httpTracing){     return HttpClientHandler.create(httpTracing,new ZuulHttpClientAdapter());   }   @Bean TracePreZuulFilter tracePreZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePreZuulFilter(tracing,handler);   }   @Bean TracePostZuulFilter tracePostZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePostZuulFilter(tracing,handler);   } private static class ZuulHttpClientAdapter extends HttpClientAdapter\u003cRequestContext,HttpServletResponse\u003e {     @Nullable @Override public String method(    @Nonnull RequestContext request){       return request.getRequest().getMethod();     }     @Nullable @Override public String url(    @Nonnull RequestContext request){       return request.getRequest().getRequestURI();     }     @Nullable @Override public String requestHeader(    @Nonnull RequestContext request,    @Nonnull String name){       return request.getRequest().getHeader(name);     }     @Nullable @Override public Integer statusCode(    @Nonnull HttpServletResponse response){       return response.getStatus() \u003d\u003d 0 ? 500 : response.getStatus();     }   } } ",
    "after": "@Configuration @ConditionalOnProperty(value\u003dCONFIG_TRACING_ENABLED_KEY,havingValue\u003d\"true\",matchIfMissing\u003dtrue) public class SpringTracingConfiguration {   @Bean FilterRegistrationBean traceWebFilter(  HttpTracing httpTracing){     FilterRegistrationBean filterRegistrationBean\u003dnew FilterRegistrationBean(TracingFilter.create(httpTracing));     filterRegistrationBean.setDispatcherTypes(ASYNC,ERROR,FORWARD,INCLUDE,REQUEST);     filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);     return filterRegistrationBean;   }   @SuppressWarnings(\"unchecked\") @Bean HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e httpClientHandler(  HttpTracing httpTracing){     return HttpClientHandler.create(httpTracing,new ZuulHttpClientAdapter());   }   @Bean TracePreZuulFilter tracePreZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePreZuulFilter(tracing,handler);   }   @Bean TracePostZuulFilter tracePostZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePostZuulFilter(tracing,handler);   } private static class ZuulHttpClientAdapter extends HttpClientAdapter\u003cRequestContext,HttpServletResponse\u003e {     @Nullable @Override public String method(    @Nonnull RequestContext request){       return request.getRequest().getMethod();     }     @Nullable @Override public String url(    @Nonnull RequestContext request){       return request.getRequest().getRequestURI();     }     @Nullable @Override public String requestHeader(    @Nonnull RequestContext request,    @Nonnull String name){       return request.getRequest().getHeader(name);     }     @Nullable @Override public Integer statusCode(    @Nonnull HttpServletResponse response){       return response.getStatus() \u003d\u003d 0 ? 500 : response.getStatus();     }   } } "
  },
  {
    "commitSHA1": "2d051ab19506c2b77cc88467c5a51c04bd2e2f35",
    "commitFile": "common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java",
    "patch": "diff --git a/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java b/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\nindex e4d5262..9a02825 100644\n--- a/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\n+++ b/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\n@@ -63,7 +63,7 @@\n       }\n \n       String contentType \u003d request.getContentType();\n-      if (contentType !\u003d null \u0026\u0026 contentType.startsWith(MediaType.TEXT_PLAIN)) {\n+      if (contentType !\u003d null \u0026\u0026 !contentType.startsWith(MediaType.APPLICATION_JSON)) {\n         // TODO: we should consider body encoding\n         return IOUtils.toString(inputStream, \"UTF-8\");\n       }\ndiff --git a/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java b/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\nindex e4d5262..9a02825 100644\n--- a/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\n+++ b/common/common-rest/src/main/java/io/servicecomb/common/rest/codec/param/BodyProcessorCreator.java\n@@ -63,7 +63,7 @@\n       }\n \n       String contentType \u003d request.getContentType();\n-      if (contentType !\u003d null \u0026\u0026 contentType.startsWith(MediaType.TEXT_PLAIN)) {\n+      if (contentType !\u003d null \u0026\u0026 !contentType.startsWith(MediaType.APPLICATION_JSON)) {\n         // TODO: we should consider body encoding\n         return IOUtils.toString(inputStream, \"UTF-8\");\n       }\n",
    "projectName": "java-chassis",
    "lineNum": 66,
    "nodeStartChar": 2352,
    "before": "contentType.startsWith(MediaType.TEXT_PLAIN)",
    "after": "!contentType.startsWith(MediaType.APPLICATION_JSON)"
  },
  {
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/main/java/io/servicecomb/core/transport/TransportManager.java",
    "patch": "diff --git a/core/src/main/java/io/servicecomb/core/transport/TransportManager.java b/core/src/main/java/io/servicecomb/core/transport/TransportManager.java\nindex fb64f51..18eb2dc 100644\n--- a/core/src/main/java/io/servicecomb/core/transport/TransportManager.java\n+++ b/core/src/main/java/io/servicecomb/core/transport/TransportManager.java\n@@ -77,7 +77,7 @@\n \n   protected Transport chooseOneTransport(List\u003cTransport\u003e group) {\n     group.sort((t1, t2) -\u003e {\n-      return t1.getOrder() - t2.getOrder();\n+      return Integer.compare(t1.getOrder(), t2.getOrder());\n     });\n \n     for (Transport transport : group) {\ndiff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\ndiff --git a/core/src/main/java/io/servicecomb/core/transport/TransportManager.java b/core/src/main/java/io/servicecomb/core/transport/TransportManager.java\nindex fb64f51..18eb2dc 100644\n--- a/core/src/main/java/io/servicecomb/core/transport/TransportManager.java\n+++ b/core/src/main/java/io/servicecomb/core/transport/TransportManager.java\n@@ -77,7 +77,7 @@\n \n   protected Transport chooseOneTransport(List\u003cTransport\u003e group) {\n     group.sort((t1, t2) -\u003e {\n-      return t1.getOrder() - t2.getOrder();\n+      return Integer.compare(t1.getOrder(), t2.getOrder());\n     });\n \n     for (Transport transport : group) {\n",
    "projectName": "java-chassis",
    "lineNum": 80,
    "nodeStartChar": 2556,
    "before": "t1.getOrder() - t2.getOrder()",
    "after": "Integer.compare(t1.getOrder(),t2.getOrder())"
  },
  {
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 179,
    "nodeStartChar": 5022,
    "before": "1",
    "after": "Integer.MAX_VALUE"
  },
  {
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 181,
    "nodeStartChar": 5064,
    "before": "false",
    "after": "true"
  },
  {
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 184,
    "nodeStartChar": 5112,
    "before": "2",
    "after": "-1000"
  },
  {
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 186,
    "nodeStartChar": 5154,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 193,
    "nodeStartChar": 5287,
    "before": "Assert.assertEquals(t2,manager.chooseOneTransport(group))",
    "after": "Assert.assertEquals(t1,manager.chooseOneTransport(group))"
  },
  {
    "commitSHA1": "3c20ad73c758b8d98a2a4ee8b17c871c7bfaee4a",
    "commitFile": "handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java",
    "patch": "diff --git a/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java b/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java\nindex b575fba..b480740 100644\n--- a/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java\n+++ b/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java\n@@ -75,7 +75,7 @@\n         }\n         f.onCompleted();\n       } catch (Exception e) {\n-        LOG.warn(\"fallbacke failed due to:\" + e.getMessage());\n+        LOG.warn(\"fallback failed due to:\" + e.getMessage());\n         throw e;\n       }\n     });\ndiff --git a/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java b/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java\nindex b575fba..b480740 100644\n--- a/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java\n+++ b/handlers/handler-bizkeeper/src/main/java/io/servicecomb/bizkeeper/BizkeeperCommand.java\n@@ -75,7 +75,7 @@\n         }\n         f.onCompleted();\n       } catch (Exception e) {\n-        LOG.warn(\"fallbacke failed due to:\" + e.getMessage());\n+        LOG.warn(\"fallback failed due to:\" + e.getMessage());\n         throw e;\n       }\n     });\n",
    "projectName": "java-chassis",
    "lineNum": 78,
    "nodeStartChar": 2690,
    "before": "\"fallbacke failed due to:\"",
    "after": "\"fallback failed due to:\""
  },
  {
    "commitSHA1": "bca6eb28e52d622941974181b1887c889482b951",
    "commitFile": "spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java",
    "patch": "diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex e1be958..e5f4c82 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -36,7 +36,7 @@\n import org.springframework.core.Ordered;\n \n @Configuration\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\ndiff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex e1be958..e5f4c82 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -36,7 +36,7 @@\n import org.springframework.core.Ordered;\n \n @Configuration\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\n",
    "projectName": "java-chassis",
    "lineNum": 38,
    "nodeStartChar": 1446,
    "before": "@Configuration class SpringTracingConfiguration {   @Bean FilterRegistrationBean traceWebFilter(  HttpTracing httpTracing){     FilterRegistrationBean filterRegistrationBean\u003dnew FilterRegistrationBean(TracingFilter.create(httpTracing));     filterRegistrationBean.setDispatcherTypes(ASYNC,ERROR,FORWARD,INCLUDE,REQUEST);     filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);     return filterRegistrationBean;   }   @SuppressWarnings(\"unchecked\") @Bean HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e httpClientHandler(  HttpTracing httpTracing){     return HttpClientHandler.create(httpTracing,new ZuulHttpClientAdapter());   }   @Bean TracePreZuulFilter tracePreZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePreZuulFilter(tracing,handler);   }   @Bean TracePostZuulFilter tracePostZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePostZuulFilter(tracing,handler);   } private static class ZuulHttpClientAdapter extends HttpClientAdapter\u003cRequestContext,HttpServletResponse\u003e {     @Nullable @Override public String method(    @Nonnull RequestContext request){       return request.getRequest().getMethod();     }     @Nullable @Override public String url(    @Nonnull RequestContext request){       return request.getRequest().getRequestURI();     }     @Nullable @Override public String requestHeader(    @Nonnull RequestContext request,    @Nonnull String name){       return request.getRequest().getHeader(name);     }     @Nullable @Override public Integer statusCode(    @Nonnull HttpServletResponse response){       return response.getStatus() \u003d\u003d 0 ? 500 : response.getStatus();     }   } } ",
    "after": "@Configuration public class SpringTracingConfiguration {   @Bean FilterRegistrationBean traceWebFilter(  HttpTracing httpTracing){     FilterRegistrationBean filterRegistrationBean\u003dnew FilterRegistrationBean(TracingFilter.create(httpTracing));     filterRegistrationBean.setDispatcherTypes(ASYNC,ERROR,FORWARD,INCLUDE,REQUEST);     filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);     return filterRegistrationBean;   }   @SuppressWarnings(\"unchecked\") @Bean HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e httpClientHandler(  HttpTracing httpTracing){     return HttpClientHandler.create(httpTracing,new ZuulHttpClientAdapter());   }   @Bean TracePreZuulFilter tracePreZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePreZuulFilter(tracing,handler);   }   @Bean TracePostZuulFilter tracePostZuulFilter(  HttpTracing tracing,  HttpClientHandler\u003cRequestContext,HttpServletResponse\u003e handler){     return new TracePostZuulFilter(tracing,handler);   } private static class ZuulHttpClientAdapter extends HttpClientAdapter\u003cRequestContext,HttpServletResponse\u003e {     @Nullable @Override public String method(    @Nonnull RequestContext request){       return request.getRequest().getMethod();     }     @Nullable @Override public String url(    @Nonnull RequestContext request){       return request.getRequest().getRequestURI();     }     @Nullable @Override public String requestHeader(    @Nonnull RequestContext request,    @Nonnull String name){       return request.getRequest().getHeader(name);     }     @Nullable @Override public Integer statusCode(    @Nonnull HttpServletResponse response){       return response.getStatus() \u003d\u003d 0 ? 500 : response.getStatus();     }   } } "
  },
  {
    "commitSHA1": "4aaf86bb62ac5d762c786a48d35193cc18c2e675",
    "commitFile": "samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java",
    "patch": "diff --git a/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java b/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java\nindex 780da6b..2b3255c 100644\n--- a/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java\n+++ b/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java\n@@ -40,7 +40,7 @@\n         Person person \u003d new Person();\n         person.setName(\"ServiceComb/Java Chassis\");\n         System.out.println(hello.sayHello(person));\n-        System.out.println(\"a: 1, b\u003d2, result\u003d\" + compute.add(1, 2));\n+        System.out.println(\"a\u003d1, b\u003d2, result\u003d\" + compute.add(1, 2));\n     }\n \n     public static void init()\ndiff --git a/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java b/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java\nindex 780da6b..2b3255c 100644\n--- a/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java\n+++ b/samples/pojo-sample/pojo-consumer/src/main/java/io/servicecomb/samples/pojo/consumer/PojoConsumerMain.java\n@@ -40,7 +40,7 @@\n         Person person \u003d new Person();\n         person.setName(\"ServiceComb/Java Chassis\");\n         System.out.println(hello.sayHello(person));\n-        System.out.println(\"a: 1, b\u003d2, result\u003d\" + compute.add(1, 2));\n+        System.out.println(\"a\u003d1, b\u003d2, result\u003d\" + compute.add(1, 2));\n     }\n \n     public static void init()\n",
    "projectName": "java-chassis",
    "lineNum": 43,
    "nodeStartChar": 1596,
    "before": "\"a: 1, b\u003d2, result\u003d\"",
    "after": "\"a\u003d1, b\u003d2, result\u003d\""
  },
  {
    "commitSHA1": "affaf8afac883af4f00a898bccccfb1adadb8b01",
    "commitFile": "swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java",
    "patch": "diff --git a/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java b/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java\nindex e45e326..72db227 100644\n--- a/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java\n+++ b/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java\n@@ -136,7 +136,7 @@\n                 // producer未实现契约，非法\n                 String msg \u003d String.format(\"swagger method %s:%s not exist in producer.\",\n                         swaggerIntf.getClass().getName(),\n-                        swaggerIntf.getName());\n+                        methodName);\n                 throw new Error(msg);\n             }\n \ndiff --git a/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java b/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java\nindex e45e326..72db227 100644\n--- a/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java\n+++ b/swagger/swagger-invocation/invocation-core/src/main/java/io/servicecomb/swagger/engine/SwaggerEnvironment.java\n@@ -136,7 +136,7 @@\n                 // producer未实现契约，非法\n                 String msg \u003d String.format(\"swagger method %s:%s not exist in producer.\",\n                         swaggerIntf.getClass().getName(),\n-                        swaggerIntf.getName());\n+                        methodName);\n                 throw new Error(msg);\n             }\n \n",
    "projectName": "java-chassis",
    "lineNum": 139,
    "nodeStartChar": 6050,
    "before": "swaggerIntf.getName()",
    "after": "methodName"
  },
  {
    "commitSHA1": "f1c98372c7b5aad905f548762d5bbb60156ba3ea",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\nindex 2a639ac..8876801 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n@@ -107,7 +107,7 @@\n     SIMULACRON_RULE.cluster().acceptConnections();\n \n     // Then this doesn\u0027t throw\n-    try (Session session \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n+    try (Session ignored \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n   }\n \n   /**\n@@ -128,7 +128,7 @@\n                     .build())\n         .isInstanceOf(IllegalStateException.class)\n         .hasMessageContaining(\n-            \"You provided explicit contact points, the local DC must be specified\");\n+            \"Since you provided explicit contact points, the local DC must be explicitly set\");\n     // One second should be plenty of time for connections to close server side\n     checkThat(() -\u003e SIMULACRON_RULE.cluster().getConnections().getConnections().isEmpty())\n         .before(1, SECONDS)\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\nindex 2a639ac..8876801 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n@@ -107,7 +107,7 @@\n     SIMULACRON_RULE.cluster().acceptConnections();\n \n     // Then this doesn\u0027t throw\n-    try (Session session \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n+    try (Session ignored \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n   }\n \n   /**\n@@ -128,7 +128,7 @@\n                     .build())\n         .isInstanceOf(IllegalStateException.class)\n         .hasMessageContaining(\n-            \"You provided explicit contact points, the local DC must be specified\");\n+            \"Since you provided explicit contact points, the local DC must be explicitly set\");\n     // One second should be plenty of time for connections to close server side\n     checkThat(() -\u003e SIMULACRON_RULE.cluster().getConnections().getConnections().isEmpty())\n         .before(1, SECONDS)\n",
    "projectName": "java-driver",
    "lineNum": 110,
    "nodeStartChar": 4345,
    "before": "session\u003dsessionFuture.get(30,TimeUnit.SECONDS)",
    "after": "ignored\u003dsessionFuture.get(30,TimeUnit.SECONDS)"
  },
  {
    "commitSHA1": "f1c98372c7b5aad905f548762d5bbb60156ba3ea",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\nindex 2a639ac..8876801 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n@@ -107,7 +107,7 @@\n     SIMULACRON_RULE.cluster().acceptConnections();\n \n     // Then this doesn\u0027t throw\n-    try (Session session \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n+    try (Session ignored \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n   }\n \n   /**\n@@ -128,7 +128,7 @@\n                     .build())\n         .isInstanceOf(IllegalStateException.class)\n         .hasMessageContaining(\n-            \"You provided explicit contact points, the local DC must be specified\");\n+            \"Since you provided explicit contact points, the local DC must be explicitly set\");\n     // One second should be plenty of time for connections to close server side\n     checkThat(() -\u003e SIMULACRON_RULE.cluster().getConnections().getConnections().isEmpty())\n         .before(1, SECONDS)\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\nindex 2a639ac..8876801 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/core/ConnectIT.java\n@@ -107,7 +107,7 @@\n     SIMULACRON_RULE.cluster().acceptConnections();\n \n     // Then this doesn\u0027t throw\n-    try (Session session \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n+    try (Session ignored \u003d sessionFuture.get(30, TimeUnit.SECONDS)) {}\n   }\n \n   /**\n@@ -128,7 +128,7 @@\n                     .build())\n         .isInstanceOf(IllegalStateException.class)\n         .hasMessageContaining(\n-            \"You provided explicit contact points, the local DC must be specified\");\n+            \"Since you provided explicit contact points, the local DC must be explicitly set\");\n     // One second should be plenty of time for connections to close server side\n     checkThat(() -\u003e SIMULACRON_RULE.cluster().getConnections().getConnections().isEmpty())\n         .before(1, SECONDS)\n",
    "projectName": "java-driver",
    "lineNum": 131,
    "nodeStartChar": 5107,
    "before": "\"You provided explicit contact points, the local DC must be specified\"",
    "after": "\"Since you provided explicit contact points, the local DC must be explicitly set\""
  },
  {
    "commitSHA1": "c1aea83765b5971510cc44da32334f977fbd4dee",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java\nindex 6619913..21a68f0 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java\n@@ -34,7 +34,10 @@\n     DefaultNode node \u003d new DefaultNode(endPoint, MockedDriverContextFactory.defaultDriverContext());\n     node.hostId \u003d hostId;\n \n-    String expected \u003d uuidStr + \"@\" + \"localhost/127.0.0.1:9042\";\n+    String expected \u003d\n+        String.format(\n+            \"Node(endPoint\u003dlocalhost/127.0.0.1:9042, hostId\u003d%s, hashCode\u003d%s)\",\n+            uuidStr, Integer.toHexString(node.hashCode()));\n     assertThat(node.toString()).isEqualTo(expected);\n   }\n }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java\nindex 6619913..21a68f0 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultNodeTest.java\n@@ -34,7 +34,10 @@\n     DefaultNode node \u003d new DefaultNode(endPoint, MockedDriverContextFactory.defaultDriverContext());\n     node.hostId \u003d hostId;\n \n-    String expected \u003d uuidStr + \"@\" + \"localhost/127.0.0.1:9042\";\n+    String expected \u003d\n+        String.format(\n+            \"Node(endPoint\u003dlocalhost/127.0.0.1:9042, hostId\u003d%s, hashCode\u003d%s)\",\n+            uuidStr, Integer.toHexString(node.hashCode()));\n     assertThat(node.toString()).isEqualTo(expected);\n   }\n }\n",
    "projectName": "java-driver",
    "lineNum": 38,
    "nodeStartChar": 1379,
    "before": "uuidStr + \"@\" + \"localhost/127.0.0.1:9042\"",
    "after": "String.format(\"Node(endPoint\u003dlocalhost/127.0.0.1:9042, hostId\u003d%s, hashCode\u003d%s)\",uuidStr,Integer.toHexString(node.hashCode()))"
  },
  {
    "commitSHA1": "b5919b6318956b13b46adff0d4cafec91795f85c",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\nindex 54cb427..c9f1993 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n@@ -129,7 +129,7 @@\n     // in the initialization sequence.\n     private Step step;\n     private Authenticator authenticator;\n-    private ByteBuffer authReponseToken;\n+    private ByteBuffer authResponseToken;\n \n     InitRequest(ChannelHandlerContext ctx) {\n       super(ctx, timeoutMillis);\n@@ -151,7 +151,7 @@\n         case SET_KEYSPACE:\n           return new Query(\"USE \" + options.keyspace.asCql(false));\n         case AUTH_RESPONSE:\n-          return new AuthResponse(authReponseToken);\n+          return new AuthResponse(authResponseToken);\n         case REGISTER:\n           return new Register(options.eventTypes);\n         default:\n@@ -184,7 +184,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\n@@ -202,7 +202,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\nindex 54cb427..c9f1993 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n@@ -129,7 +129,7 @@\n     // in the initialization sequence.\n     private Step step;\n     private Authenticator authenticator;\n-    private ByteBuffer authReponseToken;\n+    private ByteBuffer authResponseToken;\n \n     InitRequest(ChannelHandlerContext ctx) {\n       super(ctx, timeoutMillis);\n@@ -151,7 +151,7 @@\n         case SET_KEYSPACE:\n           return new Query(\"USE \" + options.keyspace.asCql(false));\n         case AUTH_RESPONSE:\n-          return new AuthResponse(authReponseToken);\n+          return new AuthResponse(authResponseToken);\n         case REGISTER:\n           return new Register(options.eventTypes);\n         default:\n@@ -184,7 +184,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\n@@ -202,7 +202,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\n",
    "projectName": "java-driver",
    "lineNum": 154,
    "nodeStartChar": 5927,
    "before": "new AuthResponse(authReponseToken)",
    "after": "new AuthResponse(authResponseToken)"
  },
  {
    "commitSHA1": "6b4ebea645f7ffb90f4a79d18b07c93d7e6a99d7",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java\nindex b24a12c..a3d529a 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java\n@@ -51,7 +51,7 @@\n       String artifactId \u003d props.getProperty(\"driver.artifactId\");\n       String version \u003d props.getProperty(\"driver.version\");\n       if (ByteBuf.class.getPackage().getName().contains(\"com.datastax.oss.driver.shaded\")) {\n-        version +\u003d \"-shaded\";\n+        artifactId +\u003d \"-shaded\";\n       }\n       return new DefaultMavenCoordinates(name, groupId, artifactId, Version.parse(version));\n     } catch (IOException e) {\n",
    "projectName": "java-driver",
    "lineNum": 54,
    "nodeStartChar": 2215,
    "before": "version+\u003d\"-shaded\"",
    "after": "artifactId+\u003d\"-shaded\""
  },
  {
    "commitSHA1": "94aa9913b03e192abe7627999897263542f60572",
    "commitFile": "mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java",
    "patch": "diff --git a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java\nindex 5cf2c7f..53e68c5 100644\n--- a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java\n+++ b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java\n@@ -101,7 +101,7 @@\n               methodElement,\n               processedType,\n               \"Wrong number of parameters: %s methods with no custom clause \"\n-                  + \"must take either an entity instance, or the partition key components\",\n+                  + \"must take either an entity instance, or the primary key components\",\n               Delete.class.getSimpleName());\n       return Optional.empty();\n     }\ndiff --git a/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java b/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java\nindex 637aad8..52688dc 100644\n--- a/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java\n+++ b/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java\n@@ -57,7 +57,7 @@\n       },\n       {\n         \"Wrong number of parameters: Delete methods with no custom clause \"\n-            + \"must take either an entity instance, or the partition key components\",\n+            + \"must take either an entity instance, or the primary key components\",\n         MethodSpec.methodBuilder(\"delete\")\n             .addAnnotation(Delete.class)\n             .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\ndiff --git a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java\nindex 5cf2c7f..53e68c5 100644\n--- a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java\n+++ b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGenerator.java\n@@ -101,7 +101,7 @@\n               methodElement,\n               processedType,\n               \"Wrong number of parameters: %s methods with no custom clause \"\n-                  + \"must take either an entity instance, or the partition key components\",\n+                  + \"must take either an entity instance, or the primary key components\",\n               Delete.class.getSimpleName());\n       return Optional.empty();\n     }\n",
    "projectName": "java-driver",
    "lineNum": 104,
    "nodeStartChar": 4626,
    "before": "\"must take either an entity instance, or the partition key components\"",
    "after": "\"must take either an entity instance, or the primary key components\""
  },
  {
    "commitSHA1": "94aa9913b03e192abe7627999897263542f60572",
    "commitFile": "mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java",
    "patch": "diff --git a/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java b/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java\nindex 637aad8..52688dc 100644\n--- a/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java\n+++ b/mapper-processor/src/test/java/com/datastax/oss/driver/internal/mapper/processor/dao/DaoDeleteMethodGeneratorTest.java\n@@ -57,7 +57,7 @@\n       },\n       {\n         \"Wrong number of parameters: Delete methods with no custom clause \"\n-            + \"must take either an entity instance, or the partition key components\",\n+            + \"must take either an entity instance, or the primary key components\",\n         MethodSpec.methodBuilder(\"delete\")\n             .addAnnotation(Delete.class)\n             .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n",
    "projectName": "java-driver",
    "lineNum": 60,
    "nodeStartChar": 2298,
    "before": "\"must take either an entity instance, or the partition key components\"",
    "after": "\"must take either an entity instance, or the primary key components\""
  },
  {
    "commitSHA1": "f2a17753394086216265a56f2e8a247a6aff313c",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\nindex 7ee7416..5135d04 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n@@ -61,7 +61,7 @@\n     if (removedNode \u003d\u003d null) {\n       // This should never happen because we already check the event in NodeStateManager, but handle\n       // just in case.\n-      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", broadcastRpcAddressToRemove);\n+      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", logPrefix, broadcastRpcAddressToRemove);\n       return new Result(oldMetadata);\n     } else {\n       LOG.debug(\"[{}] Removing node {}\", logPrefix, removedNode);\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\nindex 7ee7416..5135d04 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n@@ -61,7 +61,7 @@\n     if (removedNode \u003d\u003d null) {\n       // This should never happen because we already check the event in NodeStateManager, but handle\n       // just in case.\n-      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", broadcastRpcAddressToRemove);\n+      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", logPrefix, broadcastRpcAddressToRemove);\n       return new Result(oldMetadata);\n     } else {\n       LOG.debug(\"[{}] Removing node {}\", logPrefix, removedNode);\n",
    "projectName": "java-driver",
    "lineNum": 64,
    "nodeStartChar": 2452,
    "before": "LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\",broadcastRpcAddressToRemove)",
    "after": "LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\",logPrefix,broadcastRpcAddressToRemove)"
  },
  {
    "commitSHA1": "cbaea458856e37bc9c9c68634b6367b359a8c75b",
    "commitFile": "mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java",
    "patch": "diff --git a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java\nindex 04c6804..7f08aea 100644\n--- a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java\n+++ b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java\n@@ -35,7 +35,7 @@\n       new LazyReference\u003c\u003e(\"codeGeneratorFactory\", this::buildCodeGeneratorFactory, cycleDetector);\n \n   private final LazyReference\u003cEntityFactory\u003e entityFactoryRef \u003d\n-      new LazyReference\u003c\u003e(\"codeGeneratorFactory\", this::buildEntityFactory, cycleDetector);\n+      new LazyReference\u003c\u003e(\"entityFactory\", this::buildEntityFactory, cycleDetector);\n \n   private final DecoratedMessager messager;\n   private final Types typeUtils;\ndiff --git a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java\nindex 04c6804..7f08aea 100644\n--- a/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java\n+++ b/mapper-processor/src/main/java/com/datastax/oss/driver/internal/mapper/processor/DefaultProcessorContext.java\n@@ -35,7 +35,7 @@\n       new LazyReference\u003c\u003e(\"codeGeneratorFactory\", this::buildCodeGeneratorFactory, cycleDetector);\n \n   private final LazyReference\u003cEntityFactory\u003e entityFactoryRef \u003d\n-      new LazyReference\u003c\u003e(\"codeGeneratorFactory\", this::buildEntityFactory, cycleDetector);\n+      new LazyReference\u003c\u003e(\"entityFactory\", this::buildEntityFactory, cycleDetector);\n \n   private final DecoratedMessager messager;\n   private final Types typeUtils;\n",
    "projectName": "java-driver",
    "lineNum": 38,
    "nodeStartChar": 1755,
    "before": "\"codeGeneratorFactory\"",
    "after": "\"entityFactory\""
  },
  {
    "commitSHA1": "d0ef3cb7f3475925a21427d9bca535936ce0cd38",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java\nindex 965f40e..5280b46 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java\n@@ -122,7 +122,7 @@\n                 ImmutableMap.of(\n                     \"address\",\n                     node.getBroadcastAddress().get().getAddress(),\n-                    \"peer\",\n+                    \"port\",\n                     node.getBroadcastAddress().get().getPort()));\n       } else {\n         query \u003d\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\nindex d2336ab..b7d2a27 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n@@ -150,7 +150,7 @@\n     topologyMonitor.stubQueries(\n         new StubbedQuery(\n             \"SELECT * FROM system.peers_v2 WHERE peer \u003d :address and peer_port \u003d :port\",\n-            ImmutableMap.of(\"address\", ADDRESS2.getAddress(), \"peer\", 9042),\n+            ImmutableMap.of(\"address\", ADDRESS2.getAddress(), \"port\", 9042),\n             mockResult(mockPeersV2Row(2, node2.getHostId()))));\n \n     // When\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java\nindex 965f40e..5280b46 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitor.java\n@@ -122,7 +122,7 @@\n                 ImmutableMap.of(\n                     \"address\",\n                     node.getBroadcastAddress().get().getAddress(),\n-                    \"peer\",\n+                    \"port\",\n                     node.getBroadcastAddress().get().getPort()));\n       } else {\n         query \u003d\n",
    "projectName": "java-driver",
    "lineNum": 125,
    "nodeStartChar": 5368,
    "before": "\"peer\"",
    "after": "\"port\""
  },
  {
    "commitSHA1": "d0ef3cb7f3475925a21427d9bca535936ce0cd38",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\nindex d2336ab..b7d2a27 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n@@ -150,7 +150,7 @@\n     topologyMonitor.stubQueries(\n         new StubbedQuery(\n             \"SELECT * FROM system.peers_v2 WHERE peer \u003d :address and peer_port \u003d :port\",\n-            ImmutableMap.of(\"address\", ADDRESS2.getAddress(), \"peer\", 9042),\n+            ImmutableMap.of(\"address\", ADDRESS2.getAddress(), \"port\", 9042),\n             mockResult(mockPeersV2Row(2, node2.getHostId()))));\n \n     // When\n",
    "projectName": "java-driver",
    "lineNum": 153,
    "nodeStartChar": 5889,
    "before": "\"peer\"",
    "after": "\"port\""
  },
  {
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 59,
    "nodeStartChar": 2520,
    "before": "128",
    "after": "54"
  },
  {
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 61,
    "nodeStartChar": 2670,
    "before": "Math.min(baseDelay,(exponentialDelay * 85) / 100)",
    "after": "Math.max(baseDelay,(exponentialDelay * 85) / 100)"
  },
  {
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 63,
    "nodeStartChar": 2835,
    "before": "Math.max(maxDelay,(exponentialDelay * 115) / 100)",
    "after": "Math.min(maxDelay,(exponentialDelay * 115) / 100)"
  },
  {
    "commitSHA1": "09fa40e0bf7797f41ba9970e55922f1dc10ab3f1",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\nindex d4620c4..dfd616d 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n@@ -952,7 +952,7 @@\n     // This works because the event loop group is single-threaded\n     Future\u003c?\u003e f \u003d adminEventLoopGroup.schedule(() -\u003e null, 5, TimeUnit.NANOSECONDS);\n     try {\n-      Uninterruptibles.getUninterruptibly(f, 100, TimeUnit.MILLISECONDS);\n+      Uninterruptibles.getUninterruptibly(f, 250, TimeUnit.MILLISECONDS);\n     } catch (ExecutionException e) {\n       fail(\"unexpected error\", e.getCause());\n     } catch (TimeoutException e) {\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\nindex d4620c4..dfd616d 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n@@ -952,7 +952,7 @@\n     // This works because the event loop group is single-threaded\n     Future\u003c?\u003e f \u003d adminEventLoopGroup.schedule(() -\u003e null, 5, TimeUnit.NANOSECONDS);\n     try {\n-      Uninterruptibles.getUninterruptibly(f, 100, TimeUnit.MILLISECONDS);\n+      Uninterruptibles.getUninterruptibly(f, 250, TimeUnit.MILLISECONDS);\n     } catch (ExecutionException e) {\n       fail(\"unexpected error\", e.getCause());\n     } catch (TimeoutException e) {\n",
    "projectName": "java-driver",
    "lineNum": 955,
    "nodeStartChar": 40481,
    "before": "100",
    "after": "250"
  },
  {
    "commitSHA1": "e0e535561aa3c69fc122d59b39f685ffe5cd2e7c",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java\nindex 02a9c6b..5860062 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java\n@@ -75,7 +75,7 @@\n       simulacronRule.cluster().acceptConnections();\n     }\n     assertThat(listener.ready).isFalse();\n-    assertThat(listener.closed).isTrue();\n+    ConditionChecker.checkThat(() -\u003e listener.closed).before(1, SECONDS).becomesTrue();\n   }\n \n   private CqlSession newSession(TestLifecycleListener listener) {\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java\nindex 02a9c6b..5860062 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/context/LifecycleListenerIT.java\n@@ -75,7 +75,7 @@\n       simulacronRule.cluster().acceptConnections();\n     }\n     assertThat(listener.ready).isFalse();\n-    assertThat(listener.closed).isTrue();\n+    ConditionChecker.checkThat(() -\u003e listener.closed).before(1, SECONDS).becomesTrue();\n   }\n \n   private CqlSession newSession(TestLifecycleListener listener) {\n",
    "projectName": "java-driver",
    "lineNum": 78,
    "nodeStartChar": 3280,
    "before": "assertThat(listener.closed)",
    "after": "ConditionChecker.checkThat(() -\u003e listener.closed).before(1,SECONDS)"
  },
  {
    "commitSHA1": "293b9b6120cbf35e650c9c138e883ac0608d557d",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java\nindex b9c5aae..4ba8aa2 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java\n@@ -54,7 +54,11 @@\n \n   private static final String KEY \u003d \"test\";\n \n-  private final CustomCcmRule ccm \u003d new CustomCcmRule.Builder().build();\n+  private final CustomCcmRule ccm \u003d\n+      new CustomCcmRule.Builder()\n+          // set the warn threshold to 5Kb (default is 64Kb in newer versions)\n+          .withCassandraConfiguration(\"batch_size_warn_threshold_in_kb\", \"5\")\n+          .build();\n   private final SessionRule\u003cCqlSession\u003e sessionRule \u003d\n       SessionRule.builder(ccm)\n           .withConfigLoader(\n@@ -182,14 +186,15 @@\n             logMessage -\u003e\n                 assertThat(logMessage)\n                     .startsWith(\"Query \u0027\")\n-                    // query will only be logged up to MAX_QUERY_LENGTH characters\n+                    // different versiosns of Cassandra produce slightly different formated logs\n+                    // the .contains() below verify the common bits\n                     .contains(\n                         query.substring(0, RequestLogger.DEFAULT_REQUEST_LOGGER_MAX_QUERY_LENGTH))\n                     .contains(\"\u0027 generated server side warning(s): \")\n                     .contains(\"Batch\")\n-                    .contains(\n-                        String.format(\n-                            \"for [%s.test] is of size\", sessionRule.keyspace().asCql(true)))\n+                    .contains(\"for\")\n+                    .contains(String.format(\"%s.test\", sessionRule.keyspace().asCql(true)))\n+                    .contains(\"is of size\")\n                     .contains(\"exceeding specified threshold\"));\n   }\n }\n",
    "projectName": "java-driver",
    "lineNum": 58,
    "nodeStartChar": 2177,
    "before": "new CustomCcmRule.Builder()",
    "after": "new CustomCcmRule.Builder().withCassandraConfiguration(\"batch_size_warn_threshold_in_kb\",\"5\")"
  },
  {
    "commitSHA1": "293b9b6120cbf35e650c9c138e883ac0608d557d",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java\nindex b9c5aae..4ba8aa2 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/ExecutionInfoWarningsIT.java\n@@ -54,7 +54,11 @@\n \n   private static final String KEY \u003d \"test\";\n \n-  private final CustomCcmRule ccm \u003d new CustomCcmRule.Builder().build();\n+  private final CustomCcmRule ccm \u003d\n+      new CustomCcmRule.Builder()\n+          // set the warn threshold to 5Kb (default is 64Kb in newer versions)\n+          .withCassandraConfiguration(\"batch_size_warn_threshold_in_kb\", \"5\")\n+          .build();\n   private final SessionRule\u003cCqlSession\u003e sessionRule \u003d\n       SessionRule.builder(ccm)\n           .withConfigLoader(\n@@ -182,14 +186,15 @@\n             logMessage -\u003e\n                 assertThat(logMessage)\n                     .startsWith(\"Query \u0027\")\n-                    // query will only be logged up to MAX_QUERY_LENGTH characters\n+                    // different versiosns of Cassandra produce slightly different formated logs\n+                    // the .contains() below verify the common bits\n                     .contains(\n                         query.substring(0, RequestLogger.DEFAULT_REQUEST_LOGGER_MAX_QUERY_LENGTH))\n                     .contains(\"\u0027 generated server side warning(s): \")\n                     .contains(\"Batch\")\n-                    .contains(\n-                        String.format(\n-                            \"for [%s.test] is of size\", sessionRule.keyspace().asCql(true)))\n+                    .contains(\"for\")\n+                    .contains(String.format(\"%s.test\", sessionRule.keyspace().asCql(true)))\n+                    .contains(\"is of size\")\n                     .contains(\"exceeding specified threshold\"));\n   }\n }\n",
    "projectName": "java-driver",
    "lineNum": 183,
    "nodeStartChar": 7397,
    "before": "assertThat(logMessage)",
    "after": "assertThat(logMessage).startsWith(\"Query \u0027\").contains(query.substring(0,RequestLogger.DEFAULT_REQUEST_LOGGER_MAX_QUERY_LENGTH))"
  },
  {
    "commitSHA1": "1262240711ffdb654d4ef8d077e2ebc0c08a4c3f",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\nindex 32ffd70..779d35b 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n@@ -102,7 +102,7 @@\n     topologyMonitor.init();\n \n     // Then\n-    Mockito.verify(controlConnection).init(true, false, false);\n+    Mockito.verify(controlConnection).init(true, false, true);\n   }\n \n   @Test\n",
    "projectName": "java-driver",
    "lineNum": 105,
    "nodeStartChar": 4266,
    "before": "false",
    "after": "true"
  },
  {
    "commitSHA1": "b6abed591d321645eb5dea760a139610e5acd63d",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\nindex 6ac1c48..0509730 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n@@ -195,7 +195,7 @@\n       try {\n         row.getInt(\"d\");\n         fail(\"expected an error\");\n-      } catch (ArrayIndexOutOfBoundsException e) {\n+      } catch (IllegalArgumentException e) {\n         /*expected*/\n       }\n     }\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\nindex 6ac1c48..0509730 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n@@ -195,7 +195,7 @@\n       try {\n         row.getInt(\"d\");\n         fail(\"expected an error\");\n-      } catch (ArrayIndexOutOfBoundsException e) {\n+      } catch (IllegalArgumentException e) {\n         /*expected*/\n       }\n     }\n",
    "projectName": "java-driver",
    "lineNum": 198,
    "nodeStartChar": 8490,
    "before": "ArrayIndexOutOfBoundsException",
    "after": "IllegalArgumentException"
  },
  {
    "commitSHA1": "abd77668df8459fd0b3fea84b3cfe45373c5d31f",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java\nindex e5ece85..e8c36eb 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java\n@@ -248,7 +248,7 @@\n       ByteBuffer[] encodedValues \u003d new ByteBuffer[values.size()];\n       int i \u003d 0;\n       for (Object value : values) {\n-        encodedValues[i] \u003d (value \u003d\u003d null) ? null : encode(value, codecRegistry, protocolVersion);\n+        encodedValues[i++] \u003d (value \u003d\u003d null) ? null : encode(value, codecRegistry, protocolVersion);\n       }\n       return NullAllowingImmutableList.of(encodedValues);\n     }\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java\nindex e5ece85..e8c36eb 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/Conversions.java\n@@ -248,7 +248,7 @@\n       ByteBuffer[] encodedValues \u003d new ByteBuffer[values.size()];\n       int i \u003d 0;\n       for (Object value : values) {\n-        encodedValues[i] \u003d (value \u003d\u003d null) ? null : encode(value, codecRegistry, protocolVersion);\n+        encodedValues[i++] \u003d (value \u003d\u003d null) ? null : encode(value, codecRegistry, protocolVersion);\n       }\n       return NullAllowingImmutableList.of(encodedValues);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 251,
    "nodeStartChar": 12615,
    "before": "i",
    "after": "i++"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java\nindex 92ca061..7ba4655 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Long.class;\n+    return javaClass \u003d\u003d Long.class || javaClass \u003d\u003d long.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java\nindex 2ffe145..8768311 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java\n@@ -50,7 +50,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Boolean.class;\n+    return javaClass \u003d\u003d Boolean.class || javaClass \u003d\u003d boolean.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java\nindex 18921c2..91071c0 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Double.class;\n+    return javaClass \u003d\u003d Double.class || javaClass \u003d\u003d double.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java\nindex c311089..a3ff38a 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Float.class;\n+    return javaClass \u003d\u003d Float.class || javaClass \u003d\u003d float.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java\nindex be8f46b..702c9a4 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java\n@@ -47,7 +47,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Integer.class;\n+    return javaClass \u003d\u003d Integer.class || javaClass \u003d\u003d int.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java\nindex 7a7a676..d8ec3c2 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Short.class;\n+    return javaClass \u003d\u003d Short.class || javaClass \u003d\u003d short.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java\nindex a235a2f..27241aa 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Byte.class;\n+    return javaClass \u003d\u003d Byte.class || javaClass \u003d\u003d byte.class;\n   }\n \n   @Nullable\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java\nindex 92ca061..7ba4655 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BigIntCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Long.class;\n+    return javaClass \u003d\u003d Long.class || javaClass \u003d\u003d long.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 49,
    "nodeStartChar": 1558,
    "before": "javaClass \u003d\u003d Long.class",
    "after": "javaClass \u003d\u003d Long.class || javaClass \u003d\u003d long.class"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java\nindex 2ffe145..8768311 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/BooleanCodec.java\n@@ -50,7 +50,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Boolean.class;\n+    return javaClass \u003d\u003d Boolean.class || javaClass \u003d\u003d boolean.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 53,
    "nodeStartChar": 1726,
    "before": "javaClass \u003d\u003d Boolean.class",
    "after": "javaClass \u003d\u003d Boolean.class || javaClass \u003d\u003d boolean.class"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java\nindex 18921c2..91071c0 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/DoubleCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Double.class;\n+    return javaClass \u003d\u003d Double.class || javaClass \u003d\u003d double.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 49,
    "nodeStartChar": 1568,
    "before": "javaClass \u003d\u003d Double.class",
    "after": "javaClass \u003d\u003d Double.class || javaClass \u003d\u003d double.class"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java\nindex c311089..a3ff38a 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/FloatCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Float.class;\n+    return javaClass \u003d\u003d Float.class || javaClass \u003d\u003d float.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 49,
    "nodeStartChar": 1561,
    "before": "javaClass \u003d\u003d Float.class",
    "after": "javaClass \u003d\u003d Float.class || javaClass \u003d\u003d float.class"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java\nindex be8f46b..702c9a4 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/IntCodec.java\n@@ -47,7 +47,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Integer.class;\n+    return javaClass \u003d\u003d Integer.class || javaClass \u003d\u003d int.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 50,
    "nodeStartChar": 1560,
    "before": "javaClass \u003d\u003d Integer.class",
    "after": "javaClass \u003d\u003d Integer.class || javaClass \u003d\u003d int.class"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java\nindex 7a7a676..d8ec3c2 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/SmallIntCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Short.class;\n+    return javaClass \u003d\u003d Short.class || javaClass \u003d\u003d short.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 49,
    "nodeStartChar": 1567,
    "before": "javaClass \u003d\u003d Short.class",
    "after": "javaClass \u003d\u003d Short.class || javaClass \u003d\u003d short.class"
  },
  {
    "commitSHA1": "2c1b499a9ba5d2a3582bd3c3c81ba355307baec5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java\nindex a235a2f..27241aa 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/type/codec/TinyIntCodec.java\n@@ -46,7 +46,7 @@\n \n   @Override\n   public boolean accepts(@NonNull Class\u003c?\u003e javaClass) {\n-    return javaClass \u003d\u003d Byte.class;\n+    return javaClass \u003d\u003d Byte.class || javaClass \u003d\u003d byte.class;\n   }\n \n   @Nullable\n",
    "projectName": "java-driver",
    "lineNum": 49,
    "nodeStartChar": 1560,
    "before": "javaClass \u003d\u003d Byte.class",
    "after": "javaClass \u003d\u003d Byte.class || javaClass \u003d\u003d byte.class"
  },
  {
    "commitSHA1": "a559b4ec04220d70b9ab9234c8d604a0866cab3e",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\n",
    "projectName": "java-driver",
    "lineNum": 118,
    "nodeStartChar": 4315,
    "before": "buildErrorStatement(dseVersion,dseRequirement.description(),false,true)",
    "after": "buildErrorStatement(minVersion,dseRequirement.description(),false,true)"
  },
  {
    "commitSHA1": "a559b4ec04220d70b9ab9234c8d604a0866cab3e",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\n",
    "projectName": "java-driver",
    "lineNum": 126,
    "nodeStartChar": 4625,
    "before": "buildErrorStatement(dseVersion,dseRequirement.description(),true,true)",
    "after": "buildErrorStatement(maxVersion,dseRequirement.description(),true,true)"
  },
  {
    "commitSHA1": "75df423c74d83b08a4a450dda44be7ce84855411",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\nindex 809b0c4..54783a3 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n@@ -304,7 +304,7 @@\n             new LogOutputStream() {\n               @Override\n               protected void processLine(String line, int logLevel) {\n-                logger.warn(\"ccmerr\u003e {}\", line);\n+                logger.error(\"ccmerr\u003e {}\", line);\n               }\n             }) {\n       Executor executor \u003d new DefaultExecutor();\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\nindex 809b0c4..54783a3 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n@@ -304,7 +304,7 @@\n             new LogOutputStream() {\n               @Override\n               protected void processLine(String line, int logLevel) {\n-                logger.warn(\"ccmerr\u003e {}\", line);\n+                logger.error(\"ccmerr\u003e {}\", line);\n               }\n             }) {\n       Executor executor \u003d new DefaultExecutor();\n",
    "projectName": "java-driver",
    "lineNum": 307,
    "nodeStartChar": 10588,
    "before": "logger.warn(\"ccmerr\u003e {}\",line)",
    "after": "logger.error(\"ccmerr\u003e {}\",line)"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\nindex 2314380..b9784e3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n@@ -61,7 +61,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n     return Objects.requireNonNull(\n         execute(statement, Statement.ASYNC), \"The CQL processor should never return a null result\");\n   }\n@@ -71,7 +71,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull String query) {\n     return executeAsync(SimpleStatement.newInstance(query));\n   }\n \n@@ -167,7 +167,8 @@\n    * details.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull SimpleStatement statement) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(\n+      @NonNull SimpleStatement statement) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(statement), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -178,7 +179,7 @@\n    * sent, generally before the statement is prepared).\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(@NonNull String query) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(query), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -194,7 +195,7 @@\n    * with {@link PrepareRequest} directly.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(PrepareRequest request) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(PrepareRequest request) {\n     return Objects.requireNonNull(\n         execute(request, PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n",
    "projectName": "java-driver",
    "lineNum": 64,
    "nodeStartChar": 2348,
    "before": "AsyncResultSet",
    "after": "? extends AsyncResultSet"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\nindex 2314380..b9784e3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n@@ -61,7 +61,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n     return Objects.requireNonNull(\n         execute(statement, Statement.ASYNC), \"The CQL processor should never return a null result\");\n   }\n@@ -71,7 +71,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull String query) {\n     return executeAsync(SimpleStatement.newInstance(query));\n   }\n \n@@ -167,7 +167,8 @@\n    * details.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull SimpleStatement statement) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(\n+      @NonNull SimpleStatement statement) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(statement), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -178,7 +179,7 @@\n    * sent, generally before the statement is prepared).\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(@NonNull String query) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(query), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -194,7 +195,7 @@\n    * with {@link PrepareRequest} directly.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(PrepareRequest request) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(PrepareRequest request) {\n     return Objects.requireNonNull(\n         execute(request, PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n",
    "projectName": "java-driver",
    "lineNum": 74,
    "nodeStartChar": 2748,
    "before": "AsyncResultSet",
    "after": "? extends AsyncResultSet"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\nindex 2314380..b9784e3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n@@ -61,7 +61,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n     return Objects.requireNonNull(\n         execute(statement, Statement.ASYNC), \"The CQL processor should never return a null result\");\n   }\n@@ -71,7 +71,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull String query) {\n     return executeAsync(SimpleStatement.newInstance(query));\n   }\n \n@@ -167,7 +167,8 @@\n    * details.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull SimpleStatement statement) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(\n+      @NonNull SimpleStatement statement) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(statement), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -178,7 +179,7 @@\n    * sent, generally before the statement is prepared).\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(@NonNull String query) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(query), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -194,7 +195,7 @@\n    * with {@link PrepareRequest} directly.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(PrepareRequest request) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(PrepareRequest request) {\n     return Objects.requireNonNull(\n         execute(request, PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n",
    "projectName": "java-driver",
    "lineNum": 170,
    "nodeStartChar": 7387,
    "before": "PreparedStatement",
    "after": "? extends PreparedStatement"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\nindex 2314380..b9784e3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n@@ -61,7 +61,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n     return Objects.requireNonNull(\n         execute(statement, Statement.ASYNC), \"The CQL processor should never return a null result\");\n   }\n@@ -71,7 +71,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull String query) {\n     return executeAsync(SimpleStatement.newInstance(query));\n   }\n \n@@ -167,7 +167,8 @@\n    * details.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull SimpleStatement statement) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(\n+      @NonNull SimpleStatement statement) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(statement), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -178,7 +179,7 @@\n    * sent, generally before the statement is prepared).\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(@NonNull String query) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(query), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -194,7 +195,7 @@\n    * with {@link PrepareRequest} directly.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(PrepareRequest request) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(PrepareRequest request) {\n     return Objects.requireNonNull(\n         execute(request, PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n",
    "projectName": "java-driver",
    "lineNum": 181,
    "nodeStartChar": 7847,
    "before": "PreparedStatement",
    "after": "? extends PreparedStatement"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\nindex 2314380..b9784e3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/CqlSession.java\n@@ -61,7 +61,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull Statement\u003c?\u003e statement) {\n     return Objects.requireNonNull(\n         execute(statement, Statement.ASYNC), \"The CQL processor should never return a null result\");\n   }\n@@ -71,7 +71,7 @@\n    * generally before the result is available).\n    */\n   @NonNull\n-  default CompletionStage\u003cAsyncResultSet\u003e executeAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends AsyncResultSet\u003e executeAsync(@NonNull String query) {\n     return executeAsync(SimpleStatement.newInstance(query));\n   }\n \n@@ -167,7 +167,8 @@\n    * details.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull SimpleStatement statement) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(\n+      @NonNull SimpleStatement statement) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(statement), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -178,7 +179,7 @@\n    * sent, generally before the statement is prepared).\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(@NonNull String query) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(@NonNull String query) {\n     return Objects.requireNonNull(\n         execute(new DefaultPrepareRequest(query), PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n@@ -194,7 +195,7 @@\n    * with {@link PrepareRequest} directly.\n    */\n   @NonNull\n-  default CompletionStage\u003cPreparedStatement\u003e prepareAsync(PrepareRequest request) {\n+  default CompletionStage\u003c? extends PreparedStatement\u003e prepareAsync(PrepareRequest request) {\n     return Objects.requireNonNull(\n         execute(request, PrepareRequest.ASYNC),\n         \"The CQL prepare processor should never return a null result\");\n",
    "projectName": "java-driver",
    "lineNum": 197,
    "nodeStartChar": 8635,
    "before": "PreparedStatement",
    "after": "? extends PreparedStatement"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet.java\nindex b263000..64c2a42 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet.java\n@@ -95,7 +95,7 @@\n \n   @NonNull\n   @Override\n-  public CompletionStage\u003cAsyncResultSet\u003e fetchNextPage() throws IllegalStateException {\n+  public CompletionStage\u003c? extends AsyncResultSet\u003e fetchNextPage() throws IllegalStateException {\n     ByteBuffer nextState \u003d executionInfo.getPagingState();\n     if (nextState \u003d\u003d null) {\n       throw new IllegalStateException(\n",
    "projectName": "java-driver",
    "lineNum": 98,
    "nodeStartChar": 3070,
    "before": "AsyncResultSet",
    "after": "? extends AsyncResultSet"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java b/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java\nindex cc0fd2b..278c3b8 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java\n@@ -128,13 +128,13 @@\n \n   @NonNull\n   @Override\n-  public CompletionStage\u003cMetadata\u003e setSchemaMetadataEnabled(@Nullable Boolean newValue) {\n+  public CompletionStage\u003c? extends Metadata\u003e setSchemaMetadataEnabled(@Nullable Boolean newValue) {\n     return metadataManager.setSchemaEnabled(newValue);\n   }\n \n   @NonNull\n   @Override\n-  public CompletionStage\u003cMetadata\u003e refreshSchemaAsync() {\n+  public CompletionStage\u003c? extends Metadata\u003e refreshSchemaAsync() {\n     return metadataManager.refreshSchema(null, true, true);\n   }\n \n",
    "projectName": "java-driver",
    "lineNum": 131,
    "nodeStartChar": 5374,
    "before": "Metadata",
    "after": "? extends Metadata"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java b/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java\nindex cc0fd2b..278c3b8 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/session/DefaultSession.java\n@@ -128,13 +128,13 @@\n \n   @NonNull\n   @Override\n-  public CompletionStage\u003cMetadata\u003e setSchemaMetadataEnabled(@Nullable Boolean newValue) {\n+  public CompletionStage\u003c? extends Metadata\u003e setSchemaMetadataEnabled(@Nullable Boolean newValue) {\n     return metadataManager.setSchemaEnabled(newValue);\n   }\n \n   @NonNull\n   @Override\n-  public CompletionStage\u003cMetadata\u003e refreshSchemaAsync() {\n+  public CompletionStage\u003c? extends Metadata\u003e refreshSchemaAsync() {\n     return metadataManager.refreshSchema(null, true, true);\n   }\n \n",
    "projectName": "java-driver",
    "lineNum": 137,
    "nodeStartChar": 5547,
    "before": "Metadata",
    "after": "? extends Metadata"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\nindex 59061e6..a2b01aa 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\n@@ -55,7 +55,7 @@\n   public void setup() {\n     MockitoAnnotations.initMocks(this);\n \n-    Mockito.when(executionInfo.getStatement()).thenReturn((Statement) statement);\n+    Mockito.when(executionInfo.getStatement()).thenAnswer(invocation -\u003e statement);\n     Mockito.when(context.getCodecRegistry()).thenReturn(CodecRegistry.DEFAULT);\n     Mockito.when(context.getProtocolVersion()).thenReturn(DefaultProtocolVersion.DEFAULT);\n   }\n@@ -85,14 +85,15 @@\n     Mockito.when(((Statement) statement).copy(mockPagingState)).thenReturn(mockNextStatement);\n \n     CompletableFuture\u003cAsyncResultSet\u003e mockResultFuture \u003d new CompletableFuture\u003c\u003e();\n-    Mockito.when(session.executeAsync(Mockito.any(Statement.class))).thenReturn(mockResultFuture);\n+    Mockito.when(session.executeAsync(Mockito.any(Statement.class)))\n+        .thenAnswer(invocation -\u003e mockResultFuture);\n \n     // When\n     DefaultAsyncResultSet resultSet \u003d\n         new DefaultAsyncResultSet(\n             columnDefinitions, executionInfo, new ArrayDeque\u003c\u003e(), session, context);\n     assertThat(resultSet.hasMorePages()).isTrue();\n-    CompletionStage\u003cAsyncResultSet\u003e nextPageFuture \u003d resultSet.fetchNextPage();\n+    CompletionStage\u003c? extends AsyncResultSet\u003e nextPageFuture \u003d resultSet.fetchNextPage();\n \n     // Then\n     Mockito.verify(statement).copy(mockPagingState);\n",
    "projectName": "java-driver",
    "lineNum": 58,
    "nodeStartChar": 2254,
    "before": "Mockito.when(executionInfo.getStatement()).thenReturn((Statement)statement)",
    "after": "Mockito.when(executionInfo.getStatement()).thenAnswer(invocation -\u003e statement)"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\nindex 59061e6..a2b01aa 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\n@@ -55,7 +55,7 @@\n   public void setup() {\n     MockitoAnnotations.initMocks(this);\n \n-    Mockito.when(executionInfo.getStatement()).thenReturn((Statement) statement);\n+    Mockito.when(executionInfo.getStatement()).thenAnswer(invocation -\u003e statement);\n     Mockito.when(context.getCodecRegistry()).thenReturn(CodecRegistry.DEFAULT);\n     Mockito.when(context.getProtocolVersion()).thenReturn(DefaultProtocolVersion.DEFAULT);\n   }\n@@ -85,14 +85,15 @@\n     Mockito.when(((Statement) statement).copy(mockPagingState)).thenReturn(mockNextStatement);\n \n     CompletableFuture\u003cAsyncResultSet\u003e mockResultFuture \u003d new CompletableFuture\u003c\u003e();\n-    Mockito.when(session.executeAsync(Mockito.any(Statement.class))).thenReturn(mockResultFuture);\n+    Mockito.when(session.executeAsync(Mockito.any(Statement.class)))\n+        .thenAnswer(invocation -\u003e mockResultFuture);\n \n     // When\n     DefaultAsyncResultSet resultSet \u003d\n         new DefaultAsyncResultSet(\n             columnDefinitions, executionInfo, new ArrayDeque\u003c\u003e(), session, context);\n     assertThat(resultSet.hasMorePages()).isTrue();\n-    CompletionStage\u003cAsyncResultSet\u003e nextPageFuture \u003d resultSet.fetchNextPage();\n+    CompletionStage\u003c? extends AsyncResultSet\u003e nextPageFuture \u003d resultSet.fetchNextPage();\n \n     // Then\n     Mockito.verify(statement).copy(mockPagingState);\n",
    "projectName": "java-driver",
    "lineNum": 88,
    "nodeStartChar": 3433,
    "before": "Mockito.when(session.executeAsync(Mockito.any(Statement.class))).thenReturn(mockResultFuture)",
    "after": "Mockito.when(session.executeAsync(Mockito.any(Statement.class))).thenAnswer(invocation -\u003e mockResultFuture)"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\nindex 59061e6..a2b01aa 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSetTest.java\n@@ -55,7 +55,7 @@\n   public void setup() {\n     MockitoAnnotations.initMocks(this);\n \n-    Mockito.when(executionInfo.getStatement()).thenReturn((Statement) statement);\n+    Mockito.when(executionInfo.getStatement()).thenAnswer(invocation -\u003e statement);\n     Mockito.when(context.getCodecRegistry()).thenReturn(CodecRegistry.DEFAULT);\n     Mockito.when(context.getProtocolVersion()).thenReturn(DefaultProtocolVersion.DEFAULT);\n   }\n@@ -85,14 +85,15 @@\n     Mockito.when(((Statement) statement).copy(mockPagingState)).thenReturn(mockNextStatement);\n \n     CompletableFuture\u003cAsyncResultSet\u003e mockResultFuture \u003d new CompletableFuture\u003c\u003e();\n-    Mockito.when(session.executeAsync(Mockito.any(Statement.class))).thenReturn(mockResultFuture);\n+    Mockito.when(session.executeAsync(Mockito.any(Statement.class)))\n+        .thenAnswer(invocation -\u003e mockResultFuture);\n \n     // When\n     DefaultAsyncResultSet resultSet \u003d\n         new DefaultAsyncResultSet(\n             columnDefinitions, executionInfo, new ArrayDeque\u003c\u003e(), session, context);\n     assertThat(resultSet.hasMorePages()).isTrue();\n-    CompletionStage\u003cAsyncResultSet\u003e nextPageFuture \u003d resultSet.fetchNextPage();\n+    CompletionStage\u003c? extends AsyncResultSet\u003e nextPageFuture \u003d resultSet.fetchNextPage();\n \n     // Then\n     Mockito.verify(statement).copy(mockPagingState);\n",
    "projectName": "java-driver",
    "lineNum": 95,
    "nodeStartChar": 3770,
    "before": "AsyncResultSet",
    "after": "? extends AsyncResultSet"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\nindex 213ac26..0008c32 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n@@ -116,7 +116,8 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -167,7 +168,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e eventRows1 \u003d multiPageEventRows1();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows2 \u003d multiPageEventRows2();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows1, eventRows2);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows1)\n+        .thenAnswer(invocation -\u003e eventRows2);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -192,7 +195,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -259,7 +264,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d incompleteSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow3 \u003d incompleteSessionRow();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, sessionRow3);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e sessionRow3);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n",
    "projectName": "java-driver",
    "lineNum": 118,
    "nodeStartChar": 5127,
    "before": "Mockito",
    "after": "Mockito.when(session.executeAsync(any(SimpleStatement.class)))"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\nindex 213ac26..0008c32 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n@@ -116,7 +116,8 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -167,7 +168,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e eventRows1 \u003d multiPageEventRows1();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows2 \u003d multiPageEventRows2();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows1, eventRows2);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows1)\n+        .thenAnswer(invocation -\u003e eventRows2);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -192,7 +195,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -259,7 +264,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d incompleteSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow3 \u003d incompleteSessionRow();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, sessionRow3);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e sessionRow3);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n",
    "projectName": "java-driver",
    "lineNum": 169,
    "nodeStartChar": 7430,
    "before": "Mockito",
    "after": "Mockito.when(session.executeAsync(any(SimpleStatement.class))).thenAnswer(invocation -\u003e sessionRow)"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\nindex 213ac26..0008c32 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n@@ -116,7 +116,8 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -167,7 +168,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e eventRows1 \u003d multiPageEventRows1();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows2 \u003d multiPageEventRows2();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows1, eventRows2);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows1)\n+        .thenAnswer(invocation -\u003e eventRows2);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -192,7 +195,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -259,7 +264,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d incompleteSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow3 \u003d incompleteSessionRow();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, sessionRow3);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e sessionRow3);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n",
    "projectName": "java-driver",
    "lineNum": 194,
    "nodeStartChar": 8537,
    "before": "Mockito",
    "after": "Mockito.when(session.executeAsync(any(SimpleStatement.class))).thenAnswer(invocation -\u003e sessionRow1)"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\nindex 213ac26..0008c32 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/cql/QueryTraceFetcherTest.java\n@@ -116,7 +116,8 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -167,7 +168,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e eventRows1 \u003d multiPageEventRows1();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows2 \u003d multiPageEventRows2();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow, eventRows1, eventRows2);\n+        .thenAnswer(invocation -\u003e sessionRow)\n+        .thenAnswer(invocation -\u003e eventRows1)\n+        .thenAnswer(invocation -\u003e eventRows2);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -192,7 +195,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d completeSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e eventRows \u003d singlePageEventRows();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, eventRows);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e eventRows);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n@@ -259,7 +264,9 @@\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow2 \u003d incompleteSessionRow();\n     CompletionStage\u003cAsyncResultSet\u003e sessionRow3 \u003d incompleteSessionRow();\n     Mockito.when(session.executeAsync(any(SimpleStatement.class)))\n-        .thenReturn(sessionRow1, sessionRow2, sessionRow3);\n+        .thenAnswer(invocation -\u003e sessionRow1)\n+        .thenAnswer(invocation -\u003e sessionRow2)\n+        .thenAnswer(invocation -\u003e sessionRow3);\n \n     // When\n     QueryTraceFetcher fetcher \u003d new QueryTraceFetcher(TRACING_ID, session, context, config);\n",
    "projectName": "java-driver",
    "lineNum": 261,
    "nodeStartChar": 11474,
    "before": "Mockito",
    "after": "Mockito.when(session.executeAsync(any(SimpleStatement.class))).thenAnswer(invocation -\u003e sessionRow1)"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/connection/FrameLengthIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/connection/FrameLengthIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/connection/FrameLengthIT.java\nindex af887bd..68af035 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/connection/FrameLengthIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/connection/FrameLengthIT.java\n@@ -92,7 +92,7 @@\n \n   @Test\n   public void should_fail_if_response_exceeds_max_frame_length() {\n-    CompletionStage\u003cAsyncResultSet\u003e slowResultFuture \u003d\n+    CompletionStage\u003c? extends AsyncResultSet\u003e slowResultFuture \u003d\n         sessionRule.session().executeAsync(SLOW_QUERY);\n     try {\n       sessionRule.session().execute(LARGE_QUERY);\n",
    "projectName": "java-driver",
    "lineNum": 95,
    "nodeStartChar": 4099,
    "before": "AsyncResultSet",
    "after": "? extends AsyncResultSet"
  },
  {
    "commitSHA1": "eb4dcda235ecbf92714535a2a6e854535489e0c5",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/AsyncResultSetIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/AsyncResultSetIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/AsyncResultSetIT.java\nindex fb76d1d..cc8d54c 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/AsyncResultSetIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/AsyncResultSetIT.java\n@@ -85,7 +85,7 @@\n   public void should_only_iterate_over_rows_in_current_page() throws Exception {\n     // very basic test that just ensures that iterating over an AsyncResultSet only visits the first\n     // page.\n-    CompletionStage\u003cAsyncResultSet\u003e result \u003d\n+    CompletionStage\u003c? extends AsyncResultSet\u003e result \u003d\n         sessionRule\n             .session()\n             .executeAsync(\n",
    "projectName": "java-driver",
    "lineNum": 88,
    "nodeStartChar": 3452,
    "before": "AsyncResultSet",
    "after": "? extends AsyncResultSet"
  },
  {
    "commitSHA1": "7382540be7ca838d394a98f6c6fa0416db64a41c",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java\nindex 832e9ff..0b5eb57 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java\n@@ -70,7 +70,7 @@\n       Map\u003cString, ByteBuffer\u003e customPayload,\n       ResponseCallback responseCallback) {\n     if (closing.get()) {\n-      throw new IllegalStateException(\"Driver channel is closing\");\n+      return channel.newFailedFuture(new IllegalStateException(\"Driver channel is closing\"));\n     }\n     RequestMessage message \u003d new RequestMessage(request, tracing, customPayload, responseCallback);\n     return writeCoalescer.writeAndFlush(channel, message);\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java\nindex 832e9ff..0b5eb57 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/DriverChannel.java\n@@ -70,7 +70,7 @@\n       Map\u003cString, ByteBuffer\u003e customPayload,\n       ResponseCallback responseCallback) {\n     if (closing.get()) {\n-      throw new IllegalStateException(\"Driver channel is closing\");\n+      return channel.newFailedFuture(new IllegalStateException(\"Driver channel is closing\"));\n     }\n     RequestMessage message \u003d new RequestMessage(request, tracing, customPayload, responseCallback);\n     return writeCoalescer.writeAndFlush(channel, message);\n",
    "projectName": "java-driver",
    "lineNum": 73,
    "nodeStartChar": 2855,
    "before": "throw new IllegalStateException(\"Driver channel is closing\"); ",
    "after": "return channel.newFailedFuture(new IllegalStateException(\"Driver channel is closing\")); "
  },
  {
    "commitSHA1": "2b9d189f3a0129dfe4436135ae4f150cc3e28027",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java b/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java\nindex 5a52c58..5b286ef 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java\n@@ -33,8 +33,8 @@\n         String.join(\n             \"\\n\",\n             customConfig,\n-            \"netty.io-group.shutdown.quiet-period \u003d 0\",\n-            \"netty.admin-group.shutdown.quiet-period \u003d 0\");\n+            \"advanced.netty.io-group.shutdown.quiet-period \u003d 0\",\n+            \"advanced.netty.admin-group.shutdown.quiet-period \u003d 0\");\n     return ConfigFactory.parseString(additionalCustomConfig).withFallback(getConfig());\n   }\n \ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java b/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java\nindex 5a52c58..5b286ef 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/internal/testinfra/session/TestConfigLoader.java\n@@ -33,8 +33,8 @@\n         String.join(\n             \"\\n\",\n             customConfig,\n-            \"netty.io-group.shutdown.quiet-period \u003d 0\",\n-            \"netty.admin-group.shutdown.quiet-period \u003d 0\");\n+            \"advanced.netty.io-group.shutdown.quiet-period \u003d 0\",\n+            \"advanced.netty.admin-group.shutdown.quiet-period \u003d 0\");\n     return ConfigFactory.parseString(additionalCustomConfig).withFallback(getConfig());\n   }\n \n",
    "projectName": "java-driver",
    "lineNum": 33,
    "nodeStartChar": 1296,
    "before": "String.join(\"\\n\",customConfig,\"netty.io-group.shutdown.quiet-period \u003d 0\",\"netty.admin-group.shutdown.quiet-period \u003d 0\")",
    "after": "String.join(\"\\n\",customConfig,\"advanced.netty.io-group.shutdown.quiet-period \u003d 0\",\"advanced.netty.admin-group.shutdown.quiet-period \u003d 0\")"
  },
  {
    "commitSHA1": "b92b80bca81c0c302795f9d7686d91d892ad3b43",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\nindex 3f97bb9..771c220 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n@@ -96,7 +96,7 @@\n \n   @Override\n   public boolean isDetached() {\n-    return attachmentPoint !\u003d AttachmentPoint.NONE;\n+    return attachmentPoint \u003d\u003d AttachmentPoint.NONE;\n   }\n \n   @Override\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\nindex 3f97bb9..771c220 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n@@ -96,7 +96,7 @@\n \n   @Override\n   public boolean isDetached() {\n-    return attachmentPoint !\u003d AttachmentPoint.NONE;\n+    return attachmentPoint \u003d\u003d AttachmentPoint.NONE;\n   }\n \n   @Override\n",
    "projectName": "java-driver",
    "lineNum": 99,
    "nodeStartChar": 2852,
    "before": "attachmentPoint !\u003d AttachmentPoint.NONE",
    "after": "attachmentPoint \u003d\u003d AttachmentPoint.NONE"
  },
  {
    "commitSHA1": "e0bb2259810672258381865447df282a8a02c3f0",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\nindex 4e15cb1..2bbf3f8 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n@@ -247,7 +247,7 @@\n     // given a statement with a missing named value (:k)\n     SimpleStatement insert \u003d\n         SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-            .addNamedValue(\":v\", 0)\n+            .addNamedValue(\"v\", 0)\n             .build();\n \n     // when executing that statement\n@@ -259,7 +259,7 @@\n   @Test(expected \u003d IllegalArgumentException.class)\n   public void should_fail_when_mixing_named_and_positional_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .addPositionalValue(0)\n         .build();\n   }\n@@ -268,7 +268,7 @@\n   public void should_fail_when_mixing_positional_and_named_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n         .addPositionalValue(0)\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .build();\n   }\n \ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\nindex 4e15cb1..2bbf3f8 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n@@ -247,7 +247,7 @@\n     // given a statement with a missing named value (:k)\n     SimpleStatement insert \u003d\n         SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-            .addNamedValue(\":v\", 0)\n+            .addNamedValue(\"v\", 0)\n             .build();\n \n     // when executing that statement\n@@ -259,7 +259,7 @@\n   @Test(expected \u003d IllegalArgumentException.class)\n   public void should_fail_when_mixing_named_and_positional_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .addPositionalValue(0)\n         .build();\n   }\n@@ -268,7 +268,7 @@\n   public void should_fail_when_mixing_positional_and_named_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n         .addPositionalValue(0)\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .build();\n   }\n \n",
    "projectName": "java-driver",
    "lineNum": 250,
    "nodeStartChar": 9191,
    "before": "\":v\"",
    "after": "\"v\""
  },
  {
    "commitSHA1": "e0bb2259810672258381865447df282a8a02c3f0",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\nindex 4e15cb1..2bbf3f8 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n@@ -247,7 +247,7 @@\n     // given a statement with a missing named value (:k)\n     SimpleStatement insert \u003d\n         SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-            .addNamedValue(\":v\", 0)\n+            .addNamedValue(\"v\", 0)\n             .build();\n \n     // when executing that statement\n@@ -259,7 +259,7 @@\n   @Test(expected \u003d IllegalArgumentException.class)\n   public void should_fail_when_mixing_named_and_positional_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .addPositionalValue(0)\n         .build();\n   }\n@@ -268,7 +268,7 @@\n   public void should_fail_when_mixing_positional_and_named_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n         .addPositionalValue(0)\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .build();\n   }\n \ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\nindex 4e15cb1..2bbf3f8 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n@@ -247,7 +247,7 @@\n     // given a statement with a missing named value (:k)\n     SimpleStatement insert \u003d\n         SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-            .addNamedValue(\":v\", 0)\n+            .addNamedValue(\"v\", 0)\n             .build();\n \n     // when executing that statement\n@@ -259,7 +259,7 @@\n   @Test(expected \u003d IllegalArgumentException.class)\n   public void should_fail_when_mixing_named_and_positional_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .addPositionalValue(0)\n         .build();\n   }\n@@ -268,7 +268,7 @@\n   public void should_fail_when_mixing_positional_and_named_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n         .addPositionalValue(0)\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .build();\n   }\n \n",
    "projectName": "java-driver",
    "lineNum": 262,
    "nodeStartChar": 9616,
    "before": "\":k\"",
    "after": "\"k\""
  },
  {
    "commitSHA1": "e0bb2259810672258381865447df282a8a02c3f0",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\nindex 4e15cb1..2bbf3f8 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n@@ -247,7 +247,7 @@\n     // given a statement with a missing named value (:k)\n     SimpleStatement insert \u003d\n         SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-            .addNamedValue(\":v\", 0)\n+            .addNamedValue(\"v\", 0)\n             .build();\n \n     // when executing that statement\n@@ -259,7 +259,7 @@\n   @Test(expected \u003d IllegalArgumentException.class)\n   public void should_fail_when_mixing_named_and_positional_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .addPositionalValue(0)\n         .build();\n   }\n@@ -268,7 +268,7 @@\n   public void should_fail_when_mixing_positional_and_named_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n         .addPositionalValue(0)\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .build();\n   }\n \ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\nindex 4e15cb1..2bbf3f8 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/SimpleStatementIT.java\n@@ -247,7 +247,7 @@\n     // given a statement with a missing named value (:k)\n     SimpleStatement insert \u003d\n         SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-            .addNamedValue(\":v\", 0)\n+            .addNamedValue(\"v\", 0)\n             .build();\n \n     // when executing that statement\n@@ -259,7 +259,7 @@\n   @Test(expected \u003d IllegalArgumentException.class)\n   public void should_fail_when_mixing_named_and_positional_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .addPositionalValue(0)\n         .build();\n   }\n@@ -268,7 +268,7 @@\n   public void should_fail_when_mixing_positional_and_named_values() {\n     SimpleStatement.builder(\"SELECT * from test where k \u003d :k and v \u003d :v\")\n         .addPositionalValue(0)\n-        .addNamedValue(\":k\", KEY)\n+        .addNamedValue(\"k\", KEY)\n         .build();\n   }\n \n",
    "projectName": "java-driver",
    "lineNum": 271,
    "nodeStartChar": 9930,
    "before": "\":k\"",
    "after": "\"k\""
  },
  {
    "commitSHA1": "8a6b736a9f295aa5888e07b59965ccdaff86e76b",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\nindex e360648..30b4d5c 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n \n-interface ReplicationStrategy {\n+public interface ReplicationStrategy {\n   SetMultimap\u003cToken, Node\u003e computeReplicasByToken(\n       Map\u003cToken, Node\u003e tokenToPrimary, List\u003cToken\u003e ring);\n }\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\nindex e360648..30b4d5c 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n \n-interface ReplicationStrategy {\n+public interface ReplicationStrategy {\n   SetMultimap\u003cToken, Node\u003e computeReplicasByToken(\n       Map\u003cToken, Node\u003e tokenToPrimary, List\u003cToken\u003e ring);\n }\n",
    "projectName": "java-driver",
    "lineNum": 25,
    "nodeStartChar": 906,
    "before": "interface ReplicationStrategy {   SetMultimap\u003cToken,Node\u003e computeReplicasByToken(  Map\u003cToken,Node\u003e tokenToPrimary,  List\u003cToken\u003e ring); } ",
    "after": "public interface ReplicationStrategy {   SetMultimap\u003cToken,Node\u003e computeReplicasByToken(  Map\u003cToken,Node\u003e tokenToPrimary,  List\u003cToken\u003e ring); } "
  },
  {
    "commitSHA1": "54bca91de43f73c0a45ef6db31b7546e9c01eda7",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\nindex 4ca89b9..04fd8d0 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n@@ -61,11 +61,11 @@\n             .withConfigLoader(loader)\n             .addContactPoints(simulacron.getContactPoints())\n             .build()) {\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(2, TimeUnit.SECONDS));\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n \n       CqlSession session \u003d configCluster.connect();\n \n-      // Expect timeout since default timeout is .5 s\n+      // Expect timeout since default timeout is 2s\n       try {\n         session.execute(query);\n         fail(\"DriverTimeoutException expected\");\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\nindex 4ca89b9..04fd8d0 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n@@ -61,11 +61,11 @@\n             .withConfigLoader(loader)\n             .addContactPoints(simulacron.getContactPoints())\n             .build()) {\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(2, TimeUnit.SECONDS));\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n \n       CqlSession session \u003d configCluster.connect();\n \n-      // Expect timeout since default timeout is .5 s\n+      // Expect timeout since default timeout is 2s\n       try {\n         session.execute(query);\n         fail(\"DriverTimeoutException expected\");\n",
    "projectName": "java-driver",
    "lineNum": 64,
    "nodeStartChar": 2999,
    "before": "2",
    "after": "4"
  },
  {
    "commitSHA1": "6319d727f99589ecb300002c6524b1a73c8418d2",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\nindex 215a4f6..4e30592 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n@@ -78,11 +78,11 @@\n     try (Cluster\u003cCqlSession\u003e profileCluster \u003d\n         ClusterUtils.newCluster(simulacron, \"profiles.olap.request.timeout \u003d 10s\")) {\n       String query \u003d \"mockquery\";\n-      // configure query with delay of 2 seconds.\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(1, TimeUnit.SECONDS));\n+      // configure query with delay of 4 seconds.\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n       CqlSession session \u003d profileCluster.connect();\n \n-      // Execute query without profile, should timeout with default (0.5s).\n+      // Execute query without profile, should timeout with default (2s).\n       try {\n         session.execute(query);\n         fail(\"Should have timed out\");\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\nindex 215a4f6..4e30592 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n@@ -78,11 +78,11 @@\n     try (Cluster\u003cCqlSession\u003e profileCluster \u003d\n         ClusterUtils.newCluster(simulacron, \"profiles.olap.request.timeout \u003d 10s\")) {\n       String query \u003d \"mockquery\";\n-      // configure query with delay of 2 seconds.\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(1, TimeUnit.SECONDS));\n+      // configure query with delay of 4 seconds.\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n       CqlSession session \u003d profileCluster.connect();\n \n-      // Execute query without profile, should timeout with default (0.5s).\n+      // Execute query without profile, should timeout with default (2s).\n       try {\n         session.execute(query);\n         fail(\"Should have timed out\");\n",
    "projectName": "java-driver",
    "lineNum": 82,
    "nodeStartChar": 3550,
    "before": "1",
    "after": "4"
  },
  {
    "commitSHA1": "f47f891bfe361c071df0d2a677be90e715f1a181",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/servererrors/WriteTimeoutException.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/servererrors/WriteTimeoutException.java b/core/src/main/java/com/datastax/oss/driver/api/core/servererrors/WriteTimeoutException.java\nindex 2e8a961..1a837d0 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/servererrors/WriteTimeoutException.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/servererrors/WriteTimeoutException.java\n@@ -44,8 +44,9 @@\n     this(\n         coordinator,\n         String.format(\n-            \"Cassandra timeout during write query at consistency %s (%d replica were required but only %d acknowledged the write)\",\n-            consistencyLevel, blockFor, received),\n+            \"Cassandra timeout during %s write query at consistency %s \"\n+                + \"(%d replica were required but only %d acknowledged the write)\",\n+            writeType, consistencyLevel, blockFor, received),\n         consistencyLevel,\n         received,\n         blockFor,\n",
    "projectName": "java-driver",
    "lineNum": 46,
    "nodeStartChar": 1782,
    "before": "String.format(\"Cassandra timeout during write query at consistency %s (%d replica were required but only %d acknowledged the write)\",consistencyLevel,blockFor,received)",
    "after": "String.format(\"Cassandra timeout during %s write query at consistency %s \" + \"(%d replica were required but only %d acknowledged the write)\",writeType,consistencyLevel,blockFor,received)"
  },
  {
    "commitSHA1": "edbcf78ae4885ab528b00b1411f211f5b7ecc386",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java\nindex 13c036f..945d9d8 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java\n@@ -229,8 +229,7 @@\n                     connectFuture.complete(session);\n                   }\n                 },\n-                adminExecutor)\n-            .exceptionally(UncaughtExceptions::log);\n+                adminExecutor);\n       }\n     }\n \ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java\nindex 13c036f..945d9d8 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultCluster.java\n@@ -229,8 +229,7 @@\n                     connectFuture.complete(session);\n                   }\n                 },\n-                adminExecutor)\n-            .exceptionally(UncaughtExceptions::log);\n+                adminExecutor);\n       }\n     }\n \n",
    "projectName": "java-driver",
    "lineNum": 217,
    "nodeStartChar": 8715,
    "before": "DefaultSession.init(context,keyspace,sessionLogPrefix)",
    "after": "DefaultSession"
  },
  {
    "commitSHA1": "ce045eb13036bfbc6adc89c46ea5eadb99ecb81f",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java\nindex 867505b..cc65ac1 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java\n@@ -143,7 +143,7 @@\n             .addTypeCodecs(new FloatCIntCodec())\n             .addContactPoints(ccm.getContactPoints())\n             .build()) {\n-      Session session \u003d codecCluster.connect(CqlIdentifier.fromCql(cluster.keyspace()));\n+      Session session \u003d codecCluster.connect(cluster.keyspace());\n \n       PreparedStatement prepared \u003d session.prepare(\"INSERT INTO test (k, v) values (?, ?)\");\n \ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java\nindex 867505b..cc65ac1 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/type/codec/registry/CodecRegistryIT.java\n@@ -143,7 +143,7 @@\n             .addTypeCodecs(new FloatCIntCodec())\n             .addContactPoints(ccm.getContactPoints())\n             .build()) {\n-      Session session \u003d codecCluster.connect(CqlIdentifier.fromCql(cluster.keyspace()));\n+      Session session \u003d codecCluster.connect(cluster.keyspace());\n \n       PreparedStatement prepared \u003d session.prepare(\"INSERT INTO test (k, v) values (?, ?)\");\n \n",
    "projectName": "java-driver",
    "lineNum": 146,
    "nodeStartChar": 5244,
    "before": "CqlIdentifier.fromCql(cluster.keyspace())",
    "after": "cluster.keyspace()"
  },
  {
    "commitSHA1": "33e9952d71622bf34d43303fcbac94236d6b8e10",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\nindex 000c33e..952f4ba 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n@@ -101,7 +101,7 @@\n                   + \"to have an accessible constructor with arguments (%s, %s)\",\n               className,\n               configPath,\n-              DriverConfigProfile.class.getSimpleName(),\n+              DriverContext.class.getSimpleName(),\n               DriverOption.class.getSimpleName()));\n     }\n     try {\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\nindex 000c33e..952f4ba 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n@@ -101,7 +101,7 @@\n                   + \"to have an accessible constructor with arguments (%s, %s)\",\n               className,\n               configPath,\n-              DriverConfigProfile.class.getSimpleName(),\n+              DriverContext.class.getSimpleName(),\n               DriverOption.class.getSimpleName()));\n     }\n     try {\n",
    "projectName": "java-driver",
    "lineNum": 104,
    "nodeStartChar": 4212,
    "before": "DriverConfigProfile",
    "after": "DriverContext"
  },
  {
    "commitSHA1": "fdc7e29a6214c7341bc3dde451b5a8cca4da4fe6",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\nindex 7d2613a..000c33e 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n@@ -98,8 +98,11 @@\n       throw new IllegalArgumentException(\n           String.format(\n               \"Expected class %s (specified by %s) \"\n-                  + \"to have an accessible constructor with a single %s argument\",\n-              className, configPath, DriverConfigProfile.class.getSimpleName()));\n+                  + \"to have an accessible constructor with arguments (%s, %s)\",\n+              className,\n+              configPath,\n+              DriverConfigProfile.class.getSimpleName(),\n+              DriverOption.class.getSimpleName()));\n     }\n     try {\n       Object instance \u003d constructor.newInstance(context, rootOption);\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\nindex 7d2613a..000c33e 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n@@ -98,8 +98,11 @@\n       throw new IllegalArgumentException(\n           String.format(\n               \"Expected class %s (specified by %s) \"\n-                  + \"to have an accessible constructor with a single %s argument\",\n-              className, configPath, DriverConfigProfile.class.getSimpleName()));\n+                  + \"to have an accessible constructor with arguments (%s, %s)\",\n+              className,\n+              configPath,\n+              DriverConfigProfile.class.getSimpleName(),\n+              DriverOption.class.getSimpleName()));\n     }\n     try {\n       Object instance \u003d constructor.newInstance(context, rootOption);\n",
    "projectName": "java-driver",
    "lineNum": 99,
    "nodeStartChar": 3998,
    "before": "String.format(\"Expected class %s (specified by %s) \" + \"to have an accessible constructor with a single %s argument\",className,configPath,DriverConfigProfile.class.getSimpleName())",
    "after": "String.format(\"Expected class %s (specified by %s) \" + \"to have an accessible constructor with arguments (%s, %s)\",className,configPath,DriverConfigProfile.class.getSimpleName(),DriverOption.class.getSimpleName())"
  },
  {
    "commitSHA1": "f75366b18c2eb7ceab5f21df8c93765cf2228b2d",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\nindex 940bdd1..69da6ca 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n@@ -54,8 +54,8 @@\n   SPECULATIVE_EXECUTION_POLICY_ROOT(\"speculative-execution-policy\", true),\n \n   RECONNECTION_POLICY_ROOT(\"connection.reconnection-policy\", true),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"connection.reconnection.config.base-delay\", false),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"connection.reconnection.config.max-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"base-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"max-delay\", false),\n \n   PREPARE_ON_ALL_NODES(\"prepared-statements.prepare-on-all-nodes\", true),\n   REPREPARE_ENABLED(\"prepared-statements.reprepare-on-up.enabled\", true),\n@@ -74,7 +74,7 @@\n   RELATIVE_PLAIN_TEXT_AUTH_PASSWORD(\"password\", false),\n \n   SSL_ENGINE_FACTORY_ROOT(\"ssl-engine-factory\", false),\n-  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"ssl.config.cipher-suites\", false),\n+  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"cipher-suites\", false),\n \n   METADATA_TOPOLOGY_WINDOW(\"metadata.topology-event-debouncer.window\", true),\n   METADATA_TOPOLOGY_MAX_EVENTS(\"metadata.topology-event-debouncer.max-events\", true),\ndiff --git a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\nindex 940bdd1..69da6ca 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n@@ -54,8 +54,8 @@\n   SPECULATIVE_EXECUTION_POLICY_ROOT(\"speculative-execution-policy\", true),\n \n   RECONNECTION_POLICY_ROOT(\"connection.reconnection-policy\", true),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"connection.reconnection.config.base-delay\", false),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"connection.reconnection.config.max-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"base-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"max-delay\", false),\n \n   PREPARE_ON_ALL_NODES(\"prepared-statements.prepare-on-all-nodes\", true),\n   REPREPARE_ENABLED(\"prepared-statements.reprepare-on-up.enabled\", true),\n@@ -74,7 +74,7 @@\n   RELATIVE_PLAIN_TEXT_AUTH_PASSWORD(\"password\", false),\n \n   SSL_ENGINE_FACTORY_ROOT(\"ssl-engine-factory\", false),\n-  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"ssl.config.cipher-suites\", false),\n+  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"cipher-suites\", false),\n \n   METADATA_TOPOLOGY_WINDOW(\"metadata.topology-event-debouncer.window\", true),\n   METADATA_TOPOLOGY_MAX_EVENTS(\"metadata.topology-event-debouncer.max-events\", true),\n",
    "projectName": "java-driver",
    "lineNum": 18,
    "nodeStartChar": 652,
    "before": "/**   * Built-in driver options for the core driver. \u003cp\u003eRefer to  {@code reference.conf} in the driver codebase for a full description of each option.  */ public enum CoreDriverOption implements DriverOption {CONTACT_POINTS(\"contact-points\",false), PROTOCOL_VERSION(\"protocol.version\",false), CLUSTER_NAME(\"cluster-name\",false), CONFIG_RELOAD_INTERVAL(\"config-reload-interval\",true), CONNECTION_INIT_QUERY_TIMEOUT(\"connection.init-query-timeout\",true), CONNECTION_SET_KEYSPACE_TIMEOUT(\"connection.set-keyspace-timeout\",true), CONNECTION_MAX_FRAME_LENGTH(\"connection.max-frame-length\",true), CONNECTION_MAX_REQUESTS(\"connection.max-requests-per-connection\",true), CONNECTION_HEARTBEAT_INTERVAL(\"connection.heartbeat.interval\",true), CONNECTION_HEARTBEAT_TIMEOUT(\"connection.heartbeat.timeout\",true), CONNECTION_MAX_ORPHAN_REQUESTS(\"connection.max-orphan-requests\",true), REQUEST_TIMEOUT(\"request.timeout\",true), REQUEST_CONSISTENCY(\"request.consistency\",true), REQUEST_PAGE_SIZE(\"request.page-size\",true), REQUEST_SERIAL_CONSISTENCY(\"request.serial-consistency\",true), REQUEST_WARN_IF_SET_KEYSPACE(\"request.warn-if-set-keyspace\",true), REQUEST_DEFAULT_IDEMPOTENCE(\"request.default-idempotence\",true), CONTROL_CONNECTION_TIMEOUT(\"connection.control-connection.timeout\",true), CONTROL_CONNECTION_PAGE_SIZE(\"connection.control-connection.page-size\",true), RELATIVE_POLICY_CLASS(\"class\",false), RETRY_POLICY_ROOT(\"retry-policy\",true), LOAD_BALANCING_POLICY_ROOT(\"load-balancing-policy\",true), SPECULATIVE_EXECUTION_POLICY_ROOT(\"speculative-execution-policy\",true), RECONNECTION_POLICY_ROOT(\"connection.reconnection-policy\",true), RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"connection.reconnection.config.base-delay\",false), RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"connection.reconnection.config.max-delay\",false), PREPARE_ON_ALL_NODES(\"prepared-statements.prepare-on-all-nodes\",true), REPREPARE_ENABLED(\"prepared-statements.reprepare-on-up.enabled\",true), REPREPARE_CHECK_SYSTEM_TABLE(\"prepared-statements.reprepare-on-up.check-system-table\",false), REPREPARE_MAX_STATEMENTS(\"prepared-statements.reprepare-on-up.max-statements\",false), REPREPARE_MAX_PARALLELISM(\"prepared-statements.reprepare-on-up.max-parallelism\",false), REPREPARE_TIMEOUT(\"prepared-statements.reprepare-on-up.timeout\",false), POOLING_LOCAL_CONNECTIONS(\"pooling.local.connections\",true), POOLING_REMOTE_CONNECTIONS(\"pooling.remote.connections\",true), ADDRESS_TRANSLATOR_ROOT(\"address-translator\",true), AUTH_PROVIDER_ROOT(\"auth-provider\",false), RELATIVE_PLAIN_TEXT_AUTH_USERNAME(\"username\",false), RELATIVE_PLAIN_TEXT_AUTH_PASSWORD(\"password\",false), SSL_ENGINE_FACTORY_ROOT(\"ssl-engine-factory\",false), RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"ssl.config.cipher-suites\",false), METADATA_TOPOLOGY_WINDOW(\"metadata.topology-event-debouncer.window\",true), METADATA_TOPOLOGY_MAX_EVENTS(\"metadata.topology-event-debouncer.max-events\",true); private final String path; private final boolean required; CoreDriverOption(String path,boolean required){   this.path\u003dpath;   this.required\u003drequired; } @Override public String getPath(){   return path; } @Override public boolean required(){   return required; } } ",
    "after": "/**   * Built-in driver options for the core driver. \u003cp\u003eRefer to  {@code reference.conf} in the driver codebase for a full description of each option.  */ public enum CoreDriverOption implements DriverOption {CONTACT_POINTS(\"contact-points\",false), PROTOCOL_VERSION(\"protocol.version\",false), CLUSTER_NAME(\"cluster-name\",false), CONFIG_RELOAD_INTERVAL(\"config-reload-interval\",true), CONNECTION_INIT_QUERY_TIMEOUT(\"connection.init-query-timeout\",true), CONNECTION_SET_KEYSPACE_TIMEOUT(\"connection.set-keyspace-timeout\",true), CONNECTION_MAX_FRAME_LENGTH(\"connection.max-frame-length\",true), CONNECTION_MAX_REQUESTS(\"connection.max-requests-per-connection\",true), CONNECTION_HEARTBEAT_INTERVAL(\"connection.heartbeat.interval\",true), CONNECTION_HEARTBEAT_TIMEOUT(\"connection.heartbeat.timeout\",true), CONNECTION_MAX_ORPHAN_REQUESTS(\"connection.max-orphan-requests\",true), REQUEST_TIMEOUT(\"request.timeout\",true), REQUEST_CONSISTENCY(\"request.consistency\",true), REQUEST_PAGE_SIZE(\"request.page-size\",true), REQUEST_SERIAL_CONSISTENCY(\"request.serial-consistency\",true), REQUEST_WARN_IF_SET_KEYSPACE(\"request.warn-if-set-keyspace\",true), REQUEST_DEFAULT_IDEMPOTENCE(\"request.default-idempotence\",true), CONTROL_CONNECTION_TIMEOUT(\"connection.control-connection.timeout\",true), CONTROL_CONNECTION_PAGE_SIZE(\"connection.control-connection.page-size\",true), RELATIVE_POLICY_CLASS(\"class\",false), RETRY_POLICY_ROOT(\"retry-policy\",true), LOAD_BALANCING_POLICY_ROOT(\"load-balancing-policy\",true), SPECULATIVE_EXECUTION_POLICY_ROOT(\"speculative-execution-policy\",true), RECONNECTION_POLICY_ROOT(\"connection.reconnection-policy\",true), RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"base-delay\",false), RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"max-delay\",false), PREPARE_ON_ALL_NODES(\"prepared-statements.prepare-on-all-nodes\",true), REPREPARE_ENABLED(\"prepared-statements.reprepare-on-up.enabled\",true), REPREPARE_CHECK_SYSTEM_TABLE(\"prepared-statements.reprepare-on-up.check-system-table\",false), REPREPARE_MAX_STATEMENTS(\"prepared-statements.reprepare-on-up.max-statements\",false), REPREPARE_MAX_PARALLELISM(\"prepared-statements.reprepare-on-up.max-parallelism\",false), REPREPARE_TIMEOUT(\"prepared-statements.reprepare-on-up.timeout\",false), POOLING_LOCAL_CONNECTIONS(\"pooling.local.connections\",true), POOLING_REMOTE_CONNECTIONS(\"pooling.remote.connections\",true), ADDRESS_TRANSLATOR_ROOT(\"address-translator\",true), AUTH_PROVIDER_ROOT(\"auth-provider\",false), RELATIVE_PLAIN_TEXT_AUTH_USERNAME(\"username\",false), RELATIVE_PLAIN_TEXT_AUTH_PASSWORD(\"password\",false), SSL_ENGINE_FACTORY_ROOT(\"ssl-engine-factory\",false), RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"ssl.config.cipher-suites\",false), METADATA_TOPOLOGY_WINDOW(\"metadata.topology-event-debouncer.window\",true), METADATA_TOPOLOGY_MAX_EVENTS(\"metadata.topology-event-debouncer.max-events\",true); private final String path; private final boolean required; CoreDriverOption(String path,boolean required){   this.path\u003dpath;   this.required\u003drequired; } @Override public String getPath(){   return path; } @Override public boolean required(){   return required; } } "
  },
  {
    "commitSHA1": "f75366b18c2eb7ceab5f21df8c93765cf2228b2d",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\nindex 940bdd1..69da6ca 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n@@ -54,8 +54,8 @@\n   SPECULATIVE_EXECUTION_POLICY_ROOT(\"speculative-execution-policy\", true),\n \n   RECONNECTION_POLICY_ROOT(\"connection.reconnection-policy\", true),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"connection.reconnection.config.base-delay\", false),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"connection.reconnection.config.max-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"base-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"max-delay\", false),\n \n   PREPARE_ON_ALL_NODES(\"prepared-statements.prepare-on-all-nodes\", true),\n   REPREPARE_ENABLED(\"prepared-statements.reprepare-on-up.enabled\", true),\n@@ -74,7 +74,7 @@\n   RELATIVE_PLAIN_TEXT_AUTH_PASSWORD(\"password\", false),\n \n   SSL_ENGINE_FACTORY_ROOT(\"ssl-engine-factory\", false),\n-  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"ssl.config.cipher-suites\", false),\n+  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"cipher-suites\", false),\n \n   METADATA_TOPOLOGY_WINDOW(\"metadata.topology-event-debouncer.window\", true),\n   METADATA_TOPOLOGY_MAX_EVENTS(\"metadata.topology-event-debouncer.max-events\", true),\ndiff --git a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\nindex 940bdd1..69da6ca 100644\n--- a/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n+++ b/core/src/main/java/com/datastax/oss/driver/api/core/config/CoreDriverOption.java\n@@ -54,8 +54,8 @@\n   SPECULATIVE_EXECUTION_POLICY_ROOT(\"speculative-execution-policy\", true),\n \n   RECONNECTION_POLICY_ROOT(\"connection.reconnection-policy\", true),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"connection.reconnection.config.base-delay\", false),\n-  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"connection.reconnection.config.max-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_BASE_DELAY(\"base-delay\", false),\n+  RELATIVE_EXPONENTIAL_RECONNECTION_MAX_DELAY(\"max-delay\", false),\n \n   PREPARE_ON_ALL_NODES(\"prepared-statements.prepare-on-all-nodes\", true),\n   REPREPARE_ENABLED(\"prepared-statements.reprepare-on-up.enabled\", true),\n@@ -74,7 +74,7 @@\n   RELATIVE_PLAIN_TEXT_AUTH_PASSWORD(\"password\", false),\n \n   SSL_ENGINE_FACTORY_ROOT(\"ssl-engine-factory\", false),\n-  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"ssl.config.cipher-suites\", false),\n+  RELATIVE_DEFAULT_SSL_CIPHER_SUITES(\"cipher-suites\", false),\n \n   METADATA_TOPOLOGY_WINDOW(\"metadata.topology-event-debouncer.window\", true),\n   METADATA_TOPOLOGY_MAX_EVENTS(\"metadata.topology-event-debouncer.max-events\", true),\n",
    "projectName": "java-driver",
    "lineNum": 77,
    "nodeStartChar": 3546,
    "before": "\"ssl.config.cipher-suites\"",
    "after": "\"cipher-suites\""
  },
  {
    "commitSHA1": "5887fcadd72db66db1fb6e859c2578ba4e92a715",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java\nindex 98975eb..23e41b3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java\n@@ -98,7 +98,7 @@\n   }\n \n   public CompletionStage\u003cAdminResult\u003e start(Map\u003cString, ByteBuffer\u003e customPayload) {\n-    LOG.debug(\"[{}] Executing {} on {}\", logPrefix, this);\n+    LOG.debug(\"[{}] Executing {}\", logPrefix, this);\n     channel.write(message, false, customPayload, this).addListener(this::onWriteComplete);\n     return result;\n   }\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java\nindex 98975eb..23e41b3 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/adminrequest/AdminRequestHandler.java\n@@ -98,7 +98,7 @@\n   }\n \n   public CompletionStage\u003cAdminResult\u003e start(Map\u003cString, ByteBuffer\u003e customPayload) {\n-    LOG.debug(\"[{}] Executing {} on {}\", logPrefix, this);\n+    LOG.debug(\"[{}] Executing {}\", logPrefix, this);\n     channel.write(message, false, customPayload, this).addListener(this::onWriteComplete);\n     return result;\n   }\n",
    "projectName": "java-driver",
    "lineNum": 101,
    "nodeStartChar": 3938,
    "before": "\"[{}] Executing {} on {}\"",
    "after": "\"[{}] Executing {}\""
  },
  {
    "commitSHA1": "11fb37514e9937ac1cd1439df823e3ec8f21c919",
    "commitFile": "src/test/java/net/lecousin/framework/network/mime/TestTransfer.java",
    "patch": "diff --git a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\nindex 58c7add..d9a5f51 100644\n--- a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n+++ b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n@@ -57,7 +57,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(new ByteArrayIO(data, \"test\"));\r\n@@ -111,7 +111,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(in);\r\n@@ -161,7 +161,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -217,7 +217,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -352,7 +352,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(MimeMessage.CONTENT_ENCODING, encoding);\r\n \t\t\tmime.setBodyToSend(encoded);\r\n@@ -400,7 +400,7 @@\n \tpublic void testSendEmptyBody() throws Exception {\r\n \t\tTCPServer server \u003d new TCPServer();\r\n \t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\tTCPClient client \u003d new TCPClient();\r\n",
    "projectName": "java-framework-network-mime",
    "lineNum": 60,
    "nodeStartChar": 2206,
    "before": "server",
    "after": "server.bind(new InetSocketAddress(\"localhost\",9999),0)"
  },
  {
    "commitSHA1": "11fb37514e9937ac1cd1439df823e3ec8f21c919",
    "commitFile": "src/test/java/net/lecousin/framework/network/mime/TestTransfer.java",
    "patch": "diff --git a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\nindex 58c7add..d9a5f51 100644\n--- a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n+++ b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n@@ -57,7 +57,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(new ByteArrayIO(data, \"test\"));\r\n@@ -111,7 +111,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(in);\r\n@@ -161,7 +161,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -217,7 +217,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -352,7 +352,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(MimeMessage.CONTENT_ENCODING, encoding);\r\n \t\t\tmime.setBodyToSend(encoded);\r\n@@ -400,7 +400,7 @@\n \tpublic void testSendEmptyBody() throws Exception {\r\n \t\tTCPServer server \u003d new TCPServer();\r\n \t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\tTCPClient client \u003d new TCPClient();\r\n",
    "projectName": "java-framework-network-mime",
    "lineNum": 114,
    "nodeStartChar": 4478,
    "before": "server",
    "after": "server.bind(new InetSocketAddress(\"localhost\",9999),0)"
  },
  {
    "commitSHA1": "11fb37514e9937ac1cd1439df823e3ec8f21c919",
    "commitFile": "src/test/java/net/lecousin/framework/network/mime/TestTransfer.java",
    "patch": "diff --git a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\nindex 58c7add..d9a5f51 100644\n--- a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n+++ b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n@@ -57,7 +57,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(new ByteArrayIO(data, \"test\"));\r\n@@ -111,7 +111,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(in);\r\n@@ -161,7 +161,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -217,7 +217,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -352,7 +352,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(MimeMessage.CONTENT_ENCODING, encoding);\r\n \t\t\tmime.setBodyToSend(encoded);\r\n@@ -400,7 +400,7 @@\n \tpublic void testSendEmptyBody() throws Exception {\r\n \t\tTCPServer server \u003d new TCPServer();\r\n \t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\tTCPClient client \u003d new TCPClient();\r\n",
    "projectName": "java-framework-network-mime",
    "lineNum": 164,
    "nodeStartChar": 6460,
    "before": "server",
    "after": "server.bind(new InetSocketAddress(\"localhost\",9999),0)"
  },
  {
    "commitSHA1": "11fb37514e9937ac1cd1439df823e3ec8f21c919",
    "commitFile": "src/test/java/net/lecousin/framework/network/mime/TestTransfer.java",
    "patch": "diff --git a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\nindex 58c7add..d9a5f51 100644\n--- a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n+++ b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n@@ -57,7 +57,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(new ByteArrayIO(data, \"test\"));\r\n@@ -111,7 +111,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(in);\r\n@@ -161,7 +161,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -217,7 +217,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -352,7 +352,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(MimeMessage.CONTENT_ENCODING, encoding);\r\n \t\t\tmime.setBodyToSend(encoded);\r\n@@ -400,7 +400,7 @@\n \tpublic void testSendEmptyBody() throws Exception {\r\n \t\tTCPServer server \u003d new TCPServer();\r\n \t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\tTCPClient client \u003d new TCPClient();\r\n",
    "projectName": "java-framework-network-mime",
    "lineNum": 220,
    "nodeStartChar": 8892,
    "before": "server",
    "after": "server.bind(new InetSocketAddress(\"localhost\",9999),0)"
  },
  {
    "commitSHA1": "11fb37514e9937ac1cd1439df823e3ec8f21c919",
    "commitFile": "src/test/java/net/lecousin/framework/network/mime/TestTransfer.java",
    "patch": "diff --git a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\nindex 58c7add..d9a5f51 100644\n--- a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n+++ b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n@@ -57,7 +57,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(new ByteArrayIO(data, \"test\"));\r\n@@ -111,7 +111,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(in);\r\n@@ -161,7 +161,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -217,7 +217,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -352,7 +352,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(MimeMessage.CONTENT_ENCODING, encoding);\r\n \t\t\tmime.setBodyToSend(encoded);\r\n@@ -400,7 +400,7 @@\n \tpublic void testSendEmptyBody() throws Exception {\r\n \t\tTCPServer server \u003d new TCPServer();\r\n \t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\tTCPClient client \u003d new TCPClient();\r\n",
    "projectName": "java-framework-network-mime",
    "lineNum": 355,
    "nodeStartChar": 14028,
    "before": "server",
    "after": "server.bind(new InetSocketAddress(\"localhost\",9999),0)"
  },
  {
    "commitSHA1": "11fb37514e9937ac1cd1439df823e3ec8f21c919",
    "commitFile": "src/test/java/net/lecousin/framework/network/mime/TestTransfer.java",
    "patch": "diff --git a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\nindex 58c7add..d9a5f51 100644\n--- a/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n+++ b/src/test/java/net/lecousin/framework/network/mime/TestTransfer.java\n@@ -57,7 +57,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(new ByteArrayIO(data, \"test\"));\r\n@@ -111,7 +111,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setBodyToSend(in);\r\n@@ -161,7 +161,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -217,7 +217,7 @@\n \t\t\t\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\t\tmime.setHeaderRaw(MimeMessage.TRANSFER_ENCODING, \"chunked\");\r\n@@ -352,7 +352,7 @@\n \t\ttry {\r\n \t\t\tTCPServer server \u003d new TCPServer();\r\n \t\t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\t\tmime.setHeaderRaw(MimeMessage.CONTENT_ENCODING, encoding);\r\n \t\t\tmime.setBodyToSend(encoded);\r\n@@ -400,7 +400,7 @@\n \tpublic void testSendEmptyBody() throws Exception {\r\n \t\tTCPServer server \u003d new TCPServer();\r\n \t\tserver.setProtocol(new TestTransferProtocol());\r\n-\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0);\r\n+\t\tserver.bind(new InetSocketAddress(\"localhost\", 9999), 0).blockThrow(0);\r\n \t\tMimeMessage mime \u003d new MimeMessage();\r\n \t\tmime.setHeaderRaw(\"X-Test\", \"Hello World\");\r\n \t\tTCPClient client \u003d new TCPClient();\r\n",
    "projectName": "java-framework-network-mime",
    "lineNum": 403,
    "nodeStartChar": 16009,
    "before": "server",
    "after": "server.bind(new InetSocketAddress(\"localhost\",9999),0)"
  },
  {
    "commitSHA1": "fdc5eb708034a10c1596740a301bb1fe4382b801",
    "commitFile": "gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java",
    "patch": "diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java\nindex 7cc289c..5b52a46 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java\n@@ -85,7 +85,7 @@\n \n                         if (!isAllowedMethod(methodName)) {\n                             //its a method like I.init()\n-                            continue;\n+                            break;\n                         }\n \n                         StringBuilder sb1 \u003d new StringBuilder();\ndiff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\nindex 71b96c8..6cbaa07 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n@@ -128,7 +128,7 @@\n                         Integer.MAX_VALUE,\n                         (filePath, fileAttr) -\u003e fileAttr.isRegularFile())\n                         .forEach(path -\u003e {\n-                            getLog().info(\"Analyze file: \" + path);\n+                            getLog().debug(\"Analyze file: \" + path);\n \n                             try {\n                                 analyzeFile(path, defaultDomain, entriesMap);\ndiff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java\nindex 7cc289c..5b52a46 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/FileAnalyzer.java\n@@ -85,7 +85,7 @@\n \n                         if (!isAllowedMethod(methodName)) {\n                             //its a method like I.init()\n-                            continue;\n+                            break;\n                         }\n \n                         StringBuilder sb1 \u003d new StringBuilder();\n",
    "projectName": "java-i18n-gettext",
    "lineNum": 88,
    "nodeStartChar": 2886,
    "before": "continue; ",
    "after": "break; "
  },
  {
    "commitSHA1": "fdc5eb708034a10c1596740a301bb1fe4382b801",
    "commitFile": "gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java",
    "patch": "diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\nindex 71b96c8..6cbaa07 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n@@ -128,7 +128,7 @@\n                         Integer.MAX_VALUE,\n                         (filePath, fileAttr) -\u003e fileAttr.isRegularFile())\n                         .forEach(path -\u003e {\n-                            getLog().info(\"Analyze file: \" + path);\n+                            getLog().debug(\"Analyze file: \" + path);\n \n                             try {\n                                 analyzeFile(path, defaultDomain, entriesMap);\n",
    "projectName": "java-i18n-gettext",
    "lineNum": 131,
    "nodeStartChar": 4541,
    "before": "getLog().info(\"Analyze file: \" + path)",
    "after": "getLog().debug(\"Analyze file: \" + path)"
  },
  {
    "commitSHA1": "771783c348928fba8be62bf44291e1780a8ef037",
    "commitFile": "gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java",
    "patch": "diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\nindex fd744d2..c7027f5 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n@@ -22,7 +22,7 @@\n      * @deprecated since 1.0.1\n     */\n     @Deprecated\n-    @Parameter( property \u003d \"generatepot.src\", defaultValue \u003d \"${project.build.sourceDirectory}\" )\n+    @Parameter( property \u003d \"generatepot.src\", defaultValue \u003d \"\" )\n     private String srcDir;\n \n     /**\ndiff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\nindex fd744d2..c7027f5 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n@@ -22,7 +22,7 @@\n      * @deprecated since 1.0.1\n     */\n     @Deprecated\n-    @Parameter( property \u003d \"generatepot.src\", defaultValue \u003d \"${project.build.sourceDirectory}\" )\n+    @Parameter( property \u003d \"generatepot.src\", defaultValue \u003d \"\" )\n     private String srcDir;\n \n     /**\n",
    "projectName": "java-i18n-gettext",
    "lineNum": 25,
    "nodeStartChar": 695,
    "before": "\"${project.build.sourceDirectory}\"",
    "after": "\"\""
  },
  {
    "commitSHA1": "8fb5b25c6d18ef6904b8ef4d86f158680bf64866",
    "commitFile": "src/test/java/com/arangodb/velocypack/VPackSliceTest.java",
    "patch": "diff --git a/src/test/java/com/arangodb/velocypack/VPackSliceTest.java b/src/test/java/com/arangodb/velocypack/VPackSliceTest.java\nindex 1f0b568..8cc1ab6 100644\n--- a/src/test/java/com/arangodb/velocypack/VPackSliceTest.java\n+++ b/src/test/java/com/arangodb/velocypack/VPackSliceTest.java\n@@ -952,7 +952,7 @@\n \t@Test\r\n \tpublic void objectSingleEntryString() throws VPackException {\r\n \t\t// {\"a\":\"b\"}\r\n-\t\tfinal VPackSlice slice \u003d new VPackSlice(new byte[] { 0x0b, 0x07, 0x01, 0x41, 0x61, 0x41, 0x62 });\r\n+\t\tfinal VPackSlice slice \u003d new VPackSlice(new byte[] { 0x0b, 0x08, 0x01, 0x41, 0x61, 0x41, 0x62, 0x03 });\r\n \t\tfinal VPackSlice sliceNone \u003d slice.get(\"abc\");\r\n \t\tassertThat(sliceNone.isNone(), is(true));\r\n \t\tfinal VPackSlice sliceA \u003d slice.get(\"a\");\r\ndiff --git a/src/test/java/com/arangodb/velocypack/VPackSliceTest.java b/src/test/java/com/arangodb/velocypack/VPackSliceTest.java\nindex 1f0b568..8cc1ab6 100644\n--- a/src/test/java/com/arangodb/velocypack/VPackSliceTest.java\n+++ b/src/test/java/com/arangodb/velocypack/VPackSliceTest.java\n@@ -952,7 +952,7 @@\n \t@Test\r\n \tpublic void objectSingleEntryString() throws VPackException {\r\n \t\t// {\"a\":\"b\"}\r\n-\t\tfinal VPackSlice slice \u003d new VPackSlice(new byte[] { 0x0b, 0x07, 0x01, 0x41, 0x61, 0x41, 0x62 });\r\n+\t\tfinal VPackSlice slice \u003d new VPackSlice(new byte[] { 0x0b, 0x08, 0x01, 0x41, 0x61, 0x41, 0x62, 0x03 });\r\n \t\tfinal VPackSlice sliceNone \u003d slice.get(\"abc\");\r\n \t\tassertThat(sliceNone.isNone(), is(true));\r\n \t\tfinal VPackSlice sliceA \u003d slice.get(\"a\");\r\n",
    "projectName": "java-velocypack",
    "lineNum": 955,
    "nodeStartChar": 41792,
    "before": "{0x0b,0x07,0x01,0x41,0x61,0x41,0x62}",
    "after": "{0x0b,0x08,0x01,0x41,0x61,0x41,0x62,0x03}"
  },
  {
    "commitSHA1": "9d35aeeb31fe5f080dfe341a80a80dca90750d43",
    "commitFile": "src/main/java/net/pwall/util/ChunkedArrayList.java",
    "patch": "diff --git a/src/main/java/net/pwall/util/ChunkedArrayList.java b/src/main/java/net/pwall/util/ChunkedArrayList.java\nindex 0f37d4b..0f73f03 100644\n--- a/src/main/java/net/pwall/util/ChunkedArrayList.java\n+++ b/src/main/java/net/pwall/util/ChunkedArrayList.java\n@@ -139,7 +139,7 @@\n         int n \u003d outerList.size();\r\n         List\u003cE\u003e innerList;\r\n         if (n \u003d\u003d 0 || (innerList \u003d outerList.get(n - 1)).size() \u003d\u003d chunkSize) {\r\n-            innerList \u003d new ArrayList\u003cE\u003e(chunkSize);\r\n+            innerList \u003d new ArrayList\u003c\u003e(chunkSize);\r\n             outerList.add(innerList);\r\n         }\r\n         innerList.add(e);\r\ndiff --git a/src/main/java/net/pwall/util/ComparablePair.java b/src/main/java/net/pwall/util/ComparablePair.java\nindex 8a34d6d..4e55880 100644\n--- a/src/main/java/net/pwall/util/ComparablePair.java\n+++ b/src/main/java/net/pwall/util/ComparablePair.java\n@@ -74,7 +74,7 @@\n      */\r\n     public static \u003cF extends Comparable\u003c? super F\u003e, S extends Comparable\u003c? super S\u003e\u003e\r\n             ComparablePair\u003cF, S\u003e create(F first, S second) {\r\n-        return new ComparablePair\u003cF, S\u003e(first, second);\r\n+        return new ComparablePair\u003c\u003e(first, second);\r\n     }\r\n \r\n }\r\ndiff --git a/src/main/java/net/pwall/util/ChunkedArrayList.java b/src/main/java/net/pwall/util/ChunkedArrayList.java\nindex 0f37d4b..0f73f03 100644\n--- a/src/main/java/net/pwall/util/ChunkedArrayList.java\n+++ b/src/main/java/net/pwall/util/ChunkedArrayList.java\n@@ -139,7 +139,7 @@\n         int n \u003d outerList.size();\r\n         List\u003cE\u003e innerList;\r\n         if (n \u003d\u003d 0 || (innerList \u003d outerList.get(n - 1)).size() \u003d\u003d chunkSize) {\r\n-            innerList \u003d new ArrayList\u003cE\u003e(chunkSize);\r\n+            innerList \u003d new ArrayList\u003c\u003e(chunkSize);\r\n             outerList.add(innerList);\r\n         }\r\n         innerList.add(e);\r\n",
    "projectName": "javautil",
    "lineNum": 142,
    "nodeStartChar": 5040,
    "before": "ArrayList\u003cE\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "9d35aeeb31fe5f080dfe341a80a80dca90750d43",
    "commitFile": "src/main/java/net/pwall/util/ComparablePair.java",
    "patch": "diff --git a/src/main/java/net/pwall/util/ComparablePair.java b/src/main/java/net/pwall/util/ComparablePair.java\nindex 8a34d6d..4e55880 100644\n--- a/src/main/java/net/pwall/util/ComparablePair.java\n+++ b/src/main/java/net/pwall/util/ComparablePair.java\n@@ -74,7 +74,7 @@\n      */\r\n     public static \u003cF extends Comparable\u003c? super F\u003e, S extends Comparable\u003c? super S\u003e\u003e\r\n             ComparablePair\u003cF, S\u003e create(F first, S second) {\r\n-        return new ComparablePair\u003cF, S\u003e(first, second);\r\n+        return new ComparablePair\u003c\u003e(first, second);\r\n     }\r\n \r\n }\r\n",
    "projectName": "javautil",
    "lineNum": 77,
    "nodeStartChar": 3171,
    "before": "ComparablePair\u003cF,S\u003e",
    "after": "ComparablePair\u003c\u003e"
  },
  {
    "commitSHA1": "fd03a4ef4033745ae5efc704fb123f1980c4056a",
    "commitFile": "src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java",
    "patch": "diff --git a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\nindex 4ea510a..04ec5b6 100644\n--- a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n+++ b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n@@ -50,7 +50,7 @@\n         if (protocolName !\u003d null)\n           WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, protocolName);\n         else {\n-          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, \"*\");\n+          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, null);\n         }\n \n         /**\ndiff --git a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\nindex 4ea510a..04ec5b6 100644\n--- a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n+++ b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n@@ -50,7 +50,7 @@\n         if (protocolName !\u003d null)\n           WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, protocolName);\n         else {\n-          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, \"*\");\n+          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, null);\n         }\n \n         /**\n",
    "projectName": "jboss-websockets",
    "lineNum": 53,
    "nodeStartChar": 2265,
    "before": "\"*\"",
    "after": "null"
  },
  {
    "commitSHA1": "ba09df1ff360da9b6699840e5405a2cf655b36cb",
    "commitFile": "src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java",
    "patch": "diff --git a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\nindex 4ea510a..04ec5b6 100644\n--- a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n+++ b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n@@ -50,7 +50,7 @@\n         if (protocolName !\u003d null)\n           WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, protocolName);\n         else {\n-          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, \"*\");\n+          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, null);\n         }\n \n         /**\ndiff --git a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\nindex 4ea510a..04ec5b6 100644\n--- a/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n+++ b/src/main/java/org/jboss/websockets/oio/WebSocketConnectionManager.java\n@@ -50,7 +50,7 @@\n         if (protocolName !\u003d null)\n           WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, protocolName);\n         else {\n-          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, \"*\");\n+          WebSocketHeaders.SEC_WEBSOCKET_PROTOCOL.set(response, null);\n         }\n \n         /**\n",
    "projectName": "jboss-websockets",
    "lineNum": 53,
    "nodeStartChar": 2265,
    "before": "\"*\"",
    "after": "null"
  },
  {
    "commitSHA1": "08b2b035ae66a689bf485a0a0fe1c3334138c340",
    "commitFile": "src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java",
    "patch": "diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\nindex 30aeb90..c5c543c 100644\n--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n@@ -37,7 +37,7 @@\n     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);\n \n     // Calculate the answer of the challenge.\n-    final String key1 \u003d SEC_WEBSOCKET_KEY.get(request);\n+    final String key1 \u003d SEC_WEBSOCKET_KEY1.get(request);\n     final String key2 \u003d SEC_WEBSOCKET_KEY2.get(request);\n     final byte[] key3 \u003d new byte[8];\n \ndiff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\nindex 30aeb90..c5c543c 100644\n--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n@@ -37,7 +37,7 @@\n     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);\n \n     // Calculate the answer of the challenge.\n-    final String key1 \u003d SEC_WEBSOCKET_KEY.get(request);\n+    final String key1 \u003d SEC_WEBSOCKET_KEY1.get(request);\n     final String key2 \u003d SEC_WEBSOCKET_KEY2.get(request);\n     final byte[] key3 \u003d new byte[8];\n \n",
    "projectName": "jboss-websockets",
    "lineNum": 40,
    "nodeStartChar": 1327,
    "before": "SEC_WEBSOCKET_KEY.get(request)",
    "after": "SEC_WEBSOCKET_KEY1.get(request)"
  },
  {
    "commitSHA1": "8a7cede4f85de627d4b1c0f8d65b969ca6b82655",
    "commitFile": "src/main/java/jline/console/ConsoleReader.java",
    "patch": "diff --git a/src/main/java/jline/console/ConsoleReader.java b/src/main/java/jline/console/ConsoleReader.java\nindex 9321a39..0f089f1 100644\n--- a/src/main/java/jline/console/ConsoleReader.java\n+++ b/src/main/java/jline/console/ConsoleReader.java\n@@ -1316,7 +1316,7 @@\n                             break;\n \n                         case CLEAR_LINE:\n-                            moveInternal(-(buf.buffer.length()));\n+                            moveInternal(-(buf.cursor));\n                             killLine();\n                             break;\n \ndiff --git a/src/main/java/jline/console/ConsoleReader.java b/src/main/java/jline/console/ConsoleReader.java\nindex 9321a39..0f089f1 100644\n--- a/src/main/java/jline/console/ConsoleReader.java\n+++ b/src/main/java/jline/console/ConsoleReader.java\n@@ -1316,7 +1316,7 @@\n                             break;\n \n                         case CLEAR_LINE:\n-                            moveInternal(-(buf.buffer.length()));\n+                            moveInternal(-(buf.cursor));\n                             killLine();\n                             break;\n \n",
    "projectName": "jline2",
    "lineNum": 1319,
    "nodeStartChar": 41861,
    "before": "buf.buffer.length()",
    "after": "buf.cursor"
  },
  {
    "commitSHA1": "a5380285cc26a24ef671e9a82fb24094b99f991b",
    "commitFile": "src/main/java/jline/WindowsTerminal.java",
    "patch": "diff --git a/src/main/java/jline/WindowsTerminal.java b/src/main/java/jline/WindowsTerminal.java\nindex 7ffedfb..e284051 100644\n--- a/src/main/java/jline/WindowsTerminal.java\n+++ b/src/main/java/jline/WindowsTerminal.java\n@@ -248,7 +248,7 @@\n \n     @Override\n     public InputStream getDefaultBindings() {\n-        return getClass().getResourceAsStream(WINDOWSBINDINGS_PROPERTIES);\n+        return WindowsTerminal.class.getResourceAsStream(WINDOWSBINDINGS_PROPERTIES);\n     }\n \n     //\ndiff --git a/src/main/java/jline/WindowsTerminal.java b/src/main/java/jline/WindowsTerminal.java\nindex 7ffedfb..e284051 100644\n--- a/src/main/java/jline/WindowsTerminal.java\n+++ b/src/main/java/jline/WindowsTerminal.java\n@@ -248,7 +248,7 @@\n \n     @Override\n     public InputStream getDefaultBindings() {\n-        return getClass().getResourceAsStream(WINDOWSBINDINGS_PROPERTIES);\n+        return WindowsTerminal.class.getResourceAsStream(WINDOWSBINDINGS_PROPERTIES);\n     }\n \n     //\n",
    "projectName": "jline2",
    "lineNum": 251,
    "nodeStartChar": 8259,
    "before": "getClass()",
    "after": "WindowsTerminal.class"
  },
  {
    "commitSHA1": "fdb666756b32c9a09ad014d0c3c3442232e94ff1",
    "commitFile": "src/main/java/jline/console/completer/FileNameCompleter.java",
    "patch": "diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java\nindex 1ab5f9a..edb97c7 100644\n--- a/src/main/java/jline/console/completer/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completer/FileNameCompleter.java\n@@ -66,7 +66,7 @@\n             translated \u003d homeDir.getParentFile().getAbsolutePath();\n         }\n         else if (!(translated.startsWith(separator()))) {\n-            String cwd \u003d getUserDir().getPath();\n+            String cwd \u003d getUserDir().getAbsolutePath();\n             translated \u003d cwd + separator() + translated;\n         }\n \ndiff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java\nindex 1ab5f9a..edb97c7 100644\n--- a/src/main/java/jline/console/completer/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completer/FileNameCompleter.java\n@@ -66,7 +66,7 @@\n             translated \u003d homeDir.getParentFile().getAbsolutePath();\n         }\n         else if (!(translated.startsWith(separator()))) {\n-            String cwd \u003d getUserDir().getPath();\n+            String cwd \u003d getUserDir().getAbsolutePath();\n             translated \u003d cwd + separator() + translated;\n         }\n \n",
    "projectName": "jline2",
    "lineNum": 69,
    "nodeStartChar": 2143,
    "before": "getUserDir().getPath()",
    "after": "getUserDir().getAbsolutePath()"
  },
  {
    "commitSHA1": "c7353ffd23561fb10fb5c9b8b2f5f856fa27c86a",
    "commitFile": "src/main/java/jline/console/completers/FileNameCompleter.java",
    "patch": "diff --git a/src/main/java/jline/console/completers/FileNameCompleter.java b/src/main/java/jline/console/completers/FileNameCompleter.java\nindex 03f3c8a..98d5146 100644\n--- a/src/main/java/jline/console/completers/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completers/FileNameCompleter.java\n@@ -51,7 +51,7 @@\n         String buffer \u003d (buf \u003d\u003d null) ? \"\" : buf;\n \n         if (OS_IS_WINDOWS) {\n-            buffer \u003d buffer.replaceAll(\"/\", \"\\\\\");\n+            buffer \u003d buffer.replace(\u0027/\u0027, \u0027\\\\\u0027);\n         }\n         \n         String translated \u003d buffer;\ndiff --git a/src/main/java/jline/console/completers/FileNameCompleter.java b/src/main/java/jline/console/completers/FileNameCompleter.java\nindex 03f3c8a..98d5146 100644\n--- a/src/main/java/jline/console/completers/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completers/FileNameCompleter.java\n@@ -51,7 +51,7 @@\n         String buffer \u003d (buf \u003d\u003d null) ? \"\" : buf;\n \n         if (OS_IS_WINDOWS) {\n-            buffer \u003d buffer.replaceAll(\"/\", \"\\\\\");\n+            buffer \u003d buffer.replace(\u0027/\u0027, \u0027\\\\\u0027);\n         }\n         \n         String translated \u003d buffer;\n",
    "projectName": "jline2",
    "lineNum": 54,
    "nodeStartChar": 1588,
    "before": "buffer.replaceAll(\"/\",\"\\\\\")",
    "after": "buffer.replace(\u0027/\u0027,\u0027\\\\\u0027)"
  },
  {
    "commitSHA1": "a1e17276788c332517b23927ef1604c440321b8c",
    "commitFile": "src/main/java/jline/console/ConsoleReader.java",
    "patch": "diff --git a/src/main/java/jline/console/ConsoleReader.java b/src/main/java/jline/console/ConsoleReader.java\nindex 1bb7995..2791f6c 100644\n--- a/src/main/java/jline/console/ConsoleReader.java\n+++ b/src/main/java/jline/console/ConsoleReader.java\n@@ -1435,7 +1435,7 @@\n         if (where \u003c 0) {\n             int len \u003d 0;\n             for (int i \u003d buf.cursor; i \u003c buf.cursor - where; i++) {\n-                if (buf.getBuffer().charAt(i) \u003d\u003d \u0027\\t\u0027) {\n+                if (buf.buffer.charAt(i) \u003d\u003d \u0027\\t\u0027) {\n                     len +\u003d TAB_WIDTH;\n                 }\n                 else {\ndiff --git a/src/main/java/jline/console/ConsoleReader.java b/src/main/java/jline/console/ConsoleReader.java\nindex 1bb7995..2791f6c 100644\n--- a/src/main/java/jline/console/ConsoleReader.java\n+++ b/src/main/java/jline/console/ConsoleReader.java\n@@ -1435,7 +1435,7 @@\n         if (where \u003c 0) {\n             int len \u003d 0;\n             for (int i \u003d buf.cursor; i \u003c buf.cursor - where; i++) {\n-                if (buf.getBuffer().charAt(i) \u003d\u003d \u0027\\t\u0027) {\n+                if (buf.buffer.charAt(i) \u003d\u003d \u0027\\t\u0027) {\n                     len +\u003d TAB_WIDTH;\n                 }\n                 else {\n",
    "projectName": "jline2",
    "lineNum": 1438,
    "nodeStartChar": 40349,
    "before": "buf.getBuffer()",
    "after": "buf.buffer"
  },
  {
    "commitSHA1": "511e1bb5da13f7da80fe518debaf5495e893789e",
    "commitFile": "src/main/java/jline/TerminalFactory.java",
    "patch": "diff --git a/src/main/java/jline/TerminalFactory.java b/src/main/java/jline/TerminalFactory.java\nindex 89040e3..edcdd67 100644\n--- a/src/main/java/jline/TerminalFactory.java\n+++ b/src/main/java/jline/TerminalFactory.java\n@@ -37,7 +37,7 @@\n         String os \u003d System.getProperty(\"os.name\").toLowerCase();\n         String termProp \u003d System.getProperty(JLINE_TERMINAL);\n \n-        if ((termProp !\u003d null) \u0026\u0026 (termProp.length() \u003e 0)) {\n+        if (\"!auto\".equals(termProp) \u0026\u0026 termProp !\u003d null \u0026\u0026 termProp.length() \u003e 0) {\n             try {\n                 t \u003d (Terminal) Class.forName(termProp).newInstance();\n             }\ndiff --git a/src/main/java/jline/TerminalFactory.java b/src/main/java/jline/TerminalFactory.java\nindex 89040e3..edcdd67 100644\n--- a/src/main/java/jline/TerminalFactory.java\n+++ b/src/main/java/jline/TerminalFactory.java\n@@ -37,7 +37,7 @@\n         String os \u003d System.getProperty(\"os.name\").toLowerCase();\n         String termProp \u003d System.getProperty(JLINE_TERMINAL);\n \n-        if ((termProp !\u003d null) \u0026\u0026 (termProp.length() \u003e 0)) {\n+        if (\"!auto\".equals(termProp) \u0026\u0026 termProp !\u003d null \u0026\u0026 termProp.length() \u003e 0) {\n             try {\n                 t \u003d (Terminal) Class.forName(termProp).newInstance();\n             }\n",
    "projectName": "jline2",
    "lineNum": 40,
    "nodeStartChar": 943,
    "before": "(termProp !\u003d null)",
    "after": "\"!auto\".equals(termProp) \u0026\u0026 termProp !\u003d null"
  },
  {
    "commitSHA1": "3a64fa122dff363e5807a8bbd264b3137daa74c4",
    "commitFile": "src/main/java/jline/ConsoleOperations.java",
    "patch": "diff --git a/src/main/java/jline/ConsoleOperations.java b/src/main/java/jline/ConsoleOperations.java\nindex 709205e..2ee14bf 100644\n--- a/src/main/java/jline/ConsoleOperations.java\n+++ b/src/main/java/jline/ConsoleOperations.java\n@@ -25,7 +25,7 @@\n     final char CTRL_D \u003d 4;\n     final char CTRL_E \u003d 5;\n     final char CTRL_F \u003d 6;\n-    final static char DELETE \u003d 127;\n+    final static char DELETE \u003d 8;\n     final static char CTRL_K \u003d 11;\n     final static char CTRL_L \u003d 12;\n     final char CTRL_N \u003d 14;\ndiff --git a/src/main/java/jline/ConsoleOperations.java b/src/main/java/jline/ConsoleOperations.java\nindex 709205e..2ee14bf 100644\n--- a/src/main/java/jline/ConsoleOperations.java\n+++ b/src/main/java/jline/ConsoleOperations.java\n@@ -25,7 +25,7 @@\n     final char CTRL_D \u003d 4;\n     final char CTRL_E \u003d 5;\n     final char CTRL_F \u003d 6;\n-    final static char DELETE \u003d 127;\n+    final static char DELETE \u003d 8;\n     final static char CTRL_K \u003d 11;\n     final static char CTRL_L \u003d 12;\n     final char CTRL_N \u003d 14;\n",
    "projectName": "jline2",
    "lineNum": 28,
    "nodeStartChar": 837,
    "before": "127",
    "after": "8"
  },
  {
    "commitSHA1": "8184e715c7b6089c088d110929d3bd8b4f8bd4e2",
    "commitFile": "src/main/java/jline/ConsoleReader.java",
    "patch": "diff --git a/src/main/java/jline/ConsoleReader.java b/src/main/java/jline/ConsoleReader.java\nindex 1a56156..88b7096 100644\n--- a/src/main/java/jline/ConsoleReader.java\n+++ b/src/main/java/jline/ConsoleReader.java\n@@ -1382,7 +1382,7 @@\n \n         Arrays.sort(allowed); // always need to sort before binarySearch\n \n-        while (Arrays.binarySearch(allowed, c \u003d (char) readVirtualKey()) \u003d\u003d -1)\n+        while (Arrays.binarySearch(allowed, c \u003d (char) readVirtualKey()) \u003c 0)\n             ;\n \n         return c;\ndiff --git a/src/main/java/jline/ConsoleReader.java b/src/main/java/jline/ConsoleReader.java\nindex 1a56156..88b7096 100644\n--- a/src/main/java/jline/ConsoleReader.java\n+++ b/src/main/java/jline/ConsoleReader.java\n@@ -1382,7 +1382,7 @@\n \n         Arrays.sort(allowed); // always need to sort before binarySearch\n \n-        while (Arrays.binarySearch(allowed, c \u003d (char) readVirtualKey()) \u003d\u003d -1)\n+        while (Arrays.binarySearch(allowed, c \u003d (char) readVirtualKey()) \u003c 0)\n             ;\n \n         return c;\n",
    "projectName": "jline2",
    "lineNum": 1385,
    "nodeStartChar": 39363,
    "before": "Arrays.binarySearch(allowed,c\u003d(char)readVirtualKey()) \u003d\u003d -1",
    "after": "Arrays.binarySearch(allowed,c\u003d(char)readVirtualKey()) \u003c 0"
  },
  {
    "commitSHA1": "ab45950432f3c4118b8920b279b0d2a90eaf28ec",
    "commitFile": "src/main/java/jline/Terminal.java",
    "patch": "diff --git a/src/main/java/jline/Terminal.java b/src/main/java/jline/Terminal.java\nindex 79a1f23..c240415 100644\n--- a/src/main/java/jline/Terminal.java\n+++ b/src/main/java/jline/Terminal.java\n@@ -92,7 +92,7 @@\n     public int readCharacter(final InputStream in) throws IOException {\n         // wrap the stream in a InputStreamReader so we can read\n         // UTF-8 characters\n-        return new InputStreamReader(in).read();\n+        return new new InputStreamReader(in).read();\n     }\n \n     /**\ndiff --git a/src/main/java/jline/Terminal.java b/src/main/java/jline/Terminal.java\nindex 79a1f23..c240415 100644\n--- a/src/main/java/jline/Terminal.java\n+++ b/src/main/java/jline/Terminal.java\n@@ -92,7 +92,7 @@\n     public int readCharacter(final InputStream in) throws IOException {\n         // wrap the stream in a InputStreamReader so we can read\n         // UTF-8 characters\n-        return new InputStreamReader(in).read();\n+        return new new InputStreamReader(in).read();\n     }\n \n     /**\n",
    "projectName": "jline2",
    "lineNum": 92,
    "nodeStartChar": 2905,
    "before": "{   return new InputStreamReader(in).read(); } ",
    "after": "{ } "
  },
  {
    "commitSHA1": "b9c457000700b7d76584b52ef13164919addc895",
    "commitFile": "src/test/java/systemtests/TestUI.java",
    "patch": "diff --git a/src/test/java/systemtests/TestUI.java b/src/test/java/systemtests/TestUI.java\nindex d08fcf7..43e6e18 100644\n--- a/src/test/java/systemtests/TestUI.java\n+++ b/src/test/java/systemtests/TestUI.java\n@@ -139,7 +139,7 @@\n         assertEquals(\"Success\", blueBall.getAttribute(\"alt\"));\n         assertNodeWhereItHasRan(page, \"Node1\");\n         AbstractProject abstractStalker \u003d AbstractProject.findNearest(\"STALKER\");\n-        assertEquals(vip.getSomeWorkspace().getRemote(), abstractStalker.getCustomWorkspace());\n+        assertEquals(null, abstractStalker.getCustomWorkspace());\n     }\n \n     @Test\n",
    "projectName": "job-node-stalker-plugin",
    "lineNum": 142,
    "nodeStartChar": 6000,
    "before": "vip.getSomeWorkspace().getRemote()",
    "after": "null"
  },
  {
    "commitSHA1": "1bab6e44fb51ab9f95596654160766fb2123a0ae",
    "commitFile": "src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java",
    "patch": "diff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\nindex e0df36f..2caf8cd 100644\n--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n@@ -96,7 +96,7 @@\n     @Override\n     public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {\n \n-        FreeStyleProject project \u003d Util.getProject(job);\n+        AbstractProject project \u003d Util.getProject(job);\n         final boolean shouldFail \u003d project \u003d\u003d null || project.getLastBuild() \u003d\u003d null;\n \n         if(shouldFail) {\ndiff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\nindex e0df36f..2caf8cd 100644\n--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n@@ -96,7 +96,7 @@\n     @Override\n     public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {\n \n-        FreeStyleProject project \u003d Util.getProject(job);\n+        AbstractProject project \u003d Util.getProject(job);\n         final boolean shouldFail \u003d project \u003d\u003d null || project.getLastBuild() \u003d\u003d null;\n \n         if(shouldFail) {\n",
    "projectName": "job-node-stalker-plugin",
    "lineNum": 99,
    "nodeStartChar": 3407,
    "before": "FreeStyleProject",
    "after": "AbstractProject"
  },
  {
    "commitSHA1": "d8751a292abea1fca2f712ec40e7182cdb6abe00",
    "commitFile": "src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java",
    "patch": "diff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\nindex 50bc90a..0101f35 100644\n--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n@@ -27,7 +27,7 @@\n public class NodeStalkerBuildWrapper extends BuildWrapper {\n \n     private static final Logger logger \u003d Logger.getLogger(NodeStalkerBuildWrapper.class.getName());\n-    public static final String PLUGIN_DISPLAY_NAME \u003d \"[NODE STALKER] Run this job on the same node where another job has last ran\";\n+    public static final String PLUGIN_DISPLAY_NAME \u003d \"Run this job on the same node where another job has last ran\";\n     public static final String JOB_DOES_NOT_EXIST_PATTERN \u003d \"[NODE STALKER] The job %s does not exist! Please check your configuration!\";\n     private static final String JOB_HAS_NO_BUILD_PATTERN \u003d \"[NODE STALKER] The job %s has no traceable runs!\";\n \ndiff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\nindex 50bc90a..0101f35 100644\n--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n@@ -27,7 +27,7 @@\n public class NodeStalkerBuildWrapper extends BuildWrapper {\n \n     private static final Logger logger \u003d Logger.getLogger(NodeStalkerBuildWrapper.class.getName());\n-    public static final String PLUGIN_DISPLAY_NAME \u003d \"[NODE STALKER] Run this job on the same node where another job has last ran\";\n+    public static final String PLUGIN_DISPLAY_NAME \u003d \"Run this job on the same node where another job has last ran\";\n     public static final String JOB_DOES_NOT_EXIST_PATTERN \u003d \"[NODE STALKER] The job %s does not exist! Please check your configuration!\";\n     private static final String JOB_HAS_NO_BUILD_PATTERN \u003d \"[NODE STALKER] The job %s has no traceable runs!\";\n \n",
    "projectName": "job-node-stalker-plugin",
    "lineNum": 30,
    "nodeStartChar": 987,
    "before": "\"[NODE STALKER] Run this job on the same node where another job has last ran\"",
    "after": "\"Run this job on the same node where another job has last ran\""
  },
  {
    "commitSHA1": "8e82cd4c6f0b7ef1bfede1128839edfb1cb6b959",
    "commitFile": "src/test/java/com/agapsys/jpa/scanner/JarFileTest.java",
    "patch": "diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\nindex f890b4b..035e4d4 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.getEmbeddedInfo(Defs.LIB_JAR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter2.InnerConverter\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter3\",\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\nindex 8198ead..d55a5b7 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter1\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter2.InnerConverter\",\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\nindex b7097fd..4a1ede5 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\n@@ -48,7 +48,7 @@\n \t\treturn classNameSet;\n \t}\n \t\n-\tpublic static Set\u003cString\u003e getStringList(String...elements) {\n+\tpublic static Set\u003cString\u003e getStringSet(String...elements) {\n \t\tSet\u003cString\u003e stringList \u003d new LinkedHashSet\u003cString\u003e();\n \t\t\n \t\tfor (String element : elements) {\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\nindex f890b4b..035e4d4 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.getEmbeddedInfo(Defs.LIB_JAR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter2.InnerConverter\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter3\",\n",
    "projectName": "jpa-scanner-maven-plugin",
    "lineNum": 29,
    "nodeStartChar": 954,
    "before": "TestUtils.getStringList(\"com.example.Converter2.InnerConverter\",\"com.example.Converter2\",\"com.example.Converter3\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\",\"com.example.Converter1\",\"com.example.Entity1\")",
    "after": "TestUtils.getStringSet(\"com.example.Converter2.InnerConverter\",\"com.example.Converter2\",\"com.example.Converter3\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\",\"com.example.Converter1\",\"com.example.Entity1\")"
  },
  {
    "commitSHA1": "8e82cd4c6f0b7ef1bfede1128839edfb1cb6b959",
    "commitFile": "src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java",
    "patch": "diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\nindex 8198ead..d55a5b7 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter1\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter2.InnerConverter\",\n",
    "projectName": "jpa-scanner-maven-plugin",
    "lineNum": 29,
    "nodeStartChar": 965,
    "before": "TestUtils.getStringList(\"com.example.Converter1\",\"com.example.Converter2\",\"com.example.Converter2.InnerConverter\",\"com.example.Converter3\",\"com.example.Entity1\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\")",
    "after": "TestUtils.getStringSet(\"com.example.Converter1\",\"com.example.Converter2\",\"com.example.Converter2.InnerConverter\",\"com.example.Converter3\",\"com.example.Entity1\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\")"
  },
  {
    "commitSHA1": "f76a6c710cc7b8360130fc4f83be4e5a1bb2de6e",
    "commitFile": "src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java",
    "patch": "diff --git a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\nindex 6c976b2..cfdc18f 100644\n--- a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n+++ b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n@@ -55,7 +55,7 @@\n     public void serializeUniProduct() {\n         String serialized \u003d converter.writeValueAsString(Tuples.convert(\"1\", \"2\", \"3\"));\n         Tuple4 deserialized \u003d converter.readValue(serialized.getBytes(), Tuple4.class);\n-        assertThat(deserialized, Matchers.equalTo(tuple(\"1\", \"2\", \"3\", null)));\n+        assertThat(deserialized, Matchers.equalTo((Tuple4) tuple(\"1\", \"2\", \"3\", null)));\n     }\n \n     private void assertSerializeDeserialize(Tuple tuple, Class\u003c? extends Tuple\u003e clazz) {\ndiff --git a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\nindex 6c976b2..cfdc18f 100644\n--- a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n+++ b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n@@ -55,7 +55,7 @@\n     public void serializeUniProduct() {\n         String serialized \u003d converter.writeValueAsString(Tuples.convert(\"1\", \"2\", \"3\"));\n         Tuple4 deserialized \u003d converter.readValue(serialized.getBytes(), Tuple4.class);\n-        assertThat(deserialized, Matchers.equalTo(tuple(\"1\", \"2\", \"3\", null)));\n+        assertThat(deserialized, Matchers.equalTo((Tuple4) tuple(\"1\", \"2\", \"3\", null)));\n     }\n \n     private void assertSerializeDeserialize(Tuple tuple, Class\u003c? extends Tuple\u003e clazz) {\n",
    "projectName": "jtuples",
    "lineNum": 58,
    "nodeStartChar": 2519,
    "before": "tuple(\"1\",\"2\",\"3\",null)",
    "after": "(Tuple4)tuple(\"1\",\"2\",\"3\",null)"
  },
  {
    "commitSHA1": "ad8ed09bd6f9f3e05001869ebe2a465252d4c81d",
    "commitFile": "src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java",
    "patch": "diff --git a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\nindex 1a408d0..6c976b2 100644\n--- a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n+++ b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n@@ -48,7 +48,7 @@\n     @Test\n     public void testSerializeLowerArity() {\n         String serialized \u003d converter.writeValueAsString(tuple(1, 2, 3));\n-        assertThat(converter.readValue(serialized.getBytes(), Tuple2.class), Matchers.equalTo(tuple(1, 2)));\n+        assertThat(converter.readValue(serialized.getBytes(), Tuple2.class), Matchers.equalTo((Tuple2) tuple(1, 2)));\n     }\n \n     @Test\ndiff --git a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\nindex 1a408d0..6c976b2 100644\n--- a/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n+++ b/src/test/java/com/othelle/jtuples/serialize/JacksonConverterTest.java\n@@ -48,7 +48,7 @@\n     @Test\n     public void testSerializeLowerArity() {\n         String serialized \u003d converter.writeValueAsString(tuple(1, 2, 3));\n-        assertThat(converter.readValue(serialized.getBytes(), Tuple2.class), Matchers.equalTo(tuple(1, 2)));\n+        assertThat(converter.readValue(serialized.getBytes(), Tuple2.class), Matchers.equalTo((Tuple2) tuple(1, 2)));\n     }\n \n     @Test\n",
    "projectName": "jtuples",
    "lineNum": 51,
    "nodeStartChar": 2221,
    "before": "tuple(1,2)",
    "after": "(Tuple2)tuple(1,2)"
  },
  {
    "commitSHA1": "a9df80647dd48cd62d469517f40dd2850238e677",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\nindex b04ffd2..cae3e59 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n@@ -149,7 +149,7 @@\n      * \u003cp\u003eGives a hint to the shrinking process as to the magnitude of the given\n      * value. The shrinking process will prefer trying values of greater\n      * magnitude before values of lesser magnitude. If not overridden, this\n-     * implementation returns zero.\u003c/p\u003e\n+     * implementation returns \"one\".\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003cem\u003eNote to generator writers:\u003c/em\u003e Do not worry about normalizing\n      * a magnitude to a positive value; the shrinking mechanism will take care\n@@ -160,7 +160,7 @@\n      * @return a measure of the given value\u0027s magnitude\n      */\n     public BigDecimal magnitude(Object value) {\n-        return ZERO;\n+        return ONE;\n     }\n \n     /**\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\nindex b04ffd2..cae3e59 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n@@ -149,7 +149,7 @@\n      * \u003cp\u003eGives a hint to the shrinking process as to the magnitude of the given\n      * value. The shrinking process will prefer trying values of greater\n      * magnitude before values of lesser magnitude. If not overridden, this\n-     * implementation returns zero.\u003c/p\u003e\n+     * implementation returns \"one\".\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003cem\u003eNote to generator writers:\u003c/em\u003e Do not worry about normalizing\n      * a magnitude to a positive value; the shrinking mechanism will take care\n@@ -160,7 +160,7 @@\n      * @return a measure of the given value\u0027s magnitude\n      */\n     public BigDecimal magnitude(Object value) {\n-        return ZERO;\n+        return ONE;\n     }\n \n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 163,
    "nodeStartChar": 5815,
    "before": "return ZERO; ",
    "after": "return ONE; "
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 46,
    "nodeStartChar": 1821,
    "before": "@Test public void complete() throws Exception {   assertThat(testResult(ShrinkingCompletely.class),hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\",new Foo(1)))); } ",
    "after": "@Test public void complete(){   assertThat(testResult(ShrinkingCompletely.class),hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\",new Foo(1)))); } "
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 49,
    "nodeStartChar": 1993,
    "before": "\"Shrunken args: [%s]\"",
    "after": "\"With arguments: [%s]\""
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 62,
    "nodeStartChar": 2359,
    "before": "@Test public void shrinkingDoesNotShrink() throws Exception {   assertThat(testResult(ShrinkingNotReally.class),hasSingleFailureContaining(\"Args: [\")); } ",
    "after": "@Test public void shrinkingDoesNotShrink(){   assertThat(testResult(ShrinkingNotReally.class),hasSingleFailureContaining(\"Args: [\")); } "
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 65,
    "nodeStartChar": 2530,
    "before": "\"Args: [\"",
    "after": "\"With arguments: [\""
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 77,
    "nodeStartChar": 2834,
    "before": "@Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {   assertThat(testResult(ShrinksAreIdentity.class),hasSingleFailureContaining(\"Args: [\")); } ",
    "after": "@Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller(){   assertThat(testResult(ShrinksAreIdentity.class),hasSingleFailureContaining(\"Args: [\")); } "
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 80,
    "nodeStartChar": 3028,
    "before": "\"Args: [\"",
    "after": "\"With arguments: [\""
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 93,
    "nodeStartChar": 3424,
    "before": "\"Args: [\"",
    "after": "\"With arguments: [\""
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 210,
    "nodeStartChar": 6942,
    "before": "\"Shrunken args: [%s, %s]\"",
    "after": "\"With arguments: [%s, %s]\""
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 224,
    "nodeStartChar": 7371,
    "before": "@Test public void timeout() throws Exception {   assertThat(testResult(ShrinkingTimeout.class),hasSingleFailureContaining(\"Args: [\")); } ",
    "after": "@Test public void timeout(){   assertThat(testResult(ShrinkingTimeout.class),hasSingleFailureContaining(\"Args: [\")); } "
  },
  {
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 227,
    "nodeStartChar": 7525,
    "before": "\"Args: [\"",
    "after": "\"With arguments: [\""
  },
  {
    "commitSHA1": "2ea7486344cb9fc01896dd3bf8f459df3bb66b66",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java b/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java\nindex 68eea02..71267c8 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java\n@@ -241,7 +241,7 @@\n         if (comparison \u003d\u003d 0)\n             return min;\n \n-        return Ranges.choose(this, BigInteger.valueOf(min), BigInteger.valueOf(max)).longValue();\n+        return Ranges.choose(this, min, max);\n     }\n \n     /**\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java b/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java\nindex 68eea02..71267c8 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/random/SourceOfRandomness.java\n@@ -241,7 +241,7 @@\n         if (comparison \u003d\u003d 0)\n             return min;\n \n-        return Ranges.choose(this, BigInteger.valueOf(min), BigInteger.valueOf(max)).longValue();\n+        return Ranges.choose(this, min, max);\n     }\n \n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 244,
    "nodeStartChar": 7551,
    "before": "Ranges.choose(this,BigInteger.valueOf(min),BigInteger.valueOf(max))",
    "after": "Ranges"
  },
  {
    "commitSHA1": "02b6c0f8982892c4d067c03ef0aa073e1d856c12",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\n",
    "projectName": "junit-quickcheck",
    "lineNum": 43,
    "nodeStartChar": 1528,
    "before": "\"Property %s falsified.%n\" + \"Failure message: [%s]%n\" + \"Args: %s%n\"+ \"Seeds: %s%n\"",
    "after": "\"Property %s falsified.%s%n\" + \"Args: %s%n\" + \"Seeds: %s%n\""
  },
  {
    "commitSHA1": "02b6c0f8982892c4d067c03ef0aa073e1d856c12",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\n",
    "projectName": "junit-quickcheck",
    "lineNum": 64,
    "nodeStartChar": 2175,
    "before": "\"Property %s falsified via shrinking.%n\" + \"Shrink failure message: [%s]%n\" + \"Shrunken args: %s%n\"+ \"Original failure message: [%s]%n\"+ \"Original args: %s%n\"+ \"Seeds: %s%n\"",
    "after": "\"Property %s falsified via shrinking: %s%n\" + \"Shrunken args: %s%n\" + \"Original failure message: [%s]%n\"+ \"Original args: %s%n\"+ \"Seeds: %s%n\""
  },
  {
    "commitSHA1": "fe2f91f2563b6b0a18e1f0443625ab5addca3b13",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\n",
    "projectName": "junit-quickcheck",
    "lineNum": 43,
    "nodeStartChar": 1528,
    "before": "\"Property %s falsified.%n\" + \"Failure message: [%s]%n\" + \"Args: %s%n\"+ \"Seeds: %s%n\"",
    "after": "\"Property %s falsified.%s%n\" + \"Args: %s%n\" + \"Seeds: %s%n\""
  },
  {
    "commitSHA1": "fe2f91f2563b6b0a18e1f0443625ab5addca3b13",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\nindex 84834a1..26bd9f5 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/runner/PropertyFalsified.java\n@@ -40,8 +40,7 @@\n \n         return new AssertionError(\n             String.format(\n-                \"Property %s falsified.%n\"\n-                    + \"Failure message: [%s]%n\"\n+                \"Property %s falsified.%s%n\"\n                     + \"Args: %s%n\"\n                     + \"Seeds: %s%n\",\n                 propertyName,\n@@ -61,8 +60,7 @@\n \n         AssertionError e \u003d new AssertionError(\n             String.format(\n-                \"Property %s falsified via shrinking.%n\"\n-                    + \"Shrink failure message: [%s]%n\"\n+                \"Property %s falsified via shrinking: %s%n\"\n                     + \"Shrunken args: %s%n\"\n                     + \"Original failure message: [%s]%n\"\n                     + \"Original args: %s%n\"\n",
    "projectName": "junit-quickcheck",
    "lineNum": 64,
    "nodeStartChar": 2175,
    "before": "\"Property %s falsified via shrinking.%n\" + \"Shrink failure message: [%s]%n\" + \"Shrunken args: %s%n\"+ \"Original failure message: [%s]%n\"+ \"Original args: %s%n\"+ \"Seeds: %s%n\"",
    "after": "\"Property %s falsified via shrinking: %s%n\" + \"Shrunken args: %s%n\" + \"Original failure message: [%s]%n\"+ \"Original args: %s%n\"+ \"Seeds: %s%n\""
  },
  {
    "commitSHA1": "e1c4768b8a19676b3f56e995940010761a80cd1f",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/From.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/From.java b/core/src/main/java/com/pholser/junit/quickcheck/From.java\nindex ab89490..9b6db30 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/From.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/From.java\n@@ -41,7 +41,7 @@\n  * \u003cp\u003eIf any such generator produces values of a type incompatible with the type of the marked theory parameter,\n  * {@link IllegalArgumentException} is raised.\u003c/p\u003e\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface From {\n     /**\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/MarkingTypeUsesWithConfigurationTest.java b/core/src/test/java/com/pholser/junit/quickcheck/MarkingTypeUsesWithConfigurationTest.java\nindex 5451105..490d3af 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/MarkingTypeUsesWithConfigurationTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/MarkingTypeUsesWithConfigurationTest.java\n@@ -118,6 +118,7 @@\n         }\n     }\n \n+    /*\n     @Test public void alternateGeneratorOnGenericParameter() throws Exception {\n         assertThat(testResult(AlternateGeneratorOnGenericParameter.class), isSuccessful());\n     }\n@@ -130,4 +131,5 @@\n             assertThat(box.contents(), allOf(greaterThanOrEqualTo(3), lessThanOrEqualTo(4)));\n         }\n     }\n+     */\n }\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/From.java b/core/src/main/java/com/pholser/junit/quickcheck/From.java\nindex ab89490..9b6db30 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/From.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/From.java\n@@ -41,7 +41,7 @@\n  * \u003cp\u003eIf any such generator produces values of a type incompatible with the type of the marked theory parameter,\n  * {@link IllegalArgumentException} is raised.\u003c/p\u003e\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface From {\n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 44,
    "nodeStartChar": 1844,
    "before": "{PARAMETER,FIELD,TYPE_USE}",
    "after": "{PARAMETER,FIELD}"
  },
  {
    "commitSHA1": "c2f4c91d251a9e87cfbdc2b43d034597e07a566a",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/From.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/From.java b/core/src/main/java/com/pholser/junit/quickcheck/From.java\nindex ab89490..9b6db30 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/From.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/From.java\n@@ -41,7 +41,7 @@\n  * \u003cp\u003eIf any such generator produces values of a type incompatible with the type of the marked theory parameter,\n  * {@link IllegalArgumentException} is raised.\u003c/p\u003e\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface From {\n     /**\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/From.java b/core/src/main/java/com/pholser/junit/quickcheck/From.java\nindex ab89490..9b6db30 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/From.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/From.java\n@@ -41,7 +41,7 @@\n  * \u003cp\u003eIf any such generator produces values of a type incompatible with the type of the marked theory parameter,\n  * {@link IllegalArgumentException} is raised.\u003c/p\u003e\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface From {\n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 44,
    "nodeStartChar": 1844,
    "before": "{PARAMETER,FIELD,TYPE_USE}",
    "after": "{PARAMETER,FIELD}"
  },
  {
    "commitSHA1": "cc1d69a01d866efb5e03937978d20d956ffe6159",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\nindex 506d9d6..39e5e9f 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n@@ -35,7 +35,7 @@\n  * Mark a parameter of a {@link org.junit.contrib.theories.Theory Theory} method already marked with {@link ForAll}\n  * with this annotation to constrain the values generated for it.\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface SuchThat {\n     /**\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\nindex 506d9d6..39e5e9f 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n@@ -35,7 +35,7 @@\n  * Mark a parameter of a {@link org.junit.contrib.theories.Theory Theory} method already marked with {@link ForAll}\n  * with this annotation to constrain the values generated for it.\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface SuchThat {\n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 38,
    "nodeStartChar": 1528,
    "before": "{PARAMETER,FIELD,TYPE_USE}",
    "after": "{PARAMETER,FIELD}"
  },
  {
    "commitSHA1": "3374a3217cbf151e506a7f5427e1fa5dfe179198",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\nindex 506d9d6..39e5e9f 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n@@ -35,7 +35,7 @@\n  * Mark a parameter of a {@link org.junit.contrib.theories.Theory Theory} method already marked with {@link ForAll}\n  * with this annotation to constrain the values generated for it.\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface SuchThat {\n     /**\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\nindex 506d9d6..39e5e9f 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/SuchThat.java\n@@ -35,7 +35,7 @@\n  * Mark a parameter of a {@link org.junit.contrib.theories.Theory Theory} method already marked with {@link ForAll}\n  * with this annotation to constrain the values generated for it.\n  */\n-@Target({ PARAMETER, FIELD, TYPE_USE })\n+@Target({ PARAMETER, FIELD })\n @Retention(RUNTIME)\n public @interface SuchThat {\n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 38,
    "nodeStartChar": 1528,
    "before": "{PARAMETER,FIELD,TYPE_USE}",
    "after": "{PARAMETER,FIELD}"
  },
  {
    "commitSHA1": "14f3cd3b31f5888f14eb516d453dbd734ad28ee6",
    "commitFile": "generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java",
    "patch": "diff --git a/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java b/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java\nindex 6f37e00..e3b56d0 100644\n--- a/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java\n+++ b/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java\n@@ -58,7 +58,7 @@\n \n         protected final void setVersion(byte[] bytes, byte mask) {\n             bytes[6] \u0026\u003d 0x0F;\n-            bytes[6] \u0026\u003d mask;\n+            bytes[6] |\u003d mask;\n         }\n \n         protected final void setVariant(byte[] bytes) {\ndiff --git a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java\nindex 27d4b00..5012d39 100644\n--- a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java\n+++ b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java\n@@ -42,10 +42,10 @@\n     }\n \n     @Override protected List\u003c?\u003e randomValues() {\n-        return asList(UUID.fromString(\"c87ee674-4ddc-00fe-a74e-dfe25da5d7b3\"),\n-            UUID.fromString(\"4c104dd0-4821-00d5-9ce3-0e7a1f8b7c0d\"),\n-            UUID.fromString(\"64e53c89-a376-0078-b06b-659a3cb12c7e\"),\n-            UUID.fromString(\"6328f051-6873-0041-b344-350089a65da0\"));\n+        return asList(UUID.fromString(\"c87ee674-4ddc-3efe-a74e-dfe25da5d7b3\"),\n+            UUID.fromString(\"4c104dd0-4821-30d5-9ce3-0e7a1f8b7c0d\"),\n+            UUID.fromString(\"64e53c89-a376-3b78-b06b-659a3cb12c7e\"),\n+            UUID.fromString(\"6328f051-6873-3241-b344-350089a65da0\"));\n     }\n \n     @Override public void verifyInteractionWithRandomness() {\ndiff --git a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java\nindex 56a3872..9844584 100644\n--- a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java\n+++ b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java\n@@ -33,8 +33,8 @@\n     }\n \n     @Override protected List\u003c?\u003e randomValues() {\n-        return asList(UUID.fromString(\"00010203-0405-0007-8809-0a0b0c0d0e0f\"),\n-            UUID.fromString(\"08090a0b-0c0d-000f-8001-020304050607\"));\n+        return asList(UUID.fromString(\"00010203-0405-4607-8809-0a0b0c0d0e0f\"),\n+            UUID.fromString(\"08090a0b-0c0d-4e0f-8001-020304050607\"));\n     }\n \n     @Override public void verifyInteractionWithRandomness() {\ndiff --git a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java\nindex b2ba32a..44118f0 100644\n--- a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java\n+++ b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java\n@@ -42,10 +42,10 @@\n     }\n \n     @Override protected List\u003c?\u003e randomValues() {\n-        return asList(UUID.fromString(\"4ebd0208-8328-0069-8c44-ec50939c0967\"),\n-            UUID.fromString(\"4f3f2898-69e3-000d-820a-c4e87987dbce\"),\n-            UUID.fromString(\"656c78e8-4631-00ef-9c7f-e2795ecee6d6\"),\n-            UUID.fromString(\"96aa5957-8466-0038-9bbb-adf7eab336c9\"));\n+        return asList(UUID.fromString(\"4ebd0208-8328-5d69-8c44-ec50939c0967\"),\n+            UUID.fromString(\"4f3f2898-69e3-5a0d-820a-c4e87987dbce\"),\n+            UUID.fromString(\"656c78e8-4631-5bef-9c7f-e2795ecee6d6\"),\n+            UUID.fromString(\"96aa5957-8466-5a38-9bbb-adf7eab336c9\"));\n     }\n \n     @Override public void verifyInteractionWithRandomness() {\ndiff --git a/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java b/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java\nindex 6f37e00..e3b56d0 100644\n--- a/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java\n+++ b/generators/src/main/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122.java\n@@ -58,7 +58,7 @@\n \n         protected final void setVersion(byte[] bytes, byte mask) {\n             bytes[6] \u0026\u003d 0x0F;\n-            bytes[6] \u0026\u003d mask;\n+            bytes[6] |\u003d mask;\n         }\n \n         protected final void setVariant(byte[] bytes) {\n",
    "projectName": "junit-quickcheck",
    "lineNum": 61,
    "nodeStartChar": 2440,
    "before": "bytes[6]\u0026\u003dmask",
    "after": "bytes[6]|\u003dmask"
  },
  {
    "commitSHA1": "14f3cd3b31f5888f14eb516d453dbd734ad28ee6",
    "commitFile": "generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java",
    "patch": "diff --git a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java\nindex 27d4b00..5012d39 100644\n--- a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java\n+++ b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version3Test.java\n@@ -42,10 +42,10 @@\n     }\n \n     @Override protected List\u003c?\u003e randomValues() {\n-        return asList(UUID.fromString(\"c87ee674-4ddc-00fe-a74e-dfe25da5d7b3\"),\n-            UUID.fromString(\"4c104dd0-4821-00d5-9ce3-0e7a1f8b7c0d\"),\n-            UUID.fromString(\"64e53c89-a376-0078-b06b-659a3cb12c7e\"),\n-            UUID.fromString(\"6328f051-6873-0041-b344-350089a65da0\"));\n+        return asList(UUID.fromString(\"c87ee674-4ddc-3efe-a74e-dfe25da5d7b3\"),\n+            UUID.fromString(\"4c104dd0-4821-30d5-9ce3-0e7a1f8b7c0d\"),\n+            UUID.fromString(\"64e53c89-a376-3b78-b06b-659a3cb12c7e\"),\n+            UUID.fromString(\"6328f051-6873-3241-b344-350089a65da0\"));\n     }\n \n     @Override public void verifyInteractionWithRandomness() {\n",
    "projectName": "junit-quickcheck",
    "lineNum": 45,
    "nodeStartChar": 1648,
    "before": "asList(UUID.fromString(\"c87ee674-4ddc-00fe-a74e-dfe25da5d7b3\"),UUID.fromString(\"4c104dd0-4821-00d5-9ce3-0e7a1f8b7c0d\"),UUID.fromString(\"64e53c89-a376-0078-b06b-659a3cb12c7e\"),UUID.fromString(\"6328f051-6873-0041-b344-350089a65da0\"))",
    "after": "asList(UUID.fromString(\"c87ee674-4ddc-3efe-a74e-dfe25da5d7b3\"),UUID.fromString(\"4c104dd0-4821-30d5-9ce3-0e7a1f8b7c0d\"),UUID.fromString(\"64e53c89-a376-3b78-b06b-659a3cb12c7e\"),UUID.fromString(\"6328f051-6873-3241-b344-350089a65da0\"))"
  },
  {
    "commitSHA1": "14f3cd3b31f5888f14eb516d453dbd734ad28ee6",
    "commitFile": "generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java",
    "patch": "diff --git a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java\nindex 56a3872..9844584 100644\n--- a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java\n+++ b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version4Test.java\n@@ -33,8 +33,8 @@\n     }\n \n     @Override protected List\u003c?\u003e randomValues() {\n-        return asList(UUID.fromString(\"00010203-0405-0007-8809-0a0b0c0d0e0f\"),\n-            UUID.fromString(\"08090a0b-0c0d-000f-8001-020304050607\"));\n+        return asList(UUID.fromString(\"00010203-0405-4607-8809-0a0b0c0d0e0f\"),\n+            UUID.fromString(\"08090a0b-0c0d-4e0f-8001-020304050607\"));\n     }\n \n     @Override public void verifyInteractionWithRandomness() {\n",
    "projectName": "junit-quickcheck",
    "lineNum": 36,
    "nodeStartChar": 1277,
    "before": "asList(UUID.fromString(\"00010203-0405-0007-8809-0a0b0c0d0e0f\"),UUID.fromString(\"08090a0b-0c0d-000f-8001-020304050607\"))",
    "after": "asList(UUID.fromString(\"00010203-0405-4607-8809-0a0b0c0d0e0f\"),UUID.fromString(\"08090a0b-0c0d-4e0f-8001-020304050607\"))"
  },
  {
    "commitSHA1": "14f3cd3b31f5888f14eb516d453dbd734ad28ee6",
    "commitFile": "generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java",
    "patch": "diff --git a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java\nindex b2ba32a..44118f0 100644\n--- a/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java\n+++ b/generators/src/test/java/com/pholser/junit/quickcheck/generator/java/util/RFC4122Version5Test.java\n@@ -42,10 +42,10 @@\n     }\n \n     @Override protected List\u003c?\u003e randomValues() {\n-        return asList(UUID.fromString(\"4ebd0208-8328-0069-8c44-ec50939c0967\"),\n-            UUID.fromString(\"4f3f2898-69e3-000d-820a-c4e87987dbce\"),\n-            UUID.fromString(\"656c78e8-4631-00ef-9c7f-e2795ecee6d6\"),\n-            UUID.fromString(\"96aa5957-8466-0038-9bbb-adf7eab336c9\"));\n+        return asList(UUID.fromString(\"4ebd0208-8328-5d69-8c44-ec50939c0967\"),\n+            UUID.fromString(\"4f3f2898-69e3-5a0d-820a-c4e87987dbce\"),\n+            UUID.fromString(\"656c78e8-4631-5bef-9c7f-e2795ecee6d6\"),\n+            UUID.fromString(\"96aa5957-8466-5a38-9bbb-adf7eab336c9\"));\n     }\n \n     @Override public void verifyInteractionWithRandomness() {\n",
    "projectName": "junit-quickcheck",
    "lineNum": 45,
    "nodeStartChar": 1648,
    "before": "asList(UUID.fromString(\"4ebd0208-8328-0069-8c44-ec50939c0967\"),UUID.fromString(\"4f3f2898-69e3-000d-820a-c4e87987dbce\"),UUID.fromString(\"656c78e8-4631-00ef-9c7f-e2795ecee6d6\"),UUID.fromString(\"96aa5957-8466-0038-9bbb-adf7eab336c9\"))",
    "after": "asList(UUID.fromString(\"4ebd0208-8328-5d69-8c44-ec50939c0967\"),UUID.fromString(\"4f3f2898-69e3-5a0d-820a-c4e87987dbce\"),UUID.fromString(\"656c78e8-4631-5bef-9c7f-e2795ecee6d6\"),UUID.fromString(\"96aa5957-8466-5a38-9bbb-adf7eab336c9\"))"
  },
  {
    "commitSHA1": "a242a323e6dcd656b3bfcb0eb594202b4532130c",
    "commitFile": "src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java",
    "patch": "diff --git a/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java b/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java\nindex 6069e35..2b30cfa 100644\n--- a/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java\n+++ b/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java\n@@ -115,7 +115,7 @@\n             org.javaruntype.type.Type\u003cObject[]\u003e arrayTypeToken \u003d (org.javaruntype.type.Type\u003cObject[]\u003e) typeToken;\n \n             org.javaruntype.type.Type\u003c?\u003e component \u003d arrayComponentOf(arrayTypeToken);\n-            return new ArrayGenerator(component.getRawClass(), generatorForTypeToken(component, allowMixedTypes));\n+            return new ArrayGenerator(component.getRawClass(), generatorForTypeToken(component, true));\n         }\n         \n         if (typeToken.getRawClass().isEnum())\ndiff --git a/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java b/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java\nindex 6069e35..2b30cfa 100644\n--- a/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java\n+++ b/src/main/java/com/pholser/junit/quickcheck/internal/generator/GeneratorRepository.java\n@@ -115,7 +115,7 @@\n             org.javaruntype.type.Type\u003cObject[]\u003e arrayTypeToken \u003d (org.javaruntype.type.Type\u003cObject[]\u003e) typeToken;\n \n             org.javaruntype.type.Type\u003c?\u003e component \u003d arrayComponentOf(arrayTypeToken);\n-            return new ArrayGenerator(component.getRawClass(), generatorForTypeToken(component, allowMixedTypes));\n+            return new ArrayGenerator(component.getRawClass(), generatorForTypeToken(component, true));\n         }\n         \n         if (typeToken.getRawClass().isEnum())\n",
    "projectName": "junit-quickcheck",
    "lineNum": 118,
    "nodeStartChar": 4501,
    "before": "allowMixedTypes",
    "after": "true"
  },
  {
    "commitSHA1": "90c2ed08322d3e783939b3dde3bfc370ebc73baf",
    "commitFile": "src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java",
    "patch": "diff --git a/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java b/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java\nindex 20a6b58..bc47024 100644\n--- a/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java\n+++ b/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java\n@@ -34,7 +34,7 @@\n public class BasicExtractorSource implements Iterable\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e {\n     @Override\n     public Iterator\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e iterator() {\n-        List\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e extractors \u003d Arrays.\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e asList(\n+        List\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e extractors \u003d Arrays.asList(\n             new ObjectExtractor(),\n             new BigDecimalExtractor(),\n             new BigIntegerExtractor(),\ndiff --git a/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java b/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java\nindex 20a6b58..bc47024 100644\n--- a/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java\n+++ b/src/main/java/com/pholser/junit/quickcheck/internal/extractors/BasicExtractorSource.java\n@@ -34,7 +34,7 @@\n public class BasicExtractorSource implements Iterable\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e {\n     @Override\n     public Iterator\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e iterator() {\n-        List\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e extractors \u003d Arrays.\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e asList(\n+        List\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003e extractors \u003d Arrays.asList(\n             new ObjectExtractor(),\n             new BigDecimalExtractor(),\n             new BigIntegerExtractor(),\n",
    "projectName": "junit-quickcheck",
    "lineNum": 37,
    "nodeStartChar": 1556,
    "before": "Arrays.\u003cRegisterableRandomValueExtractor\u003c?\u003e\u003easList(new ObjectExtractor(),new BigDecimalExtractor(),new BigIntegerExtractor(),new BooleanExtractor(),new ByteExtractor(),new CharacterExtractor(),new DoubleExtractor(),new FloatExtractor(),new IntegerExtractor(),new LongExtractor(),new ShortExtractor())",
    "after": "Arrays.asList(new ObjectExtractor(),new BigDecimalExtractor(),new BigIntegerExtractor(),new BooleanExtractor(),new ByteExtractor(),new CharacterExtractor(),new DoubleExtractor(),new FloatExtractor(),new IntegerExtractor(),new LongExtractor(),new ShortExtractor())"
  },
  {
    "commitSHA1": "962f7bac5ff4a6ff04facc5c1b71aab5b34e6710",
    "commitFile": "src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java",
    "patch": "diff --git a/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java b/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java\nindex a2a874c..c0e9e2f 100644\n--- a/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java\n+++ b/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java\n@@ -87,7 +87,7 @@\n         JUnitCore.runClasses(ForDefaultNumberOfBooleanWrappers.class);\r\n \r\n         assertEquals(ForAll.class.getMethod(\"sampleSize\").getDefaultValue(),\r\n-            ForDefaultNumberOfBooleans.iterations);\r\n+            ForDefaultNumberOfBooleanWrappers.iterations);\r\n     }\r\n \r\n     @RunWith(Theories.class)\r\n@@ -119,9 +119,9 @@\n \r\n     @Test\r\n     public void shouldAllowDifferentNumberOfRandomValuesOnAMarkedParameter() {\r\n-        JUnitCore.runClasses(ForDefaultNumberOfStrings.class);\r\n+        JUnitCore.runClasses(ForSpecifiedNumberOfStrings.class);\r\n \r\n-        assertEquals(200, ForDefaultNumberOfStrings.iterations);\r\n+        assertEquals(200, ForSpecifiedNumberOfStrings.iterations);\r\n     }\r\n \r\n     @RunWith(Theories.class)\r\n",
    "projectName": "junit-quickcheck",
    "lineNum": 122,
    "nodeStartChar": 3629,
    "before": "ForDefaultNumberOfStrings",
    "after": "ForSpecifiedNumberOfStrings"
  },
  {
    "commitSHA1": "4f4272c4d2922ae7934971c19153fb3e879e1da8",
    "commitFile": "keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java",
    "patch": "diff --git a/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java b/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java\nindex 0ab5c86..e5fb9af 100644\n--- a/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java\n+++ b/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java\n@@ -115,7 +115,7 @@\n     private ArtifactMetadataSource artifactMetadataSource;\n \n     @Component\n-    private LegacyArtifactCollector artifactCollector;\n+    private org.apache.maven.artifact.resolver.ArtifactCollector artifactCollector;\n \n     @Component\n     private DependencyTreeBuilder treeBuilder;\ndiff --git a/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java b/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java\nindex 0ab5c86..e5fb9af 100644\n--- a/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java\n+++ b/keystone-plugin/src/main/java/org/intelligentsia/keystone/BootStrapMojo.java\n@@ -115,7 +115,7 @@\n     private ArtifactMetadataSource artifactMetadataSource;\n \n     @Component\n-    private LegacyArtifactCollector artifactCollector;\n+    private org.apache.maven.artifact.resolver.ArtifactCollector artifactCollector;\n \n     @Component\n     private DependencyTreeBuilder treeBuilder;\n",
    "projectName": "keystone",
    "lineNum": 118,
    "nodeStartChar": 4698,
    "before": "LegacyArtifactCollector",
    "after": "org.apache.maven.artifact.resolver.ArtifactCollector"
  },
  {
    "commitSHA1": "72bb09c0921ef931cec6b998b71ebd97f9286641",
    "commitFile": "modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java",
    "patch": "diff --git a/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java b/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java\nindex d6a2290..e562a85 100644\n--- a/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java\n+++ b/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java\n@@ -82,7 +82,7 @@\n \t\t}));\n \n \t\t// launch\n-\t\tLaunchers.launchUntil(holder.getKernel(), Predicates.awaitTerminaison(1, TimeUnit.SECONDS));\n+\t\tLaunchers.launchUntil(holder.getKernel(), Predicates.awaitTerminaison(1, TimeUnit.SECONDS)).launch(holder.getKernel());\n \t}\n \n \t/**\ndiff --git a/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java b/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java\nindex d6a2290..e562a85 100644\n--- a/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java\n+++ b/modules/keystone-kernel/src/main/java/org/intelligentsia/keystone/kernel/init/KeystoneApplication.java\n@@ -82,7 +82,7 @@\n \t\t}));\n \n \t\t// launch\n-\t\tLaunchers.launchUntil(holder.getKernel(), Predicates.awaitTerminaison(1, TimeUnit.SECONDS));\n+\t\tLaunchers.launchUntil(holder.getKernel(), Predicates.awaitTerminaison(1, TimeUnit.SECONDS)).launch(holder.getKernel());\n \t}\n \n \t/**\n",
    "projectName": "keystone",
    "lineNum": 85,
    "nodeStartChar": 2705,
    "before": "Launchers",
    "after": "Launchers.launchUntil(holder.getKernel(),Predicates.awaitTerminaison(1,TimeUnit.SECONDS))"
  },
  {
    "commitSHA1": "e70361844d261a181b4341ba4f1526e47cbc10da",
    "commitFile": "src/main/java/com/hpe/leanft/selenium/By.java",
    "patch": "diff --git a/src/main/java/com/hpe/leanft/selenium/By.java b/src/main/java/com/hpe/leanft/selenium/By.java\nindex 37c3376..a68b532 100644\n--- a/src/main/java/com/hpe/leanft/selenium/By.java\n+++ b/src/main/java/com/hpe/leanft/selenium/By.java\n@@ -654,7 +654,7 @@\n \t\t\t\t\tnull,\n \t\t\t\t\t\"tagName\",\n \t\t\t\t\tpattern.pattern(),\n-\t\t\t\t\tInternalUtils.flagsToString(pattern)\n+\t\t\t\t\t\"i\"\n \t\t\t);\n \n \t\t\tif (matchedElements \u003d\u003d null || matchedElements.size() \u003d\u003d 0) {\ndiff --git a/src/main/java/com/hpe/leanft/selenium/By.java b/src/main/java/com/hpe/leanft/selenium/By.java\nindex 37c3376..a68b532 100644\n--- a/src/main/java/com/hpe/leanft/selenium/By.java\n+++ b/src/main/java/com/hpe/leanft/selenium/By.java\n@@ -654,7 +654,7 @@\n \t\t\t\t\tnull,\n \t\t\t\t\t\"tagName\",\n \t\t\t\t\tpattern.pattern(),\n-\t\t\t\t\tInternalUtils.flagsToString(pattern)\n+\t\t\t\t\t\"i\"\n \t\t\t);\n \n \t\t\tif (matchedElements \u003d\u003d null || matchedElements.size() \u003d\u003d 0) {\n",
    "projectName": "leanft-selenium-java-sdk",
    "lineNum": 657,
    "nodeStartChar": 21512,
    "before": "InternalUtils.flagsToString(pattern)",
    "after": "\"i\""
  },
  {
    "commitSHA1": "837361e27e637d7e6cc631a06ea6a30b5de30311",
    "commitFile": "common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java",
    "patch": "diff --git a/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java b/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java\nindex dac4bc4..7de2cf6 100644\n--- a/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java\n+++ b/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java\n@@ -90,7 +90,7 @@\n             throws IllegalStateException {\n         if(httpResponse \u003d\u003d null) {\n             throw new IllegalStateException(\n-                    \"Only call getError() if isSucceeded returned true\");\n+                    \"Only call getHttpResponse() if isSucceeded returned true\");\n         }\n \n         return httpResponse;\ndiff --git a/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java b/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java\nindex dac4bc4..7de2cf6 100644\n--- a/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java\n+++ b/common/src/main/java/ar/com/zauber/leviathan/common/InmutableURIFetcherResponse.java\n@@ -90,7 +90,7 @@\n             throws IllegalStateException {\n         if(httpResponse \u003d\u003d null) {\n             throw new IllegalStateException(\n-                    \"Only call getError() if isSucceeded returned true\");\n+                    \"Only call getHttpResponse() if isSucceeded returned true\");\n         }\n \n         return httpResponse;\n",
    "projectName": "leviathan",
    "lineNum": 93,
    "nodeStartChar": 3122,
    "before": "\"Only call getError() if isSucceeded returned true\"",
    "after": "\"Only call getHttpResponse() if isSucceeded returned true\""
  },
  {
    "commitSHA1": "865a0415c734ed5aa76a0b74653e66b38b836d92",
    "commitFile": "httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java",
    "patch": "diff --git a/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java b/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java\nindex 5920771..8712be8 100644\n--- a/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java\n+++ b/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java\n@@ -116,8 +116,8 @@\n         for (String key : body.keySet()) {\n             pairs.add(new NameValuePair(key, body.get(key)));\n         }\n-        final String content \u003d EncodingUtil.formUrlEncode(\n-                (NameValuePair[]) pairs.toArray(), \"UTF-8\");\n+        final String content \u003d EncodingUtil.formUrlEncode(pairs\n+                .toArray(new NameValuePair[0]), \"UTF-8\");\n         final ByteArrayEntity entity \u003d new ByteArrayEntity(content.getBytes());\n         entity.setContentType(\"application/x-www-form-urlencoded\");\n         httpPost.setEntity(entity);\ndiff --git a/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java b/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java\nindex 5920771..8712be8 100644\n--- a/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java\n+++ b/httpclient/src/main/java/ar/com/zauber/leviathan/impl/httpclient/HTTPClientURIFetcher.java\n@@ -116,8 +116,8 @@\n         for (String key : body.keySet()) {\n             pairs.add(new NameValuePair(key, body.get(key)));\n         }\n-        final String content \u003d EncodingUtil.formUrlEncode(\n-                (NameValuePair[]) pairs.toArray(), \"UTF-8\");\n+        final String content \u003d EncodingUtil.formUrlEncode(pairs\n+                .toArray(new NameValuePair[0]), \"UTF-8\");\n         final ByteArrayEntity entity \u003d new ByteArrayEntity(content.getBytes());\n         entity.setContentType(\"application/x-www-form-urlencoded\");\n         httpPost.setEntity(entity);\n",
    "projectName": "leviathan",
    "lineNum": 119,
    "nodeStartChar": 4485,
    "before": "(NameValuePair[])pairs.toArray()",
    "after": "pairs.toArray(new NameValuePair[0])"
  },
  {
    "commitSHA1": "fb9526f6685fc1fc9f22eba6fafba8ef8425c059",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\nindex c640599..7f92e4c 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n@@ -154,7 +154,7 @@\n         final HMACHashUtilities hmac \u003d new HMACHashUtilities();\n \n         // Prepare array for signature binary components.\n-        final ArrayList\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n+        final List\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n \n         final CryptoProviderUtil keyConverter \u003d PowerAuthConfiguration.INSTANCE.getKeyConvertor();\n \ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\nindex c640599..7f92e4c 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n@@ -154,7 +154,7 @@\n         final HMACHashUtilities hmac \u003d new HMACHashUtilities();\n \n         // Prepare array for signature binary components.\n-        final ArrayList\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n+        final List\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n \n         final CryptoProviderUtil keyConverter \u003d PowerAuthConfiguration.INSTANCE.getKeyConvertor();\n \n",
    "projectName": "lime-security-powerauth",
    "lineNum": 157,
    "nodeStartChar": 8455,
    "before": "ArrayList",
    "after": "List"
  },
  {
    "commitSHA1": "b0fb9049ac44e4f8ce08dcf0f82e71c8d1962ba8",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\nindex bc0ffb0..51ca874 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n@@ -215,7 +215,7 @@\n             PBEKeySpec spec \u003d new PBEKeySpec(password.toCharArray(), salt, iterations, 128);\n             SecretKeyFactory skf \u003d SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\", PowerAuthConfiguration.INSTANCE.getKeyConvertor().getProviderName());\n             byte[] keyBytes \u003d skf.generateSecret(spec).getEncoded();\n-            return new SecretKeySpec(keyBytes, \"AES/ECB/NoPadding\");\n+            return new SecretKeySpec(keyBytes, \"AES\");\n         } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException ex) {\n             throw new CryptoProviderException(ex.getMessage(), ex);\n         }\ndiff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\nindex a44f137..e7a41af 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n@@ -150,7 +150,7 @@\n      * @return An instance of the secret key by decoding from provided bytes.\n      */\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\ndiff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\nindex 98acfe8..a382010 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n@@ -143,7 +143,7 @@\n      */\n     @Override\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\nindex bc0ffb0..51ca874 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n@@ -215,7 +215,7 @@\n             PBEKeySpec spec \u003d new PBEKeySpec(password.toCharArray(), salt, iterations, 128);\n             SecretKeyFactory skf \u003d SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\", PowerAuthConfiguration.INSTANCE.getKeyConvertor().getProviderName());\n             byte[] keyBytes \u003d skf.generateSecret(spec).getEncoded();\n-            return new SecretKeySpec(keyBytes, \"AES/ECB/NoPadding\");\n+            return new SecretKeySpec(keyBytes, \"AES\");\n         } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException ex) {\n             throw new CryptoProviderException(ex.getMessage(), ex);\n         }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 218,
    "nodeStartChar": 10232,
    "before": "\"AES/ECB/NoPadding\"",
    "after": "\"AES\""
  },
  {
    "commitSHA1": "b0fb9049ac44e4f8ce08dcf0f82e71c8d1962ba8",
    "commitFile": "powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java",
    "patch": "diff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\nindex a44f137..e7a41af 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n@@ -150,7 +150,7 @@\n      * @return An instance of the secret key by decoding from provided bytes.\n      */\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 153,
    "nodeStartChar": 7355,
    "before": "\"AES/ECB/NoPadding\"",
    "after": "\"AES\""
  },
  {
    "commitSHA1": "b0fb9049ac44e4f8ce08dcf0f82e71c8d1962ba8",
    "commitFile": "powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java",
    "patch": "diff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\nindex 98acfe8..a382010 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n@@ -143,7 +143,7 @@\n      */\n     @Override\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 146,
    "nodeStartChar": 5851,
    "before": "\"AES/ECB/NoPadding\"",
    "after": "\"AES\""
  },
  {
    "commitSHA1": "f4b16410702ddd15ab328524e5ac21fe28e852db",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\nindex bc0ffb0..51ca874 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n@@ -215,7 +215,7 @@\n             PBEKeySpec spec \u003d new PBEKeySpec(password.toCharArray(), salt, iterations, 128);\n             SecretKeyFactory skf \u003d SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\", PowerAuthConfiguration.INSTANCE.getKeyConvertor().getProviderName());\n             byte[] keyBytes \u003d skf.generateSecret(spec).getEncoded();\n-            return new SecretKeySpec(keyBytes, \"AES/ECB/NoPadding\");\n+            return new SecretKeySpec(keyBytes, \"AES\");\n         } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException ex) {\n             throw new CryptoProviderException(ex.getMessage(), ex);\n         }\ndiff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\nindex 68fe249..5ae7d2b 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n@@ -138,7 +138,7 @@\n      * @return An instance of the secret key by decoding from provided bytes.\n      */\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\ndiff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\nindex 98acfe8..a382010 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n@@ -143,7 +143,7 @@\n      */\n     @Override\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\nindex bc0ffb0..51ca874 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/generator/KeyGenerator.java\n@@ -215,7 +215,7 @@\n             PBEKeySpec spec \u003d new PBEKeySpec(password.toCharArray(), salt, iterations, 128);\n             SecretKeyFactory skf \u003d SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\", PowerAuthConfiguration.INSTANCE.getKeyConvertor().getProviderName());\n             byte[] keyBytes \u003d skf.generateSecret(spec).getEncoded();\n-            return new SecretKeySpec(keyBytes, \"AES/ECB/NoPadding\");\n+            return new SecretKeySpec(keyBytes, \"AES\");\n         } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException ex) {\n             throw new CryptoProviderException(ex.getMessage(), ex);\n         }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 218,
    "nodeStartChar": 10232,
    "before": "\"AES/ECB/NoPadding\"",
    "after": "\"AES\""
  },
  {
    "commitSHA1": "f4b16410702ddd15ab328524e5ac21fe28e852db",
    "commitFile": "powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java",
    "patch": "diff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\nindex 68fe249..5ae7d2b 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilBouncyCastle.java\n@@ -138,7 +138,7 @@\n      * @return An instance of the secret key by decoding from provided bytes.\n      */\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 141,
    "nodeStartChar": 5768,
    "before": "\"AES/ECB/NoPadding\"",
    "after": "\"AES\""
  },
  {
    "commitSHA1": "f4b16410702ddd15ab328524e5ac21fe28e852db",
    "commitFile": "powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java",
    "patch": "diff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\nindex 98acfe8..a382010 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilsSpongyCastle.java\n@@ -143,7 +143,7 @@\n      */\n     @Override\n     public SecretKey convertBytesToSharedSecretKey(byte[] bytesSecretKey) {\n-        return new SecretKeySpec(bytesSecretKey, \"AES/ECB/NoPadding\");\n+        return new SecretKeySpec(bytesSecretKey, \"AES\");\n     }\n \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 146,
    "nodeStartChar": 5851,
    "before": "\"AES/ECB/NoPadding\"",
    "after": "\"AES\""
  },
  {
    "commitSHA1": "14b366dc8331024d060446b85584135d57ae7725",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java\nindex 4e5d399..86bbb7a 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java\n@@ -90,7 +90,7 @@\n         Argon2Parameters.Builder builder \u003d new Argon2Parameters.Builder(algorithmId)\n                 .withVersion(input.getVersion())\n                 .withIterations(input.getIterations())\n-                .withMemoryAsKB(input.getMemory() / 1024)\n+                .withMemoryAsKB(input.getMemory())\n                 .withParallelism(input.getParallelism())\n                 .withSalt(input.getSalt());\n         Argon2Parameters parameters \u003d builder.build();\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java\nindex 4e5d399..86bbb7a 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/PasswordHash.java\n@@ -90,7 +90,7 @@\n         Argon2Parameters.Builder builder \u003d new Argon2Parameters.Builder(algorithmId)\n                 .withVersion(input.getVersion())\n                 .withIterations(input.getIterations())\n-                .withMemoryAsKB(input.getMemory() / 1024)\n+                .withMemoryAsKB(input.getMemory())\n                 .withParallelism(input.getParallelism())\n                 .withSalt(input.getSalt());\n         Argon2Parameters parameters \u003d builder.build();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 93,
    "nodeStartChar": 3896,
    "before": "input.getMemory() / 1024",
    "after": "input.getMemory()"
  },
  {
    "commitSHA1": "80a031e3531a362f8efe7132dd7fe4fa1bc87c85",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\nindex 8597aeb..19dbcbc 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n@@ -26,7 +26,7 @@\n     APPLICATION_SCOPE_GENERIC(\"/pa/generic/application\"),\n     ACTIVATION_SCOPE_GENERIC(\"/pa/generic/activation\"),\n     ACTIVATION_LAYER_2(\"/pa/activation\"),\n-    MIGRATION(\"/pa/migration\"),\n+    UPGRADE(\"/pa/upgrade\"),\n     VAULT_UNLOCK(\"/pa/vault/unlock\"),\n     CREATE_TOKEN(\"/pa/token/create\");\n \ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java\nindex 82703f7..3f8cae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java\n@@ -83,16 +83,16 @@\n     }\n \n     /**\n-     * Get crypto version for possible migration.\n-     * @return Crypto version for possible migration.\n+     * Get crypto version for possible upgrade.\n+     * @return Crypto version for possible upgrade.\n      */\n     public byte getUpgradeVersion() {\n         return upgradeVersion;\n     }\n \n     /**\n-     * Set crypto version for possible migration.\n-     * @param upgradeVersion Crypto version for possible migration.\n+     * Set crypto version for possible upgrade.\n+     * @param upgradeVersion Crypto version for possible upgrade.\n      */\n     public void setUpgradeVersion(byte upgradeVersion) {\n         this.upgradeVersion \u003d upgradeVersion;\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java\nindex 89f2478..c95d318 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java\n@@ -239,7 +239,7 @@\n      * Returns an encrypted status blob as described in PowerAuth Specification.\n      * @param statusByte Byte determining the status of the activation.\n      * @param currentVersionByte Current crypto protocol version.\n-     * @param upgradeVersionByte Crypto version for possible migration.\n+     * @param upgradeVersionByte Crypto version for possible upgrade.\n      * @param failedAttempts Number of failed attempts at the moment.\n      * @param maxFailedAttempts Number of allowed failed attempts.\n      * @param transportKey A key used to protect the transport.\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\nindex 8597aeb..19dbcbc 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n@@ -26,7 +26,7 @@\n     APPLICATION_SCOPE_GENERIC(\"/pa/generic/application\"),\n     ACTIVATION_SCOPE_GENERIC(\"/pa/generic/activation\"),\n     ACTIVATION_LAYER_2(\"/pa/activation\"),\n-    MIGRATION(\"/pa/migration\"),\n+    UPGRADE(\"/pa/upgrade\"),\n     VAULT_UNLOCK(\"/pa/vault/unlock\"),\n     CREATE_TOKEN(\"/pa/token/create\");\n \n",
    "projectName": "lime-security-powerauth",
    "lineNum": 29,
    "nodeStartChar": 967,
    "before": "MIGRATION(\"/pa/migration\")",
    "after": "UPGRADE(\"/pa/upgrade\")"
  },
  {
    "commitSHA1": "60e6f534048ab5bf35f2378d0790ccb933bdb321",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\nindex 8597aeb..19dbcbc 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n@@ -26,7 +26,7 @@\n     APPLICATION_SCOPE_GENERIC(\"/pa/generic/application\"),\n     ACTIVATION_SCOPE_GENERIC(\"/pa/generic/activation\"),\n     ACTIVATION_LAYER_2(\"/pa/activation\"),\n-    MIGRATION(\"/pa/migration\"),\n+    UPGRADE(\"/pa/upgrade\"),\n     VAULT_UNLOCK(\"/pa/vault/unlock\"),\n     CREATE_TOKEN(\"/pa/token/create\");\n \ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java\nindex 82703f7..3f8cae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/model/ActivationStatusBlobInfo.java\n@@ -83,16 +83,16 @@\n     }\n \n     /**\n-     * Get crypto version for possible migration.\n-     * @return Crypto version for possible migration.\n+     * Get crypto version for possible upgrade.\n+     * @return Crypto version for possible upgrade.\n      */\n     public byte getUpgradeVersion() {\n         return upgradeVersion;\n     }\n \n     /**\n-     * Set crypto version for possible migration.\n-     * @param upgradeVersion Crypto version for possible migration.\n+     * Set crypto version for possible upgrade.\n+     * @param upgradeVersion Crypto version for possible upgrade.\n      */\n     public void setUpgradeVersion(byte upgradeVersion) {\n         this.upgradeVersion \u003d upgradeVersion;\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java\nindex 89f2478..c95d318 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/activation/PowerAuthServerActivation.java\n@@ -239,7 +239,7 @@\n      * Returns an encrypted status blob as described in PowerAuth Specification.\n      * @param statusByte Byte determining the status of the activation.\n      * @param currentVersionByte Current crypto protocol version.\n-     * @param upgradeVersionByte Crypto version for possible migration.\n+     * @param upgradeVersionByte Crypto version for possible upgrade.\n      * @param failedAttempts Number of failed attempts at the moment.\n      * @param maxFailedAttempts Number of allowed failed attempts.\n      * @param transportKey A key used to protect the transport.\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\nindex 8597aeb..19dbcbc 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/encryptor/ecies/model/EciesSharedInfo1.java\n@@ -26,7 +26,7 @@\n     APPLICATION_SCOPE_GENERIC(\"/pa/generic/application\"),\n     ACTIVATION_SCOPE_GENERIC(\"/pa/generic/activation\"),\n     ACTIVATION_LAYER_2(\"/pa/activation\"),\n-    MIGRATION(\"/pa/migration\"),\n+    UPGRADE(\"/pa/upgrade\"),\n     VAULT_UNLOCK(\"/pa/vault/unlock\"),\n     CREATE_TOKEN(\"/pa/token/create\");\n \n",
    "projectName": "lime-security-powerauth",
    "lineNum": 29,
    "nodeStartChar": 967,
    "before": "MIGRATION(\"/pa/migration\")",
    "after": "UPGRADE(\"/pa/upgrade\")"
  },
  {
    "commitSHA1": "4dd6a445209b5951408f8c5c008d85a8776d82ce",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\nindex d7368a4..ff8e1ba 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n@@ -49,7 +49,7 @@\n      */\n     public CryptoProviderUtil getKeyConvertor() {\n         if (keyConvertor \u003d\u003d null) {\n-            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setConvertor().\");\n+            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setKeyConvertor().\");\n         }\n         return keyConvertor;\n     }\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\nindex d7368a4..ff8e1ba 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n@@ -49,7 +49,7 @@\n      */\n     public CryptoProviderUtil getKeyConvertor() {\n         if (keyConvertor \u003d\u003d null) {\n-            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setConvertor().\");\n+            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setKeyConvertor().\");\n         }\n         return keyConvertor;\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 52,
    "nodeStartChar": 1504,
    "before": "\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setConvertor().\"",
    "after": "\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setKeyConvertor().\""
  },
  {
    "commitSHA1": "d3a89b2119aea82c86dd0c7f28c568a0295d15af",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\nindex d7368a4..ff8e1ba 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n@@ -49,7 +49,7 @@\n      */\n     public CryptoProviderUtil getKeyConvertor() {\n         if (keyConvertor \u003d\u003d null) {\n-            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setConvertor().\");\n+            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setKeyConvertor().\");\n         }\n         return keyConvertor;\n     }\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\nindex d7368a4..ff8e1ba 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/config/PowerAuthConfiguration.java\n@@ -49,7 +49,7 @@\n      */\n     public CryptoProviderUtil getKeyConvertor() {\n         if (keyConvertor \u003d\u003d null) {\n-            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setConvertor().\");\n+            throw new NullPointerException(\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setKeyConvertor().\");\n         }\n         return keyConvertor;\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 52,
    "nodeStartChar": 1504,
    "before": "\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setConvertor().\"",
    "after": "\"Convertor mustn\u0027t be null! Set convertor by calling PowerAuthConfiguration.INSTANCE.setKeyConvertor().\""
  },
  {
    "commitSHA1": "4c159b60337e23005eaa4b41edd54579b91549b4",
    "commitFile": "powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java",
    "patch": "diff --git a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java\nindex db6bc34..142196f 100644\n--- a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java\n+++ b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java\n@@ -34,7 +34,6 @@\n      * @param nonce Random 16B nonce value.\n      * @param data Request data.\n      * @return PowerAuth signature base string.\n-     * @throws UnsupportedEncodingException In case UTF-8 is not supported on the system.\n      */\n     public static String getSignatureBaseString(String httpMethod, String requestUri, byte[] nonce, byte[] data) {\n \n@@ -47,7 +46,7 @@\n                 // System must support UTF-8\n                 return null;\n             }\n-            requestUriHash \u003d new String(BaseEncoding.base64().encode(bytes));\n+            requestUriHash \u003d BaseEncoding.base64().encode(bytes);\n         }\n \n         String dataBase64 \u003d \"\";\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 50,
    "nodeStartChar": 1931,
    "before": "new String(BaseEncoding.base64().encode(bytes))",
    "after": "BaseEncoding.base64().encode(bytes)"
  },
  {
    "commitSHA1": "c2ecb9c3e91fae3b1a8bb1dad47a644e9b06d69d",
    "commitFile": "powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java",
    "patch": "diff --git a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java\nindex db6bc34..142196f 100644\n--- a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java\n+++ b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/http/PowerAuthHttpBody.java\n@@ -34,7 +34,6 @@\n      * @param nonce Random 16B nonce value.\n      * @param data Request data.\n      * @return PowerAuth signature base string.\n-     * @throws UnsupportedEncodingException In case UTF-8 is not supported on the system.\n      */\n     public static String getSignatureBaseString(String httpMethod, String requestUri, byte[] nonce, byte[] data) {\n \n@@ -47,7 +46,7 @@\n                 // System must support UTF-8\n                 return null;\n             }\n-            requestUriHash \u003d new String(BaseEncoding.base64().encode(bytes));\n+            requestUriHash \u003d BaseEncoding.base64().encode(bytes);\n         }\n \n         String dataBase64 \u003d \"\";\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 50,
    "nodeStartChar": 1931,
    "before": "new String(BaseEncoding.base64().encode(bytes))",
    "after": "BaseEncoding.base64().encode(bytes)"
  },
  {
    "commitSHA1": "4e41d112d85ccc1e028f098b1140498bae8252b2",
    "commitFile": "powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java",
    "patch": "diff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\nindex 8fb7a1b..4d186e9 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n@@ -42,7 +42,7 @@\n             } else if (hasSC) {\n                 utils \u003d new CryptoProviderUtilsSpongyCastle();\n             } else {\n-                throw new IllegalStateException(\"Neither spongycastne, nor bouncycastle is installed!\");\n+                throw new IllegalStateException(\"Neither spongycastle, nor bouncycastle is installed!\");\n             }\n         }\n         return utils;\ndiff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\nindex 8fb7a1b..4d186e9 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n@@ -42,7 +42,7 @@\n             } else if (hasSC) {\n                 utils \u003d new CryptoProviderUtilsSpongyCastle();\n             } else {\n-                throw new IllegalStateException(\"Neither spongycastne, nor bouncycastle is installed!\");\n+                throw new IllegalStateException(\"Neither spongycastle, nor bouncycastle is installed!\");\n             }\n         }\n         return utils;\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 45,
    "nodeStartChar": 1558,
    "before": "\"Neither spongycastne, nor bouncycastle is installed!\"",
    "after": "\"Neither spongycastle, nor bouncycastle is installed!\""
  },
  {
    "commitSHA1": "c756fed058f6d32b4066d5943539e500d02cc9f1",
    "commitFile": "powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java",
    "patch": "diff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\nindex 8fb7a1b..4d186e9 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n@@ -42,7 +42,7 @@\n             } else if (hasSC) {\n                 utils \u003d new CryptoProviderUtilsSpongyCastle();\n             } else {\n-                throw new IllegalStateException(\"Neither spongycastne, nor bouncycastle is installed!\");\n+                throw new IllegalStateException(\"Neither spongycastle, nor bouncycastle is installed!\");\n             }\n         }\n         return utils;\ndiff --git a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\nindex 8fb7a1b..4d186e9 100644\n--- a/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n+++ b/powerauth-java-prov/src/main/java/io/getlime/security/powerauth/provider/CryptoProviderUtilFactory.java\n@@ -42,7 +42,7 @@\n             } else if (hasSC) {\n                 utils \u003d new CryptoProviderUtilsSpongyCastle();\n             } else {\n-                throw new IllegalStateException(\"Neither spongycastne, nor bouncycastle is installed!\");\n+                throw new IllegalStateException(\"Neither spongycastle, nor bouncycastle is installed!\");\n             }\n         }\n         return utils;\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 45,
    "nodeStartChar": 1558,
    "before": "\"Neither spongycastne, nor bouncycastle is installed!\"",
    "after": "\"Neither spongycastle, nor bouncycastle is installed!\""
  },
  {
    "commitSHA1": "9b0fdc47162a5d7d1b93cb22750bea7f63054ec9",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java\nindex aea4c8b..caee7d2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java\n@@ -90,7 +90,7 @@\n      * @return True in case of enum value is equal to provided name.\n      */\n     public boolean equalsName(String otherName) {\n-        return (otherName \u003d\u003d null) ? false : value.equalsIgnoreCase(otherName);\n+        return otherName !\u003d null \u0026\u0026 value.equalsIgnoreCase(otherName);\n     }\n \n     @Override\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java\nindex aea4c8b..caee7d2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/enums/PowerAuthSignatureTypes.java\n@@ -90,7 +90,7 @@\n      * @return True in case of enum value is equal to provided name.\n      */\n     public boolean equalsName(String otherName) {\n-        return (otherName \u003d\u003d null) ? false : value.equalsIgnoreCase(otherName);\n+        return otherName !\u003d null \u0026\u0026 value.equalsIgnoreCase(otherName);\n     }\n \n     @Override\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 93,
    "nodeStartChar": 2875,
    "before": "(otherName \u003d\u003d null) ? false : value.equalsIgnoreCase(otherName)",
    "after": "otherName !\u003d null \u0026\u0026 value.equalsIgnoreCase(otherName)"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 47,
    "nodeStartChar": 1773,
    "before": "String",
    "after": "PowerAuthSignatureTypes"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 51,
    "nodeStartChar": 1990,
    "before": "PowerAuthSignatureTypes.POSSESSION.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 55,
    "nodeStartChar": 2137,
    "before": "PowerAuthSignatureTypes.KNOWLEDGE.toString()",
    "after": "PowerAuthSignatureTypes.KNOWLEDGE"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 59,
    "nodeStartChar": 2282,
    "before": "PowerAuthSignatureTypes.BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 63,
    "nodeStartChar": 2425,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 68,
    "nodeStartChar": 2636,
    "before": "PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 73,
    "nodeStartChar": 2845,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 96,
    "nodeStartChar": 3553,
    "before": "String",
    "after": "PowerAuthSignatureTypes"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 100,
    "nodeStartChar": 3698,
    "before": "PowerAuthSignatureTypes.POSSESSION.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 105,
    "nodeStartChar": 3927,
    "before": "PowerAuthSignatureTypes.KNOWLEDGE.toString()",
    "after": "PowerAuthSignatureTypes.KNOWLEDGE"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 110,
    "nodeStartChar": 4154,
    "before": "PowerAuthSignatureTypes.BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 115,
    "nodeStartChar": 4379,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 122,
    "nodeStartChar": 4744,
    "before": "PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 129,
    "nodeStartChar": 5107,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 47,
    "nodeStartChar": 1674,
    "before": "String",
    "after": "PowerAuthSignatureTypes"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 51,
    "nodeStartChar": 1819,
    "before": "PowerAuthSignatureTypes.POSSESSION.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 56,
    "nodeStartChar": 2048,
    "before": "PowerAuthSignatureTypes.KNOWLEDGE.toString()",
    "after": "PowerAuthSignatureTypes.KNOWLEDGE"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 61,
    "nodeStartChar": 2275,
    "before": "PowerAuthSignatureTypes.BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 66,
    "nodeStartChar": 2500,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 73,
    "nodeStartChar": 2865,
    "before": "PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_BIOMETRY"
  },
  {
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 80,
    "nodeStartChar": 3228,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString()",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY"
  },
  {
    "commitSHA1": "362ac660040094ee9f1029757cead6c5ca82718b",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\nindex 7e836df..8fcb42f 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n@@ -136,7 +136,7 @@\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_APPLICATION_ID);\n         }\n \n-        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getId());\n+        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getApplication().getId());\n         if (keypair \u003d\u003d null) {\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_MASTER_SERVER_KEYPAIR);\n         }\n@@ -175,7 +175,7 @@\n \n         GetNonPersonalizedEncryptionKeyResponse response \u003d new GetNonPersonalizedEncryptionKeyResponse();\n         response.setApplicationKey(applicationKey);\n-        response.setApplicationId(applicationVersion.getId());\n+        response.setApplicationId(applicationVersion.getApplication().getId());\n         response.setEncryptionKey(derivedTransportKeyBase64);\n         response.setEncryptionKeyIndex(indexBase64);\n         response.setEphemeralPublicKey(ephemeralPublicKeyBase64);\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\nindex 7e836df..8fcb42f 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n@@ -136,7 +136,7 @@\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_APPLICATION_ID);\n         }\n \n-        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getId());\n+        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getApplication().getId());\n         if (keypair \u003d\u003d null) {\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_MASTER_SERVER_KEYPAIR);\n         }\n@@ -175,7 +175,7 @@\n \n         GetNonPersonalizedEncryptionKeyResponse response \u003d new GetNonPersonalizedEncryptionKeyResponse();\n         response.setApplicationKey(applicationKey);\n-        response.setApplicationId(applicationVersion.getId());\n+        response.setApplicationId(applicationVersion.getApplication().getId());\n         response.setEncryptionKey(derivedTransportKeyBase64);\n         response.setEncryptionKeyIndex(indexBase64);\n         response.setEphemeralPublicKey(ephemeralPublicKeyBase64);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 139,
    "nodeStartChar": 7521,
    "before": "applicationVersion",
    "after": "applicationVersion.getApplication()"
  },
  {
    "commitSHA1": "362ac660040094ee9f1029757cead6c5ca82718b",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\nindex 7e836df..8fcb42f 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n@@ -136,7 +136,7 @@\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_APPLICATION_ID);\n         }\n \n-        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getId());\n+        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getApplication().getId());\n         if (keypair \u003d\u003d null) {\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_MASTER_SERVER_KEYPAIR);\n         }\n@@ -175,7 +175,7 @@\n \n         GetNonPersonalizedEncryptionKeyResponse response \u003d new GetNonPersonalizedEncryptionKeyResponse();\n         response.setApplicationKey(applicationKey);\n-        response.setApplicationId(applicationVersion.getId());\n+        response.setApplicationId(applicationVersion.getApplication().getId());\n         response.setEncryptionKey(derivedTransportKeyBase64);\n         response.setEncryptionKeyIndex(indexBase64);\n         response.setEphemeralPublicKey(ephemeralPublicKeyBase64);\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\nindex 7e836df..8fcb42f 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/powerauth/app/server/service/behavior/EncryptionServiceBehavior.java\n@@ -136,7 +136,7 @@\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_APPLICATION_ID);\n         }\n \n-        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getId());\n+        MasterKeyPairEntity keypair \u003d masterKeyPairRepository.findFirstByApplicationIdOrderByTimestampCreatedDesc(applicationVersion.getApplication().getId());\n         if (keypair \u003d\u003d null) {\n             throw localizationProvider.buildExceptionForCode(ServiceError.NO_MASTER_SERVER_KEYPAIR);\n         }\n@@ -175,7 +175,7 @@\n \n         GetNonPersonalizedEncryptionKeyResponse response \u003d new GetNonPersonalizedEncryptionKeyResponse();\n         response.setApplicationKey(applicationKey);\n-        response.setApplicationId(applicationVersion.getId());\n+        response.setApplicationId(applicationVersion.getApplication().getId());\n         response.setEncryptionKey(derivedTransportKeyBase64);\n         response.setEncryptionKeyIndex(indexBase64);\n         response.setEphemeralPublicKey(ephemeralPublicKeyBase64);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 178,
    "nodeStartChar": 9534,
    "before": "applicationVersion",
    "after": "applicationVersion.getApplication()"
  },
  {
    "commitSHA1": "b1036e59a2e77987243a5a72cdee57141b16e709",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java b/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java\nindex eeaefb0..fb13c93 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java\n@@ -470,7 +470,7 @@\n \n         // if there is no such activation or application does not match the activation application, exit\n         if (activation \u003d\u003d null\n-                || !activation.getActivationStatus().equals(ActivationStatus.CREATED)\n+                || !ActivationStatus.CREATED.equals(activation.getActivationStatus())\n                 || activation.getApplication().getId() !\u003d application.getId()) {\n             throw localizationProvider.buildExceptionForCode(ServiceError.ACTIVATION_EXPIRED);\n         }\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java b/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java\nindex eeaefb0..fb13c93 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/behavior/ActivationServiceBehavior.java\n@@ -470,7 +470,7 @@\n \n         // if there is no such activation or application does not match the activation application, exit\n         if (activation \u003d\u003d null\n-                || !activation.getActivationStatus().equals(ActivationStatus.CREATED)\n+                || !ActivationStatus.CREATED.equals(activation.getActivationStatus())\n                 || activation.getApplication().getId() !\u003d application.getId()) {\n             throw localizationProvider.buildExceptionForCode(ServiceError.ACTIVATION_EXPIRED);\n         }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 473,
    "nodeStartChar": 25214,
    "before": "activation.getActivationStatus()",
    "after": "ActivationStatus.CREATED"
  },
  {
    "commitSHA1": "9c7ceb5d5621cf5b6243836a77957215663191a8",
    "commitFile": "powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java",
    "patch": "diff --git a/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java b/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java\nindex 50fedf9..63fe00b 100644\n--- a/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java\n+++ b/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java\n@@ -170,7 +170,7 @@\n \t\t\tSystem.out.println(\"        \\\"input\\\": {\");\n \t\t\tSystem.out.println(\"            \\\"devicePrivateKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPrivateKeyToBytes(deviceKeyPair.getPrivate())) + \"\\\",\");\n \t\t\tSystem.out.println(\"            \\\"devicePublicKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPublicKeyToBytes(deviceKeyPair.getPublic())) + \"\\\",\");\n-\t\t\tSystem.out.println(\"            \\\"serverePrivateKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPrivateKeyToBytes(serverKeyPair.getPrivate())) + \"\\\",\");\n+\t\t\tSystem.out.println(\"            \\\"serverPrivateKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPrivateKeyToBytes(serverKeyPair.getPrivate())) + \"\\\",\");\n \t\t\tSystem.out.println(\"            \\\"serverPublicKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPublicKeyToBytes(serverKeyPair.getPublic())) + \"\\\"\");\n \t\t\tSystem.out.println(\"        },\");\n \t\t\tSystem.out.println(\"        \\\"output\\\": {\");\ndiff --git a/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java b/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java\nindex 50fedf9..63fe00b 100644\n--- a/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java\n+++ b/powerauth-java/src/test/java/io/getlime/security/powerauth/lib/util/GenerateVectorDataTest.java\n@@ -170,7 +170,7 @@\n \t\t\tSystem.out.println(\"        \\\"input\\\": {\");\n \t\t\tSystem.out.println(\"            \\\"devicePrivateKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPrivateKeyToBytes(deviceKeyPair.getPrivate())) + \"\\\",\");\n \t\t\tSystem.out.println(\"            \\\"devicePublicKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPublicKeyToBytes(deviceKeyPair.getPublic())) + \"\\\",\");\n-\t\t\tSystem.out.println(\"            \\\"serverePrivateKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPrivateKeyToBytes(serverKeyPair.getPrivate())) + \"\\\",\");\n+\t\t\tSystem.out.println(\"            \\\"serverPrivateKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPrivateKeyToBytes(serverKeyPair.getPrivate())) + \"\\\",\");\n \t\t\tSystem.out.println(\"            \\\"serverPublicKey\\\": \\\"\" + BaseEncoding.base64().encode(keyConvertor.convertPublicKeyToBytes(serverKeyPair.getPublic())) + \"\\\"\");\n \t\t\tSystem.out.println(\"        },\");\n \t\t\tSystem.out.println(\"        \\\"output\\\": {\");\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 173,
    "nodeStartChar": 7711,
    "before": "\"            \\\"serverePrivateKey\\\": \\\"\"",
    "after": "\"            \\\"serverPrivateKey\\\": \\\"\""
  },
  {
    "commitSHA1": "5614dfabd5f7e18ab91780fb6a13d68f785863dc",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\nindex 27a34bb..6c90655 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n@@ -81,7 +81,7 @@\n \t * @return Master public key.\n \t */\n \tpublic static PublicKey getMasterKey(JSONObject clientConfigObject) {\n-\t\tif (clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n+\t\tif (clientConfigObject !\u003d null \u0026\u0026 clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n \t\t\ttry {\n \t\t\t\tbyte[] masterKeyBytes \u003d BaseEncoding.base64().decode((String) clientConfigObject.get(\"masterPublicKey\"));\n \t\t\t\treturn PowerAuthConfiguration.INSTANCE.getKeyConvertor().convertBytesToPublicKey(masterKeyBytes);\ndiff --git a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\nindex 043efb2..a6d564e 100644\n--- a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\n+++ b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\n@@ -73,7 +73,7 @@\n \tpublic static Map\u003cString, String\u003e parsePowerAuthSignatureHTTPHeader(String xPowerAuthSignatureHeader) {\n \t\txPowerAuthSignatureHeader \u003d xPowerAuthSignatureHeader.trim();\n \t\tif (!xPowerAuthSignatureHeader.startsWith(POWERAUTH_PREFIX)) {\n-\t\t\treturn null;\n+\t\t\treturn new HashMap\u003c\u003e(); // invalid map with empty values works better than null here \n \t\t}\n \t\txPowerAuthSignatureHeader \u003d xPowerAuthSignatureHeader.substring(POWERAUTH_PREFIX.length()).trim();\n \t\t\ndiff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\nindex 27a34bb..6c90655 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n@@ -81,7 +81,7 @@\n \t * @return Master public key.\n \t */\n \tpublic static PublicKey getMasterKey(JSONObject clientConfigObject) {\n-\t\tif (clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n+\t\tif (clientConfigObject !\u003d null \u0026\u0026 clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n \t\t\ttry {\n \t\t\t\tbyte[] masterKeyBytes \u003d BaseEncoding.base64().decode((String) clientConfigObject.get(\"masterPublicKey\"));\n \t\t\t\treturn PowerAuthConfiguration.INSTANCE.getKeyConvertor().convertBytesToPublicKey(masterKeyBytes);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 84,
    "nodeStartChar": 2758,
    "before": "clientConfigObject.get(\"masterPublicKey\") !\u003d null",
    "after": "clientConfigObject !\u003d null \u0026\u0026 clientConfigObject.get(\"masterPublicKey\") !\u003d null"
  },
  {
    "commitSHA1": "5614dfabd5f7e18ab91780fb6a13d68f785863dc",
    "commitFile": "powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java",
    "patch": "diff --git a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\nindex 043efb2..a6d564e 100644\n--- a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\n+++ b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\n@@ -73,7 +73,7 @@\n \tpublic static Map\u003cString, String\u003e parsePowerAuthSignatureHTTPHeader(String xPowerAuthSignatureHeader) {\n \t\txPowerAuthSignatureHeader \u003d xPowerAuthSignatureHeader.trim();\n \t\tif (!xPowerAuthSignatureHeader.startsWith(POWERAUTH_PREFIX)) {\n-\t\t\treturn null;\n+\t\t\treturn new HashMap\u003c\u003e(); // invalid map with empty values works better than null here \n \t\t}\n \t\txPowerAuthSignatureHeader \u003d xPowerAuthSignatureHeader.substring(POWERAUTH_PREFIX.length()).trim();\n \t\t\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 76,
    "nodeStartChar": 2544,
    "before": "null",
    "after": "new HashMap\u003c\u003e()"
  },
  {
    "commitSHA1": "1ce020e7f4d3fa48416802b712525006ea59978d",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\nindex ea127a9..22611da 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n@@ -43,7 +43,7 @@\n         super();\n         this.code \u003d code;\n         this.message \u003d message;\n-        this.message \u003d localizedMessage;\n+        this.localizedMessage \u003d localizedMessage;\n     }\n \n     /**\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\nindex ea127a9..22611da 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n@@ -43,7 +43,7 @@\n         super();\n         this.code \u003d code;\n         this.message \u003d message;\n-        this.message \u003d localizedMessage;\n+        this.localizedMessage \u003d localizedMessage;\n     }\n \n     /**\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 46,
    "nodeStartChar": 1519,
    "before": "this.message",
    "after": "this.localizedMessage"
  },
  {
    "commitSHA1": "e2692b9da56827a2440a35e5da218d6e199a540a",
    "commitFile": "powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java",
    "patch": "diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\ndiff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 112,
    "nodeStartChar": 4628,
    "before": "hmac.hash(derivedKey,derivedKeyInner)",
    "after": "hmac.hash(derivedKeyInner,derivedKey)"
  },
  {
    "commitSHA1": "e2692b9da56827a2440a35e5da218d6e199a540a",
    "commitFile": "powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java",
    "patch": "diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\ndiff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 115,
    "nodeStartChar": 4731,
    "before": "hmac.hash(data,derivedKey)",
    "after": "hmac.hash(derivedKey,data)"
  },
  {
    "commitSHA1": "1b1a2358548745d8617fd5756434935362c064d0",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/RemoveStep.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/RemoveStep.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/RemoveStep.java\nindex c28b8d2..471bb1a 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/RemoveStep.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/RemoveStep.java\n@@ -104,7 +104,7 @@\n \t\t// knowledge factor\n \t\tString signatureBaseString \u003d PowerAuthHttpBody.getSignatureBaseString(\"POST\", \"/pa/activation/remove\", applicationSecret, pa_nonce, null);\n \t\tString pa_signature \u003d signature.signatureForData(signatureBaseString.getBytes(\"UTF-8\"), Arrays.asList(signaturePossessionKey, signatureKnowledgeKey), counter);\n-\t\tString httpAuhtorizationHeader \u003d PowerAuthHttpHeader.getPowerAuthSignatureHTTPHeader(activationId, applicationId, pa_nonce, PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE, pa_signature, \"2.0\");\n+\t\tString httpAuhtorizationHeader \u003d PowerAuthHttpHeader.getPowerAuthSignatureHTTPHeader(activationId, applicationId, pa_nonce, PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString(), pa_signature, \"2.0\");\n \t\tSystem.out.println(\"Coomputed X-PowerAuth-Authorization header: \" + httpAuhtorizationHeader);\n \t\tSystem.out.println();\n \n",
    "projectName": "lime-security-powerauth",
    "lineNum": 107,
    "nodeStartChar": 5241,
    "before": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE",
    "after": "PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString()"
  },
  {
    "commitSHA1": "1b1a2358548745d8617fd5756434935362c064d0",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/VerifySignatureStep.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/VerifySignatureStep.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/VerifySignatureStep.java\nindex 1b5ed46..f27942f 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/VerifySignatureStep.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/VerifySignatureStep.java\n@@ -115,7 +115,7 @@\n \t\t// Compute the current PowerAuth 2.0 signature for possession and knowledge factor\n \t\tString signatureBaseString \u003d PowerAuthHttpBody.getSignatureBaseString(httpMethodString, endpoint, applicationSecret, pa_nonce, dataFileBytes);\n \t\tString pa_signature \u003d signature.signatureForData(signatureBaseString.getBytes(\"UTF-8\"), keyFactory.keysForSignatureType(signatureType, signaturePossessionKey, signatureKnowledgeKey, signatureBiometryKey), counter);\n-\t\tString httpAuhtorizationHeader \u003d PowerAuthHttpHeader.getPowerAuthSignatureHTTPHeader(activationId, applicationId, pa_nonce, PowerAuthSignatureTypes.getEnumFromString(signatureType), pa_signature, \"2.0\");\n+\t\tString httpAuhtorizationHeader \u003d PowerAuthHttpHeader.getPowerAuthSignatureHTTPHeader(activationId, applicationId, pa_nonce, PowerAuthSignatureTypes.getEnumFromString(signatureType).toString(), pa_signature, \"2.0\");\n \n \t\t// Increment the counter\n \t\tcounter +\u003d 1;\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 118,
    "nodeStartChar": 5967,
    "before": "PowerAuthSignatureTypes",
    "after": "PowerAuthSignatureTypes.getEnumFromString(signatureType)"
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\nindex 67e9df3..0fb9f03 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n@@ -36,14 +36,14 @@\n         MessageDispatcherServlet servlet \u003d new MessageDispatcherServlet();\n         servlet.setApplicationContext(applicationContext);\n         servlet.setTransformWsdlLocations(true);\n-        return new ServletRegistrationBean(servlet, \"/powerauth/*\");\n+        return new ServletRegistrationBean(servlet, \"/soap/*\");\n     }\n \n     @Bean(name \u003d \"service\")\n     public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) {\n         DefaultWsdl11Definition wsdl11Definition \u003d new DefaultWsdl11Definition();\n         wsdl11Definition.setPortTypeName(\"PowerAuthPort\");\n-        wsdl11Definition.setLocationUri(\"/powerauth\");\n+        wsdl11Definition.setLocationUri(\"/soap\");\n         wsdl11Definition.setTargetNamespace(\"http://getlime.io/security/powerauth\");\n         wsdl11Definition.setSchema(countriesSchema);\n         return wsdl11Definition;\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\nindex 67e9df3..0fb9f03 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n@@ -36,14 +36,14 @@\n         MessageDispatcherServlet servlet \u003d new MessageDispatcherServlet();\n         servlet.setApplicationContext(applicationContext);\n         servlet.setTransformWsdlLocations(true);\n-        return new ServletRegistrationBean(servlet, \"/powerauth/*\");\n+        return new ServletRegistrationBean(servlet, \"/soap/*\");\n     }\n \n     @Bean(name \u003d \"service\")\n     public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) {\n         DefaultWsdl11Definition wsdl11Definition \u003d new DefaultWsdl11Definition();\n         wsdl11Definition.setPortTypeName(\"PowerAuthPort\");\n-        wsdl11Definition.setLocationUri(\"/powerauth\");\n+        wsdl11Definition.setLocationUri(\"/soap\");\n         wsdl11Definition.setTargetNamespace(\"http://getlime.io/security/powerauth\");\n         wsdl11Definition.setSchema(countriesSchema);\n         return wsdl11Definition;\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 39,
    "nodeStartChar": 1738,
    "before": "\"/powerauth/*\"",
    "after": "\"/soap/*\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\nindex 67e9df3..0fb9f03 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n@@ -36,14 +36,14 @@\n         MessageDispatcherServlet servlet \u003d new MessageDispatcherServlet();\n         servlet.setApplicationContext(applicationContext);\n         servlet.setTransformWsdlLocations(true);\n-        return new ServletRegistrationBean(servlet, \"/powerauth/*\");\n+        return new ServletRegistrationBean(servlet, \"/soap/*\");\n     }\n \n     @Bean(name \u003d \"service\")\n     public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) {\n         DefaultWsdl11Definition wsdl11Definition \u003d new DefaultWsdl11Definition();\n         wsdl11Definition.setPortTypeName(\"PowerAuthPort\");\n-        wsdl11Definition.setLocationUri(\"/powerauth\");\n+        wsdl11Definition.setLocationUri(\"/soap\");\n         wsdl11Definition.setTargetNamespace(\"http://getlime.io/security/powerauth\");\n         wsdl11Definition.setSchema(countriesSchema);\n         return wsdl11Definition;\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\nindex 67e9df3..0fb9f03 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/WebServiceConfig.java\n@@ -36,14 +36,14 @@\n         MessageDispatcherServlet servlet \u003d new MessageDispatcherServlet();\n         servlet.setApplicationContext(applicationContext);\n         servlet.setTransformWsdlLocations(true);\n-        return new ServletRegistrationBean(servlet, \"/powerauth/*\");\n+        return new ServletRegistrationBean(servlet, \"/soap/*\");\n     }\n \n     @Bean(name \u003d \"service\")\n     public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) {\n         DefaultWsdl11Definition wsdl11Definition \u003d new DefaultWsdl11Definition();\n         wsdl11Definition.setPortTypeName(\"PowerAuthPort\");\n-        wsdl11Definition.setLocationUri(\"/powerauth\");\n+        wsdl11Definition.setLocationUri(\"/soap\");\n         wsdl11Definition.setTargetNamespace(\"http://getlime.io/security/powerauth\");\n         wsdl11Definition.setSchema(countriesSchema);\n         return wsdl11Definition;\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 46,
    "nodeStartChar": 2059,
    "before": "\"/powerauth\"",
    "after": "\"/soap\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 50,
    "nodeStartChar": 2494,
    "before": "\"/pa\"",
    "after": "\"/rest/pa\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 56,
    "nodeStartChar": 2628,
    "before": "\"activation/init\"",
    "after": "\"/activation/init\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 61,
    "nodeStartChar": 2987,
    "before": "\"activation/prepare\"",
    "after": "\"/activation/prepare\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 66,
    "nodeStartChar": 3361,
    "before": "\"activation/commit\"",
    "after": "\"/activation/commit\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 71,
    "nodeStartChar": 3730,
    "before": "\"activation/status\"",
    "after": "\"/activation/status\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 76,
    "nodeStartChar": 4111,
    "before": "\"activation/remove\"",
    "after": "\"/activation/remove\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 81,
    "nodeStartChar": 4480,
    "before": "\"activation/list\"",
    "after": "\"/activation/list\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 86,
    "nodeStartChar": 4877,
    "before": "\"signature/verify\"",
    "after": "\"/signature/verify\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 91,
    "nodeStartChar": 5245,
    "before": "\"signature/list\"",
    "after": "\"/signature/list\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 96,
    "nodeStartChar": 5615,
    "before": "\"activation/block\"",
    "after": "\"/activation/block\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 101,
    "nodeStartChar": 5979,
    "before": "\"activation/unblock\"",
    "after": "\"/activation/unblock\""
  },
  {
    "commitSHA1": "3584a0662f69dd7c90deeb1a3cda331ef2e78cf0",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\nindex 5d8f6e6..2a668d7 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/controller/PowerAuthController.java\n@@ -47,63 +47,63 @@\n import io.getlime.security.service.PowerAuthService;\n \n @Controller\n-@RequestMapping(value \u003d \"/pa\")\n+@RequestMapping(value \u003d \"/rest/pa\")\n public class PowerAuthController {\n \n     @Autowired\n     private PowerAuthService powerAuthService;\n \n-    @RequestMapping(value \u003d \"activation/init\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/init\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cInitActivationResponse\u003e initActivation(@RequestBody RESTRequestWrapper\u003cInitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.initActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/prepare\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/prepare\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cPrepareActivationResponse\u003e prepareActivation(@RequestBody RESTRequestWrapper\u003cPrepareActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.prepareActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/commit\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/commit\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cCommitActivationResponse\u003e commitActivation(@RequestBody RESTRequestWrapper\u003cCommitActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.commitActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/status\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/status\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationStatusResponse\u003e getActivationStatus(@RequestBody RESTRequestWrapper\u003cGetActivationStatusRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivationStatus(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/remove\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/remove\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cRemoveActivationResponse\u003e removeActivation(@RequestBody RESTRequestWrapper\u003cRemoveActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.removeActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cGetActivationListForUserResponse\u003e getActivatioListForUser(@RequestBody RESTRequestWrapper\u003cGetActivationListForUserRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getActivatioListForUser(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"signature/verify\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/verify\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVerifySignatureResponse\u003e verifySignature(@RequestBody RESTRequestWrapper\u003cVerifySignatureRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.verifySignature(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"signature/list\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/signature/list\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cSignatureAuditResponse\u003e getSignatureAuditLog(@RequestBody RESTRequestWrapper\u003cSignatureAuditRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.getSignatureAuditLog(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/block\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/block\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cBlockActivationResponse\u003e blockActivation(@RequestBody RESTRequestWrapper\u003cBlockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.blockActivation(request.getRequestObject()));\n     }\n \n-    @RequestMapping(value \u003d \"activation/unblock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/activation/unblock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cUnblockActivationResponse\u003e unblockActivation(@RequestBody RESTRequestWrapper\u003cUnblockActivationRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.unblockActivation(request.getRequestObject()));\n     }\n     \n-    @RequestMapping(value \u003d \"vault/unlock\", method \u003d RequestMethod.POST)\n+    @RequestMapping(value \u003d \"/vault/unlock\", method \u003d RequestMethod.POST)\n     public @ResponseBody RESTResponseWrapper\u003cVaultUnlockResponse\u003e vaultUnlock(@RequestBody RESTRequestWrapper\u003cVaultUnlockRequest\u003e request) throws Exception {\n         return new RESTResponseWrapper\u003c\u003e(\"OK\", powerAuthService.vaultUnlock(request.getRequestObject()));\n     }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 106,
    "nodeStartChar": 6357,
    "before": "\"vault/unlock\"",
    "after": "\"/vault/unlock\""
  },
  {
    "commitSHA1": "b3d5a52939ec964767e9fc97010c2d0f9f2c0a12",
    "commitFile": "powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java",
    "patch": "diff --git a/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java b/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java\nindex e98e3c1..c7d3485 100644\n--- a/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java\n+++ b/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java\n@@ -30,7 +30,7 @@\n \t\tFilterRegistrationBean registrationBean \u003d new FilterRegistrationBean();\n \t\tregistrationBean.setFilter(new PowerAuthRequestFilter());\n \t\tregistrationBean.setMatchAfter(true);\n-\t\tregistrationBean.addUrlPatterns(\"/secured/\");\n+\t\tregistrationBean.addUrlPatterns(\"/pa/signature/validate\");\n \t\treturn registrationBean;\n \t}\n \ndiff --git a/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java b/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java\nindex e98e3c1..c7d3485 100644\n--- a/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java\n+++ b/powerauth-restful-server/src/main/java/io/getlime/rest/api/configuration/WebApplicationConfig.java\n@@ -30,7 +30,7 @@\n \t\tFilterRegistrationBean registrationBean \u003d new FilterRegistrationBean();\n \t\tregistrationBean.setFilter(new PowerAuthRequestFilter());\n \t\tregistrationBean.setMatchAfter(true);\n-\t\tregistrationBean.addUrlPatterns(\"/secured/\");\n+\t\tregistrationBean.addUrlPatterns(\"/pa/signature/validate\");\n \t\treturn registrationBean;\n \t}\n \n",
    "projectName": "lime-security-powerauth",
    "lineNum": 33,
    "nodeStartChar": 1359,
    "before": "\"/secured/\"",
    "after": "\"/pa/signature/validate\""
  },
  {
    "commitSHA1": "d1f38f582b68213349345a86a5ccfeff9a931583",
    "commitFile": "powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java",
    "patch": "diff --git a/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java b/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java\nindex d6ff1a3..4dc21d0 100644\n--- a/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java\n+++ b/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java\n@@ -156,12 +156,12 @@\n \t\treturn (SignatureAuditResponse) getWebServiceTemplate().marshalSendAndReceive(request);\n \t}\n \t\n-\tpublic SignatureAuditResponse getSignatureAuditLog(String userId, Date startingDate, Date endingDate) throws DatatypeConfigurationException {\n+\tpublic List\u003cSignatureAuditResponse.Items\u003e getSignatureAuditLog(String userId, Date startingDate, Date endingDate) throws DatatypeConfigurationException {\n \t\tSignatureAuditRequest request \u003d new SignatureAuditRequest();\n \t\trequest.setUserId(userId);\n \t\trequest.setTimestampFrom(calendarWithDate(startingDate));\n \t\trequest.setTimestampTo(calendarWithDate(endingDate));\n-\t\treturn this.getSignatureAuditLog(request);\n+\t\treturn this.getSignatureAuditLog(request).getItems();\n \t}\n \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 159,
    "nodeStartChar": 6913,
    "before": "SignatureAuditResponse",
    "after": "List\u003cSignatureAuditResponse.Items\u003e"
  },
  {
    "commitSHA1": "d1f38f582b68213349345a86a5ccfeff9a931583",
    "commitFile": "powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java",
    "patch": "diff --git a/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java b/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java\nindex d6ff1a3..4dc21d0 100644\n--- a/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java\n+++ b/powerauth-java-client/src/main/java/io/getlime/security/soap/client/PowerAuthServiceClient.java\n@@ -156,12 +156,12 @@\n \t\treturn (SignatureAuditResponse) getWebServiceTemplate().marshalSendAndReceive(request);\n \t}\n \t\n-\tpublic SignatureAuditResponse getSignatureAuditLog(String userId, Date startingDate, Date endingDate) throws DatatypeConfigurationException {\n+\tpublic List\u003cSignatureAuditResponse.Items\u003e getSignatureAuditLog(String userId, Date startingDate, Date endingDate) throws DatatypeConfigurationException {\n \t\tSignatureAuditRequest request \u003d new SignatureAuditRequest();\n \t\trequest.setUserId(userId);\n \t\trequest.setTimestampFrom(calendarWithDate(startingDate));\n \t\trequest.setTimestampTo(calendarWithDate(endingDate));\n-\t\treturn this.getSignatureAuditLog(request);\n+\t\treturn this.getSignatureAuditLog(request).getItems();\n \t}\n \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 164,
    "nodeStartChar": 7265,
    "before": "this",
    "after": "this.getSignatureAuditLog(request)"
  },
  {
    "commitSHA1": "e75265d8042f95136aa3647bb310a792e76f6884",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java\nindex 7e88b02..a087fed 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java\n@@ -136,7 +136,7 @@\n \n \t\t\t\t// Prepare the status object to be stored\n \t\t\t\tresultStatusObject.put(\"activationId\", activationId);\n-\t\t\t\tresultStatusObject.put(\"clientPublicKey\", BaseEncoding.base64().encode(keyConversion.convertPublicKeyToBytes(deviceKeyPair.getPublic())));\n+\t\t\t\tresultStatusObject.put(\"serverPublicKey\", BaseEncoding.base64().encode(keyConversion.convertPublicKeyToBytes(serverPublicKey)));\n \t\t\t\tresultStatusObject.put(\"encryptedDevicePrivateKey\", BaseEncoding.base64().encode(encryptedDevicePrivateKey));\n \t\t\t\tresultStatusObject.put(\"signaturePossessionKey\", BaseEncoding.base64().encode(keyConversion.convertSharedSecretKeyToBytes(signaturePossessionSecretKey)));\n \t\t\t\tresultStatusObject.put(\"signatureKnowledgeKeyEncrypted\", BaseEncoding.base64().encode(cSignatureKnoweldgeSecretKey));\ndiff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java\nindex 7e88b02..a087fed 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/steps/PrepareActivationStep.java\n@@ -136,7 +136,7 @@\n \n \t\t\t\t// Prepare the status object to be stored\n \t\t\t\tresultStatusObject.put(\"activationId\", activationId);\n-\t\t\t\tresultStatusObject.put(\"clientPublicKey\", BaseEncoding.base64().encode(keyConversion.convertPublicKeyToBytes(deviceKeyPair.getPublic())));\n+\t\t\t\tresultStatusObject.put(\"serverPublicKey\", BaseEncoding.base64().encode(keyConversion.convertPublicKeyToBytes(serverPublicKey)));\n \t\t\t\tresultStatusObject.put(\"encryptedDevicePrivateKey\", BaseEncoding.base64().encode(encryptedDevicePrivateKey));\n \t\t\t\tresultStatusObject.put(\"signaturePossessionKey\", BaseEncoding.base64().encode(keyConversion.convertSharedSecretKeyToBytes(signaturePossessionSecretKey)));\n \t\t\t\tresultStatusObject.put(\"signatureKnowledgeKeyEncrypted\", BaseEncoding.base64().encode(cSignatureKnoweldgeSecretKey));\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 139,
    "nodeStartChar": 7243,
    "before": "resultStatusObject.put(\"clientPublicKey\",BaseEncoding.base64().encode(keyConversion.convertPublicKeyToBytes(deviceKeyPair.getPublic())))",
    "after": "resultStatusObject.put(\"serverPublicKey\",BaseEncoding.base64().encode(keyConversion.convertPublicKeyToBytes(serverPublicKey)))"
  },
  {
    "commitSHA1": "bb1738b625919a19e5454a7922a1294a6c4950d0",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\nindex e9aef7c..35b0291 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\n@@ -167,7 +167,7 @@\n \t\t\t// Prepare the server request\n \t\t\tActivationCreateRequest requestObject \u003d new ActivationCreateRequest();\n \t\t\trequestObject.setActivationIdShort(activationIdShort);\n-\t\t\trequestObject.setClientName(\"PowerAuth 2.0 Reference Client\");\n+\t\t\trequestObject.setActivationName(\"PowerAuth 2.0 Reference Client\");\n \t\t\trequestObject.setActivationNonce(BaseEncoding.base64().encode(nonceDeviceBytes));\n \t\t\trequestObject.setcDevicePublicKey(BaseEncoding.base64().encode(cDevicePublicKeyBytes));\n \t\t\tPowerAuthAPIRequest\u003cActivationCreateRequest\u003e body \u003d new PowerAuthAPIRequest\u003c\u003e();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 170,
    "nodeStartChar": 8228,
    "before": "requestObject.setClientName(\"PowerAuth 2.0 Reference Client\")",
    "after": "requestObject.setActivationName(\"PowerAuth 2.0 Reference Client\")"
  },
  {
    "commitSHA1": "51ae6beb46190a21b2372d3a77cd4f300afa6427",
    "commitFile": "powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java",
    "patch": "diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java\nindex 9cc6b7a..a5d1535 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java\n@@ -35,10 +35,10 @@\n     public static final int ACTIVATION_GENERATE_ACTIVATION_SHORT_ID_ITERATIONS \u003d 10;\n \n     /**\n-     * How many seconds should be CREATED or OTP_USED record usable for\n+     * How many milliseconds should be CREATED or OTP_USED record usable for\n      * completing the activation.\n      */\n-    public static final int ACTIVATION_VALIDITY_BEFORE_ACTIVE \u003d 2 * 60;\n+    public static final int ACTIVATION_VALIDITY_BEFORE_ACTIVE \u003d 2 * 60 * 1000;\n \n     /**\n      * Length of device public key fingerprint.\ndiff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java\nindex 9cc6b7a..a5d1535 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/config/PowerAuthConstants.java\n@@ -35,10 +35,10 @@\n     public static final int ACTIVATION_GENERATE_ACTIVATION_SHORT_ID_ITERATIONS \u003d 10;\n \n     /**\n-     * How many seconds should be CREATED or OTP_USED record usable for\n+     * How many milliseconds should be CREATED or OTP_USED record usable for\n      * completing the activation.\n      */\n-    public static final int ACTIVATION_VALIDITY_BEFORE_ACTIVE \u003d 2 * 60;\n+    public static final int ACTIVATION_VALIDITY_BEFORE_ACTIVE \u003d 2 * 60 * 1000;\n \n     /**\n      * Length of device public key fingerprint.\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 41,
    "nodeStartChar": 1468,
    "before": "2 * 60",
    "after": "2 * 60 * 1000"
  },
  {
    "commitSHA1": "503ef360ff7c4613a91253deeb2bb6c482dba98a",
    "commitFile": "powerauth-restful-server/src/main/java/io/getlime/rest/api/ApplicationConfiguration.java",
    "patch": "diff --git a/powerauth-restful-server/src/main/java/io/getlime/rest/api/ApplicationConfiguration.java b/powerauth-restful-server/src/main/java/io/getlime/rest/api/ApplicationConfiguration.java\nindex c512c13..3149431 100644\n--- a/powerauth-restful-server/src/main/java/io/getlime/rest/api/ApplicationConfiguration.java\n+++ b/powerauth-restful-server/src/main/java/io/getlime/rest/api/ApplicationConfiguration.java\n@@ -13,7 +13,7 @@\n \t@Override\n \tpublic String getApplicationSecretForApplicationId(String applicationId) {\n \t\tif (applicationId.equals(ApplicationConfiguration.expectedApplicationId)) {\n-\t\t\treturn expectedApplicationSecret;\n+\t\t\treturn ApplicationConfiguration.expectedApplicationSecret;\n \t\t}\n \t\treturn null;\n \t}\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 16,
    "nodeStartChar": 644,
    "before": "expectedApplicationSecret",
    "after": "ApplicationConfiguration.expectedApplicationSecret"
  },
  {
    "commitSHA1": "26c6b975329a484e98bf8a1f02fcbd0c09357696",
    "commitFile": "powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java",
    "patch": "diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java\nindex 63cb9e1..3c73eed 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java\n@@ -51,7 +51,7 @@\n     private String generateBase32Token(int length, SecureRandom random) {\n         byte[] randomBytes \u003d new byte[length];\n         random.nextBytes(randomBytes);\n-        return BaseEncoding.base32().omitPadding().encode(randomBytes);\n+        return BaseEncoding.base32().omitPadding().encode(randomBytes).substring(0, length);\n     }\n     \n }\ndiff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java\nindex 63cb9e1..3c73eed 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/generator/IdentifierGenerator.java\n@@ -51,7 +51,7 @@\n     private String generateBase32Token(int length, SecureRandom random) {\n         byte[] randomBytes \u003d new byte[length];\n         random.nextBytes(randomBytes);\n-        return BaseEncoding.base32().omitPadding().encode(randomBytes);\n+        return BaseEncoding.base32().omitPadding().encode(randomBytes).substring(0, length);\n     }\n     \n }\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 54,
    "nodeStartChar": 1994,
    "before": "BaseEncoding",
    "after": "BaseEncoding.base32()"
  },
  {
    "commitSHA1": "ebc31f81fbb936a2b8134d9e54458ec9117948e8",
    "commitFile": "src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java",
    "patch": "diff --git a/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java b/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java\nindex 11c682d..789fa8a 100644\n--- a/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java\n+++ b/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java\n@@ -90,8 +90,8 @@\n             final InetSocketAddress bindAddress \u003d \n                 new InetSocketAddress(NetworkUtils.getLocalHost(), 0);\n             m_acceptor.bind(bindAddress, handler);\n-            LOG.debug(\"Started TCP allocated TURN server, binding to: \"+\n-                this.m_publicAddress);\n+            LOG.debug(\"Started TCP allocated TURN server, bound to: \"+\n+                bindAddress);\n             }\n         catch (final IOException e)\n             {\ndiff --git a/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java b/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java\nindex 11c682d..789fa8a 100644\n--- a/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java\n+++ b/src/main/java/org/lastbamboo/common/turn/server/allocated/TcpAllocatedTurnServer.java\n@@ -90,8 +90,8 @@\n             final InetSocketAddress bindAddress \u003d \n                 new InetSocketAddress(NetworkUtils.getLocalHost(), 0);\n             m_acceptor.bind(bindAddress, handler);\n-            LOG.debug(\"Started TCP allocated TURN server, binding to: \"+\n-                this.m_publicAddress);\n+            LOG.debug(\"Started TCP allocated TURN server, bound to: \"+\n+                bindAddress);\n             }\n         catch (final IOException e)\n             {\n",
    "projectName": "littleshoot-turn-server",
    "lineNum": 93,
    "nodeStartChar": 3598,
    "before": "\"Started TCP allocated TURN server, binding to: \"",
    "after": "\"Started TCP allocated TURN server, bound to: \""
  },
  {
    "commitSHA1": "1d6a4e8256cdf37b7fb6aaafbc06a5a9fc12b2af",
    "commitFile": "src/main/java/com/loadimpact/resource/testresult/StandardMetricResult.java",
    "patch": "diff --git a/src/main/java/com/loadimpact/resource/testresult/StandardMetricResult.java b/src/main/java/com/loadimpact/resource/testresult/StandardMetricResult.java\nindex 15e6de6..a55faa0 100644\n--- a/src/main/java/com/loadimpact/resource/testresult/StandardMetricResult.java\n+++ b/src/main/java/com/loadimpact/resource/testresult/StandardMetricResult.java\n@@ -66,7 +66,7 @@\n             this.valueName \u003d valueName;\n             this.integral \u003d integral;\n             this.resultType \u003d resultType;\n-            this.id \u003d PREFIX + name();\n+            this.id \u003d PREFIX + name().toLowerCase();\n         }\n \n \n",
    "projectName": "loadimpact-sdk-java",
    "lineNum": 69,
    "nodeStartChar": 2238,
    "before": "name()",
    "after": "name().toLowerCase()"
  },
  {
    "commitSHA1": "7fad5c2439d8c17a1f86eec731589f88b442eaee",
    "commitFile": "src/main/java/com/loadimpact/util/DateUtils.java",
    "patch": "diff --git a/src/main/java/com/loadimpact/util/DateUtils.java b/src/main/java/com/loadimpact/util/DateUtils.java\nindex 6970d7f..cdb9303 100644\n--- a/src/main/java/com/loadimpact/util/DateUtils.java\n+++ b/src/main/java/com/loadimpact/util/DateUtils.java\n@@ -28,7 +28,7 @@\n      */\n     public static String toIso8601(Date date) {\n         if (date \u003d\u003d null) return null;\n-        return ISODateTimeFormat.dateTimeNoMillis()./*withZoneUTC().*/print(date.getTime());\n+        return ISODateTimeFormat.dateTimeNoMillis().withZoneUTC().print(date.getTime());\n     }\n \n     /**\ndiff --git a/src/main/java/com/loadimpact/util/DateUtils.java b/src/main/java/com/loadimpact/util/DateUtils.java\nindex 6970d7f..cdb9303 100644\n--- a/src/main/java/com/loadimpact/util/DateUtils.java\n+++ b/src/main/java/com/loadimpact/util/DateUtils.java\n@@ -28,7 +28,7 @@\n      */\n     public static String toIso8601(Date date) {\n         if (date \u003d\u003d null) return null;\n-        return ISODateTimeFormat.dateTimeNoMillis()./*withZoneUTC().*/print(date.getTime());\n+        return ISODateTimeFormat.dateTimeNoMillis().withZoneUTC().print(date.getTime());\n     }\n \n     /**\n",
    "projectName": "loadimpact-sdk-java",
    "lineNum": 31,
    "nodeStartChar": 789,
    "before": "ISODateTimeFormat",
    "after": "ISODateTimeFormat.dateTimeNoMillis()"
  },
  {
    "commitSHA1": "7212052c79a31c0352b2390fb08b065299bd7e52",
    "commitFile": "src/test/java/com/pwc/logging/LoggerHelperTest.java",
    "patch": "diff --git a/src/test/java/com/pwc/logging/LoggerHelperTest.java b/src/test/java/com/pwc/logging/LoggerHelperTest.java\nindex de74019..c18a159 100644\n--- a/src/test/java/com/pwc/logging/LoggerHelperTest.java\n+++ b/src/test/java/com/pwc/logging/LoggerHelperTest.java\n@@ -125,7 +125,7 @@\n \n     @Test\n     public void getDateTimePatterTest() {\n-        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(\"MM\\\\yyyy\"));\n+        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(\"MM\"));\n     }\n \n     @Test\ndiff --git a/src/test/java/com/pwc/logging/LoggerHelperTest.java b/src/test/java/com/pwc/logging/LoggerHelperTest.java\nindex de74019..c18a159 100644\n--- a/src/test/java/com/pwc/logging/LoggerHelperTest.java\n+++ b/src/test/java/com/pwc/logging/LoggerHelperTest.java\n@@ -125,7 +125,7 @@\n \n     @Test\n     public void getDateTimePatterTest() {\n-        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(\"MM\\\\yyyy\"));\n+        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(\"MM\"));\n     }\n \n     @Test\n",
    "projectName": "logging-microservice",
    "lineNum": 128,
    "nodeStartChar": 5147,
    "before": "\"MM\\\\yyyy\"",
    "after": "\"MM\""
  },
  {
    "commitSHA1": "29e50c893391406df585790829cb684fa42a037d",
    "commitFile": "src/test/java/com/pwc/logging/LoggerHelperTest.java",
    "patch": "diff --git a/src/test/java/com/pwc/logging/LoggerHelperTest.java b/src/test/java/com/pwc/logging/LoggerHelperTest.java\nindex d06b880..de74019 100644\n--- a/src/test/java/com/pwc/logging/LoggerHelperTest.java\n+++ b/src/test/java/com/pwc/logging/LoggerHelperTest.java\n@@ -125,7 +125,7 @@\n \n     @Test\n     public void getDateTimePatterTest() {\n-        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(DATE_PATTERN));\n+        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(\"MM\\\\yyyy\"));\n     }\n \n     @Test\ndiff --git a/src/test/java/com/pwc/logging/LoggerHelperTest.java b/src/test/java/com/pwc/logging/LoggerHelperTest.java\nindex d06b880..de74019 100644\n--- a/src/test/java/com/pwc/logging/LoggerHelperTest.java\n+++ b/src/test/java/com/pwc/logging/LoggerHelperTest.java\n@@ -125,7 +125,7 @@\n \n     @Test\n     public void getDateTimePatterTest() {\n-        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(DATE_PATTERN));\n+        Assert.assertEquals(expectedDateAsString, LoggerHelper.getDateTime(\"MM\\\\yyyy\"));\n     }\n \n     @Test\n",
    "projectName": "logging-microservice",
    "lineNum": 128,
    "nodeStartChar": 5147,
    "before": "DATE_PATTERN",
    "after": "\"MM\\\\yyyy\""
  },
  {
    "commitSHA1": "b2ea43dd7d203b5c35a658d9113a2aff10a6aa87",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\nindex a59185a..cb06363 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n@@ -49,7 +49,7 @@\n       Builder parallelStepBuilder \u003d null;\n       while ((line \u003d br.readLine()) !\u003d null) {\n         line \u003d line.trim();\n-        if (line.startsWith(KW_COMMENT)) {\n+        if (line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)) {\n           continue;\n         }\n \ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\nindex a59185a..cb06363 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n@@ -49,7 +49,7 @@\n       Builder parallelStepBuilder \u003d null;\n       while ((line \u003d br.readLine()) !\u003d null) {\n         line \u003d line.trim();\n-        if (line.startsWith(KW_COMMENT)) {\n+        if (line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)) {\n           continue;\n         }\n \n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 52,
    "nodeStartChar": 2017,
    "before": "line.startsWith(KW_COMMENT)",
    "after": "line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 150,
    "nodeStartChar": 6106,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 153,
    "nodeStartChar": 6222,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 156,
    "nodeStartChar": 6328,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 159,
    "nodeStartChar": 6467,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 162,
    "nodeStartChar": 6551,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 167,
    "nodeStartChar": 6705,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 169,
    "nodeStartChar": 6745,
    "before": "@MojoProduces private MavenLogWrapper createLogWrapper(){   MavenLogWrapper log\u003dnew MavenLogWrapper(getLog());   if (this.enableLogTimestamps) {     log.enableLogTimestamps();   }   return log; } ",
    "after": "@MojoProduces public final MavenLogWrapper createLogWrapper(){   MavenLogWrapper log\u003dnew MavenLogWrapper(getLog());   if (this.enableLogTimestamps) {     log.enableLogTimestamps();   }   return log; } "
  },
  {
    "commitSHA1": "9c69f3b41c8e362a3b306e71af6085d43ec91d8d",
    "commitFile": "src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java",
    "patch": "diff --git a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\nindex 60f70c9..9aeaf10 100644\n--- a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n+++ b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n@@ -91,7 +91,7 @@\n         final String incrementalSerialSuffix \u003d session.getIncrementalSerialSuffix();\n         final String suffix \u003d session.getSuffix();\n \n-        final String suff \u003d incrementalSerialSuffix \u003d\u003d null ? suffix : incrementalSerialSuffix;\n+        final String suff \u003d suffix !\u003d null ? suffix : incrementalSerialSuffix;\n         final Pattern serialSuffixPattern \u003d Pattern.compile( SERIAL_SUFFIX_PATTERN );\n         final Matcher suffixMatcher \u003d serialSuffixPattern.matcher( suff );\n \ndiff --git a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\nindex 60f70c9..9aeaf10 100644\n--- a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n+++ b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n@@ -91,7 +91,7 @@\n         final String incrementalSerialSuffix \u003d session.getIncrementalSerialSuffix();\n         final String suffix \u003d session.getSuffix();\n \n-        final String suff \u003d incrementalSerialSuffix \u003d\u003d null ? suffix : incrementalSerialSuffix;\n+        final String suff \u003d suffix !\u003d null ? suffix : incrementalSerialSuffix;\n         final Pattern serialSuffixPattern \u003d Pattern.compile( SERIAL_SUFFIX_PATTERN );\n         final Matcher suffixMatcher \u003d serialSuffixPattern.matcher( suff );\n \n",
    "projectName": "maven-versioning-extension",
    "lineNum": 94,
    "nodeStartChar": 3249,
    "before": "incrementalSerialSuffix \u003d\u003d null",
    "after": "suffix !\u003d null"
  },
  {
    "commitSHA1": "d9c9cb4764f2b265ba6b10ac2776243b9c556aaa",
    "commitFile": "src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java",
    "patch": "diff --git a/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java b/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java\nindex 6126fa0..ac6aac6 100644\n--- a/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java\n+++ b/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java\n@@ -78,7 +78,7 @@\n \n     @Override\n     public void clear() {\n-        getSession().clear();\n+        sessions.remove(context.getSenderId());\n     }\n \n     @Override\ndiff --git a/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java b/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java\nindex 6126fa0..ac6aac6 100644\n--- a/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java\n+++ b/src/main/java/dev/alangomes/springspigot/context/DefaultSessionService.java\n@@ -78,7 +78,7 @@\n \n     @Override\n     public void clear() {\n-        getSession().clear();\n+        sessions.remove(context.getSenderId());\n     }\n \n     @Override\n",
    "projectName": "mcspring-boot",
    "lineNum": 81,
    "nodeStartChar": 2033,
    "before": "getSession()",
    "after": "sessions"
  },
  {
    "commitSHA1": "91b131af8dc7d00cecd62487c944894a2bca90ee",
    "commitFile": "tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java",
    "patch": "diff --git a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\nindex 075d131..64970b9 100644\n--- a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n+++ b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n@@ -95,7 +95,7 @@\n \n         startServer(serverInitializer);\n \n-        webArchive.addAsManifestResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), CERT_LOCATION_FILE);\n+        webArchive.addAsResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), \"META-INF/\" + CERT_LOCATION_FILE);\n     }\n \n     static void initializeCertificateLocations() {\ndiff --git a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\nindex 075d131..64970b9 100644\n--- a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n+++ b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n@@ -95,7 +95,7 @@\n \n         startServer(serverInitializer);\n \n-        webArchive.addAsManifestResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), CERT_LOCATION_FILE);\n+        webArchive.addAsResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), \"META-INF/\" + CERT_LOCATION_FILE);\n     }\n \n     static void initializeCertificateLocations() {\n",
    "projectName": "microprofile-rest-client",
    "lineNum": 98,
    "nodeStartChar": 3797,
    "before": "webArchive.addAsManifestResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()),CERT_LOCATION_FILE)",
    "after": "webArchive.addAsResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()),\"META-INF/\" + CERT_LOCATION_FILE)"
  },
  {
    "commitSHA1": "033a7ed330e470ec297e5c6f5c4a05a15cffc964",
    "commitFile": "tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java",
    "patch": "diff --git a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\nindex 075d131..64970b9 100644\n--- a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n+++ b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n@@ -95,7 +95,7 @@\n \n         startServer(serverInitializer);\n \n-        webArchive.addAsManifestResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), CERT_LOCATION_FILE);\n+        webArchive.addAsResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), \"META-INF/\" + CERT_LOCATION_FILE);\n     }\n \n     static void initializeCertificateLocations() {\ndiff --git a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\nindex 075d131..64970b9 100644\n--- a/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n+++ b/tck/src/main/java/org/eclipse/microprofile/rest/client/tck/ssl/AbstractSslTest.java\n@@ -95,7 +95,7 @@\n \n         startServer(serverInitializer);\n \n-        webArchive.addAsManifestResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), CERT_LOCATION_FILE);\n+        webArchive.addAsResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()), \"META-INF/\" + CERT_LOCATION_FILE);\n     }\n \n     static void initializeCertificateLocations() {\n",
    "projectName": "microprofile-rest-client",
    "lineNum": 98,
    "nodeStartChar": 3797,
    "before": "webArchive.addAsManifestResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()),CERT_LOCATION_FILE)",
    "after": "webArchive.addAsResource(new StringAsset(certificatesDirectory.toAbsolutePath().toString()),\"META-INF/\" + CERT_LOCATION_FILE)"
  },
  {
    "commitSHA1": "899d59f3e1210f9c2cce126d019d2bce777dd561",
    "commitFile": "api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java",
    "patch": "diff --git a/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java b/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java\nindex aa57f65..3e87cf5 100644\n--- a/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java\n+++ b/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java\n@@ -35,7 +35,7 @@\n  *\n  * @since 1.2\n  */\n-@Target({ElementType.TYPE})\n+@Target({ElementType.TYPE, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface ClientHeaderParams {\ndiff --git a/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java b/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java\nindex aa57f65..3e87cf5 100644\n--- a/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java\n+++ b/api/src/main/java/org/eclipse/microprofile/rest/client/annotation/ClientHeaderParams.java\n@@ -35,7 +35,7 @@\n  *\n  * @since 1.2\n  */\n-@Target({ElementType.TYPE})\n+@Target({ElementType.TYPE, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface ClientHeaderParams {\n",
    "projectName": "microprofile-rest-client",
    "lineNum": 38,
    "nodeStartChar": 1564,
    "before": "{ElementType.TYPE}",
    "after": "{ElementType.TYPE,ElementType.METHOD}"
  },
  {
    "commitSHA1": "8dab459335da444a242b4d895a790d0cb6385365",
    "commitFile": "src/main/java/com/mixpanel/mixpanelapi/Config.java",
    "patch": "diff --git a/src/main/java/com/mixpanel/mixpanelapi/Config.java b/src/main/java/com/mixpanel/mixpanelapi/Config.java\nindex 17f52d0..d0564db 100644\n--- a/src/main/java/com/mixpanel/mixpanelapi/Config.java\n+++ b/src/main/java/com/mixpanel/mixpanelapi/Config.java\n@@ -1,6 +1,6 @@\n package com.mixpanel.mixpanelapi;\n \n /* package */ class Config {\n-    public static final String BASE_ENDPOINT \u003d \"http://api.mixpanel.com\";\n+    public static final String BASE_ENDPOINT \u003d \"https://api.mixpanel.com\";\n     public static final int MAX_MESSAGE_SIZE \u003d 50;\n }\ndiff --git a/src/main/java/com/mixpanel/mixpanelapi/Config.java b/src/main/java/com/mixpanel/mixpanelapi/Config.java\nindex 17f52d0..d0564db 100644\n--- a/src/main/java/com/mixpanel/mixpanelapi/Config.java\n+++ b/src/main/java/com/mixpanel/mixpanelapi/Config.java\n@@ -1,6 +1,6 @@\n package com.mixpanel.mixpanelapi;\n \n /* package */ class Config {\n-    public static final String BASE_ENDPOINT \u003d \"http://api.mixpanel.com\";\n+    public static final String BASE_ENDPOINT \u003d \"https://api.mixpanel.com\";\n     public static final int MAX_MESSAGE_SIZE \u003d 50;\n }\n",
    "projectName": "mixpanel-java",
    "lineNum": 4,
    "nodeStartChar": 111,
    "before": "\"http://api.mixpanel.com\"",
    "after": "\"https://api.mixpanel.com\""
  },
  {
    "commitSHA1": "691f5d70bdf1bc3808670210e37b2b7ddff29455",
    "commitFile": "src/main/java/com/mixpanel/mixpanelapi/Config.java",
    "patch": "diff --git a/src/main/java/com/mixpanel/mixpanelapi/Config.java b/src/main/java/com/mixpanel/mixpanelapi/Config.java\nindex 17f52d0..d0564db 100644\n--- a/src/main/java/com/mixpanel/mixpanelapi/Config.java\n+++ b/src/main/java/com/mixpanel/mixpanelapi/Config.java\n@@ -1,6 +1,6 @@\n package com.mixpanel.mixpanelapi;\n \n /* package */ class Config {\n-    public static final String BASE_ENDPOINT \u003d \"http://api.mixpanel.com\";\n+    public static final String BASE_ENDPOINT \u003d \"https://api.mixpanel.com\";\n     public static final int MAX_MESSAGE_SIZE \u003d 50;\n }\ndiff --git a/src/main/java/com/mixpanel/mixpanelapi/Config.java b/src/main/java/com/mixpanel/mixpanelapi/Config.java\nindex 17f52d0..d0564db 100644\n--- a/src/main/java/com/mixpanel/mixpanelapi/Config.java\n+++ b/src/main/java/com/mixpanel/mixpanelapi/Config.java\n@@ -1,6 +1,6 @@\n package com.mixpanel.mixpanelapi;\n \n /* package */ class Config {\n-    public static final String BASE_ENDPOINT \u003d \"http://api.mixpanel.com\";\n+    public static final String BASE_ENDPOINT \u003d \"https://api.mixpanel.com\";\n     public static final int MAX_MESSAGE_SIZE \u003d 50;\n }\n",
    "projectName": "mixpanel-java",
    "lineNum": 4,
    "nodeStartChar": 111,
    "before": "\"http://api.mixpanel.com\"",
    "after": "\"https://api.mixpanel.com\""
  },
  {
    "commitSHA1": "72c960934a09e771569e256b8d48bc3bd841ff96",
    "commitFile": "src/main/java/mltk/predictor/io/PredictorReader.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/io/PredictorReader.java b/src/main/java/mltk/predictor/io/PredictorReader.java\nindex 1ee4e90..d8829f5 100755\n--- a/src/main/java/mltk/predictor/io/PredictorReader.java\n+++ b/src/main/java/mltk/predictor/io/PredictorReader.java\n@@ -25,7 +25,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\tin.close();\n \t\treturn predictor;\n@@ -56,7 +56,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\treturn predictor;\n \t}\ndiff --git a/src/main/java/mltk/predictor/io/PredictorReader.java b/src/main/java/mltk/predictor/io/PredictorReader.java\nindex 1ee4e90..d8829f5 100755\n--- a/src/main/java/mltk/predictor/io/PredictorReader.java\n+++ b/src/main/java/mltk/predictor/io/PredictorReader.java\n@@ -25,7 +25,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\tin.close();\n \t\treturn predictor;\n@@ -56,7 +56,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\treturn predictor;\n \t}\n",
    "projectName": "mltk",
    "lineNum": 28,
    "nodeStartChar": 756,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "72c960934a09e771569e256b8d48bc3bd841ff96",
    "commitFile": "src/main/java/mltk/predictor/io/PredictorReader.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/io/PredictorReader.java b/src/main/java/mltk/predictor/io/PredictorReader.java\nindex 1ee4e90..d8829f5 100755\n--- a/src/main/java/mltk/predictor/io/PredictorReader.java\n+++ b/src/main/java/mltk/predictor/io/PredictorReader.java\n@@ -25,7 +25,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\tin.close();\n \t\treturn predictor;\n@@ -56,7 +56,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\treturn predictor;\n \t}\ndiff --git a/src/main/java/mltk/predictor/io/PredictorReader.java b/src/main/java/mltk/predictor/io/PredictorReader.java\nindex 1ee4e90..d8829f5 100755\n--- a/src/main/java/mltk/predictor/io/PredictorReader.java\n+++ b/src/main/java/mltk/predictor/io/PredictorReader.java\n@@ -25,7 +25,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\tin.close();\n \t\treturn predictor;\n@@ -56,7 +56,7 @@\n \t\tString line \u003d in.readLine();\n \t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\n+\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\n \t\tpredictor.read(in);\n \t\treturn predictor;\n \t}\n",
    "projectName": "mltk",
    "lineNum": 59,
    "nodeStartChar": 1786,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/Ensemble.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/Ensemble.java b/src/main/java/mltk/predictor/Ensemble.java\nindex afe5b4b..2e9539a 100755\n--- a/src/main/java/mltk/predictor/Ensemble.java\n+++ b/src/main/java/mltk/predictor/Ensemble.java\n@@ -84,7 +84,7 @@\n \t\t\tString line \u003d in.readLine();\r\n \t\t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\r\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\r\n-\t\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\r\n+\t\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\r\n \t\t\tpredictor.read(in);\r\n \t\t\tpredictors.add(predictor);\r\n \t\t\tin.readLine();\r\ndiff --git a/src/main/java/mltk/predictor/gam/GAM.java b/src/main/java/mltk/predictor/gam/GAM.java\nindex a27d996..62706fb 100755\n--- a/src/main/java/mltk/predictor/gam/GAM.java\n+++ b/src/main/java/mltk/predictor/gam/GAM.java\n@@ -94,7 +94,7 @@\n \t\t\tString line \u003d in.readLine();\n \t\t\tString regressorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(regressorName);\n-\t\t\tRegressor regressor \u003d (Regressor) clazz.newInstance();\n+\t\t\tRegressor regressor \u003d (Regressor) clazz.getDeclaredConstructor().newInstance();\n \t\t\tregressor.read(in);\n \t\t\tregressors.add(regressor);\n \t\t\tin.readLine();\ndiff --git a/src/main/java/mltk/predictor/tree/RegressionTree.java b/src/main/java/mltk/predictor/tree/RegressionTree.java\nindex 9077b31..88e10c3 100755\n--- a/src/main/java/mltk/predictor/tree/RegressionTree.java\n+++ b/src/main/java/mltk/predictor/tree/RegressionTree.java\n@@ -106,7 +106,7 @@\n \tpublic void read(BufferedReader in) throws Exception {\n \t\tin.readLine();\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(in.readLine());\n-\t\troot \u003d (TreeNode) clazz.newInstance();\n+\t\troot \u003d (TreeNode) clazz.getDeclaredConstructor().newInstance();\n \t\troot.read(in);\n \t}\n \ndiff --git a/src/main/java/mltk/predictor/tree/TreeInteriorNode.java b/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\nindex 3510cef..5bd8773 100755\n--- a/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\n+++ b/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\n@@ -95,13 +95,13 @@\n \t\tin.readLine();\n \n \t\tClass\u003c?\u003e clazzLeft \u003d Class.forName(in.readLine());\n-\t\tleft \u003d (TreeNode) clazzLeft.newInstance();\n+\t\tleft \u003d (TreeNode) clazzLeft.getDeclaredConstructor().newInstance();\n \t\tleft.read(in);\n \n \t\tin.readLine();\n \n \t\tClass\u003c?\u003e clazzRight \u003d Class.forName(in.readLine());\n-\t\tright \u003d (TreeNode) clazzRight.newInstance();\n+\t\tright \u003d (TreeNode) clazzRight.getDeclaredConstructor().newInstance();\n \t\tright.read(in);\n \t}\n \ndiff --git a/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java b/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java\nindex f6e1a01..84df563 100644\n--- a/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java\n+++ b/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java\n@@ -251,7 +251,7 @@\n \t\t\tString line \u003d in.readLine();\n \t\t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\t\tDecisionTable dt \u003d (DecisionTable) clazz.newInstance();\n+\t\t\tDecisionTable dt \u003d (DecisionTable) clazz.getDeclaredConstructor().newInstance();\n \t\t\tdt.read(in);\n \t\t\tthis.dtList.add(dt);\n \ndiff --git a/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java b/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java\nindex 1f0ca07..3221d05 100755\n--- a/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java\n+++ b/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java\n@@ -63,7 +63,7 @@\n \t\t\tString line \u003d in.readLine();\r\n \t\t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\r\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\r\n-\t\t\tRTree rt \u003d (RTree) clazz.newInstance();\r\n+\t\t\tRTree rt \u003d (RTree) clazz.getDeclaredConstructor().newInstance();\n \t\t\trt.read(in);\r\n \t\t\tthis.trees.add(rt);\r\n \r\ndiff --git a/src/main/java/mltk/predictor/Ensemble.java b/src/main/java/mltk/predictor/Ensemble.java\nindex afe5b4b..2e9539a 100755\n--- a/src/main/java/mltk/predictor/Ensemble.java\n+++ b/src/main/java/mltk/predictor/Ensemble.java\n@@ -84,7 +84,7 @@\n \t\t\tString line \u003d in.readLine();\r\n \t\t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\r\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\r\n-\t\t\tPredictor predictor \u003d (Predictor) clazz.newInstance();\r\n+\t\t\tPredictor predictor \u003d (Predictor) clazz.getDeclaredConstructor().newInstance();\r\n \t\t\tpredictor.read(in);\r\n \t\t\tpredictors.add(predictor);\r\n \t\t\tin.readLine();\r\n",
    "projectName": "mltk",
    "lineNum": 87,
    "nodeStartChar": 1743,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/gam/GAM.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/gam/GAM.java b/src/main/java/mltk/predictor/gam/GAM.java\nindex a27d996..62706fb 100755\n--- a/src/main/java/mltk/predictor/gam/GAM.java\n+++ b/src/main/java/mltk/predictor/gam/GAM.java\n@@ -94,7 +94,7 @@\n \t\t\tString line \u003d in.readLine();\n \t\t\tString regressorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(regressorName);\n-\t\t\tRegressor regressor \u003d (Regressor) clazz.newInstance();\n+\t\t\tRegressor regressor \u003d (Regressor) clazz.getDeclaredConstructor().newInstance();\n \t\t\tregressor.read(in);\n \t\t\tregressors.add(regressor);\n \t\t\tin.readLine();\n",
    "projectName": "mltk",
    "lineNum": 97,
    "nodeStartChar": 2058,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/tree/RegressionTree.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/tree/RegressionTree.java b/src/main/java/mltk/predictor/tree/RegressionTree.java\nindex 9077b31..88e10c3 100755\n--- a/src/main/java/mltk/predictor/tree/RegressionTree.java\n+++ b/src/main/java/mltk/predictor/tree/RegressionTree.java\n@@ -106,7 +106,7 @@\n \tpublic void read(BufferedReader in) throws Exception {\n \t\tin.readLine();\n \t\tClass\u003c?\u003e clazz \u003d Class.forName(in.readLine());\n-\t\troot \u003d (TreeNode) clazz.newInstance();\n+\t\troot \u003d (TreeNode) clazz.getDeclaredConstructor().newInstance();\n \t\troot.read(in);\n \t}\n \n",
    "projectName": "mltk",
    "lineNum": 109,
    "nodeStartChar": 2150,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/tree/TreeInteriorNode.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/tree/TreeInteriorNode.java b/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\nindex 3510cef..5bd8773 100755\n--- a/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\n+++ b/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\n@@ -95,13 +95,13 @@\n \t\tin.readLine();\n \n \t\tClass\u003c?\u003e clazzLeft \u003d Class.forName(in.readLine());\n-\t\tleft \u003d (TreeNode) clazzLeft.newInstance();\n+\t\tleft \u003d (TreeNode) clazzLeft.getDeclaredConstructor().newInstance();\n \t\tleft.read(in);\n \n \t\tin.readLine();\n \n \t\tClass\u003c?\u003e clazzRight \u003d Class.forName(in.readLine());\n-\t\tright \u003d (TreeNode) clazzRight.newInstance();\n+\t\tright \u003d (TreeNode) clazzRight.getDeclaredConstructor().newInstance();\n \t\tright.read(in);\n \t}\n \n",
    "projectName": "mltk",
    "lineNum": 98,
    "nodeStartChar": 1857,
    "before": "clazzLeft",
    "after": "clazzLeft.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/tree/TreeInteriorNode.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/tree/TreeInteriorNode.java b/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\nindex 3510cef..5bd8773 100755\n--- a/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\n+++ b/src/main/java/mltk/predictor/tree/TreeInteriorNode.java\n@@ -95,13 +95,13 @@\n \t\tin.readLine();\n \n \t\tClass\u003c?\u003e clazzLeft \u003d Class.forName(in.readLine());\n-\t\tleft \u003d (TreeNode) clazzLeft.newInstance();\n+\t\tleft \u003d (TreeNode) clazzLeft.getDeclaredConstructor().newInstance();\n \t\tleft.read(in);\n \n \t\tin.readLine();\n \n \t\tClass\u003c?\u003e clazzRight \u003d Class.forName(in.readLine());\n-\t\tright \u003d (TreeNode) clazzRight.newInstance();\n+\t\tright \u003d (TreeNode) clazzRight.getDeclaredConstructor().newInstance();\n \t\tright.read(in);\n \t}\n \n",
    "projectName": "mltk",
    "lineNum": 104,
    "nodeStartChar": 1993,
    "before": "clazzRight",
    "after": "clazzRight.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java b/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java\nindex f6e1a01..84df563 100644\n--- a/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java\n+++ b/src/main/java/mltk/predictor/tree/ensemble/BoostedDTables.java\n@@ -251,7 +251,7 @@\n \t\t\tString line \u003d in.readLine();\n \t\t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\n-\t\t\tDecisionTable dt \u003d (DecisionTable) clazz.newInstance();\n+\t\t\tDecisionTable dt \u003d (DecisionTable) clazz.getDeclaredConstructor().newInstance();\n \t\t\tdt.read(in);\n \t\t\tthis.dtList.add(dt);\n \n",
    "projectName": "mltk",
    "lineNum": 254,
    "nodeStartChar": 5965,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "2a20f828a98b0a2a3d0579665c013969043f99f6",
    "commitFile": "src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java",
    "patch": "diff --git a/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java b/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java\nindex 1f0ca07..3221d05 100755\n--- a/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java\n+++ b/src/main/java/mltk/predictor/tree/ensemble/BoostedRTrees.java\n@@ -63,7 +63,7 @@\n \t\t\tString line \u003d in.readLine();\r\n \t\t\tString predictorName \u003d line.substring(1, line.length() - 1).split(\": \")[1];\r\n \t\t\tClass\u003c?\u003e clazz \u003d Class.forName(predictorName);\r\n-\t\t\tRTree rt \u003d (RTree) clazz.newInstance();\r\n+\t\t\tRTree rt \u003d (RTree) clazz.getDeclaredConstructor().newInstance();\n \t\t\trt.read(in);\r\n \t\t\tthis.trees.add(rt);\r\n \r\n",
    "projectName": "mltk",
    "lineNum": 66,
    "nodeStartChar": 1394,
    "before": "clazz",
    "after": "clazz.getDeclaredConstructor()"
  },
  {
    "commitSHA1": "053b70717576745ecd3f534767bbcf0cf1625614",
    "commitFile": "src/main/java/mltk/core/processor/InstancesSplitter.java",
    "patch": "diff --git a/src/main/java/mltk/core/processor/InstancesSplitter.java b/src/main/java/mltk/core/processor/InstancesSplitter.java\nindex 5c50510..81a6389 100755\n--- a/src/main/java/mltk/core/processor/InstancesSplitter.java\n+++ b/src/main/java/mltk/core/processor/InstancesSplitter.java\n@@ -128,7 +128,7 @@\n \t\t\t\t\tInstancesWriter.write(datasets[0], opts.outputDirPath + File.separator + prefix + \".attr\",\r\n \t\t\t\t\t\t\topts.outputDirPath + File.separator + prefix + \".train\");\r\n \t\t\t\t\tInstancesWriter.write(datasets[1], opts.outputDirPath + File.separator + prefix + \".valid\");\r\n-\t\t\t\t} if (data.length \u003d\u003d 3) {\r\n+\t\t\t\t} else if (data.length \u003d\u003d 3) {\r\n \t\t\t\t\tdouble[] ratios \u003d new double[data.length - 1];\r\n \t\t\t\t\tfor (int i \u003d 0; i \u003c ratios.length; i++) {\r\n \t\t\t\t\t\tratios[i] \u003d Double.parseDouble(data[i + 1]);\r\ndiff --git a/src/main/java/mltk/core/processor/InstancesSplitter.java b/src/main/java/mltk/core/processor/InstancesSplitter.java\nindex 5c50510..81a6389 100755\n--- a/src/main/java/mltk/core/processor/InstancesSplitter.java\n+++ b/src/main/java/mltk/core/processor/InstancesSplitter.java\n@@ -128,7 +128,7 @@\n \t\t\t\t\tInstancesWriter.write(datasets[0], opts.outputDirPath + File.separator + prefix + \".attr\",\r\n \t\t\t\t\t\t\topts.outputDirPath + File.separator + prefix + \".train\");\r\n \t\t\t\t\tInstancesWriter.write(datasets[1], opts.outputDirPath + File.separator + prefix + \".valid\");\r\n-\t\t\t\t} if (data.length \u003d\u003d 3) {\r\n+\t\t\t\t} else if (data.length \u003d\u003d 3) {\r\n \t\t\t\t\tdouble[] ratios \u003d new double[data.length - 1];\r\n \t\t\t\t\tfor (int i \u003d 0; i \u003c ratios.length; i++) {\r\n \t\t\t\t\t\tratios[i] \u003d Double.parseDouble(data[i + 1]);\r\n",
    "projectName": "mltk",
    "lineNum": 93,
    "nodeStartChar": 2608,
    "before": "switch (data[0]) { case \"c\":   int k\u003dInteger.parseInt(data[1]); if (data.length \u003d\u003d 2) {   Instances[][] folds\u003dInstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k);   for (int i\u003d0; i \u003c folds.length; i++) {     String path\u003dopts.outputDirPath + File.separator + \"cv.\"+ i;     File directory\u003dnew File(path);     if (!directory.exists()) {       directory.mkdir();     }     InstancesWriter.write(folds[i][0],path + File.separator + prefix+ \".attr\",path + File.separator + prefix+ \".train.all\");     InstancesWriter.write(folds[i][1],path + File.separator + prefix+ \".test\");   } }  else {   double ratio\u003dDouble.parseDouble(data[2]);   Instances[][] folds\u003dInstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k,ratio);   for (int i\u003d0; i \u003c folds.length; i++) {     String path\u003dopts.outputDirPath + File.separator + \"cv.\"+ i;     File directory\u003dnew File(path);     if (!directory.exists()) {       directory.mkdir();     }     InstancesWriter.write(folds[i][0],path + File.separator + prefix+ \".attr\",path + File.separator + prefix+ \".train\");     InstancesWriter.write(folds[i][1],path + File.separator + prefix+ \".valid\");     InstancesWriter.write(folds[i][2],path + File.separator + prefix+ \".test\");   } } break; case \"s\": if (data.length \u003d\u003d 2) { double ratio\u003dDouble.parseDouble(data[1]); Instances[] datasets\u003dInstancesSplitter.split(instances,opts.attToStrafity,ratio); InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ \".attr\",opts.outputDirPath + File.separator + prefix+ \".train\"); InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ \".valid\"); } if (data.length \u003d\u003d 3) { double[] ratios\u003dnew double[data.length - 1]; for (int i\u003d0; i \u003c ratios.length; i++) { ratios[i]\u003dDouble.parseDouble(data[i + 1]); } Instances[] datasets\u003dInstancesSplitter.split(instances,opts.attToStrafity,ratios); InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ \".attr\",opts.outputDirPath + File.separator + prefix+ \".train\"); InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ \".valid\"); InstancesWriter.write(datasets[2],opts.outputDirPath + File.separator + prefix+ \".test\"); }  else { double[] ratios\u003dnew double[data.length - 1]; for (int i\u003d0; i \u003c ratios.length; i++) { ratios[i]\u003dDouble.parseDouble(data[i + 1]); } Instances[] datasets\u003dInstancesSplitter.split(instances,opts.attToStrafity,ratios); for (int i\u003d0; i \u003c datasets.length; i++) { InstancesWriter.write(datasets[i],opts.outputDirPath + File.separator + prefix+ \".data.\"+ i); } } break; default : break; } ",
    "after": "switch (data[0]) { case \"c\":   int k\u003dInteger.parseInt(data[1]); if (data.length \u003d\u003d 2) {   Instances[][] folds\u003dInstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k);   for (int i\u003d0; i \u003c folds.length; i++) {     String path\u003dopts.outputDirPath + File.separator + \"cv.\"+ i;     File directory\u003dnew File(path);     if (!directory.exists()) {       directory.mkdir();     }     InstancesWriter.write(folds[i][0],path + File.separator + prefix+ \".attr\",path + File.separator + prefix+ \".train.all\");     InstancesWriter.write(folds[i][1],path + File.separator + prefix+ \".test\");   } }  else {   double ratio\u003dDouble.parseDouble(data[2]);   Instances[][] folds\u003dInstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k,ratio);   for (int i\u003d0; i \u003c folds.length; i++) {     String path\u003dopts.outputDirPath + File.separator + \"cv.\"+ i;     File directory\u003dnew File(path);     if (!directory.exists()) {       directory.mkdir();     }     InstancesWriter.write(folds[i][0],path + File.separator + prefix+ \".attr\",path + File.separator + prefix+ \".train\");     InstancesWriter.write(folds[i][1],path + File.separator + prefix+ \".valid\");     InstancesWriter.write(folds[i][2],path + File.separator + prefix+ \".test\");   } } break; case \"s\": if (data.length \u003d\u003d 2) { double ratio\u003dDouble.parseDouble(data[1]); Instances[] datasets\u003dInstancesSplitter.split(instances,opts.attToStrafity,ratio); InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ \".attr\",opts.outputDirPath + File.separator + prefix+ \".train\"); InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ \".valid\"); }  else if (data.length \u003d\u003d 3) { double[] ratios\u003dnew double[data.length - 1]; for (int i\u003d0; i \u003c ratios.length; i++) { ratios[i]\u003dDouble.parseDouble(data[i + 1]); } Instances[] datasets\u003dInstancesSplitter.split(instances,opts.attToStrafity,ratios); InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ \".attr\",opts.outputDirPath + File.separator + prefix+ \".train\"); InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ \".valid\"); InstancesWriter.write(datasets[2],opts.outputDirPath + File.separator + prefix+ \".test\"); }  else { double[] ratios\u003dnew double[data.length - 1]; for (int i\u003d0; i \u003c ratios.length; i++) { ratios[i]\u003dDouble.parseDouble(data[i + 1]); } Instances[] datasets\u003dInstancesSplitter.split(instances,opts.attToStrafity,ratios); for (int i\u003d0; i \u003c datasets.length; i++) { InstancesWriter.write(datasets[i],opts.outputDirPath + File.separator + prefix+ \".data.\"+ i); } } break; default : break; } "
  },
  {
    "commitSHA1": "74a6f2f6e0ad2bbb6b791c720408ccb07534daaf",
    "commitFile": "src/mltk/util/Permutation.java",
    "patch": "diff --git a/src/mltk/util/Permutation.java b/src/mltk/util/Permutation.java\nindex bec7fdf..73d351f 100755\n--- a/src/mltk/util/Permutation.java\n+++ b/src/mltk/util/Permutation.java\n@@ -28,7 +28,7 @@\n \t * @return this permutation.\r\n \t */\r\n \tpublic Permutation permute() {\r\n-\t\tfor (int i \u003d a.length - 1; i \u003e 0; i++) {\r\n+\t\tfor (int i \u003d a.length - 1; i \u003e 0; i--) {\r\n \t\t\tint idx \u003d Random.getInstance().nextInt(i + 1);\r\n \t\t\tint t \u003d a[idx];\r\n \t\t\ta[idx] \u003d a[i];\r\ndiff --git a/src/mltk/util/Permutation.java b/src/mltk/util/Permutation.java\nindex bec7fdf..73d351f 100755\n--- a/src/mltk/util/Permutation.java\n+++ b/src/mltk/util/Permutation.java\n@@ -28,7 +28,7 @@\n \t * @return this permutation.\r\n \t */\r\n \tpublic Permutation permute() {\r\n-\t\tfor (int i \u003d a.length - 1; i \u003e 0; i++) {\r\n+\t\tfor (int i \u003d a.length - 1; i \u003e 0; i--) {\r\n \t\t\tint idx \u003d Random.getInstance().nextInt(i + 1);\r\n \t\t\tint t \u003d a[idx];\r\n \t\t\ta[idx] \u003d a[i];\r\n",
    "projectName": "mltk",
    "lineNum": 31,
    "nodeStartChar": 499,
    "before": "i++",
    "after": "i--"
  },
  {
    "commitSHA1": "d3ecd70f387e0568ad24f699003559a11869fa80",
    "commitFile": "src/main/java/mltk/util/Permutation.java",
    "patch": "diff --git a/src/main/java/mltk/util/Permutation.java b/src/main/java/mltk/util/Permutation.java\nindex bec7fdf..73d351f 100755\n--- a/src/main/java/mltk/util/Permutation.java\n+++ b/src/main/java/mltk/util/Permutation.java\n@@ -28,7 +28,7 @@\n \t * @return this permutation.\r\n \t */\r\n \tpublic Permutation permute() {\r\n-\t\tfor (int i \u003d a.length - 1; i \u003e 0; i++) {\r\n+\t\tfor (int i \u003d a.length - 1; i \u003e 0; i--) {\r\n \t\t\tint idx \u003d Random.getInstance().nextInt(i + 1);\r\n \t\t\tint t \u003d a[idx];\r\n \t\t\ta[idx] \u003d a[i];\r\ndiff --git a/src/main/java/mltk/util/Permutation.java b/src/main/java/mltk/util/Permutation.java\nindex bec7fdf..73d351f 100755\n--- a/src/main/java/mltk/util/Permutation.java\n+++ b/src/main/java/mltk/util/Permutation.java\n@@ -28,7 +28,7 @@\n \t * @return this permutation.\r\n \t */\r\n \tpublic Permutation permute() {\r\n-\t\tfor (int i \u003d a.length - 1; i \u003e 0; i++) {\r\n+\t\tfor (int i \u003d a.length - 1; i \u003e 0; i--) {\r\n \t\t\tint idx \u003d Random.getInstance().nextInt(i + 1);\r\n \t\t\tint t \u003d a[idx];\r\n \t\t\ta[idx] \u003d a[i];\r\n",
    "projectName": "mltk",
    "lineNum": 31,
    "nodeStartChar": 499,
    "before": "i++",
    "after": "i--"
  },
  {
    "commitSHA1": "e51261952a1a50bfc608210d50cb07e2e6af1df7",
    "commitFile": "src/mltk/util/Permutation.java",
    "patch": "diff --git a/src/mltk/util/Permutation.java b/src/mltk/util/Permutation.java\nindex bec7fdf..73d351f 100755\n--- a/src/mltk/util/Permutation.java\n+++ b/src/mltk/util/Permutation.java\n@@ -28,7 +28,7 @@\n \t * @return this permutation.\r\n \t */\r\n \tpublic Permutation permute() {\r\n-\t\tfor (int i \u003d a.length - 1; i \u003e 0; i++) {\r\n+\t\tfor (int i \u003d a.length - 1; i \u003e 0; i--) {\r\n \t\t\tint idx \u003d Random.getInstance().nextInt(i + 1);\r\n \t\t\tint t \u003d a[idx];\r\n \t\t\ta[idx] \u003d a[i];\r\ndiff --git a/src/mltk/util/Permutation.java b/src/mltk/util/Permutation.java\nindex bec7fdf..73d351f 100755\n--- a/src/mltk/util/Permutation.java\n+++ b/src/mltk/util/Permutation.java\n@@ -28,7 +28,7 @@\n \t * @return this permutation.\r\n \t */\r\n \tpublic Permutation permute() {\r\n-\t\tfor (int i \u003d a.length - 1; i \u003e 0; i++) {\r\n+\t\tfor (int i \u003d a.length - 1; i \u003e 0; i--) {\r\n \t\t\tint idx \u003d Random.getInstance().nextInt(i + 1);\r\n \t\t\tint t \u003d a[idx];\r\n \t\t\ta[idx] \u003d a[i];\r\n",
    "projectName": "mltk",
    "lineNum": 31,
    "nodeStartChar": 499,
    "before": "i++",
    "after": "i--"
  },
  {
    "commitSHA1": "43266ccae179852828d371276a4013b85b82fc80",
    "commitFile": "src/mltk/predictor/function/SquareCutter.java",
    "patch": "diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\ndiff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\n",
    "projectName": "mltk",
    "lineNum": 77,
    "nodeStartChar": 1712,
    "before": "f1.getType()",
    "after": "f2.getType()"
  },
  {
    "commitSHA1": "43266ccae179852828d371276a4013b85b82fc80",
    "commitFile": "src/mltk/predictor/function/SquareCutter.java",
    "patch": "diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\ndiff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\n",
    "projectName": "mltk",
    "lineNum": 79,
    "nodeStartChar": 1814,
    "before": "f1.getType()",
    "after": "f2.getType()"
  },
  {
    "commitSHA1": "5cb301d055d4c52ee4af56bfb3b88c2efabc9901",
    "commitFile": "src/main/java/org/vertx/mods/internal/KafkaProperties.java",
    "patch": "diff --git a/src/main/java/org/vertx/mods/internal/KafkaProperties.java b/src/main/java/org/vertx/mods/internal/KafkaProperties.java\nindex c059002..52f0987 100644\n--- a/src/main/java/org/vertx/mods/internal/KafkaProperties.java\n+++ b/src/main/java/org/vertx/mods/internal/KafkaProperties.java\n@@ -23,7 +23,7 @@\n     /* Non-instantiable class */\n     private KafkaProperties() {}\n \n-    public static final String BROKER_LIST \u003d \"broker.list\";\n+    public static final String BROKER_LIST \u003d \"metadata.broker.list\";\n     public static final String REQUEST_ACKS \u003d \"request.required.acks\";\n     public static final String SERIALIZER_CLASS \u003d \"serializer.class\";\n     public static final String KAFKA_TOPIC \u003d \"kafka-topic\";\ndiff --git a/src/main/java/org/vertx/mods/internal/KafkaProperties.java b/src/main/java/org/vertx/mods/internal/KafkaProperties.java\nindex c059002..52f0987 100644\n--- a/src/main/java/org/vertx/mods/internal/KafkaProperties.java\n+++ b/src/main/java/org/vertx/mods/internal/KafkaProperties.java\n@@ -23,7 +23,7 @@\n     /* Non-instantiable class */\n     private KafkaProperties() {}\n \n-    public static final String BROKER_LIST \u003d \"broker.list\";\n+    public static final String BROKER_LIST \u003d \"metadata.broker.list\";\n     public static final String REQUEST_ACKS \u003d \"request.required.acks\";\n     public static final String SERIALIZER_CLASS \u003d \"serializer.class\";\n     public static final String KAFKA_TOPIC \u003d \"kafka-topic\";\n",
    "projectName": "mod-kafka",
    "lineNum": 26,
    "nodeStartChar": 823,
    "before": "\"broker.list\"",
    "after": "\"metadata.broker.list\""
  },
  {
    "commitSHA1": "4bf87e0a75714bee32320bb9c7fdbbbc77a3517a",
    "commitFile": "src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java",
    "patch": "diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex fa5674d..8630971 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -419,7 +419,7 @@\n \n                         classes.add(properName);\n \n-                        if (name.startsWith(packageName)) {\n+                        if (properName.startsWith(packageName) || name.startsWith(packageName)) {\n                             list.add(properName);\n                         }\n                     }\ndiff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex fa5674d..8630971 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -419,7 +419,7 @@\n \n                         classes.add(properName);\n \n-                        if (name.startsWith(packageName)) {\n+                        if (properName.startsWith(packageName) || name.startsWith(packageName)) {\n                             list.add(properName);\n                         }\n                     }\n",
    "projectName": "modular",
    "lineNum": 422,
    "nodeStartChar": 15890,
    "before": "name.startsWith(packageName)",
    "after": "properName.startsWith(packageName) || name.startsWith(packageName)"
  },
  {
    "commitSHA1": "5b0a3eedd1cf0e47241b934d9cf10142afe4032f",
    "commitFile": "src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java",
    "patch": "diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex eeaceb6..4c72846 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -402,7 +402,7 @@\n             final Collection\u003cString\u003e classes \u003d new LinkedList\u003c\u003e();\n             final String scheme \u003d uri.getSchemeSpecificPart();\n             final int divider \u003d scheme.indexOf(\"!/\");\n-            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider));\n+            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider).replace(\"file:\", \"\"));\n \n             // Get appropriate class names by removing trailing .class and convert the file name to a usable class name\n             try (ZipInputStream zip \u003d new ZipInputStream(new FileInputStream(file))) {\n@@ -422,7 +422,7 @@\n                     }\n                 }\n             } catch (IOException e) {\n-                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri, e);\n+                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri + \" (using \" + file + \u0027)\u0027, e);\n             }\n \n             // Add processed classes to the cache\ndiff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex eeaceb6..4c72846 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -402,7 +402,7 @@\n             final Collection\u003cString\u003e classes \u003d new LinkedList\u003c\u003e();\n             final String scheme \u003d uri.getSchemeSpecificPart();\n             final int divider \u003d scheme.indexOf(\"!/\");\n-            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider));\n+            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider).replace(\"file:\", \"\"));\n \n             // Get appropriate class names by removing trailing .class and convert the file name to a usable class name\n             try (ZipInputStream zip \u003d new ZipInputStream(new FileInputStream(file))) {\n@@ -422,7 +422,7 @@\n                     }\n                 }\n             } catch (IOException e) {\n-                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri, e);\n+                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri + \" (using \" + file + \u0027)\u0027, e);\n             }\n \n             // Add processed classes to the cache\n",
    "projectName": "modular",
    "lineNum": 405,
    "nodeStartChar": 15070,
    "before": "scheme",
    "after": "scheme.substring(0,divider)"
  },
  {
    "commitSHA1": "5b0a3eedd1cf0e47241b934d9cf10142afe4032f",
    "commitFile": "src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java",
    "patch": "diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex eeaceb6..4c72846 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -402,7 +402,7 @@\n             final Collection\u003cString\u003e classes \u003d new LinkedList\u003c\u003e();\n             final String scheme \u003d uri.getSchemeSpecificPart();\n             final int divider \u003d scheme.indexOf(\"!/\");\n-            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider));\n+            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider).replace(\"file:\", \"\"));\n \n             // Get appropriate class names by removing trailing .class and convert the file name to a usable class name\n             try (ZipInputStream zip \u003d new ZipInputStream(new FileInputStream(file))) {\n@@ -422,7 +422,7 @@\n                     }\n                 }\n             } catch (IOException e) {\n-                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri, e);\n+                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri + \" (using \" + file + \u0027)\u0027, e);\n             }\n \n             // Add processed classes to the cache\ndiff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex eeaceb6..4c72846 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -402,7 +402,7 @@\n             final Collection\u003cString\u003e classes \u003d new LinkedList\u003c\u003e();\n             final String scheme \u003d uri.getSchemeSpecificPart();\n             final int divider \u003d scheme.indexOf(\"!/\");\n-            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider));\n+            file \u003d new File(divider \u003c 0 ? scheme : scheme.substring(0, divider).replace(\"file:\", \"\"));\n \n             // Get appropriate class names by removing trailing .class and convert the file name to a usable class name\n             try (ZipInputStream zip \u003d new ZipInputStream(new FileInputStream(file))) {\n@@ -422,7 +422,7 @@\n                     }\n                 }\n             } catch (IOException e) {\n-                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri, e);\n+                throw new RuntimeException(\"Could not fetch JAR file contents: \" + uri + \" (using \" + file + \u0027)\u0027, e);\n             }\n \n             // Add processed classes to the cache\n",
    "projectName": "modular",
    "lineNum": 425,
    "nodeStartChar": 16016,
    "before": "\"Could not fetch JAR file contents: \" + uri",
    "after": "\"Could not fetch JAR file contents: \" + uri + \" (using \"+ file+ \u0027)\u0027"
  },
  {
    "commitSHA1": "44fb832d8e5fbc41a137c2a6da280b578b516890",
    "commitFile": "src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java",
    "patch": "diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex 8982cee..583df4d 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -49,7 +49,7 @@\n     private static final List\u003cString\u003e SYSTEM_PATH \u003d Splitter.on(CLASS_PATH_SEPARATOR).splitToList(JAVA_CLASS_PATH);\n     private static final List\u003cURI\u003e LOCAL_CLASSPATH \u003d new LinkedList\u003c\u003e();\n     private static final Map\u003cURI, Collection\u003cString\u003e\u003e JAR_CACHE \u003d new THashMap\u003c\u003e();\n-    private static final Collection\u003cString\u003e BLACKLIST \u003d new THashSet();\n+    private static final Collection\u003cString\u003e BLACKLIST \u003d new THashSet\u003c\u003e();\n \n     static {\n         Collections.addAll(BLACKLIST, \"idea_rt.jar\", \"junit-rt.jar\", \".git\", \".idea\");\ndiff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex 8982cee..583df4d 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -49,7 +49,7 @@\n     private static final List\u003cString\u003e SYSTEM_PATH \u003d Splitter.on(CLASS_PATH_SEPARATOR).splitToList(JAVA_CLASS_PATH);\n     private static final List\u003cURI\u003e LOCAL_CLASSPATH \u003d new LinkedList\u003c\u003e();\n     private static final Map\u003cURI, Collection\u003cString\u003e\u003e JAR_CACHE \u003d new THashMap\u003c\u003e();\n-    private static final Collection\u003cString\u003e BLACKLIST \u003d new THashSet();\n+    private static final Collection\u003cString\u003e BLACKLIST \u003d new THashSet\u003c\u003e();\n \n     static {\n         Collections.addAll(BLACKLIST, \"idea_rt.jar\", \"junit-rt.jar\", \".git\", \".idea\");\n",
    "projectName": "modular",
    "lineNum": 52,
    "nodeStartChar": 2049,
    "before": "THashSet",
    "after": "THashSet\u003c\u003e"
  },
  {
    "commitSHA1": "af8e1db6b3519df13c16ad481acf87eec0f8dcc8",
    "commitFile": "src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java",
    "patch": "diff --git a/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java b/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java\nindex 4ab8b24..06ab2fe 100644\n--- a/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java\n+++ b/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java\n@@ -24,7 +24,7 @@\n      *                   valid jar file (usually assumed by its extension)\n      */\n     public JarClassLocation(File jarFile) {\n-        super(jarFile.toURI(), \"external\");\n+        super(jarFile.toURI(), jarFile.getAbsolutePath().replace(File.separatorChar, \u0027.\u0027));\n \n         this.jarFile \u003d jarFile;\n     }\ndiff --git a/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java b/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java\nindex 4ab8b24..06ab2fe 100644\n--- a/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java\n+++ b/src/main/java/net/mountainblade/modular/impl/location/JarClassLocation.java\n@@ -24,7 +24,7 @@\n      *                   valid jar file (usually assumed by its extension)\n      */\n     public JarClassLocation(File jarFile) {\n-        super(jarFile.toURI(), \"external\");\n+        super(jarFile.toURI(), jarFile.getAbsolutePath().replace(File.separatorChar, \u0027.\u0027));\n \n         this.jarFile \u003d jarFile;\n     }\n",
    "projectName": "modular",
    "lineNum": 27,
    "nodeStartChar": 833,
    "before": "\"external\"",
    "after": "jarFile.getAbsolutePath().replace(File.separatorChar,\u0027.\u0027)"
  },
  {
    "commitSHA1": "fdd599203098035abaf183f10e3691f65a051394",
    "commitFile": "src/main/java/com/gojuno/morton/Morton64.java",
    "patch": "diff --git a/src/main/java/com/gojuno/morton/Morton64.java b/src/main/java/com/gojuno/morton/Morton64.java\nindex 87301eb..393feba 100644\n--- a/src/main/java/com/gojuno/morton/Morton64.java\n+++ b/src/main/java/com/gojuno/morton/Morton64.java\n@@ -19,7 +19,7 @@\n \n         long mask \u003d (1L \u003c\u003c this.bits) - 1;\n \n-        long shift \u003d dimensions * (bits - 1);\n+        long shift \u003d this.dimensions * (this.bits - 1);\n         shift |\u003d shift \u003e\u003e\u003e 1;\n         shift |\u003d shift \u003e\u003e\u003e 2;\n         shift |\u003d shift \u003e\u003e\u003e 4;\ndiff --git a/src/test/java/com/gojuno/morton/Morton64Test.java b/src/test/java/com/gojuno/morton/Morton64Test.java\nindex 82540ff..66b1cef 100644\n--- a/src/test/java/com/gojuno/morton/Morton64Test.java\n+++ b/src/test/java/com/gojuno/morton/Morton64Test.java\n@@ -76,7 +76,7 @@\n     }\n \n     @Test\n-    public void testPackUnpackArray() throws Exception {\n+    public void testPackUnpack() throws Exception {\n         doTestPackUnpack(2, 32, 1, 2);\n         doTestPackUnpack(2, 32, 2, 1);\n         doTestPackUnpack(2, 32, (1L \u003c\u003c 32) - 1, (1L \u003c\u003c 32) - 1);\n@@ -115,7 +115,7 @@\n     }\n \n     @Test\n-    public void testSPackUnpackArray() throws Exception {\n+    public void testSPackUnpack() throws Exception {\n         doTestSPackUnpack(2, 32, 1, 2);\n         doTestSPackUnpack(2, 32, 2, 1);\n         doTestSPackUnpack(2, 32, (1L \u003c\u003c 31) - 1, (1L \u003c\u003c 31) - 1);\ndiff --git a/src/main/java/com/gojuno/morton/Morton64.java b/src/main/java/com/gojuno/morton/Morton64.java\nindex 87301eb..393feba 100644\n--- a/src/main/java/com/gojuno/morton/Morton64.java\n+++ b/src/main/java/com/gojuno/morton/Morton64.java\n@@ -19,7 +19,7 @@\n \n         long mask \u003d (1L \u003c\u003c this.bits) - 1;\n \n-        long shift \u003d dimensions * (bits - 1);\n+        long shift \u003d this.dimensions * (this.bits - 1);\n         shift |\u003d shift \u003e\u003e\u003e 1;\n         shift |\u003d shift \u003e\u003e\u003e 2;\n         shift |\u003d shift \u003e\u003e\u003e 4;\n",
    "projectName": "morton-java",
    "lineNum": 22,
    "nodeStartChar": 605,
    "before": "dimensions",
    "after": "this.dimensions"
  },
  {
    "commitSHA1": "82461bbeaae3c294e161d52e0206618052846be0",
    "commitFile": "src/main/java/com/gojuno/morton/Morton64.java",
    "patch": "diff --git a/src/main/java/com/gojuno/morton/Morton64.java b/src/main/java/com/gojuno/morton/Morton64.java\nindex 3860b40..87301eb 100644\n--- a/src/main/java/com/gojuno/morton/Morton64.java\n+++ b/src/main/java/com/gojuno/morton/Morton64.java\n@@ -49,7 +49,7 @@\n                 lshifts.add(shift);\n             }\n \n-            shift \u003e\u003e\u003d 1;\n+            shift \u003e\u003e\u003e\u003d 1;\n         }\n \n         this.masks \u003d new long[masks.size()];\ndiff --git a/src/main/java/com/gojuno/morton/Morton64.java b/src/main/java/com/gojuno/morton/Morton64.java\nindex 3860b40..87301eb 100644\n--- a/src/main/java/com/gojuno/morton/Morton64.java\n+++ b/src/main/java/com/gojuno/morton/Morton64.java\n@@ -49,7 +49,7 @@\n                 lshifts.add(shift);\n             }\n \n-            shift \u003e\u003e\u003d 1;\n+            shift \u003e\u003e\u003e\u003d 1;\n         }\n \n         this.masks \u003d new long[masks.size()];\n",
    "projectName": "morton-java",
    "lineNum": 52,
    "nodeStartChar": 1449,
    "before": "shift\u003e\u003e\u003d1",
    "after": "shift\u003e\u003e\u003e\u003d1"
  },
  {
    "commitSHA1": "892f6c93da4aaddd6362310c2d4c2e596365648a",
    "commitFile": "src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java",
    "patch": "diff --git a/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java b/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java\nindex 090be14..253f35a 100644\n--- a/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java\n+++ b/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java\n@@ -78,7 +78,7 @@\n             Arrays.sort(tmfm, new Comparator\u003cTrackedMultiplexFileManager\u003e() {\n                 @Override\n                 public int compare(TrackedMultiplexFileManager o1, TrackedMultiplexFileManager o2) {\n-                    return (int) (o1.releaseTime - o2.releaseTime);\n+                    return Long.compare(o1.releaseTime, o2.releaseTime);\n                 }\n             });\n             long cachedStreams \u003d getCacheStreamSize();\ndiff --git a/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java b/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java\nindex 090be14..253f35a 100644\n--- a/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java\n+++ b/src/main/java/com/addthis/muxy/MuxFileDirectoryCacheInstance.java\n@@ -78,7 +78,7 @@\n             Arrays.sort(tmfm, new Comparator\u003cTrackedMultiplexFileManager\u003e() {\n                 @Override\n                 public int compare(TrackedMultiplexFileManager o1, TrackedMultiplexFileManager o2) {\n-                    return (int) (o1.releaseTime - o2.releaseTime);\n+                    return Long.compare(o1.releaseTime, o2.releaseTime);\n                 }\n             });\n             long cachedStreams \u003d getCacheStreamSize();\n",
    "projectName": "muxy",
    "lineNum": 81,
    "nodeStartChar": 3390,
    "before": "(int)(o1.releaseTime - o2.releaseTime)",
    "after": "Long.compare(o1.releaseTime,o2.releaseTime)"
  },
  {
    "commitSHA1": "01c64e64a3404d41046e7790d6694ad4aa0dab1e",
    "commitFile": "src/main/java/com/addthis/muxy/Main.java",
    "patch": "diff --git a/src/main/java/com/addthis/muxy/Main.java b/src/main/java/com/addthis/muxy/Main.java\nindex bacef18..486e28e 100644\n--- a/src/main/java/com/addthis/muxy/Main.java\n+++ b/src/main/java/com/addthis/muxy/Main.java\n@@ -119,7 +119,7 @@\n                 File file \u003d new File(args[i]);\n                 MuxFileDirectoryCache.getWriteableInstance(file.getParentFile()).defrag();\n             }\n-        } else if (args[0].equals(\"block-stat\")) {\n+        } else if ((args.length \u003e\u003d 1) \u0026\u0026 \"block-stat\".equals(args[0])) {\n             File file \u003d new File(\".\");\n             if (args.length \u003e\u003d 2) {\n                 file \u003d new File(args[1]);\ndiff --git a/src/main/java/com/addthis/muxy/Main.java b/src/main/java/com/addthis/muxy/Main.java\nindex bacef18..486e28e 100644\n--- a/src/main/java/com/addthis/muxy/Main.java\n+++ b/src/main/java/com/addthis/muxy/Main.java\n@@ -119,7 +119,7 @@\n                 File file \u003d new File(args[i]);\n                 MuxFileDirectoryCache.getWriteableInstance(file.getParentFile()).defrag();\n             }\n-        } else if (args[0].equals(\"block-stat\")) {\n+        } else if ((args.length \u003e\u003d 1) \u0026\u0026 \"block-stat\".equals(args[0])) {\n             File file \u003d new File(\".\");\n             if (args.length \u003e\u003d 2) {\n                 file \u003d new File(args[1]);\n",
    "projectName": "muxy",
    "lineNum": 122,
    "nodeStartChar": 5827,
    "before": "args[0].equals(\"block-stat\")",
    "after": "(args.length \u003e\u003d 1) \u0026\u0026 \"block-stat\".equals(args[0])"
  },
  {
    "commitSHA1": "30a69bb02d6c3724e316740c67228ed28405154c",
    "commitFile": "src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java",
    "patch": "diff --git a/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java b/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java\nindex 0bcc3e7..cf01351 100755\n--- a/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java\n+++ b/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java\n@@ -321,14 +321,13 @@\n         SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"EEE MMM dd HH:mm:ss z yyyy\", Locale.UK);\n         simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Paris\"));\n         domainClassAnalyzer.postConstruct();\n-        // When\n         User user \u003d (User) domainClassAnalyzer.generateInstanceFromName(\"user\");\n         // When\n         domainClassAnalyzer.instantiateField(user, user.getClass().getDeclaredField(\"dateString\"), date, ColumnType.DATETIME.getCode(), \"user\");\n \n         // Then\n-        //assertThat(BINLOG_DATETIME_FORMATTER.parse(account.getDateString())).isEqualTo(dateExpected);\n-        assertThat(user.getDateString()).isEqualTo(date);\n+        assertThat(BINLOG_DATETIME_FORMATTER.parse(user.getDateString())).isEqualTo(dateExpected);\n+        //assertThat(user.getDateString()).isEqualTo(date);\n     }\n \n     @Test\ndiff --git a/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java b/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java\nindex 0bcc3e7..cf01351 100755\n--- a/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java\n+++ b/src/test/java/fr/juanwolf/mysqlbinlogreplicator/component/DomainClassAnalyzerTest.java\n@@ -321,14 +321,13 @@\n         SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"EEE MMM dd HH:mm:ss z yyyy\", Locale.UK);\n         simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"Europe/Paris\"));\n         domainClassAnalyzer.postConstruct();\n-        // When\n         User user \u003d (User) domainClassAnalyzer.generateInstanceFromName(\"user\");\n         // When\n         domainClassAnalyzer.instantiateField(user, user.getClass().getDeclaredField(\"dateString\"), date, ColumnType.DATETIME.getCode(), \"user\");\n \n         // Then\n-        //assertThat(BINLOG_DATETIME_FORMATTER.parse(account.getDateString())).isEqualTo(dateExpected);\n-        assertThat(user.getDateString()).isEqualTo(date);\n+        assertThat(BINLOG_DATETIME_FORMATTER.parse(user.getDateString())).isEqualTo(dateExpected);\n+        //assertThat(user.getDateString()).isEqualTo(date);\n     }\n \n     @Test\n",
    "projectName": "mysql-binlog-replicator",
    "lineNum": 330,
    "nodeStartChar": 13593,
    "before": "user.getDateString()",
    "after": "BINLOG_DATETIME_FORMATTER.parse(user.getDateString())"
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\nindex cef3d2e..007127f 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       h.handshake(buf(0xff, 0, 0, 0, 0, 0, 0, 0, 0x4, 0x7f), ctx);\n-      fail(\"not enough data in greeting (because compat mode) shuld have thrown exception\");\n+      fail(\"not enough data in greeting (because compat mode) should have thrown exception\");\n     } catch (IndexOutOfBoundsException e) {\n       // expected\n     }\n@@ -186,13 +186,13 @@\n   public void testDetectProtocolVersion() {\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(Unpooled.wrappedBuffer(new byte[0]));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(buf(0xff, 0, 0, 0));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\nindex cef3d2e..007127f 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       h.handshake(buf(0xff, 0, 0, 0, 0, 0, 0, 0, 0x4, 0x7f), ctx);\n-      fail(\"not enough data in greeting (because compat mode) shuld have thrown exception\");\n+      fail(\"not enough data in greeting (because compat mode) should have thrown exception\");\n     } catch (IndexOutOfBoundsException e) {\n       // expected\n     }\n@@ -186,13 +186,13 @@\n   public void testDetectProtocolVersion() {\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(Unpooled.wrappedBuffer(new byte[0]));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(buf(0xff, 0, 0, 0));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n",
    "projectName": "netty-zmtp",
    "lineNum": 117,
    "nodeStartChar": 4851,
    "before": "\"not enough data in greeting (because compat mode) shuld have thrown exception\"",
    "after": "\"not enough data in greeting (because compat mode) should have thrown exception\""
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\nindex cef3d2e..007127f 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       h.handshake(buf(0xff, 0, 0, 0, 0, 0, 0, 0, 0x4, 0x7f), ctx);\n-      fail(\"not enough data in greeting (because compat mode) shuld have thrown exception\");\n+      fail(\"not enough data in greeting (because compat mode) should have thrown exception\");\n     } catch (IndexOutOfBoundsException e) {\n       // expected\n     }\n@@ -186,13 +186,13 @@\n   public void testDetectProtocolVersion() {\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(Unpooled.wrappedBuffer(new byte[0]));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(buf(0xff, 0, 0, 0));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\nindex cef3d2e..007127f 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       h.handshake(buf(0xff, 0, 0, 0, 0, 0, 0, 0, 0x4, 0x7f), ctx);\n-      fail(\"not enough data in greeting (because compat mode) shuld have thrown exception\");\n+      fail(\"not enough data in greeting (because compat mode) should have thrown exception\");\n     } catch (IndexOutOfBoundsException e) {\n       // expected\n     }\n@@ -186,13 +186,13 @@\n   public void testDetectProtocolVersion() {\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(Unpooled.wrappedBuffer(new byte[0]));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(buf(0xff, 0, 0, 0));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n",
    "projectName": "netty-zmtp",
    "lineNum": 189,
    "nodeStartChar": 7789,
    "before": "\"Should have thown IndexOutOfBoundsException\"",
    "after": "\"Should have thrown IndexOutOfBoundsException\""
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\nindex cef3d2e..007127f 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       h.handshake(buf(0xff, 0, 0, 0, 0, 0, 0, 0, 0x4, 0x7f), ctx);\n-      fail(\"not enough data in greeting (because compat mode) shuld have thrown exception\");\n+      fail(\"not enough data in greeting (because compat mode) should have thrown exception\");\n     } catch (IndexOutOfBoundsException e) {\n       // expected\n     }\n@@ -186,13 +186,13 @@\n   public void testDetectProtocolVersion() {\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(Unpooled.wrappedBuffer(new byte[0]));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(buf(0xff, 0, 0, 0));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\nindex cef3d2e..007127f 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/HandshakeTest.java\n@@ -114,7 +114,7 @@\n \n     try {\n       h.handshake(buf(0xff, 0, 0, 0, 0, 0, 0, 0, 0x4, 0x7f), ctx);\n-      fail(\"not enough data in greeting (because compat mode) shuld have thrown exception\");\n+      fail(\"not enough data in greeting (because compat mode) should have thrown exception\");\n     } catch (IndexOutOfBoundsException e) {\n       // expected\n     }\n@@ -186,13 +186,13 @@\n   public void testDetectProtocolVersion() {\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(Unpooled.wrappedBuffer(new byte[0]));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n     try {\n       ZMTP20WireFormat.detectProtocolVersion(buf(0xff, 0, 0, 0));\n-      fail(\"Should have thown IndexOutOfBoundsException\");\n+      fail(\"Should have thrown IndexOutOfBoundsException\");\n     } catch (IndexOutOfBoundsException e) {\n       // ignore\n     }\n",
    "projectName": "netty-zmtp",
    "lineNum": 195,
    "nodeStartChar": 7990,
    "before": "\"Should have thown IndexOutOfBoundsException\"",
    "after": "\"Should have thrown IndexOutOfBoundsException\""
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 80,
    "nodeStartChar": 3037,
    "before": "/**   * Represents a conencted peer.  */ public static interface ZMTPPeer {   /**   * Get the ZMTP session for this peer.  */   ZMTPSession session();   /**   * Send a message to this peer.  */   ListenableFuture\u003cVoid\u003e send(  ZMTPMessage message); } ",
    "after": "/**   * Represents a conencted peer.  */ public interface ZMTPPeer {   /**   * Get the ZMTP session for this peer.  */   ZMTPSession session();   /**   * Send a message to this peer.  */   ListenableFuture\u003cVoid\u003e send(  ZMTPMessage message); } "
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 96,
    "nodeStartChar": 3319,
    "before": "/**   * Handles incoming messages and connection events.  */ public static interface Handler {   /**   * A peer connected.  */   void connected(  ZMTPSocket socket,  ZMTPPeer peer);   /**   * A peer disconnected.  */   void disconnected(  ZMTPSocket socket,  ZMTPPeer peer);   /**   * A message was received from a peer.  */   void message(  ZMTPSocket socket,  ZMTPPeer peer,  ZMTPMessage message); } ",
    "after": "/**   * Handles incoming messages and connection events.  */ public interface Handler {   /**   * A peer connected.  */   void connected(  ZMTPSocket socket,  ZMTPPeer peer);   /**   * A peer disconnected.  */   void disconnected(  ZMTPSocket socket,  ZMTPPeer peer);   /**   * A message was received from a peer.  */   void message(  ZMTPSocket socket,  ZMTPPeer peer,  ZMTPMessage message); } "
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 117,
    "nodeStartChar": 3757,
    "before": "private static interface Sender {   ListenableFuture\u003cVoid\u003e send(  ZMTPMessage message); } ",
    "after": "private interface Sender {   ListenableFuture\u003cVoid\u003e send(  ZMTPMessage message); } "
  },
  {
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 122,
    "nodeStartChar": 3853,
    "before": "private static interface Receiver {   void receive(  final ZMTPPeer peer,  ZMTPMessage message); } ",
    "after": "private interface Receiver {   void receive(  final ZMTPPeer peer,  ZMTPMessage message); } "
  },
  {
    "commitSHA1": "2a2b7679d6eb986e738d398f1e21194f05880cc9",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\nindex 85642f0..aab3426 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n@@ -107,7 +107,7 @@\n   }\n \n   public String endpoint() {\n-    return \"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort();\n+    return \"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort();\n   }\n \n   @Override\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\nindex 85642f0..aab3426 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n@@ -107,7 +107,7 @@\n   }\n \n   public String endpoint() {\n-    return \"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort();\n+    return \"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort();\n   }\n \n   @Override\n",
    "projectName": "netty-zmtp",
    "lineNum": 110,
    "nodeStartChar": 3517,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "commitSHA1": "40333dad056846492ab90623bc3061266cb23740",
    "commitFile": "src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java",
    "patch": "diff --git a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\nindex 8655523..298e09d 100644\n--- a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n+++ b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n@@ -80,7 +80,7 @@\n     if (frameLength \u003e 0) {\n       final ByteBuf frame \u003d data.readSlice(frameLength);\n       frame.retain();\n-      part.add(new ZMTPFrame(data));\n+      part.add(new ZMTPFrame(frame));\n     } else if (part \u003d\u003d tail) {\n       part.add(EMPTY_FRAME);\n     } else {\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\nindex 562a4c1..cfdcb6e 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n@@ -76,7 +76,7 @@\n   */\n \n   public static String printBytes(byte[] buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer[i]));\n     }\n@@ -84,7 +84,7 @@\n   }\n \n   public static String printBytes(ByteBuf buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer.getByte(i)));\n     }\ndiff --git a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\nindex 8655523..298e09d 100644\n--- a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n+++ b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n@@ -80,7 +80,7 @@\n     if (frameLength \u003e 0) {\n       final ByteBuf frame \u003d data.readSlice(frameLength);\n       frame.retain();\n-      part.add(new ZMTPFrame(data));\n+      part.add(new ZMTPFrame(frame));\n     } else if (part \u003d\u003d tail) {\n       part.add(EMPTY_FRAME);\n     } else {\n",
    "projectName": "netty-zmtp",
    "lineNum": 83,
    "nodeStartChar": 2206,
    "before": "new ZMTPFrame(data)",
    "after": "new ZMTPFrame(frame)"
  },
  {
    "commitSHA1": "40333dad056846492ab90623bc3061266cb23740",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\nindex 562a4c1..cfdcb6e 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n@@ -76,7 +76,7 @@\n   */\n \n   public static String printBytes(byte[] buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer[i]));\n     }\n@@ -84,7 +84,7 @@\n   }\n \n   public static String printBytes(ByteBuf buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer.getByte(i)));\n     }\n",
    "projectName": "netty-zmtp",
    "lineNum": 79,
    "nodeStartChar": 2274,
    "before": "length - start",
    "after": "length"
  },
  {
    "commitSHA1": "40333dad056846492ab90623bc3061266cb23740",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\nindex 562a4c1..cfdcb6e 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n@@ -76,7 +76,7 @@\n   */\n \n   public static String printBytes(byte[] buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer[i]));\n     }\n@@ -84,7 +84,7 @@\n   }\n \n   public static String printBytes(ByteBuf buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer.getByte(i)));\n     }\n",
    "projectName": "netty-zmtp",
    "lineNum": 87,
    "nodeStartChar": 2548,
    "before": "length - start",
    "after": "length"
  },
  {
    "commitSHA1": "b8bd0f07e66716c0997861eec2b92effe383f347",
    "commitFile": "src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java",
    "patch": "diff --git a/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java b/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java\nindex 1c2aeb6..19d6878 100644\n--- a/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java\n+++ b/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java\n@@ -14,7 +14,7 @@\n   private boolean splitHandshake;\n \n   /**\n-   * Construct a ZMTP20Codec with the speicfied session and optional interoperability behavior.\n+   * Construct a ZMTP20Codec with the specified session and optional interoperability behavior.\n    * @param session the session that configures this codec\n    * @param interop whether this socket should implement the ZMTP/1.0 interoperability handshake\n    */\n@@ -132,7 +132,7 @@\n     buffer.skipBytes(2);\n     int val \u003d buffer.readByte();\n     if (val !\u003d 0x00) {\n-      String s \u003d String.format(\"Malfromed greeting. Byte 13 expected to be 0x00, was: 0x%02x\", val);\n+      String s \u003d String.format(\"Malformed greeting. Byte 13 expected to be 0x00, was: 0x%02x\", val);\n       throw new ZMTPException(s);\n     }\n     int len \u003d buffer.readByte();\ndiff --git a/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java b/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java\nindex 1c2aeb6..19d6878 100644\n--- a/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java\n+++ b/src/main/java/com/spotify/netty/handler/codec/zmtp/ZMTP20Codec.java\n@@ -14,7 +14,7 @@\n   private boolean splitHandshake;\n \n   /**\n-   * Construct a ZMTP20Codec with the speicfied session and optional interoperability behavior.\n+   * Construct a ZMTP20Codec with the specified session and optional interoperability behavior.\n    * @param session the session that configures this codec\n    * @param interop whether this socket should implement the ZMTP/1.0 interoperability handshake\n    */\n@@ -132,7 +132,7 @@\n     buffer.skipBytes(2);\n     int val \u003d buffer.readByte();\n     if (val !\u003d 0x00) {\n-      String s \u003d String.format(\"Malfromed greeting. Byte 13 expected to be 0x00, was: 0x%02x\", val);\n+      String s \u003d String.format(\"Malformed greeting. Byte 13 expected to be 0x00, was: 0x%02x\", val);\n       throw new ZMTPException(s);\n     }\n     int len \u003d buffer.readByte();\n",
    "projectName": "netty-zmtp",
    "lineNum": 135,
    "nodeStartChar": 4634,
    "before": "\"Malfromed greeting. Byte 13 expected to be 0x00, was: 0x%02x\"",
    "after": "\"Malformed greeting. Byte 13 expected to be 0x00, was: 0x%02x\""
  },
  {
    "commitSHA1": "b7c3cec84ff5352f0ddc588b726874c72a5acc53",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 120,
    "nodeStartChar": 4238,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "commitSHA1": "b7c3cec84ff5352f0ddc588b726874c72a5acc53",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 142,
    "nodeStartChar": 5290,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "commitSHA1": "13c310b28fb59d0ab2fee0554c23e9072b58e657",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 120,
    "nodeStartChar": 4238,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "commitSHA1": "13c310b28fb59d0ab2fee0554c23e9072b58e657",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 142,
    "nodeStartChar": 5290,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "commitSHA1": "1dcff9d4a879fe894d7ca6fc1e323033dd95a5d9",
    "commitFile": "src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java",
    "patch": "diff --git a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\nindex 1ac1a69..cdb6bc4 100644\n--- a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n+++ b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n@@ -54,7 +54,7 @@\n         @NotNull\n         @Override\n         public Thread newThread(final Runnable r) {\n-          final Thread thread \u003d new Thread();\n+          final Thread thread \u003d new Thread(r);\n           thread.setDaemon(true);\n           thread.setName(\"netty-write-buffer-flusher\");\n           return thread;\ndiff --git a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\nindex 1ac1a69..cdb6bc4 100644\n--- a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n+++ b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n@@ -54,7 +54,7 @@\n         @NotNull\n         @Override\n         public Thread newThread(final Runnable r) {\n-          final Thread thread \u003d new Thread();\n+          final Thread thread \u003d new Thread(r);\n           thread.setDaemon(true);\n           thread.setName(\"netty-write-buffer-flusher\");\n           return thread;\n",
    "projectName": "netty-zmtp",
    "lineNum": 57,
    "nodeStartChar": 2354,
    "before": "new Thread()",
    "after": "new Thread(r)"
  },
  {
    "commitSHA1": "ebb90905658cae1cc5fa2b856bb9951b598efb36",
    "commitFile": "ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java",
    "patch": "diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\nindex a800a8a..5850661 100644\n--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n@@ -1019,7 +1019,7 @@\n                 fin \u003d messageReader.isFinalFrame();\n             }\n \n-            assert textBufferReadOffset \u003c textBufferReadOffset;\n+            assert textBufferReadOffset \u003c textBufferWriteOffset;\n \n             int charsRead \u003d Math.min(length, textBufferWriteOffset - textBufferReadOffset);\n             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);\ndiff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\nindex a800a8a..5850661 100644\n--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n@@ -1019,7 +1019,7 @@\n                 fin \u003d messageReader.isFinalFrame();\n             }\n \n-            assert textBufferReadOffset \u003c textBufferReadOffset;\n+            assert textBufferReadOffset \u003c textBufferWriteOffset;\n \n             int charsRead \u003d Math.min(length, textBufferWriteOffset - textBufferReadOffset);\n             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);\n",
    "projectName": "netx",
    "lineNum": 1022,
    "nodeStartChar": 38274,
    "before": "textBufferReadOffset \u003c textBufferReadOffset",
    "after": "textBufferReadOffset \u003c textBufferWriteOffset"
  },
  {
    "commitSHA1": "4f68b09d3f4ba9872efdef9b3422557551bee97c",
    "commitFile": "src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java",
    "patch": "diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java\nindex afc9c86..f4a8b83 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java\n@@ -56,7 +56,7 @@\n                         break;\n                     default:\n                         // TODO: skip\n-                        throw new IOException(\"Non-binary frame\");\n+                        throw new IOException(\"Non-text frame\");\n                     }\n                     break;\n                 case 2:\ndiff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java\nindex afc9c86..f4a8b83 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsReader.java\n@@ -56,7 +56,7 @@\n                         break;\n                     default:\n                         // TODO: skip\n-                        throw new IOException(\"Non-binary frame\");\n+                        throw new IOException(\"Non-text frame\");\n                     }\n                     break;\n                 case 2:\n",
    "projectName": "netx",
    "lineNum": 59,
    "nodeStartChar": 1922,
    "before": "\"Non-binary frame\"",
    "after": "\"Non-text frame\""
  },
  {
    "commitSHA1": "f6aa12be0199e93fc077eb049a9e1ef54ed0f3a9",
    "commitFile": "src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java",
    "patch": "diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\ndiff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\n",
    "projectName": "netx",
    "lineNum": 79,
    "nodeStartChar": 2534,
    "before": "6",
    "after": "4"
  },
  {
    "commitSHA1": "7304601d8cb177db37cd464c85ace47ffc56e7be",
    "commitFile": "src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java",
    "patch": "diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\ndiff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\n",
    "projectName": "netx",
    "lineNum": 79,
    "nodeStartChar": 2534,
    "before": "6",
    "after": "4"
  },
  {
    "commitSHA1": "21d0f65b341400131c468c18574e8af35f7d5035",
    "commitFile": "hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java",
    "patch": "diff --git a/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java b/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java\nindex 575a529..8daedad 100644\n--- a/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java\n+++ b/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java\n@@ -77,7 +77,7 @@\n             JAXBContext context \u003d JAXBContext.newInstance(Hml.class);\n             Unmarshaller unmarshaller \u003d context.createUnmarshaller();\n             SchemaFactory schemaFactory \u003d SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\");\n+            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\");\n             Schema schema \u003d schemaFactory.newSchema(schemaURL);\n             unmarshaller.setSchema(schema);\n             return (Hml) unmarshaller.unmarshal(reader);\n",
    "projectName": "ngs",
    "lineNum": 80,
    "nodeStartChar": 2384,
    "before": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\"",
    "after": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\""
  },
  {
    "commitSHA1": "21d0f65b341400131c468c18574e8af35f7d5035",
    "commitFile": "hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java",
    "patch": "diff --git a/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java b/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java\nindex 86c33ac..881a4f3 100644\n--- a/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java\n+++ b/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java\n@@ -75,7 +75,7 @@\n             JAXBContext context \u003d JAXBContext.newInstance(Hml.class);\n             Marshaller marshaller \u003d context.createMarshaller();\n             SchemaFactory schemaFactory \u003d SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\");\n+            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\");\n             Schema schema \u003d schemaFactory.newSchema(schemaURL);\n             marshaller.setSchema(schema);\n             marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n",
    "projectName": "ngs",
    "lineNum": 78,
    "nodeStartChar": 2352,
    "before": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\"",
    "after": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\""
  },
  {
    "commitSHA1": "21d0f65b341400131c468c18574e8af35f7d5035",
    "commitFile": "hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java",
    "patch": "diff --git a/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java b/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java\nindex f507088..957b519 100644\n--- a/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java\n+++ b/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java\n@@ -61,7 +61,7 @@\n     @Before\n     public void setUp() throws Exception {\n         data \u003d new Hml();\n-        data.setVersion(\"1.0\");\n+        data.setVersion(\"1.0.1\");\n         data.setProjectName(\"LAB\");\n \n         ReportingCenter reportingCenter \u003d new ReportingCenter();\n",
    "projectName": "ngs",
    "lineNum": 64,
    "nodeStartChar": 1848,
    "before": "\"1.0\"",
    "after": "\"1.0.1\""
  },
  {
    "commitSHA1": "f6eab63b81d7c5c8a9f60972ba20c013eddabf44",
    "commitFile": "hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java",
    "patch": "diff --git a/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java b/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java\nindex 575a529..8daedad 100644\n--- a/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java\n+++ b/hml/src/main/java/org/nmdp/ngs/hml/HmlReader.java\n@@ -77,7 +77,7 @@\n             JAXBContext context \u003d JAXBContext.newInstance(Hml.class);\n             Unmarshaller unmarshaller \u003d context.createUnmarshaller();\n             SchemaFactory schemaFactory \u003d SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\");\n+            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\");\n             Schema schema \u003d schemaFactory.newSchema(schemaURL);\n             unmarshaller.setSchema(schema);\n             return (Hml) unmarshaller.unmarshal(reader);\n",
    "projectName": "ngs",
    "lineNum": 80,
    "nodeStartChar": 2384,
    "before": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\"",
    "after": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\""
  },
  {
    "commitSHA1": "f6eab63b81d7c5c8a9f60972ba20c013eddabf44",
    "commitFile": "hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java",
    "patch": "diff --git a/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java b/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java\nindex 86c33ac..881a4f3 100644\n--- a/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java\n+++ b/hml/src/main/java/org/nmdp/ngs/hml/HmlWriter.java\n@@ -75,7 +75,7 @@\n             JAXBContext context \u003d JAXBContext.newInstance(Hml.class);\n             Marshaller marshaller \u003d context.createMarshaller();\n             SchemaFactory schemaFactory \u003d SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\");\n+            URL schemaURL \u003d HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\");\n             Schema schema \u003d schemaFactory.newSchema(schemaURL);\n             marshaller.setSchema(schema);\n             marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n",
    "projectName": "ngs",
    "lineNum": 78,
    "nodeStartChar": 2352,
    "before": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.xsd\"",
    "after": "\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\""
  },
  {
    "commitSHA1": "f6eab63b81d7c5c8a9f60972ba20c013eddabf44",
    "commitFile": "hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java",
    "patch": "diff --git a/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java b/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java\nindex f507088..957b519 100644\n--- a/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java\n+++ b/hml/src/test/java/org/nmdp/ngs/hml/HmlWriterTest.java\n@@ -61,7 +61,7 @@\n     @Before\n     public void setUp() throws Exception {\n         data \u003d new Hml();\n-        data.setVersion(\"1.0\");\n+        data.setVersion(\"1.0.1\");\n         data.setProjectName(\"LAB\");\n \n         ReportingCenter reportingCenter \u003d new ReportingCenter();\n",
    "projectName": "ngs",
    "lineNum": 64,
    "nodeStartChar": 1848,
    "before": "\"1.0\"",
    "after": "\"1.0.1\""
  },
  {
    "commitSHA1": "33f51b16e646f8a843730b92f720171fdf13a9f7",
    "commitFile": "tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java",
    "patch": "diff --git a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\nindex 8ccfb9b..9bc1a0d 100644\n--- a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n+++ b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n@@ -29,7 +29,7 @@\n import org.junit.Test;\n \n /**\n- * Unit test for ExtractConsensus.\n+ * Unit test for ExtractExpected.\n  */\n \n public final class ExtractExpectedTest {\n@@ -37,6 +37,6 @@\n \t\n \t@Test\n \tpublic void testConstructor() {\n-\t    assertNotNull(new ExtractConsensus(inputHmlFile));\n+\t    assertNotNull(new ExtractExpected(inputHmlFile));\n \t}\n }\ndiff --git a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\nindex 8ccfb9b..9bc1a0d 100644\n--- a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n+++ b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n@@ -29,7 +29,7 @@\n import org.junit.Test;\n \n /**\n- * Unit test for ExtractConsensus.\n+ * Unit test for ExtractExpected.\n  */\n \n public final class ExtractExpectedTest {\n@@ -37,6 +37,6 @@\n \t\n \t@Test\n \tpublic void testConstructor() {\n-\t    assertNotNull(new ExtractConsensus(inputHmlFile));\n+\t    assertNotNull(new ExtractExpected(inputHmlFile));\n \t}\n }\n",
    "projectName": "ngs",
    "lineNum": 40,
    "nodeStartChar": 1234,
    "before": "ExtractConsensus",
    "after": "ExtractExpected"
  },
  {
    "commitSHA1": "af40ea2b0c4c6fee1eebbddbb7e303b1c5ad4d3a",
    "commitFile": "tools/src/main/java-templates/org/nmdp/ngs/tools/About.java",
    "patch": "diff --git a/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java b/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java\nindex c0edf9f..375cde7 100644\n--- a/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java\n+++ b/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java\n@@ -1,7 +1,7 @@\n /*\n \n     ngs-tools  Next generation sequencing (NGS/HTS) command line tools.\n-    Copyright (c) 2014 National Marrow Donor Program (NMDP)\n+    Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\n \n     This library is free software; you can redistribute it and/or modify it\n     under the terms of the GNU Lesser General Public License as published\n@@ -33,7 +33,7 @@\n     private static final String ARTIFACT_ID \u003d \"${project.artifactId}\";\n     private static final String BUILD_TIMESTAMP \u003d \"${maven.build.timestamp}\";\n     private static final String COMMIT \u003d \"${git.commit.id}\";\n-    private static final String COPYRIGHT \u003d \"Copyright (c) 2014 National Marrow Donor Program (NMDP)\";\n+    private static final String COPYRIGHT \u003d \"Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\";\n     private static final String LICENSE \u003d \"Licensed GNU Lesser General Public License (LGPL), version 3 or later\";\n     private static final String VERSION \u003d \"${project.version}\";\n \n",
    "projectName": "ngs",
    "lineNum": 36,
    "nodeStartChar": 1345,
    "before": "\"Copyright (c) 2014 National Marrow Donor Program (NMDP)\"",
    "after": "\"Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\""
  },
  {
    "commitSHA1": "ab8cd79fb64b51e3ff6d447b1affcf094262cf1b",
    "commitFile": "tools/src/main/java-templates/org/nmdp/ngs/tools/About.java",
    "patch": "diff --git a/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java b/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java\nindex c0edf9f..375cde7 100644\n--- a/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java\n+++ b/tools/src/main/java-templates/org/nmdp/ngs/tools/About.java\n@@ -1,7 +1,7 @@\n /*\n \n     ngs-tools  Next generation sequencing (NGS/HTS) command line tools.\n-    Copyright (c) 2014 National Marrow Donor Program (NMDP)\n+    Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\n \n     This library is free software; you can redistribute it and/or modify it\n     under the terms of the GNU Lesser General Public License as published\n@@ -33,7 +33,7 @@\n     private static final String ARTIFACT_ID \u003d \"${project.artifactId}\";\n     private static final String BUILD_TIMESTAMP \u003d \"${maven.build.timestamp}\";\n     private static final String COMMIT \u003d \"${git.commit.id}\";\n-    private static final String COPYRIGHT \u003d \"Copyright (c) 2014 National Marrow Donor Program (NMDP)\";\n+    private static final String COPYRIGHT \u003d \"Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\";\n     private static final String LICENSE \u003d \"Licensed GNU Lesser General Public License (LGPL), version 3 or later\";\n     private static final String VERSION \u003d \"${project.version}\";\n \n",
    "projectName": "ngs",
    "lineNum": 36,
    "nodeStartChar": 1345,
    "before": "\"Copyright (c) 2014 National Marrow Donor Program (NMDP)\"",
    "after": "\"Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\""
  },
  {
    "commitSHA1": "aaaaf58332869527074aa008fd490fb05bd30014",
    "commitFile": "feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java",
    "patch": "diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\ndiff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\n",
    "projectName": "ngs",
    "lineNum": 278,
    "nodeStartChar": 8407,
    "before": "new String(buffer)",
    "after": "new String(buffer,\"UTF8\")"
  },
  {
    "commitSHA1": "91ff50ccfd69c061f319ac7a978878eca858a2b7",
    "commitFile": "feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java",
    "patch": "diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\ndiff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\n",
    "projectName": "ngs",
    "lineNum": 278,
    "nodeStartChar": 8407,
    "before": "new String(buffer)",
    "after": "new String(buffer,\"UTF8\")"
  },
  {
    "commitSHA1": "de86881aad07a00991f93edbd1f52adcff00cf48",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 1efe840..822bd2b 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1005,7 +1005,7 @@\n         final ResponseDecoder fetchResponseDecoder;\n \n         private final LongSupplier requestFetches;\n-        private LongSupplier responseFetches;\n+        private final LongSupplier responseFetches;\n         private boolean inFetch;\n \n         private AbstractFetchConnection(\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 1efe840..822bd2b 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1005,7 +1005,7 @@\n         final ResponseDecoder fetchResponseDecoder;\n \n         private final LongSupplier requestFetches;\n-        private LongSupplier responseFetches;\n+        private final LongSupplier responseFetches;\n         private boolean inFetch;\n \n         private AbstractFetchConnection(\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1008,
    "nodeStartChar": 37764,
    "before": "private LongSupplier responseFetches; ",
    "after": "private final LongSupplier responseFetches; "
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 27,
    "nodeStartChar": 1117,
    "before": "IntPropertyDef",
    "after": "LongPropertyDef"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 41,
    "nodeStartChar": 2012,
    "before": "128",
    "after": "128L"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 71,
    "nodeStartChar": 2839,
    "before": "KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this)",
    "after": "KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this)"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 60,
    "nodeStartChar": 3080,
    "before": "1024",
    "after": "1024L"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 55,
    "nodeStartChar": 2548,
    "before": "0",
    "after": "0L"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 56,
    "nodeStartChar": 2639,
    "before": "1024",
    "after": "1024L"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 53,
    "nodeStartChar": 2571,
    "before": "1024",
    "after": "1024L"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 59,
    "nodeStartChar": 2943,
    "before": "1024",
    "after": "1024L"
  },
  {
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 55,
    "nodeStartChar": 2643,
    "before": "0",
    "after": "0L"
  },
  {
    "commitSHA1": "c2c0516c7bdf36796e9ec479590873929388bf14",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 622,
    "nodeStartChar": 24267,
    "before": "{\"${route}/client/controller\",\"${client}/fetch.key.nonzero.offset.too.early.message/client\",\"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"}",
    "after": "{\"${route}/client/controller\",\"${client}/fetch.key.nonzero.offset.too.low.message/client\",\"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"}"
  },
  {
    "commitSHA1": "c2c0516c7bdf36796e9ec479590873929388bf14",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 787,
    "nodeStartChar": 30007,
    "before": "{\"${route}/client/controller\",\"${client}/offset.too.early.message/client\",\"${server}/offset.too.early.message/server\"}",
    "after": "{\"${route}/client/controller\",\"${client}/offset.too.low.message/client\",\"${server}/offset.too.low.message/server\"}"
  },
  {
    "commitSHA1": "c2c0516c7bdf36796e9ec479590873929388bf14",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 800,
    "nodeStartChar": 30439,
    "before": "{\"${routeAnyTopic}/client/controller\",\"${client}/offset.too.early.multiple.nodes/client\",\"${server}/offset.too.early.multiple.nodes/server\"}",
    "after": "{\"${routeAnyTopic}/client/controller\",\"${client}/offset.too.low.multiple.nodes/client\",\"${server}/offset.too.low.multiple.nodes/server\"}"
  },
  {
    "commitSHA1": "c2c0516c7bdf36796e9ec479590873929388bf14",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex c46ac57..fa0db37 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -263,8 +263,8 @@\n //    @Test\n //    @Specification(\n //    {\"${route}/client/controller\",\n-//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/client\",\n-//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.early.and.null.message/server\"})\n+//            \"${client}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/client\",\n+//            \"${server}/compacted.historical.uses.cached.key.then.live.after.offset.too.low.and.null.message/server\"})\n //    @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n //    public void shouldReceiveCompactedMessagesFromLiveStreamAfterOffsetTooEarlyAndCachedKeyRemovedByNullMessage()\n //            throws Exception\n@@ -621,8 +621,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/fetch.key.nonzero.offset.too.early.message/client\",\n-        \"${server}/fetch.key.nonzero.offset.too.early.first.matches/server\"})\n+        \"${client}/fetch.key.nonzero.offset.too.low.message/client\",\n+        \"${server}/fetch.key.nonzero.offset.too.low.first.matches/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldUseEarliestAvailableOffsetIfGreaterThanRequestedOffset() throws Exception\n     {\n@@ -786,8 +786,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/offset.too.early.message/client\",\n-        \"${server}/offset.too.early.message/server\" })\n+        \"${client}/offset.too.low.message/client\",\n+        \"${server}/offset.too.low.message/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffset() throws Exception\n     {\n@@ -799,8 +799,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.nodes/client\",\n-        \"${server}/offset.too.early.multiple.nodes/server\" })\n+        \"${client}/offset.too.low.multiple.nodes/client\",\n+        \"${server}/offset.too.low.multiple.nodes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleNodes() throws Exception\n     {\n@@ -810,8 +810,8 @@\n     @Test\n     @Specification({\n         \"${routeAnyTopic}/client/controller\",\n-        \"${client}/offset.too.early.multiple.topics/client\",\n-        \"${server}/offset.too.early.multiple.topics/server\" })\n+        \"${client}/offset.too.low.multiple.topics/client\",\n+        \"${server}/offset.too.low.multiple.topics/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldRefetchUsingReportedFirstOffsetOnMultipleTopics() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 811,
    "nodeStartChar": 30834,
    "before": "{\"${routeAnyTopic}/client/controller\",\"${client}/offset.too.early.multiple.topics/client\",\"${server}/offset.too.early.multiple.topics/server\"}",
    "after": "{\"${routeAnyTopic}/client/controller\",\"${client}/offset.too.low.multiple.topics/client\",\"${server}/offset.too.low.multiple.topics/server\"}"
  },
  {
    "commitSHA1": "a35ba177265ef781d4def6d2f9d73cfa404a1033",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 3fe5065..abdd205 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1325,7 +1325,7 @@\n                 Iterator\u003cNetworkTopicPartition\u003e iterator \u003d topic.partitions.iterator();\n                 NetworkTopicPartition candidate \u003d iterator.hasNext() ? iterator.next() : null;\n                 NetworkTopicPartition next;\n-                while (candidate !\u003d null)\n+                while (candidate !\u003d null \u0026\u0026 nodeIdsByPartition !\u003d null)\n                 {\n                     next \u003d iterator.hasNext() ? iterator.next() : null;\n                     boolean isHighestOffset \u003d next \u003d\u003d null || next.id !\u003d candidate.id;\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 3fe5065..abdd205 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1325,7 +1325,7 @@\n                 Iterator\u003cNetworkTopicPartition\u003e iterator \u003d topic.partitions.iterator();\n                 NetworkTopicPartition candidate \u003d iterator.hasNext() ? iterator.next() : null;\n                 NetworkTopicPartition next;\n-                while (candidate !\u003d null)\n+                while (candidate !\u003d null \u0026\u0026 nodeIdsByPartition !\u003d null)\n                 {\n                     next \u003d iterator.hasNext() ? iterator.next() : null;\n                     boolean isHighestOffset \u003d next \u003d\u003d null || next.id !\u003d candidate.id;\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1328,
    "nodeStartChar": 52671,
    "before": "candidate !\u003d null",
    "after": "candidate !\u003d null \u0026\u0026 nodeIdsByPartition !\u003d null"
  },
  {
    "commitSHA1": "0c391b62611c72db6aaa29620d42e5deff6ef620",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 98e29d2..586c6ab 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -580,7 +580,7 @@\n                 final int payloadLength \u003d value \u003d\u003d null ? 0 : value.capacity() - fragmentedMessageBytesWritten;\n                 int applicationReplyBudget \u003d budget.applicationReplyBudget();\n                 int writeableBytes \u003d applicationReplyBudget - applicationReplyPadding;\n-                if (writeableBytes \u003e 0 || payloadLength \u003d\u003d 0)\n+                if (writeableBytes \u003e 0)\n                 {\n                     int bytesToWrite \u003d Math.min(payloadLength, writeableBytes);\n                     budget.decApplicationReplyBudget(bytesToWrite + applicationReplyPadding);\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 98e29d2..586c6ab 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -580,7 +580,7 @@\n                 final int payloadLength \u003d value \u003d\u003d null ? 0 : value.capacity() - fragmentedMessageBytesWritten;\n                 int applicationReplyBudget \u003d budget.applicationReplyBudget();\n                 int writeableBytes \u003d applicationReplyBudget - applicationReplyPadding;\n-                if (writeableBytes \u003e 0 || payloadLength \u003d\u003d 0)\n+                if (writeableBytes \u003e 0)\n                 {\n                     int bytesToWrite \u003d Math.min(payloadLength, writeableBytes);\n                     budget.decApplicationReplyBudget(bytesToWrite + applicationReplyPadding);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 583,
    "nodeStartChar": 22955,
    "before": "writeableBytes \u003e 0 || payloadLength \u003d\u003d 0",
    "after": "writeableBytes \u003e 0"
  },
  {
    "commitSHA1": "2058a9bc1193f38a76e84996e84e307c0eb0d2ec",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\nindex e49008a..aca8c68 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n@@ -152,7 +152,7 @@\n         long requestOffset,\n         long lastOffset)\n     {\n-        if (requestOffset \u003c validToOffset)\n+        if (requestOffset \u003c\u003d validToOffset)\n         {\n             validToOffset \u003d Math.max(lastOffset,  validToOffset);\n         }\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\nindex e49008a..aca8c68 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n@@ -152,7 +152,7 @@\n         long requestOffset,\n         long lastOffset)\n     {\n-        if (requestOffset \u003c validToOffset)\n+        if (requestOffset \u003c\u003d validToOffset)\n         {\n             validToOffset \u003d Math.max(lastOffset,  validToOffset);\n         }\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 155,
    "nodeStartChar": 5829,
    "before": "requestOffset \u003c validToOffset",
    "after": "requestOffset \u003c\u003d validToOffset"
  },
  {
    "commitSHA1": "df1aa1f75502ee2b3051bcc2f7e1e3fc98e093de",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex 6314a8a..6b8e2af 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -65,7 +65,7 @@\n         k3po.start();\n         k3po.awaitBarrier(\"ROUTED_CLIENT\");\n         k3po.awaitBarrier(\"FETCH_REQUEST_RECEIVED\");\n-        Thread.sleep(500); // ensure bootstrap is complete before client attaches\n+        Thread.sleep(1000); // ensure bootstrap is complete before client attaches\n         k3po.notifyBarrier(\"CONNECT_CLIENT_ONE\");\n         k3po.finish();\n     }\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex 6314a8a..6b8e2af 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -65,7 +65,7 @@\n         k3po.start();\n         k3po.awaitBarrier(\"ROUTED_CLIENT\");\n         k3po.awaitBarrier(\"FETCH_REQUEST_RECEIVED\");\n-        Thread.sleep(500); // ensure bootstrap is complete before client attaches\n+        Thread.sleep(1000); // ensure bootstrap is complete before client attaches\n         k3po.notifyBarrier(\"CONNECT_CLIENT_ONE\");\n         k3po.finish();\n     }\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 68,
    "nodeStartChar": 3067,
    "before": "500",
    "after": "1000"
  },
  {
    "commitSHA1": "95b982eca63e4a01f266da2c097ae95213b3473a",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java\nindex 626966f..9b8f017 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java\n@@ -33,7 +33,7 @@\n     final DirectBuffer headerName;\n     Map\u003cDirectBuffer, HeadersMessageDispatcher\u003e dispatchersByHeaderValue \u003d new HashMap\u003c\u003e();\n \n-    private final List\u003cHeadersMessageDispatcher\u003e dispatchers \u003d new ArrayList\u003cHeadersMessageDispatcher\u003e();\n+    private final List\u003cHeadersMessageDispatcher\u003e dispatchers \u003d new ArrayList\u003c\u003e();\n \n     public HeaderValueMessageDispatcher(DirectBuffer headerKey)\n     {\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java\nindex 626966f..9b8f017 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/HeaderValueMessageDispatcher.java\n@@ -33,7 +33,7 @@\n     final DirectBuffer headerName;\n     Map\u003cDirectBuffer, HeadersMessageDispatcher\u003e dispatchersByHeaderValue \u003d new HashMap\u003c\u003e();\n \n-    private final List\u003cHeadersMessageDispatcher\u003e dispatchers \u003d new ArrayList\u003cHeadersMessageDispatcher\u003e();\n+    private final List\u003cHeadersMessageDispatcher\u003e dispatchers \u003d new ArrayList\u003c\u003e();\n \n     public HeaderValueMessageDispatcher(DirectBuffer headerKey)\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 36,
    "nodeStartChar": 1442,
    "before": "ArrayList\u003cHeadersMessageDispatcher\u003e",
    "after": "ArrayList\u003c\u003e"
  },
  {
    "commitSHA1": "4075d775c630a99f6e311f707b9ebb5df8302e33",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 9a99b91..e137540 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1073,7 +1073,7 @@\n                     final int recordBatchSize \u003d recordSet.recordBatchSize();\n                     networkOffset \u003d recordSet.limit() + recordBatchSize;\n \n-                    long requestedOffset \u003d getRueqestedOffset(topicName, partitionResponse.partitionId());\n+                    long requestedOffset \u003d getRequestedOffset(topicName, partitionResponse.partitionId());\n \n                     if (topic !\u003d null \u0026\u0026 requestedOffset !\u003d NO_OFFSET)\n                         // we still have subscribers\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 9a99b91..e137540 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1073,7 +1073,7 @@\n                     final int recordBatchSize \u003d recordSet.recordBatchSize();\n                     networkOffset \u003d recordSet.limit() + recordBatchSize;\n \n-                    long requestedOffset \u003d getRueqestedOffset(topicName, partitionResponse.partitionId());\n+                    long requestedOffset \u003d getRequestedOffset(topicName, partitionResponse.partitionId());\n \n                     if (topic !\u003d null \u0026\u0026 requestedOffset !\u003d NO_OFFSET)\n                         // we still have subscribers\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1076,
    "nodeStartChar": 44718,
    "before": "getRueqestedOffset(topicName,partitionResponse.partitionId())",
    "after": "getRequestedOffset(topicName,partitionResponse.partitionId())"
  },
  {
    "commitSHA1": "b62bc259da138271b52b56c5436cc869856cc63c",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 25b3ea2..bba7aa3 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -627,7 +627,7 @@\n     public void shouldReceiveMessagesFromMultipleTopics() throws Exception\n     {\n         k3po.start();\n-        k3po.awaitBarrier(\"SECOND_METADATA_RESPONSE_WRITTEN\");\n+        k3po.awaitBarrier(\"CLIENT_TWO_CONNECTED\");\n         k3po.notifyBarrier(\"WRITE_FIRST_FETCH_RESPONSE\");\n         k3po.finish();\n     }\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 630,
    "nodeStartChar": 23472,
    "before": "\"SECOND_METADATA_RESPONSE_WRITTEN\"",
    "after": "\"CLIENT_TWO_CONNECTED\""
  },
  {
    "commitSHA1": "21bdce3dd81147a4463d827f894c225a41e30ce8",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex c5b318e..1253a20 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -582,7 +582,7 @@\n                         if (networkSlot \u003d\u003d NO_SLOT)\n                         {\n                             final MutableDirectBuffer bufferSlot;\n-                            if (responseSize \u003e bufferPool.slotCapacity())\n+                            if (responseSize + BitUtil.SIZE_OF_INT \u003e bufferPool.slotCapacity())\n                             {\n                                 int requiredCapacity \u003d response.sizeof() + response.size();\n                                 int currentCapacity \u003d localDecodeBuffer !\u003d null ? localDecodeBuffer.capacity() : 0;\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 585,
    "nodeStartChar": 23853,
    "before": "responseSize",
    "after": "responseSize + BitUtil.SIZE_OF_INT"
  },
  {
    "commitSHA1": "21bdce3dd81147a4463d827f894c225a41e30ce8",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchLimitsIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchLimitsIT.java\nindex 427e838..cde9cca 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchLimitsIT.java\n@@ -72,10 +72,10 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${client}/zero.offset/client\",\n-        \"${server}/zero.offset.message.response.exceeds.requested.256.bytes/server\" })\n+        \"${client}/zero.offset.messages.response.exceeds.requested.256.bytes/client\",\n+        \"${server}/zero.offset.messages.response.exceeds.requested.256.bytes/server\" })\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n-    public void shouldHandleFetchResponseSizeExceedingSlotCapacity() throws Exception\n+    public void shouldHandleFetchResponsesWithSizeExceedingSlotCapacity() throws Exception\n     {\n         k3po.start();\n         k3po.notifyBarrier(\"WRITE_FETCH_RESPONSE\");\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 73,
    "nodeStartChar": 3047,
    "before": "{\"${route}/client/controller\",\"${client}/zero.offset/client\",\"${server}/zero.offset.message.response.exceeds.requested.256.bytes/server\"}",
    "after": "{\"${route}/client/controller\",\"${client}/zero.offset.messages.response.exceeds.requested.256.bytes/client\",\"${server}/zero.offset.messages.response.exceeds.requested.256.bytes/server\"}"
  },
  {
    "commitSHA1": "aaca82071bb475bce8032acefee39dc6693a5ddc",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 70502d0..8ed216d 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -497,7 +497,7 @@\n                 // We didn\u0027t skip any messages due to lack of window, advance to highest offset\n                 endOffset \u003d lastOffset;\n             }\n-            if (endOffset \u003e startOffset)\n+            if (endOffset \u003e startOffset \u0026\u0026 requestOffset \u003c\u003d startOffset)\n             {\n                 this.fetchOffsets.put(partition, endOffset);\n                 progressHandler.handle(partition, startOffset, endOffset);\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 70502d0..8ed216d 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -497,7 +497,7 @@\n                 // We didn\u0027t skip any messages due to lack of window, advance to highest offset\n                 endOffset \u003d lastOffset;\n             }\n-            if (endOffset \u003e startOffset)\n+            if (endOffset \u003e startOffset \u0026\u0026 requestOffset \u003c\u003d startOffset)\n             {\n                 this.fetchOffsets.put(partition, endOffset);\n                 progressHandler.handle(partition, startOffset, endOffset);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 500,
    "nodeStartChar": 18642,
    "before": "endOffset \u003e startOffset",
    "after": "endOffset \u003e startOffset \u0026\u0026 requestOffset \u003c\u003d startOffset"
  },
  {
    "commitSHA1": "5d4a033dbc4ba7a4b926c17a4273a66ef03f3383",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\nindex 6ac3bad..5310ed0 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n@@ -38,7 +38,7 @@\n \n public final class TopicMessageDispatcherTest\n {\n-    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2);\n+    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2, KeyMessageDispatcher::new);\n \n     private final ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e headersRW \u003d\n             new ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e(new KafkaHeaderFW.Builder(), new KafkaHeaderFW());\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\nindex 6ac3bad..5310ed0 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n@@ -38,7 +38,7 @@\n \n public final class TopicMessageDispatcherTest\n {\n-    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2);\n+    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2, KeyMessageDispatcher::new);\n \n     private final ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e headersRW \u003d\n             new ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e(new KafkaHeaderFW.Builder(), new KafkaHeaderFW());\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 41,
    "nodeStartChar": 1561,
    "before": "new TopicMessageDispatcher(2)",
    "after": "new TopicMessageDispatcher(2,KeyMessageDispatcher::new)"
  },
  {
    "commitSHA1": "d15cef579b6f5b8a5670e993cdc2c401446351ad",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 3fd27fd..70502d0 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -458,7 +458,7 @@\n             flushPreviousMessage(partition, messageOffset - 1);\n \n             if (requestOffset \u003c\u003d progressStartOffset // avoid out of order delivery\n-                \u0026\u0026 messageOffset \u003e\u003d progressStartOffset\n+                \u0026\u0026 messageOffset \u003e progressStartOffset\n                 \u0026\u0026 writeableBytesMinimum \u003d\u003d 0)\n             {\n                 final int payloadLength \u003d value \u003d\u003d null ? 0 : value.capacity();\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 3fd27fd..70502d0 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -458,7 +458,7 @@\n             flushPreviousMessage(partition, messageOffset - 1);\n \n             if (requestOffset \u003c\u003d progressStartOffset // avoid out of order delivery\n-                \u0026\u0026 messageOffset \u003e\u003d progressStartOffset\n+                \u0026\u0026 messageOffset \u003e progressStartOffset\n                 \u0026\u0026 writeableBytesMinimum \u003d\u003d 0)\n             {\n                 final int payloadLength \u003d value \u003d\u003d null ? 0 : value.capacity();\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 461,
    "nodeStartChar": 17096,
    "before": "messageOffset \u003e\u003d progressStartOffset",
    "after": "messageOffset \u003e progressStartOffset"
  },
  {
    "commitSHA1": "8e4afedb80a74883880c59e5d190c77a3cf5347b",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 65e5164..9826bf9 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -236,7 +236,7 @@\n         // TODO: If the topic now has no partitions, remove from topicsByName and topicMetadataByName\n     }\n \n-    abstract class NetworkConnection\n+    abstract class AbstractNetworkConnection\n     {\n         final MessageConsumer networkTarget;\n \n@@ -259,7 +259,7 @@\n         int nextRequestId;\n         int nextResponseId;\n \n-        private NetworkConnection()\n+        private AbstractNetworkConnection()\n         {\n             this.networkTarget \u003d NetworkConnectionPool.this.clientStreamFactory.router.supplyTarget(networkName);\n         }\n@@ -300,7 +300,7 @@\n                 final long newNetworkId \u003d NetworkConnectionPool.this.clientStreamFactory.supplyStreamId.getAsLong();\n                 final long newCorrelationId \u003d NetworkConnectionPool.this.clientStreamFactory.supplyCorrelationId.getAsLong();\n \n-                NetworkConnectionPool.this.clientStreamFactory.correlations.put(newCorrelationId, NetworkConnection.this);\n+                NetworkConnectionPool.this.clientStreamFactory.correlations.put(newCorrelationId, AbstractNetworkConnection.this);\n \n                 NetworkConnectionPool.this.clientStreamFactory\n                     .doBegin(networkTarget, newNetworkId, networkRef, newCorrelationId, extensionVisitor);\n@@ -556,7 +556,7 @@\n         }\n     }\n \n-    final class FetchConnection extends NetworkConnection\n+    final class FetchConnection extends AbstractNetworkConnection\n     {\n         private final int brokerId;\n         private final String host;\n@@ -745,7 +745,7 @@\n         }\n     }\n \n-    private final class MetadataConnection extends NetworkConnection\n+    private final class MetadataConnection extends AbstractNetworkConnection\n     {\n         TopicMetadata pendingTopicMetadata;\n \n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 303,
    "nodeStartChar": 12330,
    "before": "NetworkConnection.this",
    "after": "AbstractNetworkConnection.this"
  },
  {
    "commitSHA1": "8e4afedb80a74883880c59e5d190c77a3cf5347b",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\nindex 7ce1d8e..593d648 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\n@@ -87,8 +87,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.historical.message/client\",\n-        \"${scripts}/fanout.with.historical.message/server\"})\n+        \"${client}/fanout.with.historical.message/client\",\n+        \"${server}/fanout.with.historical.message/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutUsingHistoricalConnection() throws Exception\n     {\n@@ -98,8 +98,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.historical.messages/client\",\n-        \"${scripts}/fanout.with.historical.messages/server\"})\n+        \"${client}/fanout.with.historical.messages/client\",\n+        \"${server}/fanout.with.historical.messages/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutDiscardingHistoricalMessageToJoinLiveStream() throws Exception\n     {\n@@ -109,8 +109,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.slow.consumer/client\",\n-        \"${scripts}/fanout.with.slow.consumer/server\"})\n+        \"${client}/fanout.with.slow.consumer/client\",\n+        \"${server}/fanout.with.slow.consumer/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutWithSlowConsumer() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 88,
    "nodeStartChar": 3329,
    "before": "{\"${route}/client/controller\",\"${scripts}/fanout.with.historical.message/client\",\"${scripts}/fanout.with.historical.message/server\"}",
    "after": "{\"${route}/client/controller\",\"${client}/fanout.with.historical.message/client\",\"${server}/fanout.with.historical.message/server\"}"
  },
  {
    "commitSHA1": "8e4afedb80a74883880c59e5d190c77a3cf5347b",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\nindex 7ce1d8e..593d648 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\n@@ -87,8 +87,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.historical.message/client\",\n-        \"${scripts}/fanout.with.historical.message/server\"})\n+        \"${client}/fanout.with.historical.message/client\",\n+        \"${server}/fanout.with.historical.message/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutUsingHistoricalConnection() throws Exception\n     {\n@@ -98,8 +98,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.historical.messages/client\",\n-        \"${scripts}/fanout.with.historical.messages/server\"})\n+        \"${client}/fanout.with.historical.messages/client\",\n+        \"${server}/fanout.with.historical.messages/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutDiscardingHistoricalMessageToJoinLiveStream() throws Exception\n     {\n@@ -109,8 +109,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.slow.consumer/client\",\n-        \"${scripts}/fanout.with.slow.consumer/server\"})\n+        \"${client}/fanout.with.slow.consumer/client\",\n+        \"${server}/fanout.with.slow.consumer/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutWithSlowConsumer() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 99,
    "nodeStartChar": 3700,
    "before": "{\"${route}/client/controller\",\"${scripts}/fanout.with.historical.messages/client\",\"${scripts}/fanout.with.historical.messages/server\"}",
    "after": "{\"${route}/client/controller\",\"${client}/fanout.with.historical.messages/client\",\"${server}/fanout.with.historical.messages/server\"}"
  },
  {
    "commitSHA1": "8e4afedb80a74883880c59e5d190c77a3cf5347b",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\nindex 7ce1d8e..593d648 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/streams/FetchIT.java\n@@ -87,8 +87,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.historical.message/client\",\n-        \"${scripts}/fanout.with.historical.message/server\"})\n+        \"${client}/fanout.with.historical.message/client\",\n+        \"${server}/fanout.with.historical.message/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutUsingHistoricalConnection() throws Exception\n     {\n@@ -98,8 +98,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.historical.messages/client\",\n-        \"${scripts}/fanout.with.historical.messages/server\"})\n+        \"${client}/fanout.with.historical.messages/client\",\n+        \"${server}/fanout.with.historical.messages/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutDiscardingHistoricalMessageToJoinLiveStream() throws Exception\n     {\n@@ -109,8 +109,8 @@\n     @Test\n     @Specification({\n         \"${route}/client/controller\",\n-        \"${scripts}/fanout.with.slow.consumer/client\",\n-        \"${scripts}/fanout.with.slow.consumer/server\"})\n+        \"${client}/fanout.with.slow.consumer/client\",\n+        \"${server}/fanout.with.slow.consumer/server\"})\n     @ScriptProperty(\"networkAccept \\\"nukleus://target/streams/kafka\\\"\")\n     public void shouldFanoutWithSlowConsumer() throws Exception\n     {\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 110,
    "nodeStartChar": 4091,
    "before": "{\"${route}/client/controller\",\"${scripts}/fanout.with.slow.consumer/client\",\"${scripts}/fanout.with.slow.consumer/server\"}",
    "after": "{\"${route}/client/controller\",\"${client}/fanout.with.slow.consumer/client\",\"${server}/fanout.with.slow.consumer/server\"}"
  },
  {
    "commitSHA1": "188f2aa4daa066e01bd4dd9312d1430aca65cbac",
    "commitFile": "src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java",
    "patch": "diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 12fcc6b..5a40e8b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -44,7 +44,7 @@\n      * Converts a {@link Nullable} reference into a {@link NonNull} reference. Performs a strict \u003ccode\u003enull\u003c/code\u003e check\n      * that fails in case a \u003ccode\u003enull\u003c/code\u003e reference is given.\n      *\n-     * @param \u003cT\u003e\n+     * @param \u003cTYPE\u003e\n      *            The type of the reference\n      * @param reference\n      *            A possible \u003ccode\u003enull\u003c/code\u003e reference.\n@@ -53,7 +53,7 @@\n      * @return Either the reference itself, or an {@link NullPointerException}, in case the reference was\n      *         \u003ccode\u003enull\u003c/code\u003e.\n      */\n-    public static \u003cT\u003e @NonNull T nonNull(@Nullable final T reference, final String message) {\n+    public static \u003cTYPE\u003e @NonNull TYPE nonNull(@Nullable final TYPE reference, final String message) {\n         if (reference !\u003d null) {\n             return reference;\n         }\ndiff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 12fcc6b..5a40e8b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -44,7 +44,7 @@\n      * Converts a {@link Nullable} reference into a {@link NonNull} reference. Performs a strict \u003ccode\u003enull\u003c/code\u003e check\n      * that fails in case a \u003ccode\u003enull\u003c/code\u003e reference is given.\n      *\n-     * @param \u003cT\u003e\n+     * @param \u003cTYPE\u003e\n      *            The type of the reference\n      * @param reference\n      *            A possible \u003ccode\u003enull\u003c/code\u003e reference.\n@@ -53,7 +53,7 @@\n      * @return Either the reference itself, or an {@link NullPointerException}, in case the reference was\n      *         \u003ccode\u003enull\u003c/code\u003e.\n      */\n-    public static \u003cT\u003e @NonNull T nonNull(@Nullable final T reference, final String message) {\n+    public static \u003cTYPE\u003e @NonNull TYPE nonNull(@Nullable final TYPE reference, final String message) {\n         if (reference !\u003d null) {\n             return reference;\n         }\n",
    "projectName": "null-analysis",
    "lineNum": 56,
    "nodeStartChar": 2083,
    "before": "T",
    "after": "TYPE"
  },
  {
    "commitSHA1": "d9be0c9c59ad303771632643be0e8699f2b621ac",
    "commitFile": "src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java",
    "patch": "diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 9e57f68..12fcc6b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -58,7 +58,7 @@\n             return reference;\n         }\n \n-        throw new NullPointerException(message); // NOPMD - we want to throw NPE here\n+        throw new IllegalArgumentException(message);\n     }\n \n     /**\ndiff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 9e57f68..12fcc6b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -58,7 +58,7 @@\n             return reference;\n         }\n \n-        throw new NullPointerException(message); // NOPMD - we want to throw NPE here\n+        throw new IllegalArgumentException(message);\n     }\n \n     /**\n",
    "projectName": "null-analysis",
    "lineNum": 61,
    "nodeStartChar": 2250,
    "before": "NullPointerException",
    "after": "IllegalArgumentException"
  },
  {
    "commitSHA1": "dab85fd85f02fe3b9b5f989de6d50ccee6b7a9c5",
    "commitFile": "src/main/java/com/github/tankist88/object2source/SourceGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \ndiff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \n",
    "projectName": "object2source",
    "lineNum": 110,
    "nodeStartChar": 4647,
    "before": "tabSymb + \"return null;\\n\"",
    "after": "tabSymb + tabSymb + \"return null;\\n\""
  },
  {
    "commitSHA1": "dab85fd85f02fe3b9b5f989de6d50ccee6b7a9c5",
    "commitFile": "src/main/java/com/github/tankist88/object2source/SourceGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \ndiff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \n",
    "projectName": "object2source",
    "lineNum": 121,
    "nodeStartChar": 5024,
    "before": "instBuilder",
    "after": "instBuilder.append(tabSymb)"
  },
  {
    "commitSHA1": "dab85fd85f02fe3b9b5f989de6d50ccee6b7a9c5",
    "commitFile": "src/main/java/com/github/tankist88/object2source/SourceGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \ndiff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \n",
    "projectName": "object2source",
    "lineNum": 123,
    "nodeStartChar": 5166,
    "before": "instBuilder",
    "after": "instBuilder.append(tabSymb)"
  },
  {
    "commitSHA1": "dab85fd85f02fe3b9b5f989de6d50ccee6b7a9c5",
    "commitFile": "src/main/java/com/github/tankist88/object2source/SourceGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \ndiff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \n",
    "projectName": "object2source",
    "lineNum": 127,
    "nodeStartChar": 5292,
    "before": "instBuilder",
    "after": "instBuilder.append(tabSymb)"
  },
  {
    "commitSHA1": "dab85fd85f02fe3b9b5f989de6d50ccee6b7a9c5",
    "commitFile": "src/main/java/com/github/tankist88/object2source/SourceGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \ndiff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \n",
    "projectName": "object2source",
    "lineNum": 304,
    "nodeStartChar": 15617,
    "before": "providerMethodName",
    "after": "providerMethodName + args"
  },
  {
    "commitSHA1": "dab85fd85f02fe3b9b5f989de6d50ccee6b7a9c5",
    "commitFile": "src/main/java/com/github/tankist88/object2source/SourceGenerator.java",
    "patch": "diff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \ndiff --git a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\nindex 4ca78b2..9548659 100644\n--- a/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n+++ b/src/main/java/com/github/tankist88/object2source/SourceGenerator.java\n@@ -107,7 +107,7 @@\n         if (objectDepth \u003c\u003d 0 \u0026\u0026 exceptionWhenMaxODepth) {\n             throw new ObjectDepthExceededException(\"Object depth exceeded. \" + obj.getClass());\n         } else if (objectDepth \u003c\u003d 0 || obj \u003d\u003d null || !allowedType(obj.getClass())) {\n-            return new InstanceCreateData(tabSymb + \"return null;\\n\");\n+            return new InstanceCreateData(tabSymb + tabSymb + \"return null;\\n\");\n         }\n \n         InstanceCreateData result \u003d new InstanceCreateData();\n@@ -118,13 +118,13 @@\n         InstanceCreateData simpleInstance \u003d getInstanceCreateData(obj, true, objectDepth);\n         if (simpleInstance !\u003d null) {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return \").append(simpleInstance.getInstanceCreator()).append(\";\\n\");\n             } else {\n-                instBuilder.append(tabSymb).append(\"return;\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(\"return;\\n\");\n             }\n         } else {\n             if (createInst) {\n-                instBuilder.append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n+                instBuilder.append(tabSymb).append(tabSymb).append(createInstStr(clazz, commonMethodsClassName)).append(\"\\n\");\n             }\n             List\u003cMethod\u003e allMethods \u003d getAllMethodsOfClass(classHierarchy);\n             for (Field field : getAllFieldsOfClass(classHierarchy)) {\n@@ -301,7 +301,7 @@\n         String method \u003d tabSymb + \"public static \" + retType + \" \" +\n                         providerMethodName + args + \" throws Exception {\\n\" + methodBody + tabSymb + \"}\\n\";\n         ProviderResult result \u003d new ProviderResult();\n-        result.setEndPoint(new ProviderInfo(providerMethodName, method));\n+        result.setEndPoint(new ProviderInfo(providerMethodName + args, method));\n         result.setProviders(providers);\n         result.getProviders().add(result.getEndPoint());\n         if (commonMethodsClassName \u003d\u003d null) {\n@@ -326,7 +326,7 @@\n \n     private void fillMethodBody(Object obj, StringBuilder bb, Set\u003cProviderInfo\u003e result, List\u003cClass\u003e classHierarchy, int objectDepth, boolean fillObj) throws Exception {\n         InstanceCreateData objGenerateResult \u003d generateObjInstance(obj, classHierarchy, objectDepth, !fillObj);\n-        bb.append(tabSymb).append(objGenerateResult.getInstanceCreator());\n+        bb.append(objGenerateResult.getInstanceCreator());\n         result.addAll(objGenerateResult.getDataProviderMethods());\n     }\n \n",
    "projectName": "object2source",
    "lineNum": 329,
    "nodeStartChar": 16621,
    "before": "bb.append(tabSymb)",
    "after": "bb"
  },
  {
    "commitSHA1": "36b7c4c423f2397870688fda8033f39a697bceaf",
    "commitFile": "onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java",
    "patch": "diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\nindex 4184a86..8d0cfee 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n@@ -3,9 +3,9 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Status {\n-    @SerializedName(\"completion\")\n+    @SerializedName(\"complete\")\n     COMPLETED,\n-    @SerializedName(\"withdrawal\")\n+    @SerializedName(\"withdrawn\")\n     WITHDRAWN,\n     @SerializedName(\"in_progress\")\n     IN_PROGRESS;\ndiff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\nindex 4184a86..8d0cfee 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n@@ -3,9 +3,9 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Status {\n-    @SerializedName(\"completion\")\n+    @SerializedName(\"complete\")\n     COMPLETED,\n-    @SerializedName(\"withdrawal\")\n+    @SerializedName(\"withdrawn\")\n     WITHDRAWN,\n     @SerializedName(\"in_progress\")\n     IN_PROGRESS;\n",
    "projectName": "onfido-api",
    "lineNum": 6,
    "nodeStartChar": 135,
    "before": "\"completion\"",
    "after": "\"complete\""
  },
  {
    "commitSHA1": "36b7c4c423f2397870688fda8033f39a697bceaf",
    "commitFile": "onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java",
    "patch": "diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\nindex 4184a86..8d0cfee 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n@@ -3,9 +3,9 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Status {\n-    @SerializedName(\"completion\")\n+    @SerializedName(\"complete\")\n     COMPLETED,\n-    @SerializedName(\"withdrawal\")\n+    @SerializedName(\"withdrawn\")\n     WITHDRAWN,\n     @SerializedName(\"in_progress\")\n     IN_PROGRESS;\ndiff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\nindex 4184a86..8d0cfee 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Status.java\n@@ -3,9 +3,9 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Status {\n-    @SerializedName(\"completion\")\n+    @SerializedName(\"complete\")\n     COMPLETED,\n-    @SerializedName(\"withdrawal\")\n+    @SerializedName(\"withdrawn\")\n     WITHDRAWN,\n     @SerializedName(\"in_progress\")\n     IN_PROGRESS;\n",
    "projectName": "onfido-api",
    "lineNum": 8,
    "nodeStartChar": 184,
    "before": "\"withdrawal\"",
    "after": "\"withdrawn\""
  },
  {
    "commitSHA1": "e7c379ce4b402b79fc60c73ae205078b99dcb191",
    "commitFile": "onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java",
    "patch": "diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\nindex 6a0fe0e..3790e80 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n@@ -3,8 +3,8 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Action {\n-    @SerializedName(\"completed\")\n+    @SerializedName(\"completion\")\n     COMPLETED,\n-    @SerializedName(\"withdrawn\")\n+    @SerializedName(\"withdrawal\")\n     WITHDRAWAL\n }\ndiff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\nindex 6a0fe0e..3790e80 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n@@ -3,8 +3,8 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Action {\n-    @SerializedName(\"completed\")\n+    @SerializedName(\"completion\")\n     COMPLETED,\n-    @SerializedName(\"withdrawn\")\n+    @SerializedName(\"withdrawal\")\n     WITHDRAWAL\n }\n",
    "projectName": "onfido-api",
    "lineNum": 6,
    "nodeStartChar": 135,
    "before": "\"completed\"",
    "after": "\"completion\""
  },
  {
    "commitSHA1": "e7c379ce4b402b79fc60c73ae205078b99dcb191",
    "commitFile": "onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java",
    "patch": "diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\nindex 6a0fe0e..3790e80 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n@@ -3,8 +3,8 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Action {\n-    @SerializedName(\"completed\")\n+    @SerializedName(\"completion\")\n     COMPLETED,\n-    @SerializedName(\"withdrawn\")\n+    @SerializedName(\"withdrawal\")\n     WITHDRAWAL\n }\ndiff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\nindex 6a0fe0e..3790e80 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/Action.java\n@@ -3,8 +3,8 @@\n import com.google.gson.annotations.SerializedName;\n \n public enum Action {\n-    @SerializedName(\"completed\")\n+    @SerializedName(\"completion\")\n     COMPLETED,\n-    @SerializedName(\"withdrawn\")\n+    @SerializedName(\"withdrawal\")\n     WITHDRAWAL\n }\n",
    "projectName": "onfido-api",
    "lineNum": 8,
    "nodeStartChar": 183,
    "before": "\"withdrawn\"",
    "after": "\"withdrawal\""
  },
  {
    "commitSHA1": "50b84c43ca865cfcedd6dbb2114b5f8e20ad9d53",
    "commitFile": "onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java",
    "patch": "diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\nindex 2e81f25..2666f75 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n@@ -63,7 +63,7 @@\n \t    byte[] rawHmac \u003d mac.doFinal(json);\n \n \t    // base64-encode the calculatedSignature\n-\t    String calculatedSignature \u003d new BigInteger(rawHmac).toString(16);\n+\t    String calculatedSignature \u003d new BigInteger(1, rawHmac).toString(16);\n \t    if (! calculatedSignature.equals(attachedSignature)) {\n \t\tthrow new SignatureMismatchException(\"HMAC mismatch\", calculatedSignature, attachedSignature);\n \t    }\ndiff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\nindex 2e81f25..2666f75 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n@@ -63,7 +63,7 @@\n \t    byte[] rawHmac \u003d mac.doFinal(json);\n \n \t    // base64-encode the calculatedSignature\n-\t    String calculatedSignature \u003d new BigInteger(rawHmac).toString(16);\n+\t    String calculatedSignature \u003d new BigInteger(1, rawHmac).toString(16);\n \t    if (! calculatedSignature.equals(attachedSignature)) {\n \t\tthrow new SignatureMismatchException(\"HMAC mismatch\", calculatedSignature, attachedSignature);\n \t    }\n",
    "projectName": "onfido-api",
    "lineNum": 66,
    "nodeStartChar": 2460,
    "before": "new BigInteger(rawHmac)",
    "after": "new BigInteger(1,rawHmac)"
  },
  {
    "commitSHA1": "5d1511b064a344c5cd2ee8ec63d97620ad3d465a",
    "commitFile": "src/test/java/com/youcruit/onfido/api/HttpIT.java",
    "patch": "diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java\nindex edcdac5..9bcc6f5 100644\n--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java\n+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java\n@@ -39,7 +39,7 @@\n     public OnfidoHttpClient createClient() {\n \tString authToken \u003d getPropEnv(\"ONFIDO_AUTH_TOKEN\");\n \tif (authToken \u003d\u003d null) {\n-\t    Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n+\t    Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n \t    return new FakeHttpClient();\n \t}\n \treturn createClient(authToken);\ndiff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java\nindex edcdac5..9bcc6f5 100644\n--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java\n+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java\n@@ -39,7 +39,7 @@\n     public OnfidoHttpClient createClient() {\n \tString authToken \u003d getPropEnv(\"ONFIDO_AUTH_TOKEN\");\n \tif (authToken \u003d\u003d null) {\n-\t    Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n+\t    Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n \t    return new FakeHttpClient();\n \t}\n \treturn createClient(authToken);\n",
    "projectName": "onfido-api",
    "lineNum": 42,
    "nodeStartChar": 1249,
    "before": "Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\")",
    "after": "Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\")"
  },
  {
    "commitSHA1": "c4599d14f905e48ea448e96a769cbb48c5fa016f",
    "commitFile": "src/main/java/com/youcruit/onfido/api/report/Report.java",
    "patch": "diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\ndiff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\n",
    "projectName": "onfido-api",
    "lineNum": 41,
    "nodeStartChar": 1030,
    "before": "BreakdownFieldType",
    "after": "PropertyFieldType"
  },
  {
    "commitSHA1": "c4599d14f905e48ea448e96a769cbb48c5fa016f",
    "commitFile": "src/main/java/com/youcruit/onfido/api/report/Report.java",
    "patch": "diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\ndiff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\n",
    "projectName": "onfido-api",
    "lineNum": 115,
    "nodeStartChar": 2456,
    "before": "BreakdownFieldType",
    "after": "PropertyFieldType"
  },
  {
    "commitSHA1": "c4599d14f905e48ea448e96a769cbb48c5fa016f",
    "commitFile": "src/main/java/com/youcruit/onfido/api/report/Report.java",
    "patch": "diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\ndiff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\n",
    "projectName": "onfido-api",
    "lineNum": 119,
    "nodeStartChar": 2563,
    "before": "BreakdownFieldType",
    "after": "PropertyFieldType"
  },
  {
    "commitSHA1": "5e5d99abb8bbb041b8215d987f6202697378d877",
    "commitFile": "src/main/java/com/github/error418/opennms/client/transfer/Event.java",
    "patch": "diff --git a/src/main/java/com/github/error418/opennms/client/transfer/Event.java b/src/main/java/com/github/error418/opennms/client/transfer/Event.java\nindex d427ae9..ef497b6 100644\n--- a/src/main/java/com/github/error418/opennms/client/transfer/Event.java\n+++ b/src/main/java/com/github/error418/opennms/client/transfer/Event.java\n@@ -34,7 +34,7 @@\n \t@XmlElement(name \u003d \"host\")\n \tprivate String host;\n \n-\t@XmlElement(name \u003d \"parms\")\n+\t@XmlElement(name \u003d \"parm\")\n \t@XmlElementWrapper(name \u003d \"parms\")\n \tprivate List\u003cParameter\u003e parameterList;\n \ndiff --git a/src/main/java/com/github/error418/opennms/client/transfer/Event.java b/src/main/java/com/github/error418/opennms/client/transfer/Event.java\nindex d427ae9..ef497b6 100644\n--- a/src/main/java/com/github/error418/opennms/client/transfer/Event.java\n+++ b/src/main/java/com/github/error418/opennms/client/transfer/Event.java\n@@ -34,7 +34,7 @@\n \t@XmlElement(name \u003d \"host\")\n \tprivate String host;\n \n-\t@XmlElement(name \u003d \"parms\")\n+\t@XmlElement(name \u003d \"parm\")\n \t@XmlElementWrapper(name \u003d \"parms\")\n \tprivate List\u003cParameter\u003e parameterList;\n \n",
    "projectName": "opennms-event",
    "lineNum": 37,
    "nodeStartChar": 986,
    "before": "\"parms\"",
    "after": "\"parm\""
  },
  {
    "commitSHA1": "8ce59117c61a6abd068ee779fbb76ed42b84c9cd",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 82947d3..bf28430 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -299,7 +299,7 @@\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n                   .warning(About.INCOMPAT,\n-                      \"@Value.Default annotation is superflous for default annotation attribute\");\n+                      \"@Value.Default annotation is superfluous for default annotation attribute\");\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n@@ -333,7 +333,7 @@\n           report(attributeMethodCandidate)\n               .annotationNamed(DefaultMirror.simpleName())\n               .warning(About.INCOMPAT,\n-                  \"@Value.Default annotation is superflous for default annotation attribute\"\n+                  \"@Value.Default annotation is superfluous for default annotation attribute\"\n                       + \" when \u0027defaultAsDefault\u0027 style is enabled\");\n         }\n       } else if (derivedAnnotationPresent) {\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 82947d3..bf28430 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -299,7 +299,7 @@\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n                   .warning(About.INCOMPAT,\n-                      \"@Value.Default annotation is superflous for default annotation attribute\");\n+                      \"@Value.Default annotation is superfluous for default annotation attribute\");\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n@@ -333,7 +333,7 @@\n           report(attributeMethodCandidate)\n               .annotationNamed(DefaultMirror.simpleName())\n               .warning(About.INCOMPAT,\n-                  \"@Value.Default annotation is superflous for default annotation attribute\"\n+                  \"@Value.Default annotation is superfluous for default annotation attribute\"\n                       + \" when \u0027defaultAsDefault\u0027 style is enabled\");\n         }\n       } else if (derivedAnnotationPresent) {\n",
    "projectName": "org.immutables",
    "lineNum": 302,
    "nodeStartChar": 12312,
    "before": "\"@Value.Default annotation is superflous for default annotation attribute\"",
    "after": "\"@Value.Default annotation is superfluous for default annotation attribute\""
  },
  {
    "commitSHA1": "8ce59117c61a6abd068ee779fbb76ed42b84c9cd",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 82947d3..bf28430 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -299,7 +299,7 @@\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n                   .warning(About.INCOMPAT,\n-                      \"@Value.Default annotation is superflous for default annotation attribute\");\n+                      \"@Value.Default annotation is superfluous for default annotation attribute\");\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n@@ -333,7 +333,7 @@\n           report(attributeMethodCandidate)\n               .annotationNamed(DefaultMirror.simpleName())\n               .warning(About.INCOMPAT,\n-                  \"@Value.Default annotation is superflous for default annotation attribute\"\n+                  \"@Value.Default annotation is superfluous for default annotation attribute\"\n                       + \" when \u0027defaultAsDefault\u0027 style is enabled\");\n         }\n       } else if (derivedAnnotationPresent) {\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 82947d3..bf28430 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -299,7 +299,7 @@\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n                   .warning(About.INCOMPAT,\n-                      \"@Value.Default annotation is superflous for default annotation attribute\");\n+                      \"@Value.Default annotation is superfluous for default annotation attribute\");\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n@@ -333,7 +333,7 @@\n           report(attributeMethodCandidate)\n               .annotationNamed(DefaultMirror.simpleName())\n               .warning(About.INCOMPAT,\n-                  \"@Value.Default annotation is superflous for default annotation attribute\"\n+                  \"@Value.Default annotation is superfluous for default annotation attribute\"\n                       + \" when \u0027defaultAsDefault\u0027 style is enabled\");\n         }\n       } else if (derivedAnnotationPresent) {\n",
    "projectName": "org.immutables",
    "lineNum": 336,
    "nodeStartChar": 14034,
    "before": "\"@Value.Default annotation is superflous for default annotation attribute\"",
    "after": "\"@Value.Default annotation is superfluous for default annotation attribute\""
  },
  {
    "commitSHA1": "3f718145f6c76ca736cad21456c4420767c71b3e",
    "commitFile": "criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java",
    "patch": "diff --git a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\nindex 8798af0..066c0f4 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n@@ -26,7 +26,7 @@\n  * Matcher on {@link Iterable} types. Has methods like {@code isEmpty()} / {@code isNotEmpty()}\n  * and others.\n  */\n-public interface IterableMatcher\u003cR, S, C, V\u003e  {\n+public interface IterableMatcher\u003cR, S, V\u003e  {\n \n   default S all() {\n     final UnaryOperator\u003cExpression\u003e expr \u003d e -\u003e Expressions.call(Operators.ALL, e);\n@@ -65,6 +65,6 @@\n \n   }\n \n-  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf, Self, Self, V\u003e {}\n+  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf\u003cV\u003e, Self\u003cV\u003e, V\u003e {}\n \n }\ndiff --git a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\nindex 2de3844..9da8a08 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n@@ -89,7 +89,7 @@\n     return new Local();\n   }\n \n-  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, C, V\u003e collectionMatcher(CriteriaContext context) {\n+  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, V\u003e collectionMatcher(CriteriaContext context) {\n     Objects.requireNonNull(context, \"context\");\n \n     class Local implements IterableMatcher.Self, HasContext {\n@@ -99,7 +99,7 @@\n       }\n     }\n \n-    return (IterableMatcher\u003cR, S, C, V\u003e) new Local();\n+    return (IterableMatcher\u003cR, S, V\u003e) new Local();\n   }\n \n   public static \u003cT\u003e T create(Class\u003cT\u003e type, CriteriaContext context) {\ndiff --git a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\nindex 8798af0..066c0f4 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n@@ -26,7 +26,7 @@\n  * Matcher on {@link Iterable} types. Has methods like {@code isEmpty()} / {@code isNotEmpty()}\n  * and others.\n  */\n-public interface IterableMatcher\u003cR, S, C, V\u003e  {\n+public interface IterableMatcher\u003cR, S, V\u003e  {\n \n   default S all() {\n     final UnaryOperator\u003cExpression\u003e expr \u003d e -\u003e Expressions.call(Operators.ALL, e);\n@@ -65,6 +65,6 @@\n \n   }\n \n-  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf, Self, Self, V\u003e {}\n+  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf\u003cV\u003e, Self\u003cV\u003e, V\u003e {}\n \n }\n",
    "projectName": "org.immutables",
    "lineNum": 25,
    "nodeStartChar": 864,
    "before": "/**   * Matcher on  {@link Iterable} types. Has methods like {@code isEmpty()} / {@code isNotEmpty()}and others.  */ public interface IterableMatcher\u003cR,S,C,V\u003e {   default S all(){     final UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.ALL,e);     return Matchers.extract(this).\u003cR,S\u003efactory().createNested(expr);   }   default S none(){     final UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.NONE,e);     return Matchers.extract(this).\u003cR,S\u003efactory().createNested(expr);   }   default S any(){     final UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.ANY,e);     return Matchers.extract(this).\u003cR,S\u003efactory().createNested(expr);   }   default S at(  int index){     throw new UnsupportedOperationException();   }   default R contains(  V value){     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(e -\u003e Expressions.call(Operators.CONTAINS,e));   }   default R isEmpty(){     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(e -\u003e Expressions.call(Operators.EMPTY,e));   }   default R isNotEmpty(){     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(e -\u003e Expressions.not(Expressions.call(Operators.EMPTY,e)));   }   default R hasSize(  int size){     UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.SIZE,e,Expressions.constant(size));     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(expr);   } interface Self\u003cV\u003e extends IterableMatcher\u003cSelf,Self,Self,V\u003e {   } } ",
    "after": "/**   * Matcher on  {@link Iterable} types. Has methods like {@code isEmpty()} / {@code isNotEmpty()}and others.  */ public interface IterableMatcher\u003cR,S,V\u003e {   default S all(){     final UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.ALL,e);     return Matchers.extract(this).\u003cR,S\u003efactory().createNested(expr);   }   default S none(){     final UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.NONE,e);     return Matchers.extract(this).\u003cR,S\u003efactory().createNested(expr);   }   default S any(){     final UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.ANY,e);     return Matchers.extract(this).\u003cR,S\u003efactory().createNested(expr);   }   default S at(  int index){     throw new UnsupportedOperationException();   }   default R contains(  V value){     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(e -\u003e Expressions.call(Operators.CONTAINS,e));   }   default R isEmpty(){     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(e -\u003e Expressions.call(Operators.EMPTY,e));   }   default R isNotEmpty(){     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(e -\u003e Expressions.not(Expressions.call(Operators.EMPTY,e)));   }   default R hasSize(  int size){     UnaryOperator\u003cExpression\u003e expr\u003de -\u003e Expressions.call(Operators.SIZE,e,Expressions.constant(size));     return Matchers.extract(this).\u003cR,S\u003efactory().createRoot(expr);   } interface Self\u003cV\u003e extends IterableMatcher\u003cSelf,Self,Self,V\u003e {   } } "
  },
  {
    "commitSHA1": "3f718145f6c76ca736cad21456c4420767c71b3e",
    "commitFile": "criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java",
    "patch": "diff --git a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\nindex 8798af0..066c0f4 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n@@ -26,7 +26,7 @@\n  * Matcher on {@link Iterable} types. Has methods like {@code isEmpty()} / {@code isNotEmpty()}\n  * and others.\n  */\n-public interface IterableMatcher\u003cR, S, C, V\u003e  {\n+public interface IterableMatcher\u003cR, S, V\u003e  {\n \n   default S all() {\n     final UnaryOperator\u003cExpression\u003e expr \u003d e -\u003e Expressions.call(Operators.ALL, e);\n@@ -65,6 +65,6 @@\n \n   }\n \n-  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf, Self, Self, V\u003e {}\n+  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf\u003cV\u003e, Self\u003cV\u003e, V\u003e {}\n \n }\ndiff --git a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\nindex 2de3844..9da8a08 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n@@ -89,7 +89,7 @@\n     return new Local();\n   }\n \n-  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, C, V\u003e collectionMatcher(CriteriaContext context) {\n+  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, V\u003e collectionMatcher(CriteriaContext context) {\n     Objects.requireNonNull(context, \"context\");\n \n     class Local implements IterableMatcher.Self, HasContext {\n@@ -99,7 +99,7 @@\n       }\n     }\n \n-    return (IterableMatcher\u003cR, S, C, V\u003e) new Local();\n+    return (IterableMatcher\u003cR, S, V\u003e) new Local();\n   }\n \n   public static \u003cT\u003e T create(Class\u003cT\u003e type, CriteriaContext context) {\ndiff --git a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\nindex 8798af0..066c0f4 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/IterableMatcher.java\n@@ -26,7 +26,7 @@\n  * Matcher on {@link Iterable} types. Has methods like {@code isEmpty()} / {@code isNotEmpty()}\n  * and others.\n  */\n-public interface IterableMatcher\u003cR, S, C, V\u003e  {\n+public interface IterableMatcher\u003cR, S, V\u003e  {\n \n   default S all() {\n     final UnaryOperator\u003cExpression\u003e expr \u003d e -\u003e Expressions.call(Operators.ALL, e);\n@@ -65,6 +65,6 @@\n \n   }\n \n-  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf, Self, Self, V\u003e {}\n+  interface Self\u003cV\u003e extends IterableMatcher\u003cSelf\u003cV\u003e, Self\u003cV\u003e, V\u003e {}\n \n }\n",
    "projectName": "org.immutables",
    "lineNum": 68,
    "nodeStartChar": 2325,
    "before": "IterableMatcher\u003cSelf,Self,Self,V\u003e",
    "after": "IterableMatcher\u003cSelf\u003cV\u003e,Self\u003cV\u003e,V\u003e"
  },
  {
    "commitSHA1": "3f718145f6c76ca736cad21456c4420767c71b3e",
    "commitFile": "criteria/common/src/org/immutables/criteria/matcher/Matchers.java",
    "patch": "diff --git a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\nindex 2de3844..9da8a08 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n@@ -89,7 +89,7 @@\n     return new Local();\n   }\n \n-  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, C, V\u003e collectionMatcher(CriteriaContext context) {\n+  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, V\u003e collectionMatcher(CriteriaContext context) {\n     Objects.requireNonNull(context, \"context\");\n \n     class Local implements IterableMatcher.Self, HasContext {\n@@ -99,7 +99,7 @@\n       }\n     }\n \n-    return (IterableMatcher\u003cR, S, C, V\u003e) new Local();\n+    return (IterableMatcher\u003cR, S, V\u003e) new Local();\n   }\n \n   public static \u003cT\u003e T create(Class\u003cT\u003e type, CriteriaContext context) {\n",
    "projectName": "org.immutables",
    "lineNum": 92,
    "nodeStartChar": 2807,
    "before": "IterableMatcher\u003cR,S,C,V\u003e",
    "after": "IterableMatcher\u003cR,S,V\u003e"
  },
  {
    "commitSHA1": "3f718145f6c76ca736cad21456c4420767c71b3e",
    "commitFile": "criteria/common/src/org/immutables/criteria/matcher/Matchers.java",
    "patch": "diff --git a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\nindex 2de3844..9da8a08 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/Matchers.java\n@@ -89,7 +89,7 @@\n     return new Local();\n   }\n \n-  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, C, V\u003e collectionMatcher(CriteriaContext context) {\n+  public static \u003cR, S, C, V\u003e IterableMatcher\u003cR, S, V\u003e collectionMatcher(CriteriaContext context) {\n     Objects.requireNonNull(context, \"context\");\n \n     class Local implements IterableMatcher.Self, HasContext {\n@@ -99,7 +99,7 @@\n       }\n     }\n \n-    return (IterableMatcher\u003cR, S, C, V\u003e) new Local();\n+    return (IterableMatcher\u003cR, S, V\u003e) new Local();\n   }\n \n   public static \u003cT\u003e T create(Class\u003cT\u003e type, CriteriaContext context) {\n",
    "projectName": "org.immutables",
    "lineNum": 102,
    "nodeStartChar": 3099,
    "before": "IterableMatcher\u003cR,S,C,V\u003e",
    "after": "IterableMatcher\u003cR,S,V\u003e"
  },
  {
    "commitSHA1": "9597f6207a4ca3db03a9f83bb3ae03272d431c55",
    "commitFile": "criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java",
    "patch": "diff --git a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\nindex 8e73ca5..40685c0 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n@@ -60,12 +60,12 @@\n     return isNotIn(values);\n   }\n \n-  default R isIn(Iterable\u003c? super V\u003e values) {\n+  default R isIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\n \n-  default R isNotIn(Iterable\u003c? super V\u003e values) {\n+  default R isNotIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.NOT_IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\ndiff --git a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\nindex 8e73ca5..40685c0 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n@@ -60,12 +60,12 @@\n     return isNotIn(values);\n   }\n \n-  default R isIn(Iterable\u003c? super V\u003e values) {\n+  default R isIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\n \n-  default R isNotIn(Iterable\u003c? super V\u003e values) {\n+  default R isNotIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.NOT_IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\n",
    "projectName": "org.immutables",
    "lineNum": 63,
    "nodeStartChar": 1982,
    "before": "? super V",
    "after": "? extends V"
  },
  {
    "commitSHA1": "9597f6207a4ca3db03a9f83bb3ae03272d431c55",
    "commitFile": "criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java",
    "patch": "diff --git a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\nindex 8e73ca5..40685c0 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n@@ -60,12 +60,12 @@\n     return isNotIn(values);\n   }\n \n-  default R isIn(Iterable\u003c? super V\u003e values) {\n+  default R isIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\n \n-  default R isNotIn(Iterable\u003c? super V\u003e values) {\n+  default R isNotIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.NOT_IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\ndiff --git a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\nindex 8e73ca5..40685c0 100644\n--- a/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n+++ b/criteria/common/src/org/immutables/criteria/matcher/ObjectMatcher.java\n@@ -60,12 +60,12 @@\n     return isNotIn(values);\n   }\n \n-  default R isIn(Iterable\u003c? super V\u003e values) {\n+  default R isIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\n \n-  default R isNotIn(Iterable\u003c? super V\u003e values) {\n+  default R isNotIn(Iterable\u003c? extends V\u003e values) {\n     Objects.requireNonNull(values, \"values\");\n     return Matchers.extract(this).\u003cR\u003efactory1().create1(e -\u003e Expressions.call(Operators.NOT_IN, e, Expressions.constant(ImmutableList.copyOf(values))));\n   }\n",
    "projectName": "org.immutables",
    "lineNum": 68,
    "nodeStartChar": 2232,
    "before": "? super V",
    "after": "? extends V"
  },
  {
    "commitSHA1": "f0e1915903497f4b617bc68dc23d25aa012e2c1c",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\nindex 122bd01..72ed577 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n@@ -166,7 +166,7 @@\n \n   private @Nullable ExecutableElement findMethod(TypeElement typeElement, String getter) {\n     for (ExecutableElement m : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n-      if (m.getSimpleName().contentEquals(getter)) {\n+      if (m.getSimpleName().contentEquals(getter) \u0026\u0026 m.getParameters().isEmpty()) {\n         return m;\n       }\n     }\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\nindex 122bd01..72ed577 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n@@ -166,7 +166,7 @@\n \n   private @Nullable ExecutableElement findMethod(TypeElement typeElement, String getter) {\n     for (ExecutableElement m : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n-      if (m.getSimpleName().contentEquals(getter)) {\n+      if (m.getSimpleName().contentEquals(getter) \u0026\u0026 m.getParameters().isEmpty()) {\n         return m;\n       }\n     }\n",
    "projectName": "org.immutables",
    "lineNum": 169,
    "nodeStartChar": 6536,
    "before": "m.getSimpleName().contentEquals(getter)",
    "after": "m.getSimpleName().contentEquals(getter) \u0026\u0026 m.getParameters().isEmpty()"
  },
  {
    "commitSHA1": "8bc29b1817d8e52186cda027391b1aee88ee786d",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\nindex 122bd01..72ed577 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n@@ -166,7 +166,7 @@\n \n   private @Nullable ExecutableElement findMethod(TypeElement typeElement, String getter) {\n     for (ExecutableElement m : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n-      if (m.getSimpleName().contentEquals(getter)) {\n+      if (m.getSimpleName().contentEquals(getter) \u0026\u0026 m.getParameters().isEmpty()) {\n         return m;\n       }\n     }\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\nindex 122bd01..72ed577 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/FromSupertypesModel.java\n@@ -166,7 +166,7 @@\n \n   private @Nullable ExecutableElement findMethod(TypeElement typeElement, String getter) {\n     for (ExecutableElement m : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n-      if (m.getSimpleName().contentEquals(getter)) {\n+      if (m.getSimpleName().contentEquals(getter) \u0026\u0026 m.getParameters().isEmpty()) {\n         return m;\n       }\n     }\n",
    "projectName": "org.immutables",
    "lineNum": 169,
    "nodeStartChar": 6536,
    "before": "m.getSimpleName().contentEquals(getter)",
    "after": "m.getSimpleName().contentEquals(getter) \u0026\u0026 m.getParameters().isEmpty()"
  },
  {
    "commitSHA1": "961fde5bd65035c6a75206490ddca5d09bac9cb1",
    "commitFile": "testing/src/org/immutables/check/IterableChecker.java",
    "patch": "diff --git a/testing/src/org/immutables/check/IterableChecker.java b/testing/src/org/immutables/check/IterableChecker.java\nindex 8b6ce37..c502c2e 100644\n--- a/testing/src/org/immutables/check/IterableChecker.java\n+++ b/testing/src/org/immutables/check/IterableChecker.java\n@@ -70,7 +70,7 @@\n     verifyUsingMatcher(Matchers.contains(elements));\n   }\n \n-  public void hasContentInAnyOrder(Iterable\u003cT\u003e elements) {\n+  public void hasContentInAnyOrder(Iterable\u003c? extends T\u003e elements) {\n     verifyUsingMatcher(Matchers.containsInAnyOrder(Iterables.toArray(elements, Object.class)));\n   }\n \ndiff --git a/testing/src/org/immutables/check/IterableChecker.java b/testing/src/org/immutables/check/IterableChecker.java\nindex 8b6ce37..c502c2e 100644\n--- a/testing/src/org/immutables/check/IterableChecker.java\n+++ b/testing/src/org/immutables/check/IterableChecker.java\n@@ -70,7 +70,7 @@\n     verifyUsingMatcher(Matchers.contains(elements));\n   }\n \n-  public void hasContentInAnyOrder(Iterable\u003cT\u003e elements) {\n+  public void hasContentInAnyOrder(Iterable\u003c? extends T\u003e elements) {\n     verifyUsingMatcher(Matchers.containsInAnyOrder(Iterables.toArray(elements, Object.class)));\n   }\n \n",
    "projectName": "org.immutables",
    "lineNum": 73,
    "nodeStartChar": 2211,
    "before": "T",
    "after": "? extends T"
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\nindex 4385f90..82b954a 100644\n--- a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n+++ b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n@@ -59,7 +59,7 @@\n   }\n \n   // Allows sharing tests between guava collections, jdk only collections and whatever other combinations are needed.\n-  private \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n+  private static \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n   void assertBasicApi(Class\u003cImmutableClassT\u003e immutableType, Class\u003cAbstractClassT\u003e returnType,\n       CopyFunction\u003cImmutableClassT, AbstractClassT\u003e copyFunction,\n       BuilderFunction\u003cAbstractClassT\u003e newBuilder) {\n",
    "projectName": "org.immutables",
    "lineNum": 62,
    "nodeStartChar": 3343,
    "before": "private \u003cImmutableClassT extends AttributeBuilderValueI,AbstractClassT extends AttributeBuilderValueI\u003evoid assertBasicApi(Class\u003cImmutableClassT\u003e immutableType,Class\u003cAbstractClassT\u003e returnType,CopyFunction\u003cImmutableClassT,AbstractClassT\u003e copyFunction,BuilderFunction\u003cAbstractClassT\u003e newBuilder){   FirstPartyImmutable firstPartyImmutable\u003dImmutableFirstPartyImmutable.builder().value(\"first party\").build();   FirstPartyImmutableWithDifferentStyle firstPartyImmutableWithDifferentStyle\u003dImmutableFirstPartyImmutableWithDifferentStyle.getTheBuilder().value(\"first party\").doIIT();   ThirdPartyImmutable thirdPartyImmutable\u003dThirdPartyImmutable.generateNewBuilder().setValue(\"third party\").doTheBuild();   ThirdPartyImmutableWithPrimitive thirdPartyImmutableWithPrimitive\u003dThirdPartyImmutableWithPrimitive.generateNewBuilder().setValue(1).doTheBuild(); {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder _firstPartyBuilder\u003dbuilder.firstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutableWithDifferentStyle.Abonabon _firstPartyBuilderWithDifferentStyle\u003dbuilder.firstPartyImmutableWithDifferentStyleBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableWithDifferentStyle().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyImmutableBuilder\u003dbuilder.thirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutable().getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dbuilder.addFirstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyBuilder\u003dbuilder.addThirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableList().get(0).getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     ThirdPartyImmutableWithPrimitive.Builder thirdPartyBuilder\u003dbuilder.thirdPartyImmutableWithPrimitiveBuilder().setValue(2);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableWithPrimitive().getValue()).is(2);   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter\");     builder.firstPartyImmutableBuilder(firstPartyBuilder);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through setter\");     firstPartyBuilder.value(\"another value\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutable().value()).is(\"another value\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder first\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 1\");     ImmutableFirstPartyImmutable.Builder second\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 2\");     ImmutableFirstPartyImmutable.Builder third\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 3\");     builder.addAllFirstPartyImmutableBuilders(first);     builder.addAllFirstPartyImmutableBuilders(Arrays.asList(second,third));     List\u003cBuilder\u003e builderList\u003dbuilder.firstPartyImmutableBuilders();     check(builderList.size()).is(3);     boolean thrown\u003dfalse;     try {       builderList.add(ImmutableFirstPartyImmutable.builder());     }  catch (    Exception e) {       thrown\u003dtrue;     }     check(\"Should not have been able to modify builder list, but could\",thrown);     check(builderList.size()).is(3);     builderList.get(1).value(\"first party through setter munged\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().size()).is(3);     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through setter 1\");     check(copy.firstPartyImmutableList().get(1).value()).is(\"first party through setter munged\");     check(copy.firstPartyImmutableList().get(2).value()).is(\"first party through setter 3\");     third.value(\"MUNGING\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutableList().get(2).value()).is(\"MUNGING\");   } } ",
    "after": "private static \u003cImmutableClassT extends AttributeBuilderValueI,AbstractClassT extends AttributeBuilderValueI\u003evoid assertBasicApi(Class\u003cImmutableClassT\u003e immutableType,Class\u003cAbstractClassT\u003e returnType,CopyFunction\u003cImmutableClassT,AbstractClassT\u003e copyFunction,BuilderFunction\u003cAbstractClassT\u003e newBuilder){   FirstPartyImmutable firstPartyImmutable\u003dImmutableFirstPartyImmutable.builder().value(\"first party\").build();   FirstPartyImmutableWithDifferentStyle firstPartyImmutableWithDifferentStyle\u003dImmutableFirstPartyImmutableWithDifferentStyle.getTheBuilder().value(\"first party\").doIIT();   ThirdPartyImmutable thirdPartyImmutable\u003dThirdPartyImmutable.generateNewBuilder().setValue(\"third party\").doTheBuild();   ThirdPartyImmutableWithPrimitive thirdPartyImmutableWithPrimitive\u003dThirdPartyImmutableWithPrimitive.generateNewBuilder().setValue(1).doTheBuild(); {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder _firstPartyBuilder\u003dbuilder.firstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutableWithDifferentStyle.Abonabon _firstPartyBuilderWithDifferentStyle\u003dbuilder.firstPartyImmutableWithDifferentStyleBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableWithDifferentStyle().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyImmutableBuilder\u003dbuilder.thirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutable().getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dbuilder.addFirstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyBuilder\u003dbuilder.addThirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableList().get(0).getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     ThirdPartyImmutableWithPrimitive.Builder thirdPartyBuilder\u003dbuilder.thirdPartyImmutableWithPrimitiveBuilder().setValue(2);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableWithPrimitive().getValue()).is(2);   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter\");     builder.firstPartyImmutableBuilder(firstPartyBuilder);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through setter\");     firstPartyBuilder.value(\"another value\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutable().value()).is(\"another value\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder first\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 1\");     ImmutableFirstPartyImmutable.Builder second\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 2\");     ImmutableFirstPartyImmutable.Builder third\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 3\");     builder.addAllFirstPartyImmutableBuilders(first);     builder.addAllFirstPartyImmutableBuilders(Arrays.asList(second,third));     List\u003cBuilder\u003e builderList\u003dbuilder.firstPartyImmutableBuilders();     check(builderList.size()).is(3);     boolean thrown\u003dfalse;     try {       builderList.add(ImmutableFirstPartyImmutable.builder());     }  catch (    Exception e) {       thrown\u003dtrue;     }     check(\"Should not have been able to modify builder list, but could\",thrown);     check(builderList.size()).is(3);     builderList.get(1).value(\"first party through setter munged\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().size()).is(3);     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through setter 1\");     check(copy.firstPartyImmutableList().get(1).value()).is(\"first party through setter munged\");     check(copy.firstPartyImmutableList().get(2).value()).is(\"first party through setter 3\");     third.value(\"MUNGING\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutableList().get(2).value()).is(\"MUNGING\");   } } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 115,
    "nodeStartChar": 3766,
    "before": "private ObjectMapper getMapper(final boolean useFields){   final ObjectMapper mapper\u003dnew ObjectMapper();   return useFields ? mapper.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.NONE).setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.ANY) : mapper; } ",
    "after": "private static ObjectMapper getMapper(final boolean useFields){   final ObjectMapper mapper\u003dnew ObjectMapper();   return useFields ? mapper.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.NONE).setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.ANY) : mapper; } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 123,
    "nodeStartChar": 4089,
    "before": "private void verifyRoundTrip(final ObjectMapper mapper,final Object value) throws IOException {   final String json\u003dmapper.writeValueAsString(value);   final Object newValue\u003dmapper.readValue(json,value.getClass());   check(newValue).is(value); } ",
    "after": "private static void verifyRoundTrip(final ObjectMapper mapper,final Object value) throws IOException {   final String json\u003dmapper.writeValueAsString(value);   final Object newValue\u003dmapper.readValue(json,value.getClass());   check(newValue).is(value); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 96,
    "nodeStartChar": 2823,
    "before": "private Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } ",
    "after": "private static Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 102,
    "nodeStartChar": 3084,
    "before": "private byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } ",
    "after": "private static byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 132,
    "nodeStartChar": 5393,
    "before": "private \u003cT\u003eList\u003cT\u003e fromJsonIterable(String json,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().fromJson(json,typeToken.getType()); } ",
    "after": "private static \u003cT\u003eList\u003cT\u003e fromJsonIterable(String json,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().fromJson(json,typeToken.getType()); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 136,
    "nodeStartChar": 5551,
    "before": "private \u003cT\u003eString toJsonIterable(List\u003c? extends T\u003e list,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().toJson(list,typeToken.getType()); } ",
    "after": "private static \u003cT\u003eString toJsonIterable(List\u003c? extends T\u003e list,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().toJson(list,typeToken.getType()); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 74,
    "nodeStartChar": 2469,
    "before": "private Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } ",
    "after": "private static Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 80,
    "nodeStartChar": 2730,
    "before": "private byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } ",
    "after": "private static byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } "
  },
  {
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\nindex ecb044f..11069ed 100644\n--- a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n+++ b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n@@ -34,7 +34,7 @@\n     check(sortedToStringsFrom(ServiceLoader.load(AutoCloseable.class))).isOf(\"NestedService.Service\");\n   }\n \n-  private TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n+  private static TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n     return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction()));\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 37,
    "nodeStartChar": 1303,
    "before": "private TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable){   return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction())); } ",
    "after": "private static TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable){   return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction())); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\nindex 4385f90..82b954a 100644\n--- a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n+++ b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n@@ -59,7 +59,7 @@\n   }\n \n   // Allows sharing tests between guava collections, jdk only collections and whatever other combinations are needed.\n-  private \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n+  private static \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n   void assertBasicApi(Class\u003cImmutableClassT\u003e immutableType, Class\u003cAbstractClassT\u003e returnType,\n       CopyFunction\u003cImmutableClassT, AbstractClassT\u003e copyFunction,\n       BuilderFunction\u003cAbstractClassT\u003e newBuilder) {\n",
    "projectName": "org.immutables",
    "lineNum": 62,
    "nodeStartChar": 3343,
    "before": "private \u003cImmutableClassT extends AttributeBuilderValueI,AbstractClassT extends AttributeBuilderValueI\u003evoid assertBasicApi(Class\u003cImmutableClassT\u003e immutableType,Class\u003cAbstractClassT\u003e returnType,CopyFunction\u003cImmutableClassT,AbstractClassT\u003e copyFunction,BuilderFunction\u003cAbstractClassT\u003e newBuilder){   FirstPartyImmutable firstPartyImmutable\u003dImmutableFirstPartyImmutable.builder().value(\"first party\").build();   FirstPartyImmutableWithDifferentStyle firstPartyImmutableWithDifferentStyle\u003dImmutableFirstPartyImmutableWithDifferentStyle.getTheBuilder().value(\"first party\").doIIT();   ThirdPartyImmutable thirdPartyImmutable\u003dThirdPartyImmutable.generateNewBuilder().setValue(\"third party\").doTheBuild();   ThirdPartyImmutableWithPrimitive thirdPartyImmutableWithPrimitive\u003dThirdPartyImmutableWithPrimitive.generateNewBuilder().setValue(1).doTheBuild(); {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder _firstPartyBuilder\u003dbuilder.firstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutableWithDifferentStyle.Abonabon _firstPartyBuilderWithDifferentStyle\u003dbuilder.firstPartyImmutableWithDifferentStyleBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableWithDifferentStyle().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyImmutableBuilder\u003dbuilder.thirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutable().getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dbuilder.addFirstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyBuilder\u003dbuilder.addThirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableList().get(0).getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     ThirdPartyImmutableWithPrimitive.Builder thirdPartyBuilder\u003dbuilder.thirdPartyImmutableWithPrimitiveBuilder().setValue(2);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableWithPrimitive().getValue()).is(2);   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter\");     builder.firstPartyImmutableBuilder(firstPartyBuilder);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through setter\");     firstPartyBuilder.value(\"another value\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutable().value()).is(\"another value\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder first\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 1\");     ImmutableFirstPartyImmutable.Builder second\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 2\");     ImmutableFirstPartyImmutable.Builder third\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 3\");     builder.addAllFirstPartyImmutableBuilders(first);     builder.addAllFirstPartyImmutableBuilders(Arrays.asList(second,third));     List\u003cBuilder\u003e builderList\u003dbuilder.firstPartyImmutableBuilders();     check(builderList.size()).is(3);     boolean thrown\u003dfalse;     try {       builderList.add(ImmutableFirstPartyImmutable.builder());     }  catch (    Exception e) {       thrown\u003dtrue;     }     check(\"Should not have been able to modify builder list, but could\",thrown);     check(builderList.size()).is(3);     builderList.get(1).value(\"first party through setter munged\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().size()).is(3);     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through setter 1\");     check(copy.firstPartyImmutableList().get(1).value()).is(\"first party through setter munged\");     check(copy.firstPartyImmutableList().get(2).value()).is(\"first party through setter 3\");     third.value(\"MUNGING\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutableList().get(2).value()).is(\"MUNGING\");   } } ",
    "after": "private static \u003cImmutableClassT extends AttributeBuilderValueI,AbstractClassT extends AttributeBuilderValueI\u003evoid assertBasicApi(Class\u003cImmutableClassT\u003e immutableType,Class\u003cAbstractClassT\u003e returnType,CopyFunction\u003cImmutableClassT,AbstractClassT\u003e copyFunction,BuilderFunction\u003cAbstractClassT\u003e newBuilder){   FirstPartyImmutable firstPartyImmutable\u003dImmutableFirstPartyImmutable.builder().value(\"first party\").build();   FirstPartyImmutableWithDifferentStyle firstPartyImmutableWithDifferentStyle\u003dImmutableFirstPartyImmutableWithDifferentStyle.getTheBuilder().value(\"first party\").doIIT();   ThirdPartyImmutable thirdPartyImmutable\u003dThirdPartyImmutable.generateNewBuilder().setValue(\"third party\").doTheBuild();   ThirdPartyImmutableWithPrimitive thirdPartyImmutableWithPrimitive\u003dThirdPartyImmutableWithPrimitive.generateNewBuilder().setValue(1).doTheBuild(); {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder _firstPartyBuilder\u003dbuilder.firstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutableWithDifferentStyle.Abonabon _firstPartyBuilderWithDifferentStyle\u003dbuilder.firstPartyImmutableWithDifferentStyleBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableWithDifferentStyle().value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyImmutableBuilder\u003dbuilder.thirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutable().getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dbuilder.addFirstPartyImmutableBuilder().value(\"first party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ThirdPartyImmutable.Builder thirdPartyBuilder\u003dbuilder.addThirdPartyImmutableBuilder().setValue(\"third party through attributeBuilder\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableList().get(0).getValue()).is(\"third party through attributeBuilder\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     ThirdPartyImmutableWithPrimitive.Builder thirdPartyBuilder\u003dbuilder.thirdPartyImmutableWithPrimitiveBuilder().setValue(2);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.thirdPartyImmutableWithPrimitive().getValue()).is(2);   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addFirstPartyImmutable(firstPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder firstPartyBuilder\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter\");     builder.firstPartyImmutableBuilder(firstPartyBuilder);     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutable().value()).is(\"first party through setter\");     firstPartyBuilder.value(\"another value\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutable().value()).is(\"another value\");   } {     AttributeBuilderBuilderI\u003cAbstractClassT\u003e builder\u003dnewBuilder.newBuilder();     builder.firstPartyImmutable(firstPartyImmutable);     builder.firstPartyImmutableWithDifferentStyle(firstPartyImmutableWithDifferentStyle);     builder.thirdPartyImmutable(thirdPartyImmutable);     builder.addThirdPartyImmutable(thirdPartyImmutable);     builder.thirdPartyImmutableWithPrimitive(thirdPartyImmutableWithPrimitive);     ImmutableFirstPartyImmutable.Builder first\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 1\");     ImmutableFirstPartyImmutable.Builder second\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 2\");     ImmutableFirstPartyImmutable.Builder third\u003dImmutableFirstPartyImmutable.builder().value(\"first party through setter 3\");     builder.addAllFirstPartyImmutableBuilders(first);     builder.addAllFirstPartyImmutableBuilders(Arrays.asList(second,third));     List\u003cBuilder\u003e builderList\u003dbuilder.firstPartyImmutableBuilders();     check(builderList.size()).is(3);     boolean thrown\u003dfalse;     try {       builderList.add(ImmutableFirstPartyImmutable.builder());     }  catch (    Exception e) {       thrown\u003dtrue;     }     check(\"Should not have been able to modify builder list, but could\",thrown);     check(builderList.size()).is(3);     builderList.get(1).value(\"first party through setter munged\");     ImmutableClassT copy\u003dcopyFunction.copy(builder.build());     check(copy.firstPartyImmutableList().size()).is(3);     check(copy.firstPartyImmutableList().get(0).value()).is(\"first party through setter 1\");     check(copy.firstPartyImmutableList().get(1).value()).is(\"first party through setter munged\");     check(copy.firstPartyImmutableList().get(2).value()).is(\"first party through setter 3\");     third.value(\"MUNGING\");     ImmutableClassT copy2\u003dcopyFunction.copy(builder.build());     check(copy2.firstPartyImmutableList().get(2).value()).is(\"MUNGING\");   } } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 115,
    "nodeStartChar": 3766,
    "before": "private ObjectMapper getMapper(final boolean useFields){   final ObjectMapper mapper\u003dnew ObjectMapper();   return useFields ? mapper.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.NONE).setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.ANY) : mapper; } ",
    "after": "private static ObjectMapper getMapper(final boolean useFields){   final ObjectMapper mapper\u003dnew ObjectMapper();   return useFields ? mapper.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.NONE).setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.ANY) : mapper; } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 123,
    "nodeStartChar": 4089,
    "before": "private void verifyRoundTrip(final ObjectMapper mapper,final Object value) throws IOException {   final String json\u003dmapper.writeValueAsString(value);   final Object newValue\u003dmapper.readValue(json,value.getClass());   check(newValue).is(value); } ",
    "after": "private static void verifyRoundTrip(final ObjectMapper mapper,final Object value) throws IOException {   final String json\u003dmapper.writeValueAsString(value);   final Object newValue\u003dmapper.readValue(json,value.getClass());   check(newValue).is(value); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 96,
    "nodeStartChar": 2823,
    "before": "private Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } ",
    "after": "private static Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 102,
    "nodeStartChar": 3084,
    "before": "private byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } ",
    "after": "private static byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 132,
    "nodeStartChar": 5393,
    "before": "private \u003cT\u003eList\u003cT\u003e fromJsonIterable(String json,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().fromJson(json,typeToken.getType()); } ",
    "after": "private static \u003cT\u003eList\u003cT\u003e fromJsonIterable(String json,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().fromJson(json,typeToken.getType()); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 136,
    "nodeStartChar": 5551,
    "before": "private \u003cT\u003eString toJsonIterable(List\u003c? extends T\u003e list,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().toJson(list,typeToken.getType()); } ",
    "after": "private static \u003cT\u003eString toJsonIterable(List\u003c? extends T\u003e list,TypeToken\u003cList\u003cT\u003e\u003e typeToken){   return Marshaling.getGson().toJson(list,typeToken.getType()); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 74,
    "nodeStartChar": 2469,
    "before": "private Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } ",
    "after": "private static Serializable deserialize(byte[] bytes) throws Exception {   ByteArrayInputStream stream\u003dnew ByteArrayInputStream(bytes);   ObjectInputStream objectStream\u003dnew ObjectInputStream(stream);   return (Serializable)objectStream.readObject(); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 80,
    "nodeStartChar": 2730,
    "before": "private byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } ",
    "after": "private static byte[] serialize(Serializable instance) throws Exception {   ByteArrayOutputStream stream\u003dnew ByteArrayOutputStream();   ObjectOutputStream objectStream\u003dnew ObjectOutputStream(stream);   objectStream.writeObject(instance);   objectStream.close();   return stream.toByteArray(); } "
  },
  {
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\nindex ecb044f..11069ed 100644\n--- a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n+++ b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n@@ -34,7 +34,7 @@\n     check(sortedToStringsFrom(ServiceLoader.load(AutoCloseable.class))).isOf(\"NestedService.Service\");\n   }\n \n-  private TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n+  private static TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n     return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction()));\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 37,
    "nodeStartChar": 1303,
    "before": "private TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable){   return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction())); } ",
    "after": "private static TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable){   return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction())); } "
  },
  {
    "commitSHA1": "a1fd025984d458e93a32fb7d2d11a9dc0246642e",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java b/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java\nindex f04b6a0..c2d4a6a 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java\n@@ -424,7 +424,7 @@\n         } else if (onValueType\n             \u0026\u0026 candidateCopyMethod.getParameters().size() \u003d\u003d 0\n             \u0026\u0026 !candidateCopyMethod.getModifiers().contains(Modifier.STATIC)) {\n-          return true;\n+          return !candidateCopyMethod.getReturnType().getKind().isPrimitive();\n         }\n       } else if (!onValueType \u0026\u0026 possibleCopyMethod.getKind() \u003d\u003d ElementKind.CONSTRUCTOR) {\n \ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java b/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java\nindex f04b6a0..c2d4a6a 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AttributeBuilderReflection.java\n@@ -424,7 +424,7 @@\n         } else if (onValueType\n             \u0026\u0026 candidateCopyMethod.getParameters().size() \u003d\u003d 0\n             \u0026\u0026 !candidateCopyMethod.getModifiers().contains(Modifier.STATIC)) {\n-          return true;\n+          return !candidateCopyMethod.getReturnType().getKind().isPrimitive();\n         }\n       } else if (!onValueType \u0026\u0026 possibleCopyMethod.getKind() \u003d\u003d ElementKind.CONSTRUCTOR) {\n \n",
    "projectName": "org.immutables",
    "lineNum": 427,
    "nodeStartChar": 17089,
    "before": "true",
    "after": "!candidateCopyMethod.getReturnType().getKind().isPrimitive()"
  },
  {
    "commitSHA1": "3a905200ba184c59f9c3b9b6c252d50f251bd795",
    "commitFile": "mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java",
    "patch": "diff --git a/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java b/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java\nindex 3b006d7..5bd9d44 100644\n--- a/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java\n+++ b/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java\n@@ -21,7 +21,7 @@\n \n   @Test\n   public void index1() throws Exception {\n-    repository.index().withId().named(\"id\").expireAfterSeconds(1).ensure().getUnchecked();\n+    repository.index().withId().named(\"id\").ensure().getUnchecked();\n     repository.index().withString().named(\"string\").unique().expireAfterSeconds(2).ensure().getUnchecked();\n     repository.index().withLongValue().named(\"longValue\").expireAfterSeconds(3).ensure().getUnchecked();\n     repository.index().withDoubleValue().named(\"doubleValue\").ensure().getUnchecked();\ndiff --git a/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java b/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java\nindex 3b006d7..5bd9d44 100644\n--- a/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java\n+++ b/mongo/test/org/immutables/mongo/fixture/SimpleIndexerTest.java\n@@ -21,7 +21,7 @@\n \n   @Test\n   public void index1() throws Exception {\n-    repository.index().withId().named(\"id\").expireAfterSeconds(1).ensure().getUnchecked();\n+    repository.index().withId().named(\"id\").ensure().getUnchecked();\n     repository.index().withString().named(\"string\").unique().expireAfterSeconds(2).ensure().getUnchecked();\n     repository.index().withLongValue().named(\"longValue\").expireAfterSeconds(3).ensure().getUnchecked();\n     repository.index().withDoubleValue().named(\"doubleValue\").ensure().getUnchecked();\n",
    "projectName": "org.immutables",
    "lineNum": 24,
    "nodeStartChar": 594,
    "before": "repository.index()",
    "after": "repository"
  },
  {
    "commitSHA1": "3a768ad0320a13a6a85d285482a5847398851db9",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/Round.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java\nindex d2f7fda..8774c76 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/Round.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java\n@@ -113,7 +113,7 @@\n   }\n \n   private Set\u003cElement\u003e allAnnotatedElements() {\n-    Set\u003cElement\u003e elements \u003d Sets.newHashSetWithExpectedSize(100);\n+    Set\u003cElement\u003e elements \u003d Sets.newLinkedHashSetWithExpectedSize(100);\n     for (TypeElement annotation : annotations()) {\n       Set\u003c? extends Element\u003e annotatedElements \u003d round().getElementsAnnotatedWith(annotation);\n       checkAnnotation(annotation, annotatedElements);\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java\nindex d2f7fda..8774c76 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/Round.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java\n@@ -113,7 +113,7 @@\n   }\n \n   private Set\u003cElement\u003e allAnnotatedElements() {\n-    Set\u003cElement\u003e elements \u003d Sets.newHashSetWithExpectedSize(100);\n+    Set\u003cElement\u003e elements \u003d Sets.newLinkedHashSetWithExpectedSize(100);\n     for (TypeElement annotation : annotations()) {\n       Set\u003c? extends Element\u003e annotatedElements \u003d round().getElementsAnnotatedWith(annotation);\n       checkAnnotation(annotation, annotatedElements);\n",
    "projectName": "org.immutables",
    "lineNum": 116,
    "nodeStartChar": 4272,
    "before": "Sets.newHashSetWithExpectedSize(100)",
    "after": "Sets.newLinkedHashSetWithExpectedSize(100)"
  },
  {
    "commitSHA1": "b3ec64ffeff170993ab0128b4bda3b21822d0855",
    "commitFile": "value-processor/src/org/immutables/value/processor/encode/Type.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/encode/Type.java b/value-processor/src/org/immutables/value/processor/encode/Type.java\nindex ca05109..43273cf 100644\n--- a/value-processor/src/org/immutables/value/processor/encode/Type.java\n+++ b/value-processor/src/org/immutables/value/processor/encode/Type.java\n@@ -552,7 +552,7 @@\n \n     @Override\n     public Type array(Array array) {\n-      return new Array(array.accept(this), array.varargs);\n+      return new Array(array.element.accept(this), array.varargs);\n     }\n \n     @Override\ndiff --git a/value-processor/src/org/immutables/value/processor/encode/Type.java b/value-processor/src/org/immutables/value/processor/encode/Type.java\nindex ca05109..43273cf 100644\n--- a/value-processor/src/org/immutables/value/processor/encode/Type.java\n+++ b/value-processor/src/org/immutables/value/processor/encode/Type.java\n@@ -552,7 +552,7 @@\n \n     @Override\n     public Type array(Array array) {\n-      return new Array(array.accept(this), array.varargs);\n+      return new Array(array.element.accept(this), array.varargs);\n     }\n \n     @Override\n",
    "projectName": "org.immutables",
    "lineNum": 555,
    "nodeStartChar": 14914,
    "before": "array",
    "after": "array.element"
  },
  {
    "commitSHA1": "636e1fe4304bc1fd92417acce09e43e6adaab539",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\n",
    "projectName": "org.immutables",
    "lineNum": 278,
    "nodeStartChar": 11493,
    "before": "\"@Value.Default attibute should have initializer body\"",
    "after": "\"@Value.Default attribute should have initializer body\""
  },
  {
    "commitSHA1": "636e1fe4304bc1fd92417acce09e43e6adaab539",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\n",
    "projectName": "org.immutables",
    "lineNum": 289,
    "nodeStartChar": 12030,
    "before": "\"@Value.Derived attibute should have initializer body\"",
    "after": "\"@Value.Derived attribute should have initializer body\""
  },
  {
    "commitSHA1": "541e238981dc54cb133f8ed48adc04b84e0af8ac",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\n",
    "projectName": "org.immutables",
    "lineNum": 278,
    "nodeStartChar": 11493,
    "before": "\"@Value.Default attibute should have initializer body\"",
    "after": "\"@Value.Default attribute should have initializer body\""
  },
  {
    "commitSHA1": "541e238981dc54cb133f8ed48adc04b84e0af8ac",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\nindex 5e5bdc1..f300a25 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/AccessorAttributesCollector.java\n@@ -275,7 +275,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DefaultMirror.simpleName())\n-                  .error(\"@Value.Default attibute should have initializer body\", name);\n+                  .error(\"@Value.Default attribute should have initializer body\", name);\n             }\n           }\n           if (derivedAnnotationPresent) {\n@@ -286,7 +286,7 @@\n             } else {\n               report(attributeMethodCandidate)\n                   .annotationNamed(DerivedMirror.simpleName())\n-                  .error(\"@Value.Derived attibute should have initializer body\", name);\n+                  .error(\"@Value.Derived attribute should have initializer body\", name);\n             }\n           }\n         }\n",
    "projectName": "org.immutables",
    "lineNum": 289,
    "nodeStartChar": 12030,
    "before": "\"@Value.Derived attibute should have initializer body\"",
    "after": "\"@Value.Derived attribute should have initializer body\""
  },
  {
    "commitSHA1": "d10890df08827213097c53343b6901a6a540f518",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java b/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java\nindex 6a9250f..a034cb5 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java\n@@ -838,7 +838,7 @@\n       typeKind \u003d AttributeTypeKind.REGULAR;\n       report()\n           .annotationNamed(DefaultMirror.simpleName())\n-          .warning(\"@Value.Default on a container attribute make it lose it\u0027s special treatment\");\n+          .warning(\"@Value.Default on a container attribute make it lose its special treatment\");\n     }\n   }\n \n",
    "projectName": "org.immutables",
    "lineNum": 841,
    "nodeStartChar": 25133,
    "before": "\"@Value.Default on a container attribute make it lose it\u0027s special treatment\"",
    "after": "\"@Value.Default on a container attribute make it lose its special treatment\""
  },
  {
    "commitSHA1": "36c259420be23d65adc80b3371f492225fd50ebf",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java b/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java\nindex 6a9250f..a034cb5 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java\n@@ -838,7 +838,7 @@\n       typeKind \u003d AttributeTypeKind.REGULAR;\n       report()\n           .annotationNamed(DefaultMirror.simpleName())\n-          .warning(\"@Value.Default on a container attribute make it lose it\u0027s special treatment\");\n+          .warning(\"@Value.Default on a container attribute make it lose its special treatment\");\n     }\n   }\n \n",
    "projectName": "org.immutables",
    "lineNum": 841,
    "nodeStartChar": 25133,
    "before": "\"@Value.Default on a container attribute make it lose it\u0027s special treatment\"",
    "after": "\"@Value.Default on a container attribute make it lose its special treatment\""
  },
  {
    "commitSHA1": "3ddf1b88dba642a9d0339f84b7fd040c507dc222",
    "commitFile": "value/src/org/immutables/value/Value.java",
    "patch": "diff --git a/value/src/org/immutables/value/Value.java b/value/src/org/immutables/value/Value.java\nindex bc53db2..06159ba 100644\n--- a/value/src/org/immutables/value/Value.java\n+++ b/value/src/org/immutables/value/Value.java\n@@ -714,7 +714,7 @@\n      * Exception to throw when an immutable object is in an invalid state. The Throwable must have\n      * a constructor that takes a single string\n      */\n-    Class\u003c? extends Exception\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n+    Class\u003c? extends RuntimeException\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n \n     /**\n      * If implementation visibility is more restrictive than visibility of abstract value type, then\ndiff --git a/value/src/org/immutables/value/Value.java b/value/src/org/immutables/value/Value.java\nindex bc53db2..06159ba 100644\n--- a/value/src/org/immutables/value/Value.java\n+++ b/value/src/org/immutables/value/Value.java\n@@ -714,7 +714,7 @@\n      * Exception to throw when an immutable object is in an invalid state. The Throwable must have\n      * a constructor that takes a single string\n      */\n-    Class\u003c? extends Exception\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n+    Class\u003c? extends RuntimeException\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n \n     /**\n      * If implementation visibility is more restrictive than visibility of abstract value type, then\n",
    "projectName": "org.immutables",
    "lineNum": 717,
    "nodeStartChar": 29384,
    "before": "Exception",
    "after": "RuntimeException"
  },
  {
    "commitSHA1": "c36eee7e22e85496700f161d4704a06fb9425ee5",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 968a241..a716bad 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -63,7 +63,7 @@\n   public void unmarshalSingleton() {\n     check(Marshaling.fromJson(\"[11]\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n     check(Marshaling.fromJson(\"{\\\"x\\\": true}\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n-    check(Marshaling.fromJson(\"null\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n+    check(Marshaling.fromJson(\"{}\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n   }\n \n   @Test\ndiff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 968a241..a716bad 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -63,7 +63,7 @@\n   public void unmarshalSingleton() {\n     check(Marshaling.fromJson(\"[11]\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n     check(Marshaling.fromJson(\"{\\\"x\\\": true}\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n-    check(Marshaling.fromJson(\"null\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n+    check(Marshaling.fromJson(\"{}\", NonGrouped.Cadabra.class)).same(ImmutableCadabra.of());\n   }\n \n   @Test\n",
    "projectName": "org.immutables",
    "lineNum": 66,
    "nodeStartChar": 2641,
    "before": "\"null\"",
    "after": "\"{}\""
  },
  {
    "commitSHA1": "df2088410fe07bad00eeda450dc3f068d47ad806",
    "commitFile": "gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java",
    "patch": "diff --git a/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java b/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java\nindex eb44efe..b575e8a 100644\n--- a/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java\n+++ b/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java\n@@ -9,7 +9,7 @@\n public class AdaptReadWriteTest {\n \n   private final Gson gson \u003d new GsonBuilder()\n-      .registerTypeAdapterFactory(new AdaptTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersAdapt())\n       .create();\n \n   private final Adapt adapt \u003d\n",
    "projectName": "org.immutables",
    "lineNum": 12,
    "nodeStartChar": 341,
    "before": "AdaptTypeAdapters",
    "after": "GsonAdaptersAdapt"
  },
  {
    "commitSHA1": "df2088410fe07bad00eeda450dc3f068d47ad806",
    "commitFile": "gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java",
    "patch": "diff --git a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\nindex 70b3852..90a9059 100644\n--- a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n+++ b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n@@ -15,13 +15,13 @@\n   final Gson gsonWithOptions \u003d new GsonBuilder()\n       .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n       .serializeNulls()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   final Gson gsonDefault \u003d new GsonBuilder()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   @Test\n",
    "projectName": "org.immutables",
    "lineNum": 18,
    "nodeStartChar": 596,
    "before": "SimpleTypeAdapters",
    "after": "GsonAdaptersSimple"
  },
  {
    "commitSHA1": "df2088410fe07bad00eeda450dc3f068d47ad806",
    "commitFile": "gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java",
    "patch": "diff --git a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\nindex 70b3852..90a9059 100644\n--- a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n+++ b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n@@ -15,13 +15,13 @@\n   final Gson gsonWithOptions \u003d new GsonBuilder()\n       .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n       .serializeNulls()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   final Gson gsonDefault \u003d new GsonBuilder()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   @Test\n",
    "projectName": "org.immutables",
    "lineNum": 23,
    "nodeStartChar": 781,
    "before": "SimpleTypeAdapters",
    "after": "GsonAdaptersSimple"
  },
  {
    "commitSHA1": "bbef3441b9c0993b09e30f5000b5c19c172f11fb",
    "commitFile": "common/src/org/immutables/common/jdbi/MapperFactory.java",
    "patch": "diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java\nindex 46b88ff..338496c 100644\n--- a/common/src/org/immutables/common/jdbi/MapperFactory.java\n+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java\n@@ -72,7 +72,7 @@\n       ResultSetMetaData metaData \u003d result.getMetaData();\n       for (int j \u003d 0; j \u003c metaData.getColumnCount(); j++) {\n         int i \u003d j + 1;\n-        String name \u003d toLowerCamel(metaData.getColumnName(i));\n+        String name \u003d toLowerCamel(metaData.getColumnLabel(i));\n         switch (metaData.getColumnType(i)) {\n         case Types.VARCHAR://$FALL-THROUGH$\n         case Types.LONGVARCHAR://$FALL-THROUGH$\ndiff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java\nindex 46b88ff..338496c 100644\n--- a/common/src/org/immutables/common/jdbi/MapperFactory.java\n+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java\n@@ -72,7 +72,7 @@\n       ResultSetMetaData metaData \u003d result.getMetaData();\n       for (int j \u003d 0; j \u003c metaData.getColumnCount(); j++) {\n         int i \u003d j + 1;\n-        String name \u003d toLowerCamel(metaData.getColumnName(i));\n+        String name \u003d toLowerCamel(metaData.getColumnLabel(i));\n         switch (metaData.getColumnType(i)) {\n         case Types.VARCHAR://$FALL-THROUGH$\n         case Types.LONGVARCHAR://$FALL-THROUGH$\n",
    "projectName": "org.immutables",
    "lineNum": 75,
    "nodeStartChar": 2712,
    "before": "metaData.getColumnName(i)",
    "after": "metaData.getColumnLabel(i)"
  },
  {
    "commitSHA1": "cc714f97df8c59db401c6d68362aa4076584218a",
    "commitFile": "common/src/org/immutables/common/repository/Repositories.java",
    "patch": "diff --git a/common/src/org/immutables/common/repository/Repositories.java b/common/src/org/immutables/common/repository/Repositories.java\nindex 1c539b3..9beb06d 100644\n--- a/common/src/org/immutables/common/repository/Repositories.java\n+++ b/common/src/org/immutables/common/repository/Repositories.java\n@@ -249,7 +249,7 @@\n           DBCursor cursor \u003d collection.find(query, keys);\n \n           if (!ordering.isNil()) {\n-            cursor.sort(extractDbObject(exclusion));\n+            cursor.sort(extractDbObject(ordering));\n           }\n \n           cursor.skip(skip);\ndiff --git a/common/src/org/immutables/common/repository/Repositories.java b/common/src/org/immutables/common/repository/Repositories.java\nindex 1c539b3..9beb06d 100644\n--- a/common/src/org/immutables/common/repository/Repositories.java\n+++ b/common/src/org/immutables/common/repository/Repositories.java\n@@ -249,7 +249,7 @@\n           DBCursor cursor \u003d collection.find(query, keys);\n \n           if (!ordering.isNil()) {\n-            cursor.sort(extractDbObject(exclusion));\n+            cursor.sort(extractDbObject(ordering));\n           }\n \n           cursor.skip(skip);\n",
    "projectName": "org.immutables",
    "lineNum": 252,
    "nodeStartChar": 9031,
    "before": "extractDbObject(exclusion)",
    "after": "extractDbObject(ordering)"
  },
  {
    "commitSHA1": "c8ec26522614ee3eb9a961047303c70c78e313f9",
    "commitFile": "common/src/org/immutables/common/collect/ImmutableOrdinalSet.java",
    "patch": "diff --git a/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java b/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java\nindex 0cf62f4..1b250d0 100644\n--- a/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java\n+++ b/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java\n@@ -312,7 +312,7 @@\n     private boolean containsOrdinal(int ordinal) {\n       int wordIndex \u003d ordinal \u003e\u003e\u003e POWER_OF_TWO_WORD_BITS;\n       int bitIndex \u003d ordinal - (wordIndex \u003c\u003c POWER_OF_TWO_WORD_BITS);\n-      return ((vector[wordIndex] \u003e\u003e\u003e bitIndex) \u0026 1) !\u003d 0;\n+      return (wordIndex \u003c vector.length) \u0026\u0026 ((vector[wordIndex] \u003e\u003e\u003e bitIndex) \u0026 1) !\u003d 0;\n     }\n \n     private boolean containsAllOrdinals(RegularImmutableOrdinalSet\u003c?\u003e ordinalSet) {\ndiff --git a/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java b/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java\nindex 0cf62f4..1b250d0 100644\n--- a/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java\n+++ b/common/src/org/immutables/common/collect/ImmutableOrdinalSet.java\n@@ -312,7 +312,7 @@\n     private boolean containsOrdinal(int ordinal) {\n       int wordIndex \u003d ordinal \u003e\u003e\u003e POWER_OF_TWO_WORD_BITS;\n       int bitIndex \u003d ordinal - (wordIndex \u003c\u003c POWER_OF_TWO_WORD_BITS);\n-      return ((vector[wordIndex] \u003e\u003e\u003e bitIndex) \u0026 1) !\u003d 0;\n+      return (wordIndex \u003c vector.length) \u0026\u0026 ((vector[wordIndex] \u003e\u003e\u003e bitIndex) \u0026 1) !\u003d 0;\n     }\n \n     private boolean containsAllOrdinals(RegularImmutableOrdinalSet\u003c?\u003e ordinalSet) {\n",
    "projectName": "org.immutables",
    "lineNum": 315,
    "nodeStartChar": 9638,
    "before": "((vector[wordIndex] \u003e\u003e\u003e bitIndex) \u0026 1) !\u003d 0",
    "after": "(wordIndex \u003c vector.length) \u0026\u0026 ((vector[wordIndex] \u003e\u003e\u003e bitIndex) \u0026 1) !\u003d 0"
  },
  {
    "commitSHA1": "722efbe5376c40e4d0c660a799f24cc1c24a43c1",
    "commitFile": "common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java",
    "patch": "diff --git a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\nindex 54a7282..01cedea 100644\n--- a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n+++ b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n@@ -298,7 +298,7 @@\n   public static TimeMeasure unmarshal(\n       JsonParser parser,\n       @Nullable TimeMeasure instantNull,\n-      Class\u003cTimeInstant\u003e expectedClass) throws IOException {\n+      Class\u003cTimeMeasure\u003e expectedClass) throws IOException {\n     return TimeMeasure.fromString(parser.getText());\n   }\n \ndiff --git a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\nindex 54a7282..01cedea 100644\n--- a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n+++ b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n@@ -298,7 +298,7 @@\n   public static TimeMeasure unmarshal(\n       JsonParser parser,\n       @Nullable TimeMeasure instantNull,\n-      Class\u003cTimeInstant\u003e expectedClass) throws IOException {\n+      Class\u003cTimeMeasure\u003e expectedClass) throws IOException {\n     return TimeMeasure.fromString(parser.getText());\n   }\n \n",
    "projectName": "org.immutables",
    "lineNum": 301,
    "nodeStartChar": 8833,
    "before": "TimeInstant",
    "after": "TimeMeasure"
  },
  {
    "commitSHA1": "ede646b562d041b974b12ea8d98cf2575130d5a7",
    "commitFile": "generate-fixture/test/org/immutables/generate/silly/CriteriaBuilderTest.java",
    "patch": "diff --git a/generate-fixture/test/org/immutables/generate/silly/CriteriaBuilderTest.java b/generate-fixture/test/org/immutables/generate/silly/CriteriaBuilderTest.java\nindex 5038c32..2e50df5 100644\n--- a/generate-fixture/test/org/immutables/generate/silly/CriteriaBuilderTest.java\n+++ b/generate-fixture/test/org/immutables/generate/silly/CriteriaBuilderTest.java\n@@ -13,7 +13,7 @@\n \n   @Test\n   public void ranges() {\n-    check(stringify(where().attr1AtLeast(\"1\")))\n+    check(stringify(SillyStructureWithIdRepository.where().attr1AtLeast(\"1\")))\n         .is(\"{ \u0027attr1\u0027 : { \u0027$gte\u0027 : \u00271\u0027}}\");\n \n     check(stringify(where().attr1LessThan(\"ZZZ\")))\n",
    "projectName": "org.immutables",
    "lineNum": 16,
    "nodeStartChar": 574,
    "before": "where()",
    "after": "SillyStructureWithIdRepository.where()"
  },
  {
    "commitSHA1": "1d92b4cc047848dabc029b06303554f11336dc5e",
    "commitFile": "src/main/java/org/jsoftbiz/utils/OS.java",
    "patch": "diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 89da6fc..6031d3d 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -204,7 +204,7 @@\n         return filename.endsWith(fileEndingWith);\n       }\n     });\n-    if (fileList.length \u003e 0)\n+    if (fileList !\u003d null \u0026\u0026 fileList.length \u003e 0)\n       return fileList[0].getAbsolutePath();\n     else\n       return null;\ndiff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 89da6fc..6031d3d 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -204,7 +204,7 @@\n         return filename.endsWith(fileEndingWith);\n       }\n     });\n-    if (fileList.length \u003e 0)\n+    if (fileList !\u003d null \u0026\u0026 fileList.length \u003e 0)\n       return fileList[0].getAbsolutePath();\n     else\n       return null;\n",
    "projectName": "os-platform-finder",
    "lineNum": 207,
    "nodeStartChar": 6675,
    "before": "fileList.length \u003e 0",
    "after": "fileList !\u003d null \u0026\u0026 fileList.length \u003e 0"
  },
  {
    "commitSHA1": "bd0f8559c45640530bd5f339c6fffc43214a8688",
    "commitFile": "src/main/java/org/jsoftbiz/utils/OS.java",
    "patch": "diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 241cdcb..6d4b862 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -104,8 +104,8 @@\n         return returnDarwinOsInfo(name, version, arch);\n       }\n \n-      // Try to detect a unix platform, now the fun begins\n-      if (name.startsWith(\"Linux\")) {\n+      // Try to detect other POSIX compliant platforms, now the fun begins\n+      if (name.startsWith(\"Linux\") || name.startsWith(\"SunOS\")) {\n         return returnLinuxOsInfo(name, version, arch);\n       }\n     }\ndiff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 241cdcb..6d4b862 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -104,8 +104,8 @@\n         return returnDarwinOsInfo(name, version, arch);\n       }\n \n-      // Try to detect a unix platform, now the fun begins\n-      if (name.startsWith(\"Linux\")) {\n+      // Try to detect other POSIX compliant platforms, now the fun begins\n+      if (name.startsWith(\"Linux\") || name.startsWith(\"SunOS\")) {\n         return returnLinuxOsInfo(name, version, arch);\n       }\n     }\n",
    "projectName": "os-platform-finder",
    "lineNum": 108,
    "nodeStartChar": 2652,
    "before": "name.startsWith(\"Linux\")",
    "after": "name.startsWith(\"Linux\") || name.startsWith(\"SunOS\")"
  },
  {
    "commitSHA1": "8e87e8c5ae159c58b881fad5d723ec6fdf518114",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex 69abc8d..8f7b55f 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -129,8 +129,8 @@\n             }\n             \n             return links.stream()\n-                   .filter(s -\u003e !(s.startsWith(\".\") || s.startsWith(\"..\")))\n-                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // \n+                   .filter(s -\u003e !s.startsWith(\".\"))\n+                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // XXX: Don\u0027t use onError here?\n                    .filter(Optional::isPresent)\n                    .map(Optional::get)\n                    .collect(Collectors.toSet());\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\nindex c8fb401..c4f60ad 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n@@ -144,7 +144,7 @@\n         Objects.requireNonNull(ref);\n         Objects.requireNonNull(srcUrl);\n         \n-        return ref.matches(\"^http.+\")\n+        return ref.matches(\"^http[s]*:\\\\/\\\\/.+\")\n                 ? ref\n                 : combinePath(srcUrl, ref);\n     }\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex 69abc8d..8f7b55f 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -129,8 +129,8 @@\n             }\n             \n             return links.stream()\n-                   .filter(s -\u003e !(s.startsWith(\".\") || s.startsWith(\"..\")))\n-                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // \n+                   .filter(s -\u003e !s.startsWith(\".\"))\n+                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // XXX: Don\u0027t use onError here?\n                    .filter(Optional::isPresent)\n                    .map(Optional::get)\n                    .collect(Collectors.toSet());\n",
    "projectName": "osgi-http",
    "lineNum": 132,
    "nodeStartChar": 4665,
    "before": "(s.startsWith(\".\") || s.startsWith(\"..\"))",
    "after": "s.startsWith(\".\")"
  },
  {
    "commitSHA1": "8e87e8c5ae159c58b881fad5d723ec6fdf518114",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\nindex c8fb401..c4f60ad 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n@@ -144,7 +144,7 @@\n         Objects.requireNonNull(ref);\n         Objects.requireNonNull(srcUrl);\n         \n-        return ref.matches(\"^http.+\")\n+        return ref.matches(\"^http[s]*:\\\\/\\\\/.+\")\n                 ? ref\n                 : combinePath(srcUrl, ref);\n     }\n",
    "projectName": "osgi-http",
    "lineNum": 147,
    "nodeStartChar": 5143,
    "before": "\"^http.+\"",
    "after": "\"^http[s]*:\\\\/\\\\/.+\""
  },
  {
    "commitSHA1": "d0f72878d54d8b07cca5a37691af9e7f3f7113db",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex 69abc8d..8f7b55f 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -129,8 +129,8 @@\n             }\n             \n             return links.stream()\n-                   .filter(s -\u003e !(s.startsWith(\".\") || s.startsWith(\"..\")))\n-                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // \n+                   .filter(s -\u003e !s.startsWith(\".\"))\n+                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // XXX: Don\u0027t use onError here?\n                    .filter(Optional::isPresent)\n                    .map(Optional::get)\n                    .collect(Collectors.toSet());\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\nindex c8fb401..c4f60ad 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n@@ -144,7 +144,7 @@\n         Objects.requireNonNull(ref);\n         Objects.requireNonNull(srcUrl);\n         \n-        return ref.matches(\"^http.+\")\n+        return ref.matches(\"^http[s]*:\\\\/\\\\/.+\")\n                 ? ref\n                 : combinePath(srcUrl, ref);\n     }\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex 69abc8d..8f7b55f 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -129,8 +129,8 @@\n             }\n             \n             return links.stream()\n-                   .filter(s -\u003e !(s.startsWith(\".\") || s.startsWith(\"..\")))\n-                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // \n+                   .filter(s -\u003e !s.startsWith(\".\"))\n+                   .map(s -\u003e UrlHelpers.fullUrlFromReference(s, response.srcUrl, e -\u003e { })) // XXX: Don\u0027t use onError here?\n                    .filter(Optional::isPresent)\n                    .map(Optional::get)\n                    .collect(Collectors.toSet());\n",
    "projectName": "osgi-http",
    "lineNum": 132,
    "nodeStartChar": 4665,
    "before": "(s.startsWith(\".\") || s.startsWith(\"..\"))",
    "after": "s.startsWith(\".\")"
  },
  {
    "commitSHA1": "d0f72878d54d8b07cca5a37691af9e7f3f7113db",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\nindex c8fb401..c4f60ad 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/UrlHelpers.java\n@@ -144,7 +144,7 @@\n         Objects.requireNonNull(ref);\n         Objects.requireNonNull(srcUrl);\n         \n-        return ref.matches(\"^http.+\")\n+        return ref.matches(\"^http[s]*:\\\\/\\\\/.+\")\n                 ? ref\n                 : combinePath(srcUrl, ref);\n     }\n",
    "projectName": "osgi-http",
    "lineNum": 147,
    "nodeStartChar": 5143,
    "before": "\"^http.+\"",
    "after": "\"^http[s]*:\\\\/\\\\/.+\""
  },
  {
    "commitSHA1": "837d79a5f550b96add4b461bd035b1f32b242bad",
    "commitFile": "src/test/java/com/pavlovmedia/osgi/oss/http/IntegrationTests.java",
    "patch": "diff --git a/src/test/java/com/pavlovmedia/osgi/oss/http/IntegrationTests.java b/src/test/java/com/pavlovmedia/osgi/oss/http/IntegrationTests.java\nindex 7f931cf..9492986 100644\n--- a/src/test/java/com/pavlovmedia/osgi/oss/http/IntegrationTests.java\n+++ b/src/test/java/com/pavlovmedia/osgi/oss/http/IntegrationTests.java\n@@ -39,7 +39,7 @@\n     @Test\n     public void testPavlovDcim() throws Exception {\n         final Optional\u003cHttpResponse\u003e response \u003d new PavlovHttpClientImpl()\n-                .againstUrl(new URL(\"https://dcim-rest.dev.pavlovmedia.corp/swagger-ui/#/\"))\n+                .againstUrl(new URL(\"https://www.google.com\"))\n                 .ignoringSelfSignedCert(true)\n                 .withVerb(HttpVerbs.GET)\n                 .usingGzip()\n",
    "projectName": "osgi-http",
    "lineNum": 42,
    "nodeStartChar": 1365,
    "before": "\"https://dcim-rest.dev.pavlovmedia.corp/swagger-ui/#/\"",
    "after": "\"https://www.google.com\""
  },
  {
    "commitSHA1": "00c898d4749467777579c1dbb7ebb8db2aff47bd",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\nindex 6b06444..37ed094 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n@@ -159,7 +159,7 @@\n      * @return the converted string, or an empty string if there is an error.\n      */\n     public static Function\u003cInputStream, String\u003e inputStreamToUTF8StringConverter(final Consumer\u003cException\u003e onError) {\n-        return (is) -\u003e {\n+        return is -\u003e {\n             try (BufferedReader reader \u003d new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n                 return reader.lines().reduce((t, u) -\u003e String.format(\"%s%s%s\", t, System.lineSeparator(), u))\n                         .orElse(\"No data\");\n@@ -171,7 +171,7 @@\n     }\n     \n     public static Function\u003cInputStream, ConvertibleAsset\u003cInputStream\u003e\u003e gunzipInputStream(final Consumer\u003cException\u003e onError) {\n-        return (in) -\u003e gunzipInputStream(in, onError);\n+        return in -\u003e gunzipInputStream(in, onError);\n     }\n     \n     public static ConvertibleAsset\u003cInputStream\u003e gunzipInputStream(final InputStream in, final Consumer\u003cException\u003e onError) {\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex bcd3154..856fe75 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -61,7 +61,7 @@\n     }\n     \n     private Set\u003cURL\u003e parseForUrls(final HttpResponse response) {\n-        if (response.isValidResponse((e) -\u003e { }) \u0026\u0026 response.responseHeaders.getOrDefault(\"Content-Type\", \n+        if (response.isValidResponse(e -\u003e { }) \u0026\u0026 response.responseHeaders.getOrDefault(\"Content-Type\", \n                 Arrays.asList(\"text/html\"))\n                 .contains(\"text/html\")) {\n             // We scan for href links\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\nindex 6b06444..37ed094 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n@@ -159,7 +159,7 @@\n      * @return the converted string, or an empty string if there is an error.\n      */\n     public static Function\u003cInputStream, String\u003e inputStreamToUTF8StringConverter(final Consumer\u003cException\u003e onError) {\n-        return (is) -\u003e {\n+        return is -\u003e {\n             try (BufferedReader reader \u003d new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n                 return reader.lines().reduce((t, u) -\u003e String.format(\"%s%s%s\", t, System.lineSeparator(), u))\n                         .orElse(\"No data\");\n@@ -171,7 +171,7 @@\n     }\n     \n     public static Function\u003cInputStream, ConvertibleAsset\u003cInputStream\u003e\u003e gunzipInputStream(final Consumer\u003cException\u003e onError) {\n-        return (in) -\u003e gunzipInputStream(in, onError);\n+        return in -\u003e gunzipInputStream(in, onError);\n     }\n     \n     public static ConvertibleAsset\u003cInputStream\u003e gunzipInputStream(final InputStream in, final Consumer\u003cException\u003e onError) {\n",
    "projectName": "osgi-http",
    "lineNum": 162,
    "nodeStartChar": 5220,
    "before": "(is) -\u003e {   try (BufferedReader reader\u003dnew BufferedReader(new InputStreamReader(is,StandardCharsets.UTF_8))){     return reader.lines().reduce((t,u) -\u003e String.format(\"%s%s%s\",t,System.lineSeparator(),u)).orElse(\"No data\");   }  catch (  IOException e) {     onError.accept(e);     return \"\";   } } ",
    "after": "is -\u003e {   try (BufferedReader reader\u003dnew BufferedReader(new InputStreamReader(is,StandardCharsets.UTF_8))){     return reader.lines().reduce((t,u) -\u003e String.format(\"%s%s%s\",t,System.lineSeparator(),u)).orElse(\"No data\");   }  catch (  IOException e) {     onError.accept(e);     return \"\";   } } "
  },
  {
    "commitSHA1": "00c898d4749467777579c1dbb7ebb8db2aff47bd",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\nindex 6b06444..37ed094 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n@@ -159,7 +159,7 @@\n      * @return the converted string, or an empty string if there is an error.\n      */\n     public static Function\u003cInputStream, String\u003e inputStreamToUTF8StringConverter(final Consumer\u003cException\u003e onError) {\n-        return (is) -\u003e {\n+        return is -\u003e {\n             try (BufferedReader reader \u003d new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n                 return reader.lines().reduce((t, u) -\u003e String.format(\"%s%s%s\", t, System.lineSeparator(), u))\n                         .orElse(\"No data\");\n@@ -171,7 +171,7 @@\n     }\n     \n     public static Function\u003cInputStream, ConvertibleAsset\u003cInputStream\u003e\u003e gunzipInputStream(final Consumer\u003cException\u003e onError) {\n-        return (in) -\u003e gunzipInputStream(in, onError);\n+        return in -\u003e gunzipInputStream(in, onError);\n     }\n     \n     public static ConvertibleAsset\u003cInputStream\u003e gunzipInputStream(final InputStream in, final Consumer\u003cException\u003e onError) {\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex bcd3154..856fe75 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -61,7 +61,7 @@\n     }\n     \n     private Set\u003cURL\u003e parseForUrls(final HttpResponse response) {\n-        if (response.isValidResponse((e) -\u003e { }) \u0026\u0026 response.responseHeaders.getOrDefault(\"Content-Type\", \n+        if (response.isValidResponse(e -\u003e { }) \u0026\u0026 response.responseHeaders.getOrDefault(\"Content-Type\", \n                 Arrays.asList(\"text/html\"))\n                 .contains(\"text/html\")) {\n             // We scan for href links\ndiff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\nindex 6b06444..37ed094 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/HttpResponse.java\n@@ -159,7 +159,7 @@\n      * @return the converted string, or an empty string if there is an error.\n      */\n     public static Function\u003cInputStream, String\u003e inputStreamToUTF8StringConverter(final Consumer\u003cException\u003e onError) {\n-        return (is) -\u003e {\n+        return is -\u003e {\n             try (BufferedReader reader \u003d new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n                 return reader.lines().reduce((t, u) -\u003e String.format(\"%s%s%s\", t, System.lineSeparator(), u))\n                         .orElse(\"No data\");\n@@ -171,7 +171,7 @@\n     }\n     \n     public static Function\u003cInputStream, ConvertibleAsset\u003cInputStream\u003e\u003e gunzipInputStream(final Consumer\u003cException\u003e onError) {\n-        return (in) -\u003e gunzipInputStream(in, onError);\n+        return in -\u003e gunzipInputStream(in, onError);\n     }\n     \n     public static ConvertibleAsset\u003cInputStream\u003e gunzipInputStream(final InputStream in, final Consumer\u003cException\u003e onError) {\n",
    "projectName": "osgi-http",
    "lineNum": 174,
    "nodeStartChar": 5775,
    "before": "(in) -\u003e gunzipInputStream(in,onError)",
    "after": "in -\u003e gunzipInputStream(in,onError)"
  },
  {
    "commitSHA1": "00c898d4749467777579c1dbb7ebb8db2aff47bd",
    "commitFile": "src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java",
    "patch": "diff --git a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\nindex bcd3154..856fe75 100644\n--- a/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n+++ b/src/main/java/com/pavlovmedia/oss/osgi/http/Spider.java\n@@ -61,7 +61,7 @@\n     }\n     \n     private Set\u003cURL\u003e parseForUrls(final HttpResponse response) {\n-        if (response.isValidResponse((e) -\u003e { }) \u0026\u0026 response.responseHeaders.getOrDefault(\"Content-Type\", \n+        if (response.isValidResponse(e -\u003e { }) \u0026\u0026 response.responseHeaders.getOrDefault(\"Content-Type\", \n                 Arrays.asList(\"text/html\"))\n                 .contains(\"text/html\")) {\n             // We scan for href links\n",
    "projectName": "osgi-http",
    "lineNum": 64,
    "nodeStartChar": 2123,
    "before": "(e) -\u003e { } ",
    "after": "e -\u003e { } "
  },
  {
    "commitSHA1": "0a0f57f1d24ade648b080d35944b0064382405f8",
    "commitFile": "src/main/java/com/epam/parso/impl/CharDecompressor.java",
    "patch": "diff --git a/src/main/java/com/epam/parso/impl/CharDecompressor.java b/src/main/java/com/epam/parso/impl/CharDecompressor.java\nindex 32f317b..942bb32 100644\n--- a/src/main/java/com/epam/parso/impl/CharDecompressor.java\n+++ b/src/main/java/com/epam/parso/impl/CharDecompressor.java\n@@ -61,10 +61,10 @@\n             int endOfFirstByte \u003d page[offset + currentByteIndex] \u0026 0x0F;\n             int countOfBytesToCopy;\n             switch (controlByte) {\n-                case (byte) 0x30://intentional fall through\n-                case (byte) 0x20://intentional fall through\n-                case (byte) 0x10://intentional fall through\n-                case (byte) 0x00:\n+                case 0x30://intentional fall through\n+                case 0x20://intentional fall through\n+                case 0x10://intentional fall through\n+                case 0x00:\n                     if (currentByteIndex !\u003d length - 1) {\n                         countOfBytesToCopy \u003d (page[offset + currentByteIndex + 1] \u0026 0xFF) + 64\n                            + page[offset + currentByteIndex] * 256;\ndiff --git a/src/main/java/com/epam/parso/impl/CharDecompressor.java b/src/main/java/com/epam/parso/impl/CharDecompressor.java\nindex 32f317b..942bb32 100644\n--- a/src/main/java/com/epam/parso/impl/CharDecompressor.java\n+++ b/src/main/java/com/epam/parso/impl/CharDecompressor.java\n@@ -61,10 +61,10 @@\n             int endOfFirstByte \u003d page[offset + currentByteIndex] \u0026 0x0F;\n             int countOfBytesToCopy;\n             switch (controlByte) {\n-                case (byte) 0x30://intentional fall through\n-                case (byte) 0x20://intentional fall through\n-                case (byte) 0x10://intentional fall through\n-                case (byte) 0x00:\n+                case 0x30://intentional fall through\n+                case 0x20://intentional fall through\n+                case 0x10://intentional fall through\n+                case 0x00:\n                     if (currentByteIndex !\u003d length - 1) {\n                         countOfBytesToCopy \u003d (page[offset + currentByteIndex + 1] \u0026 0xFF) + 64\n                            + page[offset + currentByteIndex] * 256;\n",
    "projectName": "parso",
    "lineNum": 63,
    "nodeStartChar": 2511,
    "before": "switch (controlByte) { case (byte)0x30: case (byte)0x20: case (byte)0x10: case (byte)0x00:   if (currentByteIndex !\u003d length - 1) {     countOfBytesToCopy\u003d(page[offset + currentByteIndex + 1] \u0026 0xFF) + 64 + page[offset + currentByteIndex] * 256;     System.arraycopy(page,offset + currentByteIndex + 2,resultByteArray,currentResultArrayIndex,countOfBytesToCopy);     currentByteIndex+\u003dcountOfBytesToCopy + 1;     currentResultArrayIndex+\u003dcountOfBytesToCopy;   } break; case 0x40: int copyCounter\u003dendOfFirstByte * 16 + (page[offset + currentByteIndex + 1] \u0026 0xFF); for (int i\u003d0; i \u003c copyCounter + 18; i++) { resultByteArray[currentResultArrayIndex++]\u003dpage[offset + currentByteIndex + 2]; } currentByteIndex+\u003d2; break; case 0x60: for (int i\u003d0; i \u003c endOfFirstByte * 256 + (page[offset + currentByteIndex + 1] \u0026 0xFF) + 17; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x20; } currentByteIndex++; break; case 0x70: for (int i\u003d0; i \u003c endOfFirstByte * 256 + (page[offset + currentByteIndex + 1] \u0026 0xFF) + 17; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x00; } currentByteIndex++; break; case 0x80: case 0x90: case 0xA0: case 0xB0: countOfBytesToCopy\u003dMath.min(endOfFirstByte + 1 + (controlByte - 0x80),length - (currentByteIndex + 1)); System.arraycopy(page,offset + currentByteIndex + 1,resultByteArray,currentResultArrayIndex,countOfBytesToCopy); currentByteIndex+\u003dcountOfBytesToCopy; currentResultArrayIndex+\u003dcountOfBytesToCopy; break; case 0xC0: for (int i\u003d0; i \u003c endOfFirstByte + 3; i++) { resultByteArray[currentResultArrayIndex++]\u003dpage[offset + currentByteIndex + 1]; } currentByteIndex++; break; case 0xD0: for (int i\u003d0; i \u003c endOfFirstByte + 2; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x40; } break; case 0xE0: for (int i\u003d0; i \u003c endOfFirstByte + 2; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x20; } break; case 0xF0: for (int i\u003d0; i \u003c endOfFirstByte + 2; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x00; } break; default : LOGGER.error(\"Error control byte: {}\",controlByte); break; } ",
    "after": "switch (controlByte) { case 0x30: case 0x20: case 0x10: case 0x00:   if (currentByteIndex !\u003d length - 1) {     countOfBytesToCopy\u003d(page[offset + currentByteIndex + 1] \u0026 0xFF) + 64 + page[offset + currentByteIndex] * 256;     System.arraycopy(page,offset + currentByteIndex + 2,resultByteArray,currentResultArrayIndex,countOfBytesToCopy);     currentByteIndex+\u003dcountOfBytesToCopy + 1;     currentResultArrayIndex+\u003dcountOfBytesToCopy;   } break; case 0x40: int copyCounter\u003dendOfFirstByte * 16 + (page[offset + currentByteIndex + 1] \u0026 0xFF); for (int i\u003d0; i \u003c copyCounter + 18; i++) { resultByteArray[currentResultArrayIndex++]\u003dpage[offset + currentByteIndex + 2]; } currentByteIndex+\u003d2; break; case 0x60: for (int i\u003d0; i \u003c endOfFirstByte * 256 + (page[offset + currentByteIndex + 1] \u0026 0xFF) + 17; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x20; } currentByteIndex++; break; case 0x70: for (int i\u003d0; i \u003c endOfFirstByte * 256 + (page[offset + currentByteIndex + 1] \u0026 0xFF) + 17; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x00; } currentByteIndex++; break; case 0x80: case 0x90: case 0xA0: case 0xB0: countOfBytesToCopy\u003dMath.min(endOfFirstByte + 1 + (controlByte - 0x80),length - (currentByteIndex + 1)); System.arraycopy(page,offset + currentByteIndex + 1,resultByteArray,currentResultArrayIndex,countOfBytesToCopy); currentByteIndex+\u003dcountOfBytesToCopy; currentResultArrayIndex+\u003dcountOfBytesToCopy; break; case 0xC0: for (int i\u003d0; i \u003c endOfFirstByte + 3; i++) { resultByteArray[currentResultArrayIndex++]\u003dpage[offset + currentByteIndex + 1]; } currentByteIndex++; break; case 0xD0: for (int i\u003d0; i \u003c endOfFirstByte + 2; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x40; } break; case 0xE0: for (int i\u003d0; i \u003c endOfFirstByte + 2; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x20; } break; case 0xF0: for (int i\u003d0; i \u003c endOfFirstByte + 2; i++) { resultByteArray[currentResultArrayIndex++]\u003d0x00; } break; default : LOGGER.error(\"Error control byte: {}\",controlByte); break; } "
  },
  {
    "commitSHA1": "a821225728f1fda14adae221aef7fdba44e2c781",
    "commitFile": "src/test/java/com/redfin/patience/PatientSleepTest.java",
    "patch": "diff --git a/src/test/java/com/redfin/patience/PatientSleepTest.java b/src/test/java/com/redfin/patience/PatientSleepTest.java\nindex b867a86..487e7a3 100644\n--- a/src/test/java/com/redfin/patience/PatientSleepTest.java\n+++ b/src/test/java/com/redfin/patience/PatientSleepTest.java\n@@ -60,7 +60,7 @@\n         Instant start \u003d Instant.now();\n         PatientSleep.sleepFor(duration);\n         Instant end \u003d Instant.now();\n-        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e 0,\n+        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e\u003d 0,\n                               \"SleepFor should sleep for the given duration\");\n     }\n \ndiff --git a/src/test/java/com/redfin/patience/PatientSleepTest.java b/src/test/java/com/redfin/patience/PatientSleepTest.java\nindex b867a86..487e7a3 100644\n--- a/src/test/java/com/redfin/patience/PatientSleepTest.java\n+++ b/src/test/java/com/redfin/patience/PatientSleepTest.java\n@@ -60,7 +60,7 @@\n         Instant start \u003d Instant.now();\n         PatientSleep.sleepFor(duration);\n         Instant end \u003d Instant.now();\n-        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e 0,\n+        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e\u003d 0,\n                               \"SleepFor should sleep for the given duration\");\n     }\n \n",
    "projectName": "patience",
    "lineNum": 63,
    "nodeStartChar": 2207,
    "before": "Duration.between(start,end).compareTo(duration) \u003e 0",
    "after": "Duration.between(start,end).compareTo(duration) \u003e\u003d 0"
  },
  {
    "commitSHA1": "420c0fda4581eac21265b0f2d6bbabcba6b0a186",
    "commitFile": "src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java",
    "patch": "diff --git a/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java b/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java\nindex 2f8cc6c..1fc4aaa 100644\n--- a/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java\n+++ b/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java\n@@ -19,7 +19,7 @@\n  * @author rnaegele\n  */\n public class MarkerEvent implements BaseLoadProfileEvent {\n-\tpublic enum Type {\n+\tpublic static enum Type {\n \t\tleft, right\n \t}\n \ndiff --git a/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java b/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java\nindex 2f8cc6c..1fc4aaa 100644\n--- a/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java\n+++ b/src/main/java/com/mgmtp/perfload/loadprofiles/model/MarkerEvent.java\n@@ -19,7 +19,7 @@\n  * @author rnaegele\n  */\n public class MarkerEvent implements BaseLoadProfileEvent {\n-\tpublic enum Type {\n+\tpublic static enum Type {\n \t\tleft, right\n \t}\n \n",
    "projectName": "perfload-loadprofiles",
    "lineNum": 22,
    "nodeStartChar": 752,
    "before": "public enum Type {left, right} ",
    "after": "public static enum Type {left, right} "
  },
  {
    "commitSHA1": "cc7e645b0ff60f5a93c2bcfadbb579f3c04edd74",
    "commitFile": "perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java",
    "patch": "diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex 6317d40..d0f0902 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 1);\n+        assertEquals(stats.size(), 0);\n \t}\n }\ndiff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex 6317d40..d0f0902 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 1);\n+        assertEquals(stats.size(), 0);\n \t}\n }\n",
    "projectName": "perfmon",
    "lineNum": 31,
    "nodeStartChar": 1032,
    "before": "1",
    "after": "0"
  },
  {
    "commitSHA1": "c2196e2cd8bab5c781063d5de0fc3427eb78a4b8",
    "commitFile": "perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java",
    "patch": "diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex d0f0902..6317d40 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 0);\n+        assertEquals(stats.size(), 1);\n \t}\n }\ndiff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex d0f0902..6317d40 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 0);\n+        assertEquals(stats.size(), 1);\n \t}\n }\n",
    "projectName": "perfmon",
    "lineNum": 31,
    "nodeStartChar": 1032,
    "before": "0",
    "after": "1"
  },
  {
    "commitSHA1": "b192678b188fd1e5cc3d1107098e3532d66ad6ed",
    "commitFile": "src/main/java/se/ugli/pineapple/system/ComponentActor.java",
    "patch": "diff --git a/src/main/java/se/ugli/pineapple/system/ComponentActor.java b/src/main/java/se/ugli/pineapple/system/ComponentActor.java\nindex d0c9944..8c5e32b 100644\n--- a/src/main/java/se/ugli/pineapple/system/ComponentActor.java\n+++ b/src/main/java/se/ugli/pineapple/system/ComponentActor.java\n@@ -18,15 +18,14 @@\n \r\n abstract class ComponentActor extends AbstractActor {\r\n \r\n-    private static final Logger LOG \u003d LoggerFactory.getLogger(ComponentActor.class);\r\n-\r\n+    protected final Logger log \u003d LoggerFactory.getLogger(getClass());\r\n     protected final List\u003cSubscription\u003e subscriptions \u003d new ArrayList\u003c\u003e();\r\n     protected final Map\u003cString, Connection\u003e connectionByDestination \u003d new HashMap\u003c\u003e();\r\n \r\n     protected ComponentActor(final Component component, final Discovery discovery) {\r\n         component.getIn().forEach(p -\u003e addSubscription(discovery.pipe(p.name).url));\r\n         component.getOut().forEach(p -\u003e addConnection(p.to.name, discovery.pipe(p.name).url));\r\n-        LOG.info(\"{} {} created.\", component.type(), component.name);\r\n+        log.info(\"{} {} created\", component.type(), component.name);\r\n     }\r\n \r\n     protected void addSubscription(final String url) {\r\n@@ -51,7 +50,7 @@\n     protected abstract void consume(Message message);\r\n \r\n     private void unknown(final Object message) {\r\n-        LOG.warn(\"Received unknown message: {}\", message);\r\n+        throw new IllegalStateException(\"Unknown message type: \" + message.getClass().getName());\r\n     }\r\n \r\n }\r\ndiff --git a/src/main/java/se/ugli/pineapple/system/ComponentActor.java b/src/main/java/se/ugli/pineapple/system/ComponentActor.java\nindex d0c9944..8c5e32b 100644\n--- a/src/main/java/se/ugli/pineapple/system/ComponentActor.java\n+++ b/src/main/java/se/ugli/pineapple/system/ComponentActor.java\n@@ -18,15 +18,14 @@\n \r\n abstract class ComponentActor extends AbstractActor {\r\n \r\n-    private static final Logger LOG \u003d LoggerFactory.getLogger(ComponentActor.class);\r\n-\r\n+    protected final Logger log \u003d LoggerFactory.getLogger(getClass());\r\n     protected final List\u003cSubscription\u003e subscriptions \u003d new ArrayList\u003c\u003e();\r\n     protected final Map\u003cString, Connection\u003e connectionByDestination \u003d new HashMap\u003c\u003e();\r\n \r\n     protected ComponentActor(final Component component, final Discovery discovery) {\r\n         component.getIn().forEach(p -\u003e addSubscription(discovery.pipe(p.name).url));\r\n         component.getOut().forEach(p -\u003e addConnection(p.to.name, discovery.pipe(p.name).url));\r\n-        LOG.info(\"{} {} created.\", component.type(), component.name);\r\n+        log.info(\"{} {} created\", component.type(), component.name);\r\n     }\r\n \r\n     protected void addSubscription(final String url) {\r\n@@ -51,7 +50,7 @@\n     protected abstract void consume(Message message);\r\n \r\n     private void unknown(final Object message) {\r\n-        LOG.warn(\"Received unknown message: {}\", message);\r\n+        throw new IllegalStateException(\"Unknown message type: \" + message.getClass().getName());\r\n     }\r\n \r\n }\r\n",
    "projectName": "pineapple",
    "lineNum": 54,
    "nodeStartChar": 1831,
    "before": "LOG.warn(\"Received unknown message: {}\",message); ",
    "after": "throw new IllegalStateException(\"Unknown message type: \" + message.getClass().getName()); "
  },
  {
    "commitSHA1": "9d6ba271093ba6e717a8a4bf875536d95db09626",
    "commitFile": "src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java",
    "patch": "diff --git a/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java b/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java\nindex 48fab0a..babac1c 100644\n--- a/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java\n+++ b/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java\n@@ -44,7 +44,7 @@\n \t\t\ttestClassField.setAccessible(true);\n \t\t\ttestClassField.set(testClassInstance, page);\n \t\t} catch (IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n+\t\t\tthrow new RuntimeException(e);\n \t\t}\n \t}\n }\ndiff --git a/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java b/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java\nindex 7049649..56341e3 100644\n--- a/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java\n+++ b/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java\n@@ -45,7 +45,7 @@\n \t\ttry {\n \t\t\ttestClassInstance \u003d this.testClass.newInstance();\n \t\t} catch (InstantiationException | IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n+\t\t\tthrow new RuntimeException(e);\n \t\t}\n \t\tthis.testClassInstance \u003d testClassInstance;\n \ndiff --git a/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java b/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java\nindex 48fab0a..babac1c 100644\n--- a/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java\n+++ b/src/main/java/pl/oakfusion/polonium/PageFragmentFactory.java\n@@ -44,7 +44,7 @@\n \t\t\ttestClassField.setAccessible(true);\n \t\t\ttestClassField.set(testClassInstance, page);\n \t\t} catch (IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n+\t\t\tthrow new RuntimeException(e);\n \t\t}\n \t}\n }\n",
    "projectName": "polonium-project",
    "lineNum": 47,
    "nodeStartChar": 1496,
    "before": "e.printStackTrace(); ",
    "after": "throw new RuntimeException(e); "
  },
  {
    "commitSHA1": "9d6ba271093ba6e717a8a4bf875536d95db09626",
    "commitFile": "src/main/java/pl/oakfusion/polonium/PoloniumRunner.java",
    "patch": "diff --git a/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java b/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java\nindex 7049649..56341e3 100644\n--- a/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java\n+++ b/src/main/java/pl/oakfusion/polonium/PoloniumRunner.java\n@@ -45,7 +45,7 @@\n \t\ttry {\n \t\t\ttestClassInstance \u003d this.testClass.newInstance();\n \t\t} catch (InstantiationException | IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n+\t\t\tthrow new RuntimeException(e);\n \t\t}\n \t\tthis.testClassInstance \u003d testClassInstance;\n \n",
    "projectName": "polonium-project",
    "lineNum": 48,
    "nodeStartChar": 1620,
    "before": "e.printStackTrace(); ",
    "after": "throw new RuntimeException(e); "
  },
  {
    "commitSHA1": "157c08507103c5d80c34fd4872d6ac8d9468b509",
    "commitFile": "src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java",
    "patch": "diff --git a/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java b/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java\nindex bd6419b..5726ab2 100644\n--- a/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java\n+++ b/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java\n@@ -101,7 +101,7 @@\n \n \t     PropertyValueInjector.inject(holder);\n \n-\t     assertNull(\"Failed to inject property \u0027jdbc.password\u0027!\", holder.getPassword());\n+\t     assertNull(\"Should have failed to inject property \u0027jdbc.password\u0027!\", holder.getPassword());\n \t }\n \n     @PropertiesResources(resources \u003d { \"META-INF/properties/jdbc.properties\" })\ndiff --git a/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java b/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java\nindex bd6419b..5726ab2 100644\n--- a/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java\n+++ b/src/test/java/org/carlspring/ioc/PropertyValueInjectionTest.java\n@@ -101,7 +101,7 @@\n \n \t     PropertyValueInjector.inject(holder);\n \n-\t     assertNull(\"Failed to inject property \u0027jdbc.password\u0027!\", holder.getPassword());\n+\t     assertNull(\"Should have failed to inject property \u0027jdbc.password\u0027!\", holder.getPassword());\n \t }\n \n     @PropertiesResources(resources \u003d { \"META-INF/properties/jdbc.properties\" })\n",
    "projectName": "properties-injector",
    "lineNum": 104,
    "nodeStartChar": 3568,
    "before": "\"Failed to inject property \u0027jdbc.password\u0027!\"",
    "after": "\"Should have failed to inject property \u0027jdbc.password\u0027!\""
  },
  {
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 430,
    "nodeStartChar": 18203,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 432,
    "nodeStartChar": 18367,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 435,
    "nodeStartChar": 18579,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 437,
    "nodeStartChar": 18764,
    "before": "true",
    "after": "false"
  },
  {
    "commitSHA1": "f09614f23b8d763c06494d5ded93fe4785ed39a4",
    "commitFile": "reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\ndiff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\n",
    "projectName": "reconf-jvm",
    "lineNum": 128,
    "nodeStartChar": 5444,
    "before": "proxy",
    "after": "this"
  },
  {
    "commitSHA1": "11dc7e5a41e5e0358e3605f0ceff77011722b3f6",
    "commitFile": "reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\ndiff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\n",
    "projectName": "reconf-jvm",
    "lineNum": 128,
    "nodeStartChar": 5444,
    "before": "proxy",
    "after": "this"
  },
  {
    "commitSHA1": "a9a7d597f7c5d6b325b1cb236dca03193ec423ac",
    "commitFile": "reconf-client/src/main/java/reconf/client/elements/ConfigurationRepositoryElement.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/elements/ConfigurationRepositoryElement.java b/reconf-client/src/main/java/reconf/client/elements/ConfigurationRepositoryElement.java\nindex 9de6d26..6a8c520 100644\n--- a/reconf-client/src/main/java/reconf/client/elements/ConfigurationRepositoryElement.java\n+++ b/reconf-client/src/main/java/reconf/client/elements/ConfigurationRepositoryElement.java\n@@ -141,7 +141,7 @@\n         if (!configurationItemListeners.isEmpty()) {\n             List\u003cConfigurationItemListener\u003e asList \u003d new ArrayList\u003cConfigurationItemListener\u003e(configurationItemListeners);\n             for (int i \u003d 0; i \u003c asList.size(); i++) {\n-                result.append(\"item-listener-\" + (i+1), asList.get(i));\n+                result.append(\"item-listener-\" + (i+1), asList.get(i).getClass().getName());\n             }\n         }\n \n",
    "projectName": "reconf-jvm",
    "lineNum": 144,
    "nodeStartChar": 4961,
    "before": "asList",
    "after": "asList.get(i).getClass()"
  },
  {
    "commitSHA1": "f0c902e236741063a5803e30635a74efb61e8d5b",
    "commitFile": "reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 50b5c6a..168c754 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -106,7 +106,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            throw new IllegalArgumentException(msg.format(\"error.method\", method));\n+            return method.invoke(proxy, args);\n         }\n \n         if (updateAnnotationPresent) {\ndiff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 50b5c6a..168c754 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -106,7 +106,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            throw new IllegalArgumentException(msg.format(\"error.method\", method));\n+            return method.invoke(proxy, args);\n         }\n \n         if (updateAnnotationPresent) {\n",
    "projectName": "reconf-jvm",
    "lineNum": 109,
    "nodeStartChar": 4406,
    "before": "throw new IllegalArgumentException(msg.format(\"error.method\",method)); ",
    "after": "return method.invoke(proxy,args); "
  },
  {
    "commitSHA1": "ab5381216d7e5803bd5e4021e1ab65f922fc997d",
    "commitFile": "reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 4f79a90..c456d32 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -50,7 +50,7 @@\n         if (cache.containsKey(key)) {\n             Customization cachedCustomization \u003d customCache.get(key);\n             if (cachedCustomization !\u003d null) {\n-                if (cachedCustomization.equals(customization) \u0026\u0026 !cachedCustomization.toCompare().equals(customization)) {\n+                if (cachedCustomization.equals(customization) \u0026\u0026 !cachedCustomization.toCompare().equals(customization.toCompare())) {\n                     throw new IllegalArgumentException(msg.format(\"error.customization\", customization.toString()));\n                 }\n             }\n",
    "projectName": "reconf-jvm",
    "lineNum": 53,
    "nodeStartChar": 2177,
    "before": "customization",
    "after": "customization.toCompare()"
  },
  {
    "commitSHA1": "9d79873cb438469a9484a1e8ed4697dbfb3d06d5",
    "commitFile": "reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java",
    "patch": "diff --git a/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java b/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java\nindex 4f12b84..343a21b 100644\n--- a/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java\n+++ b/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java\n@@ -22,7 +22,7 @@\n public class RepositoryConfigurationBean implements FactoryBean {\n \n     private Class\u003c?\u003e configInterface;\n-    private Customization customization \u003d Customization.EMPTY;\n+    private Customization customization \u003d new Customization();\n \n     public Object getObject() throws Exception {\n         return ConfigurationRepositoryFactory.get(getConfigInterface(), getCustomization());\ndiff --git a/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java b/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java\nindex 4f12b84..343a21b 100644\n--- a/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java\n+++ b/reconf-spring/src/main/java/reconf/spring/RepositoryConfigurationBean.java\n@@ -22,7 +22,7 @@\n public class RepositoryConfigurationBean implements FactoryBean {\n \n     private Class\u003c?\u003e configInterface;\n-    private Customization customization \u003d Customization.EMPTY;\n+    private Customization customization \u003d new Customization();\n \n     public Object getObject() throws Exception {\n         return ConfigurationRepositoryFactory.get(getConfigInterface(), getCustomization());\n",
    "projectName": "reconf-jvm",
    "lineNum": 25,
    "nodeStartChar": 893,
    "before": "Customization.EMPTY",
    "after": "new Customization()"
  },
  {
    "commitSHA1": "b4eb482459ed73102e65b09f291c76d19eb3299a",
    "commitFile": "reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java b/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java\nindex 7e7ed59..3b2c156 100644\n--- a/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java\n+++ b/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java\n@@ -29,7 +29,7 @@\n     public static Set\u003cString\u003e validate(ConnectionSettings arg) {\n         Set\u003cString\u003e errors \u003d new LinkedHashSet\u003cString\u003e();\n         if (arg \u003d\u003d null) {\n-            errors.add(\"server is null\");\n+            errors.add(msg.get(\"null\"));\n             return errors;\n         }\n \ndiff --git a/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java b/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java\nindex ee63569..c8678cf 100644\n--- a/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java\n+++ b/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java\n@@ -26,7 +26,7 @@\n     public static Set\u003cString\u003e validate(LocalCacheSettings arg) {\n         Set\u003cString\u003e errors \u003d new LinkedHashSet\u003cString\u003e();\n         if (arg \u003d\u003d null) {\n-            errors.add(\"local-cache not found\");\n+            errors.add(msg.get(\"null\"));\n             return errors;\n         }\n \ndiff --git a/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java b/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java\nindex 7e7ed59..3b2c156 100644\n--- a/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java\n+++ b/reconf-client/src/main/java/reconf/client/validation/ConnectionSettingsValidator.java\n@@ -29,7 +29,7 @@\n     public static Set\u003cString\u003e validate(ConnectionSettings arg) {\n         Set\u003cString\u003e errors \u003d new LinkedHashSet\u003cString\u003e();\n         if (arg \u003d\u003d null) {\n-            errors.add(\"server is null\");\n+            errors.add(msg.get(\"null\"));\n             return errors;\n         }\n \n",
    "projectName": "reconf-jvm",
    "lineNum": 32,
    "nodeStartChar": 1131,
    "before": "\"server is null\"",
    "after": "msg.get(\"null\")"
  },
  {
    "commitSHA1": "b4eb482459ed73102e65b09f291c76d19eb3299a",
    "commitFile": "reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java b/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java\nindex ee63569..c8678cf 100644\n--- a/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java\n+++ b/reconf-client/src/main/java/reconf/client/validation/LocalCacheSettingsValidator.java\n@@ -26,7 +26,7 @@\n     public static Set\u003cString\u003e validate(LocalCacheSettings arg) {\n         Set\u003cString\u003e errors \u003d new LinkedHashSet\u003cString\u003e();\n         if (arg \u003d\u003d null) {\n-            errors.add(\"local-cache not found\");\n+            errors.add(msg.get(\"null\"));\n             return errors;\n         }\n \n",
    "projectName": "reconf-jvm",
    "lineNum": 29,
    "nodeStartChar": 1047,
    "before": "\"local-cache not found\"",
    "after": "msg.get(\"null\")"
  },
  {
    "commitSHA1": "ce2c3ceb91b583081282bf580381d848c0c17e81",
    "commitFile": "reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\nindex a8c1d99..11bd98d 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n@@ -167,7 +167,7 @@\n             locale \u003d temp;\n         }\n         if (StringUtils.equalsIgnoreCase(\"experimental-features\", qName)) {\n-            experimentalFeatures \u003d Boolean.valueOf(experimentalFeatures);\n+            experimentalFeatures \u003d Boolean.valueOf(temp);\n         }\n         if (StringUtils.equalsIgnoreCase(\"local-cache\", qName)) {\n             openLocalCacheSettings \u003d false;\ndiff --git a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\nindex a8c1d99..11bd98d 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n@@ -167,7 +167,7 @@\n             locale \u003d temp;\n         }\n         if (StringUtils.equalsIgnoreCase(\"experimental-features\", qName)) {\n-            experimentalFeatures \u003d Boolean.valueOf(experimentalFeatures);\n+            experimentalFeatures \u003d Boolean.valueOf(temp);\n         }\n         if (StringUtils.equalsIgnoreCase(\"local-cache\", qName)) {\n             openLocalCacheSettings \u003d false;\n",
    "projectName": "reconf-jvm",
    "lineNum": 170,
    "nodeStartChar": 5856,
    "before": "Boolean.valueOf(experimentalFeatures)",
    "after": "Boolean.valueOf(temp)"
  },
  {
    "commitSHA1": "c403972c4499646c78af4d42c0c212c7bebeab89",
    "commitFile": "reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\ndiff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\n",
    "projectName": "reconf-jvm",
    "lineNum": 25,
    "nodeStartChar": 839,
    "before": "ConfigurationRepositoryFactory.create(WelcomeConfiguration.class)",
    "after": "ConfigurationRepositoryFactory.get(WelcomeConfiguration.class)"
  },
  {
    "commitSHA1": "c403972c4499646c78af4d42c0c212c7bebeab89",
    "commitFile": "reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\ndiff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\n",
    "projectName": "reconf-jvm",
    "lineNum": 33,
    "nodeStartChar": 1171,
    "before": "ConfigurationRepositoryFactory.create(WelcomeConfiguration.class,cust)",
    "after": "ConfigurationRepositoryFactory.get(WelcomeConfiguration.class,cust)"
  },
  {
    "commitSHA1": "aa646542390adf2839010c53bdbf9b00af648b13",
    "commitFile": "reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\nindex c38e27c..43fff69 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n@@ -113,7 +113,7 @@\n     private BasicDataSource createDataSource() {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;ifexists\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.ifexists\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         return ds;\n@@ -403,7 +403,7 @@\n     private synchronized void firstConnection() throws SQLException {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         ds.getConnection().close();\ndiff --git a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\nindex c38e27c..43fff69 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n@@ -113,7 +113,7 @@\n     private BasicDataSource createDataSource() {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;ifexists\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.ifexists\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         return ds;\n@@ -403,7 +403,7 @@\n     private synchronized void firstConnection() throws SQLException {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         ds.getConnection().close();\n",
    "projectName": "reconf-jvm",
    "lineNum": 116,
    "nodeStartChar": 4978,
    "before": "\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+ cryptKey+ \";crypt_type\u003dAES;crypt_lobs\u003dtrue;ifexists\u003dtrue;shutdown\u003dtrue\"",
    "after": "\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+ cryptKey+ \";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.ifexists\u003dtrue;hsqldb.shutdown\u003dtrue\""
  },
  {
    "commitSHA1": "aa646542390adf2839010c53bdbf9b00af648b13",
    "commitFile": "reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\nindex c38e27c..43fff69 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n@@ -113,7 +113,7 @@\n     private BasicDataSource createDataSource() {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;ifexists\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.ifexists\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         return ds;\n@@ -403,7 +403,7 @@\n     private synchronized void firstConnection() throws SQLException {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         ds.getConnection().close();\ndiff --git a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\nindex c38e27c..43fff69 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/DatabaseManager.java\n@@ -113,7 +113,7 @@\n     private BasicDataSource createDataSource() {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;ifexists\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.ifexists\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         return ds;\n@@ -403,7 +403,7 @@\n     private synchronized void firstConnection() throws SQLException {\n         BasicDataSource ds \u003d new BasicDataSource();\n         ds.setDriverClassName(driverClassName);\n-        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+cryptKey+\";crypt_type\u003dAES;crypt_lobs\u003dtrue;shutdown\u003dtrue\");\n+        ds.setUrl(\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+cryptKey+\";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.shutdown\u003dtrue\");\n         ds.setUsername(\"reconfdb\");\n         ds.setPassword(\"local\");\n         ds.getConnection().close();\n",
    "projectName": "reconf-jvm",
    "lineNum": 406,
    "nodeStartChar": 16019,
    "before": "\"jdbc:hsqldb:file:\" + directory.getPath() + \";crypt_key\u003d\"+ cryptKey+ \";crypt_type\u003dAES;crypt_lobs\u003dtrue;shutdown\u003dtrue\"",
    "after": "\"jdbc:hsqldb:file:\" + directory.getPath() + \";hsqldb.lock_file\u003dfalse;hsqldb.crypt_key\u003d\"+ cryptKey+ \";hsqldb.crypt_type\u003dAES;hsqldb.crypt_lobs\u003dtrue;hsqldb.shutdown\u003dtrue\""
  },
  {
    "commitSHA1": "8b84c1163526039a9bdec36215770fe32ac87f67",
    "commitFile": "reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java b/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java\nindex 3028d95..454e525 100644\n--- a/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java\n+++ b/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java\n@@ -31,7 +31,7 @@\n     @ConfigurationItem(\"hugemap.param\")\n     Map\u003cLong, String\u003e getMap();\n \n-    @ConfigurationItem(value\u003d\"\", adapter\u003dRawStringConfigurationAdapter.class)\n+    @ConfigurationItem(value\u003d\"hugemap.param\", adapter\u003dRawStringConfigurationAdapter.class)\n     @UpdateFrequency(interval\u003d100, timeUnit\u003dTimeUnit.MINUTES)\n     @DoNotUpdate\n     String getRawMap();\ndiff --git a/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java b/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java\nindex 3028d95..454e525 100644\n--- a/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java\n+++ b/reconf-client/src/test/java/reconf/client/examples/WelcomeConfiguration.java\n@@ -31,7 +31,7 @@\n     @ConfigurationItem(\"hugemap.param\")\n     Map\u003cLong, String\u003e getMap();\n \n-    @ConfigurationItem(value\u003d\"\", adapter\u003dRawStringConfigurationAdapter.class)\n+    @ConfigurationItem(value\u003d\"hugemap.param\", adapter\u003dRawStringConfigurationAdapter.class)\n     @UpdateFrequency(interval\u003d100, timeUnit\u003dTimeUnit.MINUTES)\n     @DoNotUpdate\n     String getRawMap();\n",
    "projectName": "reconf-jvm",
    "lineNum": 34,
    "nodeStartChar": 1101,
    "before": "\"\"",
    "after": "\"hugemap.param\""
  },
  {
    "commitSHA1": "4f44d5a43741e647d2cf4d6dd4cc0c44714b9ed2",
    "commitFile": "reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java b/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java\nindex 46a1300..d8594b6 100644\n--- a/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java\n+++ b/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java\n@@ -171,7 +171,7 @@\n         ToStringBuilder result \u003d new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).append(\"method\", getMethod());\n         addToString(result, \"product\", getProduct());\n         addToString(result, \"component\", getComponent());\n-        result.append(\"name\", getKey());\n+        result.append(\"value\", getKey());\n         result.append(\"@DoNotUpdate\", null \u003d\u003d doNotUpdate ? \"not found\" : \"found\");\n         if (getUpdateFrequency() \u003d\u003d null) {\n             result.append(\"specific @UpdateFrequency\", \"not found\");\ndiff --git a/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java b/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java\nindex 46a1300..d8594b6 100644\n--- a/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java\n+++ b/reconf-client/src/main/java/reconf/client/elements/ConfigurationItemElement.java\n@@ -171,7 +171,7 @@\n         ToStringBuilder result \u003d new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).append(\"method\", getMethod());\n         addToString(result, \"product\", getProduct());\n         addToString(result, \"component\", getComponent());\n-        result.append(\"name\", getKey());\n+        result.append(\"value\", getKey());\n         result.append(\"@DoNotUpdate\", null \u003d\u003d doNotUpdate ? \"not found\" : \"found\");\n         if (getUpdateFrequency() \u003d\u003d null) {\n             result.append(\"specific @UpdateFrequency\", \"not found\");\n",
    "projectName": "reconf-jvm",
    "lineNum": 174,
    "nodeStartChar": 6234,
    "before": "\"name\"",
    "after": "\"value\""
  },
  {
    "commitSHA1": "0fd37f84d7239e8c7de0837be34f34545f48fea0",
    "commitFile": "resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java",
    "patch": "diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\ndiff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\n",
    "projectName": "resourcebundle-core",
    "lineNum": 69,
    "nodeStartChar": 2422,
    "before": "new ResourceBundleKey(\"name\",\"default value\",ArrayFactory.newArray(\"Martin\",\"Germany\"))",
    "after": "new ResourceBundleKey(\"default value\",\"name\",ArrayFactory.newArray(\"Martin\",\"Germany\"))"
  },
  {
    "commitSHA1": "0fd37f84d7239e8c7de0837be34f34545f48fea0",
    "commitFile": "resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java",
    "patch": "diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\ndiff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\n",
    "projectName": "resourcebundle-core",
    "lineNum": 94,
    "nodeStartChar": 3280,
    "before": "new ResourceBundleKey(\"foo\",null,null)",
    "after": "new ResourceBundleKey(null,\"foo\",null)"
  },
  {
    "commitSHA1": "8ae258d3784dad67662f205a416ef1c083b82fc2",
    "commitFile": "sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java",
    "patch": "diff --git a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\nindex 4639253..3d648d2 100644\n--- a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n+++ b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n@@ -440,7 +440,7 @@\n         NamedProperty\u003cQName\u003e[] propertyArray \u003d properties.toArray(new NamedProperty[properties.size()]);\r\n         NamedProperties\u003cQName\u003e namedProperties \u003d Datatree.NamedProperties(propertyArray);\r\n         NamespaceBindings bindings \u003d Datatree.NamespaceBindings(\r\n-                (NamespaceBinding[]) document.getNamespaceBindings().toArray());\r\n+                (NamespaceBinding[]) document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()]));\r\n \r\n         if (document instanceof TopLevelDocument)\r\n         {\r\ndiff --git a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\nindex 4639253..3d648d2 100644\n--- a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n+++ b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n@@ -440,7 +440,7 @@\n         NamedProperty\u003cQName\u003e[] propertyArray \u003d properties.toArray(new NamedProperty[properties.size()]);\r\n         NamedProperties\u003cQName\u003e namedProperties \u003d Datatree.NamedProperties(propertyArray);\r\n         NamespaceBindings bindings \u003d Datatree.NamespaceBindings(\r\n-                (NamespaceBinding[]) document.getNamespaceBindings().toArray());\r\n+                (NamespaceBinding[]) document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()]));\r\n \r\n         if (document instanceof TopLevelDocument)\r\n         {\r\n",
    "projectName": "sbol-data",
    "lineNum": 443,
    "nodeStartChar": 16685,
    "before": "document.getNamespaceBindings().toArray()",
    "after": "document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()])"
  },
  {
    "commitSHA1": "c4742bd8911e3ce1b8aa045b1d97aaff2070a91b",
    "commitFile": "core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java",
    "patch": "diff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\nindex 9ff8997..3ba9ba1 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n@@ -105,7 +105,7 @@\n \r\n         stats \u003d new Stats(\r\n                 Arrays.copyOfRange(\r\n-                        entry, entry.length - (Stats.SIZE + 1), entry.length)\r\n+                        entry, entry.length - Stats.SIZE, entry.length)\r\n         );\r\n \r\n     }\r\ndiff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\nindex 9ff8997..3ba9ba1 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n@@ -105,7 +105,7 @@\n \r\n         stats \u003d new Stats(\r\n                 Arrays.copyOfRange(\r\n-                        entry, entry.length - (Stats.SIZE + 1), entry.length)\r\n+                        entry, entry.length - Stats.SIZE, entry.length)\r\n         );\r\n \r\n     }\r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 108,
    "nodeStartChar": 3502,
    "before": "(Stats.SIZE + 1)",
    "after": "Stats.SIZE"
  },
  {
    "commitSHA1": "9e4e65021973da5cdfb95699cd47fd8d835cbb56",
    "commitFile": "data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java",
    "patch": "diff --git a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java\nindex b486aad..5a9f43a 100644\n--- a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java\n+++ b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java\n@@ -192,8 +192,7 @@\n                         .getResourceAsStream(\"/\" + neighborFilePath);\r\n                 reader \u003d new BufferedReader(new InputStreamReader(in));\r\n             } else {\r\n-                reader \u003d new BufferedReader(new FileReader(\"/\"\r\n-                        + neighborFilePath));\r\n+                reader \u003d new BufferedReader(new FileReader(neighborFilePath));\r\n             }\r\n \r\n             try (Stream\u003cString\u003e lines \u003d reader.lines()) {\r\ndiff --git a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java\nindex b486aad..5a9f43a 100644\n--- a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java\n+++ b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/standalone/AbstractMote.java\n@@ -192,8 +192,7 @@\n                         .getResourceAsStream(\"/\" + neighborFilePath);\r\n                 reader \u003d new BufferedReader(new InputStreamReader(in));\r\n             } else {\r\n-                reader \u003d new BufferedReader(new FileReader(\"/\"\r\n-                        + neighborFilePath));\r\n+                reader \u003d new BufferedReader(new FileReader(neighborFilePath));\r\n             }\r\n \r\n             try (Stream\u003cString\u003e lines \u003d reader.lines()) {\r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 195,
    "nodeStartChar": 6300,
    "before": "\"/\" + neighborFilePath",
    "after": "neighborFilePath"
  },
  {
    "commitSHA1": "71801e801ec4d58c449596ea195373fbb085de5b",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java\nindex cb390a6..b7fac47 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java\n@@ -173,7 +173,7 @@\n                     notifyObservers(data);\r\n                 }\r\n             } catch (IOException ex) {\r\n-                log(Level.SEVERE, \"+++++\" + ex.toString());\r\n+                log(Level.SEVERE, ex.toString());\r\n             }\r\n \r\n         }\r\ndiff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java\nindex cb390a6..b7fac47 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/adapter/AdapterTcp.java\n@@ -173,7 +173,7 @@\n                     notifyObservers(data);\r\n                 }\r\n             } catch (IOException ex) {\r\n-                log(Level.SEVERE, \"+++++\" + ex.toString());\r\n+                log(Level.SEVERE, ex.toString());\r\n             }\r\n \r\n         }\r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 176,
    "nodeStartChar": 4953,
    "before": "\"+++++\" + ex.toString()",
    "after": "ex.toString()"
  },
  {
    "commitSHA1": "c7a1cd4cfa9c70ca43b053b8b0b02be6eb898539",
    "commitFile": "core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java",
    "patch": "diff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\nindex 39f20fd..2b81c52 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n@@ -132,7 +132,7 @@\n             });\r\n             out.append(\"} (\")\r\n                     .append(getStats().toString())\r\n-                    .append(\")\");\r\n+                    .append(\u0027)\u0027);\r\n         }\r\n         return out.toString().toUpperCase();\r\n     }\r\ndiff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 21426b7..e6f3b01 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -113,9 +113,9 @@\n     @Override\r\n     public String toString() {\r\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n-        sb.append(\" \").append(getId()).append(\" \");\r\n+        sb.append(\u0027 \u0027).append(getId()).append(\u0027 \u0027);\r\n         for (byte b : getArgs()) {\r\n-            sb.append(Byte.toUnsignedInt(b)).append(\" \");\r\n+            sb.append(Byte.toUnsignedInt(b)).append(\u0027 \u0027);\r\n         }\r\n         return sb.toString();\r\n     }\r\ndiff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\nindex 39f20fd..2b81c52 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FlowTableEntry.java\n@@ -132,7 +132,7 @@\n             });\r\n             out.append(\"} (\")\r\n                     .append(getStats().toString())\r\n-                    .append(\")\");\r\n+                    .append(\u0027)\u0027);\r\n         }\r\n         return out.toString().toUpperCase();\r\n     }\r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 135,
    "nodeStartChar": 4373,
    "before": "\")\"",
    "after": "\u0027)\u0027"
  },
  {
    "commitSHA1": "c7a1cd4cfa9c70ca43b053b8b0b02be6eb898539",
    "commitFile": "core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java",
    "patch": "diff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 21426b7..e6f3b01 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -113,9 +113,9 @@\n     @Override\r\n     public String toString() {\r\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n-        sb.append(\" \").append(getId()).append(\" \");\r\n+        sb.append(\u0027 \u0027).append(getId()).append(\u0027 \u0027);\r\n         for (byte b : getArgs()) {\r\n-            sb.append(Byte.toUnsignedInt(b)).append(\" \");\r\n+            sb.append(Byte.toUnsignedInt(b)).append(\u0027 \u0027);\r\n         }\r\n         return sb.toString();\r\n     }\r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 116,
    "nodeStartChar": 3537,
    "before": "\" \"",
    "after": "\u0027 \u0027"
  },
  {
    "commitSHA1": "c7a1cd4cfa9c70ca43b053b8b0b02be6eb898539",
    "commitFile": "core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java",
    "patch": "diff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 21426b7..e6f3b01 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -113,9 +113,9 @@\n     @Override\r\n     public String toString() {\r\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n-        sb.append(\" \").append(getId()).append(\" \");\r\n+        sb.append(\u0027 \u0027).append(getId()).append(\u0027 \u0027);\r\n         for (byte b : getArgs()) {\r\n-            sb.append(Byte.toUnsignedInt(b)).append(\" \");\r\n+            sb.append(Byte.toUnsignedInt(b)).append(\u0027 \u0027);\r\n         }\r\n         return sb.toString();\r\n     }\r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 118,
    "nodeStartChar": 3658,
    "before": "\" \"",
    "after": "\u0027 \u0027"
  },
  {
    "commitSHA1": "1054bc36c83b2b0e8f3f4135a18c12e5173a3405",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\nindex eef7cc6..adf17c6 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n@@ -55,9 +55,8 @@\n      * (The FlowVisor code is not yet complete).\n      *\n      * @param args the command line arguments\n-     * @throws java.lang.Exception\n      */\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args){\n         SdnWise sw \u003d new SdnWise();\n         sw.startExemplaryControlPlane();\n     }\n",
    "projectName": "sdn-wise-java",
    "lineNum": 45,
    "nodeStartChar": 1827,
    "before": "/**   * Starts the components of the SDN-WISE AbstractController. In its default configuration a simulated network of SDN-WISE nodes is started. An SdnWise object is made of three main components: A AbstractController, an Adaptation, and a FlowVisor. The AbstractController manages the requests coming from the network, and creates a virtual representation of the topology of the network. The Adaptation adapts the format of the packets coming from the nodes in order to be accepted by the other components of the architecture and vice versa. The FlowVisor is responsible for authenticating nodes and controllers, allowing the slicing of the network (The FlowVisor code is not yet complete).  * @param args the command line arguments  * @throws java.lang.Exception  */ public static void main(String[] args) throws Exception {   SdnWise sw\u003dnew SdnWise();   sw.startExemplaryControlPlane(); } ",
    "after": "/**   * Starts the components of the SDN-WISE AbstractController. In its default configuration a simulated network of SDN-WISE nodes is started. An SdnWise object is made of three main components: A AbstractController, an Adaptation, and a FlowVisor. The AbstractController manages the requests coming from the network, and creates a virtual representation of the topology of the network. The Adaptation adapts the format of the packets coming from the nodes in order to be accepted by the other components of the architecture and vice versa. The FlowVisor is responsible for authenticating nodes and controllers, allowing the slicing of the network (The FlowVisor code is not yet complete).  * @param args the command line arguments  * @throws java.lang.Exception  */ public static void main(String[] args){   SdnWise sw\u003dnew SdnWise();   sw.startExemplaryControlPlane(); } "
  },
  {
    "commitSHA1": "725eb3a0c99f09463a83202a7921c8df608a43e9",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\nindex 8ff0ad1..efa2394 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n@@ -380,7 +380,7 @@\n      */\n     @Override\n     public final void setNodeRssiMin(byte net, NodeAddress dst, byte newRssi) {\n-        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, PACKET_TTL, new byte[]{newRssi});\n+        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, RSSI_MIN, new byte[]{newRssi});\n         sendNetworkPacket(cp);\n     }\n \ndiff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\nindex 8c62e77..8deb0bd 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n@@ -490,28 +490,28 @@\n             jSpinnerReport.commitEdit();\n \n             controller.setNodeBeaconPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());\n \n             controller.setNodeReportPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerReport.getValue()).shortValue());\n \n             controller.setNodeRssiMin(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());\n \n             controller.setNodePacketTtl(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\ndiff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\nindex 8ff0ad1..efa2394 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n@@ -380,7 +380,7 @@\n      */\n     @Override\n     public final void setNodeRssiMin(byte net, NodeAddress dst, byte newRssi) {\n-        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, PACKET_TTL, new byte[]{newRssi});\n+        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, RSSI_MIN, new byte[]{newRssi});\n         sendNetworkPacket(cp);\n     }\n \n",
    "projectName": "sdn-wise-java",
    "lineNum": 383,
    "nodeStartChar": 13578,
    "before": "new ConfigPacket(net,sinkAddress,dst,PACKET_TTL,new byte[]{newRssi})",
    "after": "new ConfigPacket(net,sinkAddress,dst,RSSI_MIN,new byte[]{newRssi})"
  },
  {
    "commitSHA1": "725eb3a0c99f09463a83202a7921c8df608a43e9",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\nindex 8c62e77..8deb0bd 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n@@ -490,28 +490,28 @@\n             jSpinnerReport.commitEdit();\n \n             controller.setNodeBeaconPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());\n \n             controller.setNodeReportPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerReport.getValue()).shortValue());\n \n             controller.setNodeRssiMin(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());\n \n             controller.setNodePacketTtl(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n",
    "projectName": "sdn-wise-java",
    "lineNum": 493,
    "nodeStartChar": 25692,
    "before": "(byte)this.jSpinnerNetID.getValue()",
    "after": "((Integer)this.jSpinnerNetID.getValue()).byteValue()"
  },
  {
    "commitSHA1": "725eb3a0c99f09463a83202a7921c8df608a43e9",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\nindex 8c62e77..8deb0bd 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n@@ -490,28 +490,28 @@\n             jSpinnerReport.commitEdit();\n \n             controller.setNodeBeaconPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());\n \n             controller.setNodeReportPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerReport.getValue()).shortValue());\n \n             controller.setNodeRssiMin(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());\n \n             controller.setNodePacketTtl(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n",
    "projectName": "sdn-wise-java",
    "lineNum": 500,
    "nodeStartChar": 26048,
    "before": "(byte)this.jSpinnerNetID.getValue()",
    "after": "((Integer)this.jSpinnerNetID.getValue()).byteValue()"
  },
  {
    "commitSHA1": "725eb3a0c99f09463a83202a7921c8df608a43e9",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\nindex 8c62e77..8deb0bd 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n@@ -490,28 +490,28 @@\n             jSpinnerReport.commitEdit();\n \n             controller.setNodeBeaconPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());\n \n             controller.setNodeReportPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerReport.getValue()).shortValue());\n \n             controller.setNodeRssiMin(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());\n \n             controller.setNodePacketTtl(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n",
    "projectName": "sdn-wise-java",
    "lineNum": 507,
    "nodeStartChar": 26399,
    "before": "(byte)this.jSpinnerNetID.getValue()",
    "after": "((Integer)this.jSpinnerNetID.getValue()).byteValue()"
  },
  {
    "commitSHA1": "725eb3a0c99f09463a83202a7921c8df608a43e9",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\nindex 8c62e77..8deb0bd 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n@@ -490,28 +490,28 @@\n             jSpinnerReport.commitEdit();\n \n             controller.setNodeBeaconPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());\n \n             controller.setNodeReportPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerReport.getValue()).shortValue());\n \n             controller.setNodeRssiMin(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());\n \n             controller.setNodePacketTtl(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n",
    "projectName": "sdn-wise-java",
    "lineNum": 514,
    "nodeStartChar": 26749,
    "before": "(byte)this.jSpinnerNetID.getValue()",
    "after": "((Integer)this.jSpinnerNetID.getValue()).byteValue()"
  },
  {
    "commitSHA1": "e8fe2901d3a23f9c16b8d5093de48022257d8cde",
    "commitFile": "core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java",
    "patch": "diff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 1f31606..db2bce9 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -56,7 +56,7 @@\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n         sb.append(\" \").append(getId()).append(\" \");\r\n         for (int i \u003d 0; i\u003csize; i++){\r\n-            sb.append(getValue(i+2)).append(\" \");\r\n+            sb.append(getValue(i)).append(\" \");\r\n         }\r\n         return sb.toString();\r\n     }\r\n@@ -66,7 +66,7 @@\n         String[] tmp \u003d str.split(\" \");\r\n         if (tmp[0].equals(FUNCTION.name())) {\r\n             this.size \u003d tmp.length-2;\r\n-            this.action \u003d new byte[size];\r\n+            this.action \u003d new byte[size+1];\r\n             \r\n             setId(Integer.parseInt(tmp[1]));\r\n             \r\ndiff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 1f31606..db2bce9 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -56,7 +56,7 @@\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n         sb.append(\" \").append(getId()).append(\" \");\r\n         for (int i \u003d 0; i\u003csize; i++){\r\n-            sb.append(getValue(i+2)).append(\" \");\r\n+            sb.append(getValue(i)).append(\" \");\r\n         }\r\n         return sb.toString();\r\n     }\r\n@@ -66,7 +66,7 @@\n         String[] tmp \u003d str.split(\" \");\r\n         if (tmp[0].equals(FUNCTION.name())) {\r\n             this.size \u003d tmp.length-2;\r\n-            this.action \u003d new byte[size];\r\n+            this.action \u003d new byte[size+1];\r\n             \r\n             setId(Integer.parseInt(tmp[1]));\r\n             \r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 59,
    "nodeStartChar": 1792,
    "before": "i + 2",
    "after": "i"
  },
  {
    "commitSHA1": "e8fe2901d3a23f9c16b8d5093de48022257d8cde",
    "commitFile": "core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java",
    "patch": "diff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 1f31606..db2bce9 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -56,7 +56,7 @@\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n         sb.append(\" \").append(getId()).append(\" \");\r\n         for (int i \u003d 0; i\u003csize; i++){\r\n-            sb.append(getValue(i+2)).append(\" \");\r\n+            sb.append(getValue(i)).append(\" \");\r\n         }\r\n         return sb.toString();\r\n     }\r\n@@ -66,7 +66,7 @@\n         String[] tmp \u003d str.split(\" \");\r\n         if (tmp[0].equals(FUNCTION.name())) {\r\n             this.size \u003d tmp.length-2;\r\n-            this.action \u003d new byte[size];\r\n+            this.action \u003d new byte[size+1];\r\n             \r\n             setId(Integer.parseInt(tmp[1]));\r\n             \r\ndiff --git a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\nindex 1f31606..db2bce9 100644\n--- a/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n+++ b/core/src/main/java/com/github/sdnwiselab/sdnwise/flowtable/FunctionAction.java\n@@ -56,7 +56,7 @@\n         StringBuilder sb \u003d new StringBuilder(FUNCTION.name());\r\n         sb.append(\" \").append(getId()).append(\" \");\r\n         for (int i \u003d 0; i\u003csize; i++){\r\n-            sb.append(getValue(i+2)).append(\" \");\r\n+            sb.append(getValue(i)).append(\" \");\r\n         }\r\n         return sb.toString();\r\n     }\r\n@@ -66,7 +66,7 @@\n         String[] tmp \u003d str.split(\" \");\r\n         if (tmp[0].equals(FUNCTION.name())) {\r\n             this.size \u003d tmp.length-2;\r\n-            this.action \u003d new byte[size];\r\n+            this.action \u003d new byte[size+1];\r\n             \r\n             setId(Integer.parseInt(tmp[1]));\r\n             \r\n",
    "projectName": "sdn-wise-java",
    "lineNum": 69,
    "nodeStartChar": 2084,
    "before": "size",
    "after": "size + 1"
  },
  {
    "commitSHA1": "c73a1c9b235394e180058cdf65fe322fd71162ec",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\nindex 4495241..92ad4b2 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n@@ -204,7 +204,7 @@\n                 \"HelloWorld.class\");\n \n         FlowTableEntry e1 \u003d FlowTableEntry.fromString(\n-                \"if (P.DST_LOW \u003d\u003d 8) {\"\n+                \"if (P.DST \u003d\u003d 8) {\"\n                 + \" FUNCTION 1 0 0 0 0 0 0;\"\n                 + \" FORWARD_U 8;\"\n                 + \"}\");\ndiff --git a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java\nindex e877dbc..3d590b9 100644\n--- a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java\n+++ b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java\n@@ -182,7 +182,7 @@\n                 .setLhs(DST_INDEX)\n                 .setRhsLocation(SDN_WISE_CONST)\n                 .setRhs(this.myAddress.intValue()));\n-        toSink.addWindow(Window.fromString(\"P.TYPE \u003d\u003d 3\"));\n+        toSink.addWindow(Window.fromString(\"P.TYP \u003d\u003d 3\"));\n         toSink.addAction(new ForwardUnicastAction(myAddress));\n         toSink.getStats().setPermanent();\n         flowTable.add(0, toSink);\ndiff --git a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java\nindex 8217d75..f5364a3 100644\n--- a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java\n+++ b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java\n@@ -80,7 +80,7 @@\n                         .setLhs(DST_INDEX)\n                         .setRhsLocation(SDN_WISE_CONST)\n                         .setRhs(bp.getSinkAddress().intValue()));\n-                toSink.addWindow(Window.fromString(\"P.TYPE \u003d\u003d 3\"));\n+                toSink.addWindow(Window.fromString(\"P.TYP \u003d\u003d 3\"));\n                 toSink.addAction(new ForwardUnicastAction(bp.getSrc()));\n                 flowTable.set(0, toSink);\n \ndiff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\nindex 4495241..92ad4b2 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n@@ -204,7 +204,7 @@\n                 \"HelloWorld.class\");\n \n         FlowTableEntry e1 \u003d FlowTableEntry.fromString(\n-                \"if (P.DST_LOW \u003d\u003d 8) {\"\n+                \"if (P.DST \u003d\u003d 8) {\"\n                 + \" FUNCTION 1 0 0 0 0 0 0;\"\n                 + \" FORWARD_U 8;\"\n                 + \"}\");\n",
    "projectName": "sdn-wise-java",
    "lineNum": 207,
    "nodeStartChar": 8903,
    "before": "\"if (P.DST_LOW \u003d\u003d 8) {\"",
    "after": "\"if (P.DST \u003d\u003d 8) {\""
  },
  {
    "commitSHA1": "c73a1c9b235394e180058cdf65fe322fd71162ec",
    "commitFile": "data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java",
    "patch": "diff --git a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java\nindex e877dbc..3d590b9 100644\n--- a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java\n+++ b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/AbstractCore.java\n@@ -182,7 +182,7 @@\n                 .setLhs(DST_INDEX)\n                 .setRhsLocation(SDN_WISE_CONST)\n                 .setRhs(this.myAddress.intValue()));\n-        toSink.addWindow(Window.fromString(\"P.TYPE \u003d\u003d 3\"));\n+        toSink.addWindow(Window.fromString(\"P.TYP \u003d\u003d 3\"));\n         toSink.addAction(new ForwardUnicastAction(myAddress));\n         toSink.getStats().setPermanent();\n         flowTable.add(0, toSink);\n",
    "projectName": "sdn-wise-java",
    "lineNum": 185,
    "nodeStartChar": 6038,
    "before": "\"P.TYPE \u003d\u003d 3\"",
    "after": "\"P.TYP \u003d\u003d 3\""
  },
  {
    "commitSHA1": "c73a1c9b235394e180058cdf65fe322fd71162ec",
    "commitFile": "data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java",
    "patch": "diff --git a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java\nindex 8217d75..f5364a3 100644\n--- a/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java\n+++ b/data/src/main/java/com/github/sdnwiselab/sdnwise/mote/core/MoteCore.java\n@@ -80,7 +80,7 @@\n                         .setLhs(DST_INDEX)\n                         .setRhsLocation(SDN_WISE_CONST)\n                         .setRhs(bp.getSinkAddress().intValue()));\n-                toSink.addWindow(Window.fromString(\"P.TYPE \u003d\u003d 3\"));\n+                toSink.addWindow(Window.fromString(\"P.TYP \u003d\u003d 3\"));\n                 toSink.addAction(new ForwardUnicastAction(bp.getSrc()));\n                 flowTable.set(0, toSink);\n \n",
    "projectName": "sdn-wise-java",
    "lineNum": 83,
    "nodeStartChar": 3124,
    "before": "\"P.TYPE \u003d\u003d 3\"",
    "after": "\"P.TYP \u003d\u003d 3\""
  },
  {
    "commitSHA1": "adfa66e99aa804d86f6f4216604d35006f45af68",
    "commitFile": "src/main/java/com/metamx/metrics/SysMonitor.java",
    "patch": "diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\n",
    "projectName": "server-metrics",
    "lineNum": 280,
    "nodeStartChar": 8568,
    "before": "fsu.getTotal()",
    "after": "fsu.getUsed()"
  },
  {
    "commitSHA1": "7d1ac8359de2d667b08f27b1b4a9cdb1f10f076c",
    "commitFile": "src/main/java/com/metamx/metrics/SysMonitor.java",
    "patch": "diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\ndiff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\n",
    "projectName": "server-metrics",
    "lineNum": 280,
    "nodeStartChar": 8568,
    "before": "fsu.getTotal()",
    "after": "fsu.getUsed()"
  },
  {
    "commitSHA1": "8040d6b4206c1566ee38f31753dcccd5d8bc8268",
    "commitFile": "src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java",
    "patch": "diff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex f2cd721..3078240 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn Optional.ofNullable(_args)\n+\t\treturn (Supplier)Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n+\t\t\t\t\t\t\t.orElse(getSupplier());\n \t}\n \n \t/**\ndiff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex f2cd721..3078240 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn Optional.ofNullable(_args)\n+\t\treturn (Supplier)Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n+\t\t\t\t\t\t\t.orElse(getSupplier());\n \t}\n \n \t/**\n",
    "projectName": "service-repository",
    "lineNum": 78,
    "nodeStartChar": 2750,
    "before": "Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElseGet(() -\u003e getSupplier())",
    "after": "(Supplier)Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElseGet(() -\u003e getSupplier())"
  },
  {
    "commitSHA1": "8040d6b4206c1566ee38f31753dcccd5d8bc8268",
    "commitFile": "src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java",
    "patch": "diff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex f2cd721..3078240 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn Optional.ofNullable(_args)\n+\t\treturn (Supplier)Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n+\t\t\t\t\t\t\t.orElse(getSupplier());\n \t}\n \n \t/**\ndiff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex f2cd721..3078240 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn Optional.ofNullable(_args)\n+\t\treturn (Supplier)Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n+\t\t\t\t\t\t\t.orElse(getSupplier());\n \t}\n \n \t/**\n",
    "projectName": "service-repository",
    "lineNum": 78,
    "nodeStartChar": 2750,
    "before": "Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElseGet(() -\u003e getSupplier())",
    "after": "Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElse(getSupplier())"
  },
  {
    "commitSHA1": "5d4a32a598b22ff8bbd18ade3d50ba7b76757b39",
    "commitFile": "src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java",
    "patch": "diff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex 3078240..f2cd721 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn (Supplier)Optional.ofNullable(_args)\n+\t\treturn Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElse(getSupplier());\n+\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n \t}\n \n \t/**\ndiff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex 3078240..f2cd721 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn (Supplier)Optional.ofNullable(_args)\n+\t\treturn Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElse(getSupplier());\n+\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n \t}\n \n \t/**\n",
    "projectName": "service-repository",
    "lineNum": 78,
    "nodeStartChar": 2750,
    "before": "(Supplier)Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElse(getSupplier())",
    "after": "Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElse(getSupplier())"
  },
  {
    "commitSHA1": "5d4a32a598b22ff8bbd18ade3d50ba7b76757b39",
    "commitFile": "src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java",
    "patch": "diff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex 3078240..f2cd721 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn (Supplier)Optional.ofNullable(_args)\n+\t\treturn Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElse(getSupplier());\n+\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n \t}\n \n \t/**\ndiff --git a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\nindex 3078240..f2cd721 100644\n--- a/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n+++ b/src/main/java/org/bytemechanics/service/repository/ServiceSupplier.java\n@@ -75,11 +75,11 @@\n \t * @since 1.2.0\n \t */\n \tpublic default Supplier provideSupplier(final Object... _args){\n-\t\treturn (Supplier)Optional.ofNullable(_args)\n+\t\treturn Optional.ofNullable(_args)\n \t\t\t\t\t\t\t.filter(arguments -\u003e arguments.length\u003e0)\n \t\t\t\t\t\t\t.filter(arguments -\u003e getImplementation()!\u003dnull)\n \t\t\t\t\t\t\t.map(arguments -\u003e generateSupplier(getName(),getImplementation(), arguments))\n-\t\t\t\t\t\t\t.orElse(getSupplier());\n+\t\t\t\t\t\t\t.orElseGet(() -\u003e getSupplier());\n \t}\n \n \t/**\n",
    "projectName": "service-repository",
    "lineNum": 78,
    "nodeStartChar": 2760,
    "before": "Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElse(getSupplier())",
    "after": "Optional.ofNullable(_args).filter(arguments -\u003e arguments.length \u003e 0).filter(arguments -\u003e getImplementation() !\u003d null).map(arguments -\u003e generateSupplier(getName(),getImplementation(),arguments)).orElseGet(() -\u003e getSupplier())"
  },
  {
    "commitSHA1": "9aedb106ec2167b4c26151be019b91fa85a582ab",
    "commitFile": "src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\nindex 28ffed1..bd72e48 100644\n--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n@@ -146,8 +146,9 @@\n             if ( exceptionMap !\u003d null )\n             {\n                 exceptionComment \u003d\n-                    javaDocHelper.parseJavaDoc( sourceType, byteType,\n-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );\n+                    javaDocHelper.parseJavaDoc( sourceType,\n+                                                byteType,\n+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );\n             }\n             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );\n         }\ndiff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\nindex 28ffed1..bd72e48 100644\n--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n@@ -146,8 +146,9 @@\n             if ( exceptionMap !\u003d null )\n             {\n                 exceptionComment \u003d\n-                    javaDocHelper.parseJavaDoc( sourceType, byteType,\n-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );\n+                    javaDocHelper.parseJavaDoc( sourceType,\n+                                                byteType,\n+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );\n             }\n             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );\n         }\n",
    "projectName": "servicedocgen-maven-plugin",
    "lineNum": 151,
    "nodeStartChar": 6069,
    "before": "byteType.getAssignmentClass()",
    "after": "exceptionByteType.getAssignmentClass()"
  },
  {
    "commitSHA1": "cd7c61857ff8c68f16f38ffafe13a41f174ad50e",
    "commitFile": "src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java",
    "patch": "diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\ndiff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\n",
    "projectName": "shrinkwrap-container-jetty-70",
    "lineNum": 137,
    "nodeStartChar": 4721,
    "before": "archive.addWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)",
    "after": "archive.addAsWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)"
  },
  {
    "commitSHA1": "7455db9d62cd2ac9e43e25e301a39ecad156ce53",
    "commitFile": "src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java",
    "patch": "diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\ndiff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\n",
    "projectName": "shrinkwrap-container-jetty-70",
    "lineNum": 137,
    "nodeStartChar": 4721,
    "before": "archive.addWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)",
    "after": "archive.addAsWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)"
  },
  {
    "commitSHA1": "898c81365218696343c7ac29819ac20406604403",
    "commitFile": "component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java",
    "patch": "diff --git a/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java b/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java\nindex 7c1abde..6d7e611 100644\n--- a/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java\n+++ b/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java\n@@ -87,7 +87,7 @@\n                         name \u003d \"output\",\n                         description \u003d \"All the processed outputs defined in the query. The number of outputs can \" +\n                                 \"vary depending on the query definition.\",\n-                        type \u003d {DataType.OBJECT}\n+                        type \u003d {DataType.STRING, DataType.INT, DataType.DOUBLE, DataType.FLOAT, DataType.BOOL}\n                 )\n         },\n         examples \u003d {\ndiff --git a/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java b/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java\nindex 7c1abde..6d7e611 100644\n--- a/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java\n+++ b/component/src/main/java/org/wso2/extension/siddhi/gpl/execution/pmml/PmmlModelProcessor.java\n@@ -87,7 +87,7 @@\n                         name \u003d \"output\",\n                         description \u003d \"All the processed outputs defined in the query. The number of outputs can \" +\n                                 \"vary depending on the query definition.\",\n-                        type \u003d {DataType.OBJECT}\n+                        type \u003d {DataType.STRING, DataType.INT, DataType.DOUBLE, DataType.FLOAT, DataType.BOOL}\n                 )\n         },\n         examples \u003d {\n",
    "projectName": "siddhi-gpl-execution-pmml",
    "lineNum": 90,
    "nodeStartChar": 4208,
    "before": "{DataType.OBJECT}",
    "after": "{DataType.STRING,DataType.INT,DataType.DOUBLE,DataType.FLOAT,DataType.BOOL}"
  },
  {
    "commitSHA1": "9abf7fb8252b4ef784645ceb4c910a89b3d78b69",
    "commitFile": "src/main/java/mil/nga/sf/wkb/GeometryCodes.java",
    "patch": "diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\nindex 84be333..b2bc434 100644\n--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n@@ -176,8 +176,7 @@\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow new SFException(\n-\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \"\n-\t\t\t\t\t\t\t+ geometryType);\n+\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \" + code);\n \t\t}\n \n \t\treturn geometryType;\ndiff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\nindex 84be333..b2bc434 100644\n--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n@@ -176,8 +176,7 @@\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow new SFException(\n-\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \"\n-\t\t\t\t\t\t\t+ geometryType);\n+\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \" + code);\n \t\t}\n \n \t\treturn geometryType;\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 179,
    "nodeStartChar": 3303,
    "before": "\"Unsupported Geometry code for type retrieval: \" + geometryType",
    "after": "\"Unsupported Geometry code for type retrieval: \" + code"
  },
  {
    "commitSHA1": "59f8b11bcbba78bb18d4403cfeecbb5bde17aa67",
    "commitFile": "src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java",
    "patch": "diff --git a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\nindex f04bef5..af5b3a9 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n@@ -104,7 +104,7 @@\n \t\t\tif (ringCopyPoints.size() \u003e\u003d 3) {\n \t\t\t\tPoint first \u003d ringCopyPoints.get(0);\n \t\t\t\tPoint last \u003d ringCopyPoints.get(ringCopyPoints.size() - 1);\n-\t\t\t\tif (first.getX() \u003d\u003d last.getX() || first.getY() \u003d\u003d last.getY()) {\n+\t\t\t\tif (first.getX() \u003d\u003d last.getX() \u0026\u0026 first.getY() \u003d\u003d last.getY()) {\n \t\t\t\t\tringCopyPoints.remove(ringCopyPoints.size() - 1);\n \t\t\t\t}\n \t\t\t}\ndiff --git a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\nindex 86cbfef..ff9a1f2 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n@@ -313,7 +313,7 @@\n \t\t\tvalue \u003d -1;\n \t\t} else if (point1.getY() \u003e point2.getY()) {\n \t\t\tvalue \u003d 1;\n-\t\t} else if (point1.getY() \u003e point2.getY()) {\n+\t\t} else if (point1.getY() \u003c point2.getY()) {\n \t\t\tvalue \u003d -1;\n \t\t}\n \t\treturn value;\ndiff --git a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\nindex f04bef5..af5b3a9 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n@@ -104,7 +104,7 @@\n \t\t\tif (ringCopyPoints.size() \u003e\u003d 3) {\n \t\t\t\tPoint first \u003d ringCopyPoints.get(0);\n \t\t\t\tPoint last \u003d ringCopyPoints.get(ringCopyPoints.size() - 1);\n-\t\t\t\tif (first.getX() \u003d\u003d last.getX() || first.getY() \u003d\u003d last.getY()) {\n+\t\t\t\tif (first.getX() \u003d\u003d last.getX() \u0026\u0026 first.getY() \u003d\u003d last.getY()) {\n \t\t\t\t\tringCopyPoints.remove(ringCopyPoints.size() - 1);\n \t\t\t\t}\n \t\t\t}\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 107,
    "nodeStartChar": 2920,
    "before": "first.getX() \u003d\u003d last.getX() || first.getY() \u003d\u003d last.getY()",
    "after": "first.getX() \u003d\u003d last.getX() \u0026\u0026 first.getY() \u003d\u003d last.getY()"
  },
  {
    "commitSHA1": "59f8b11bcbba78bb18d4403cfeecbb5bde17aa67",
    "commitFile": "src/main/java/mil/nga/wkb/util/sweep/SweepLine.java",
    "patch": "diff --git a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\nindex 86cbfef..ff9a1f2 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n@@ -313,7 +313,7 @@\n \t\t\tvalue \u003d -1;\n \t\t} else if (point1.getY() \u003e point2.getY()) {\n \t\t\tvalue \u003d 1;\n-\t\t} else if (point1.getY() \u003e point2.getY()) {\n+\t\t} else if (point1.getY() \u003c point2.getY()) {\n \t\t\tvalue \u003d -1;\n \t\t}\n \t\treturn value;\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 316,
    "nodeStartChar": 7032,
    "before": "point1.getY() \u003e point2.getY()",
    "after": "point1.getY() \u003c point2.getY()"
  },
  {
    "commitSHA1": "cf49d35ef333cee00b55b5d025b00c4e058c727f",
    "commitFile": "src/test/java/de/kysy/simplefiledb/TableTest.java",
    "patch": "diff --git a/src/test/java/de/kysy/simplefiledb/TableTest.java b/src/test/java/de/kysy/simplefiledb/TableTest.java\nindex 7de2144..4be2bdd 100644\n--- a/src/test/java/de/kysy/simplefiledb/TableTest.java\n+++ b/src/test/java/de/kysy/simplefiledb/TableTest.java\n@@ -163,7 +163,7 @@\n \tpublic void testCreateTable() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n@@ -183,14 +183,14 @@\n \n \t\tAssert.assertTrue(\"Table file must exist at this point\", tableFile.exists());\n \n-\t\tAssert.assertTrue(\"Table file must have a size greate zero\", tableFile.length() \u003e 0);\n+\t\tAssert.assertTrue(\"Table file must have a size greater zero\", tableFile.length() \u003e 0);\n \t}\n \n \t@Test\n \tpublic void testCreateTableDisallowed() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \ndiff --git a/src/test/java/de/kysy/simplefiledb/TableTest.java b/src/test/java/de/kysy/simplefiledb/TableTest.java\nindex 7de2144..4be2bdd 100644\n--- a/src/test/java/de/kysy/simplefiledb/TableTest.java\n+++ b/src/test/java/de/kysy/simplefiledb/TableTest.java\n@@ -163,7 +163,7 @@\n \tpublic void testCreateTable() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n@@ -183,14 +183,14 @@\n \n \t\tAssert.assertTrue(\"Table file must exist at this point\", tableFile.exists());\n \n-\t\tAssert.assertTrue(\"Table file must have a size greate zero\", tableFile.length() \u003e 0);\n+\t\tAssert.assertTrue(\"Table file must have a size greater zero\", tableFile.length() \u003e 0);\n \t}\n \n \t@Test\n \tpublic void testCreateTableDisallowed() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n",
    "projectName": "simplefiledb",
    "lineNum": 166,
    "nodeStartChar": 5256,
    "before": "\"a.SimpleFileDB\"",
    "after": "\"a.simplefiledb\""
  },
  {
    "commitSHA1": "cf49d35ef333cee00b55b5d025b00c4e058c727f",
    "commitFile": "src/test/java/de/kysy/simplefiledb/TableTest.java",
    "patch": "diff --git a/src/test/java/de/kysy/simplefiledb/TableTest.java b/src/test/java/de/kysy/simplefiledb/TableTest.java\nindex 7de2144..4be2bdd 100644\n--- a/src/test/java/de/kysy/simplefiledb/TableTest.java\n+++ b/src/test/java/de/kysy/simplefiledb/TableTest.java\n@@ -163,7 +163,7 @@\n \tpublic void testCreateTable() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n@@ -183,14 +183,14 @@\n \n \t\tAssert.assertTrue(\"Table file must exist at this point\", tableFile.exists());\n \n-\t\tAssert.assertTrue(\"Table file must have a size greate zero\", tableFile.length() \u003e 0);\n+\t\tAssert.assertTrue(\"Table file must have a size greater zero\", tableFile.length() \u003e 0);\n \t}\n \n \t@Test\n \tpublic void testCreateTableDisallowed() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \ndiff --git a/src/test/java/de/kysy/simplefiledb/TableTest.java b/src/test/java/de/kysy/simplefiledb/TableTest.java\nindex 7de2144..4be2bdd 100644\n--- a/src/test/java/de/kysy/simplefiledb/TableTest.java\n+++ b/src/test/java/de/kysy/simplefiledb/TableTest.java\n@@ -163,7 +163,7 @@\n \tpublic void testCreateTable() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n@@ -183,14 +183,14 @@\n \n \t\tAssert.assertTrue(\"Table file must exist at this point\", tableFile.exists());\n \n-\t\tAssert.assertTrue(\"Table file must have a size greate zero\", tableFile.length() \u003e 0);\n+\t\tAssert.assertTrue(\"Table file must have a size greater zero\", tableFile.length() \u003e 0);\n \t}\n \n \t@Test\n \tpublic void testCreateTableDisallowed() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n",
    "projectName": "simplefiledb",
    "lineNum": 186,
    "nodeStartChar": 5796,
    "before": "\"Table file must have a size greate zero\"",
    "after": "\"Table file must have a size greater zero\""
  },
  {
    "commitSHA1": "cf49d35ef333cee00b55b5d025b00c4e058c727f",
    "commitFile": "src/test/java/de/kysy/simplefiledb/TableTest.java",
    "patch": "diff --git a/src/test/java/de/kysy/simplefiledb/TableTest.java b/src/test/java/de/kysy/simplefiledb/TableTest.java\nindex 7de2144..4be2bdd 100644\n--- a/src/test/java/de/kysy/simplefiledb/TableTest.java\n+++ b/src/test/java/de/kysy/simplefiledb/TableTest.java\n@@ -163,7 +163,7 @@\n \tpublic void testCreateTable() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n@@ -183,14 +183,14 @@\n \n \t\tAssert.assertTrue(\"Table file must exist at this point\", tableFile.exists());\n \n-\t\tAssert.assertTrue(\"Table file must have a size greate zero\", tableFile.length() \u003e 0);\n+\t\tAssert.assertTrue(\"Table file must have a size greater zero\", tableFile.length() \u003e 0);\n \t}\n \n \t@Test\n \tpublic void testCreateTableDisallowed() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \ndiff --git a/src/test/java/de/kysy/simplefiledb/TableTest.java b/src/test/java/de/kysy/simplefiledb/TableTest.java\nindex 7de2144..4be2bdd 100644\n--- a/src/test/java/de/kysy/simplefiledb/TableTest.java\n+++ b/src/test/java/de/kysy/simplefiledb/TableTest.java\n@@ -163,7 +163,7 @@\n \tpublic void testCreateTable() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n@@ -183,14 +183,14 @@\n \n \t\tAssert.assertTrue(\"Table file must exist at this point\", tableFile.exists());\n \n-\t\tAssert.assertTrue(\"Table file must have a size greate zero\", tableFile.length() \u003e 0);\n+\t\tAssert.assertTrue(\"Table file must have a size greater zero\", tableFile.length() \u003e 0);\n \t}\n \n \t@Test\n \tpublic void testCreateTableDisallowed() throws DatabaseException, IOException {\n \t\tFile folder \u003d temporaryFolder.newFolder();\n \n-\t\tFile tableFile \u003d new File(folder, \"a.SimpleFileDB\");\n+\t\tFile tableFile \u003d new File(folder, \"a.simplefiledb\");\n \n \t\ttableFile.delete();\n \n",
    "projectName": "simplefiledb",
    "lineNum": 193,
    "nodeStartChar": 6038,
    "before": "\"a.SimpleFileDB\"",
    "after": "\"a.simplefiledb\""
  },
  {
    "commitSHA1": "4e23b7480ef616c2bcd598c09ec95b7f4c9c9d96",
    "commitFile": "src/main/java/de/stefanteitge/kwery/internal/Entity.java",
    "patch": "diff --git a/src/main/java/de/stefanteitge/kwery/internal/Entity.java b/src/main/java/de/stefanteitge/kwery/internal/Entity.java\nindex e30031f..ea24c73 100644\n--- a/src/main/java/de/stefanteitge/kwery/internal/Entity.java\n+++ b/src/main/java/de/stefanteitge/kwery/internal/Entity.java\n@@ -104,7 +104,7 @@\n \r\n \t\tString oldValue \u003d fields.put(column, value);\r\n \r\n-\t\tif (oldValue !\u003d null \u0026\u0026 !oldValue.equals(value)) {\r\n+\t\tif ((oldValue !\u003d null \u0026\u0026 !oldValue.equals(value)) || (oldValue \u003d\u003d null \u0026\u0026 value !\u003d null)) {\r\n \t\t\tmodified \u003d true;\r\n \t\t}\r\n \t}\r\ndiff --git a/src/main/java/de/stefanteitge/kwery/internal/Table.java b/src/main/java/de/stefanteitge/kwery/internal/Table.java\nindex b0df0c4..fbae1e7 100644\n--- a/src/main/java/de/stefanteitge/kwery/internal/Table.java\n+++ b/src/main/java/de/stefanteitge/kwery/internal/Table.java\n@@ -174,7 +174,7 @@\n \n \t\t\tbw.println(makeColumnRow());\n \n-\t\t\tfor (IEntity entity : getAll()) {\n+\t\t\tfor (IEntity entity : entityList) {\n \t\t\t\tbw.println(makeRow(entity));\n \t\t\t\tentity.setModified(false);\n \t\t\t}\ndiff --git a/src/main/java/de/stefanteitge/kwery/internal/Entity.java b/src/main/java/de/stefanteitge/kwery/internal/Entity.java\nindex e30031f..ea24c73 100644\n--- a/src/main/java/de/stefanteitge/kwery/internal/Entity.java\n+++ b/src/main/java/de/stefanteitge/kwery/internal/Entity.java\n@@ -104,7 +104,7 @@\n \r\n \t\tString oldValue \u003d fields.put(column, value);\r\n \r\n-\t\tif (oldValue !\u003d null \u0026\u0026 !oldValue.equals(value)) {\r\n+\t\tif ((oldValue !\u003d null \u0026\u0026 !oldValue.equals(value)) || (oldValue \u003d\u003d null \u0026\u0026 value !\u003d null)) {\r\n \t\t\tmodified \u003d true;\r\n \t\t}\r\n \t}\r\n",
    "projectName": "simplefiledb",
    "lineNum": 107,
    "nodeStartChar": 2881,
    "before": "oldValue !\u003d null \u0026\u0026 !oldValue.equals(value)",
    "after": "(oldValue !\u003d null \u0026\u0026 !oldValue.equals(value)) || (oldValue \u003d\u003d null \u0026\u0026 value !\u003d null)"
  },
  {
    "commitSHA1": "4e23b7480ef616c2bcd598c09ec95b7f4c9c9d96",
    "commitFile": "src/main/java/de/stefanteitge/kwery/internal/Table.java",
    "patch": "diff --git a/src/main/java/de/stefanteitge/kwery/internal/Table.java b/src/main/java/de/stefanteitge/kwery/internal/Table.java\nindex b0df0c4..fbae1e7 100644\n--- a/src/main/java/de/stefanteitge/kwery/internal/Table.java\n+++ b/src/main/java/de/stefanteitge/kwery/internal/Table.java\n@@ -174,7 +174,7 @@\n \n \t\t\tbw.println(makeColumnRow());\n \n-\t\t\tfor (IEntity entity : getAll()) {\n+\t\t\tfor (IEntity entity : entityList) {\n \t\t\t\tbw.println(makeRow(entity));\n \t\t\t\tentity.setModified(false);\n \t\t\t}\n",
    "projectName": "simplefiledb",
    "lineNum": 177,
    "nodeStartChar": 4443,
    "before": "getAll()",
    "after": "entityList"
  },
  {
    "commitSHA1": "60b2033fbb88b8931765f729755b44ef0485797a",
    "commitFile": "src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java",
    "patch": "diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\ndiff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\n",
    "projectName": "simpleimageviewer4j",
    "lineNum": 109,
    "nodeStartChar": 2801,
    "before": "vp.showNext()",
    "after": "vp.showPrevious()"
  },
  {
    "commitSHA1": "60b2033fbb88b8931765f729755b44ef0485797a",
    "commitFile": "src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java",
    "patch": "diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\ndiff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\n",
    "projectName": "simpleimageviewer4j",
    "lineNum": 112,
    "nodeStartChar": 2870,
    "before": "vp.showPrevious()",
    "after": "vp.showNext()"
  },
  {
    "commitSHA1": "38d39bb641876cc0e5591fda06ef62ff4ea89b7e",
    "commitFile": "slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java",
    "patch": "diff --git a/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java b/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java\nindex 1f1663e..098a675 100644\n--- a/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java\n+++ b/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java\n@@ -91,7 +91,7 @@\n   public void stack() {\n     Class1 class1 \u003d new Class1();\n     class1.logMe();\n-    assert(logMessage.contains(\"\\\"stacktrace\\\":\\\"com.savoirtech.logging.slf4j.json.logger.StackTest$Class4.logMe(StackTest.java:79)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class3.logMe(StackTest.java:69)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class2.logMe(StackTest.java:57)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class1.logMe(StackTest.java:45)\"));\n+    assert(logMessage.contains(\"\\\"stacktrace\\\":\\\"com.savoirtech.logging.slf4j.json.logger.StackTest$Class4.logMe(StackTest.java:86)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class3.logMe(StackTest.java:76)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class2.logMe(StackTest.java:64)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class1.logMe(StackTest.java:52)\"));\n   }\n \n }\ndiff --git a/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java b/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java\nindex 1f1663e..098a675 100644\n--- a/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java\n+++ b/slf4j-json-logger/src/test/java/com/savoirtech/logging/slf4j/json/logger/StackTest.java\n@@ -91,7 +91,7 @@\n   public void stack() {\n     Class1 class1 \u003d new Class1();\n     class1.logMe();\n-    assert(logMessage.contains(\"\\\"stacktrace\\\":\\\"com.savoirtech.logging.slf4j.json.logger.StackTest$Class4.logMe(StackTest.java:79)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class3.logMe(StackTest.java:69)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class2.logMe(StackTest.java:57)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class1.logMe(StackTest.java:45)\"));\n+    assert(logMessage.contains(\"\\\"stacktrace\\\":\\\"com.savoirtech.logging.slf4j.json.logger.StackTest$Class4.logMe(StackTest.java:86)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class3.logMe(StackTest.java:76)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class2.logMe(StackTest.java:64)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class1.logMe(StackTest.java:52)\"));\n   }\n \n }\n",
    "projectName": "slf4j-json-logger",
    "lineNum": 94,
    "nodeStartChar": 1852,
    "before": "\"\\\"stacktrace\\\":\\\"com.savoirtech.logging.slf4j.json.logger.StackTest$Class4.logMe(StackTest.java:79)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class3.logMe(StackTest.java:69)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class2.logMe(StackTest.java:57)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class1.logMe(StackTest.java:45)\"",
    "after": "\"\\\"stacktrace\\\":\\\"com.savoirtech.logging.slf4j.json.logger.StackTest$Class4.logMe(StackTest.java:86)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class3.logMe(StackTest.java:76)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class2.logMe(StackTest.java:64)\\\\n\\\\tat com.savoirtech.logging.slf4j.json.logger.StackTest$Class1.logMe(StackTest.java:52)\""
  },
  {
    "commitSHA1": "fa2009270c0227fea46e73af603d01de55863c1e",
    "commitFile": "smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java",
    "patch": "diff --git a/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java b/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java\nindex 3cec22a..968e63a 100644\n--- a/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java\n+++ b/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java\n@@ -62,10 +62,10 @@\n \t\tdoReturn(\"smarkdown\").when(servletContext).getContextPath();\n \t\tfinal String actual \u003d processor\n \t\t\t\t.process(\n-\t\t\t\t\t\t\"presentations/hands-on-vagrant-puppet/Untitled+Folder/index.html\",\n+\t\t\t\t\t\t\"foo/bar/index.html\",\n \t\t\t\t\t\t\"lorem ipsum ![alt](test1.jpg)\");\n \t\tassertThat(actual,\n-\t\t\t\tis(\"lorem ipsum ![alt](smarkdown/raw/foo/test1.jpg)\"));\n+\t\t\t\tis(\"lorem ipsum ![alt](smarkdown/raw/foo/bar/test1.jpg)\"));\n \t}\n \n \t@Test\n",
    "projectName": "smarkdown",
    "lineNum": 65,
    "nodeStartChar": 2006,
    "before": "\"presentations/hands-on-vagrant-puppet/Untitled+Folder/index.html\"",
    "after": "\"foo/bar/index.html\""
  },
  {
    "commitSHA1": "fa2009270c0227fea46e73af603d01de55863c1e",
    "commitFile": "smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java",
    "patch": "diff --git a/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java b/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java\nindex 3cec22a..968e63a 100644\n--- a/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java\n+++ b/smarkdown-jsf/src/test/java/com/ja/smarkdown/preprocessing/MarkdownPreprocessorTest.java\n@@ -62,10 +62,10 @@\n \t\tdoReturn(\"smarkdown\").when(servletContext).getContextPath();\n \t\tfinal String actual \u003d processor\n \t\t\t\t.process(\n-\t\t\t\t\t\t\"presentations/hands-on-vagrant-puppet/Untitled+Folder/index.html\",\n+\t\t\t\t\t\t\"foo/bar/index.html\",\n \t\t\t\t\t\t\"lorem ipsum ![alt](test1.jpg)\");\n \t\tassertThat(actual,\n-\t\t\t\tis(\"lorem ipsum ![alt](smarkdown/raw/foo/test1.jpg)\"));\n+\t\t\t\tis(\"lorem ipsum ![alt](smarkdown/raw/foo/bar/test1.jpg)\"));\n \t}\n \n \t@Test\n",
    "projectName": "smarkdown",
    "lineNum": 68,
    "nodeStartChar": 2142,
    "before": "\"lorem ipsum ![alt](smarkdown/raw/foo/test1.jpg)\"",
    "after": "\"lorem ipsum ![alt](smarkdown/raw/foo/bar/test1.jpg)\""
  },
  {
    "commitSHA1": "e52381af603dec6e227c9d100620a5ab56f6ac0c",
    "commitFile": "smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java",
    "patch": "diff --git a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\nindex fd4f70f..182c00e 100644\n--- a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n+++ b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n@@ -14,13 +14,13 @@\n public class FileDocumentProvider extends AbstractDocumentProvider\u003cLocation\u003e {\n \n \tpublic FileDocumentProvider() {\n-\t\tsuper(\"classpath:\", \"\");\n+\t\tsuper(\"file://\", \"\");\n \t}\n \n \t@Override\n \tprotected InputStream getInputStream(final Location location,\n \t\t\tfinal String path) throws FileNotFoundException {\n-\t\tfinal String url \u003d String.format(\"%s/%s\", location.getUrl(), path);\n+\t\tfinal String url \u003d String.format(\"file://%s\", path);\n \t\tlog.debug(\"Resolved url\u003d{}\", url);\n \t\ttry {\n \t\t\tfinal URL resourceUrl \u003d new URL(url);\ndiff --git a/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java b/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java\nindex 3fae09f..e3ccd73 100644\n--- a/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java\n+++ b/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java\n@@ -28,7 +28,7 @@\n \t}\n \n \t@Test\n-\tpublic void onEventSubDir() {\n+\tpublic void getDocumentsSubDir() {\n \t\tfinal Location location \u003d Location.create(String.format(\n \t\t\t\t\"file://%s/sub\", folder.getRoot().getAbsolutePath()));\n \n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void onEvent() {\n+\tpublic void getDocuments() {\n \t\tfinal Location location \u003d Location.create(String.format(\"file://%s\",\n \t\t\t\tfolder.getRoot().getAbsolutePath()));\n \n@@ -52,7 +52,7 @@\n \t}\n \n \t@Test\n-\tpublic void onEventWithMountPoint() {\n+\tpublic void getDocumentsWithMountPoint() {\n \t\tfinal Location location \u003d Location.create(String.format(\"file://%s\",\n \t\t\t\tfolder.getRoot().getAbsolutePath()));\n \t\tlocation.getConfig().put(Location.Properties.mountPoint.toString(),\ndiff --git a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\nindex fd4f70f..182c00e 100644\n--- a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n+++ b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n@@ -14,13 +14,13 @@\n public class FileDocumentProvider extends AbstractDocumentProvider\u003cLocation\u003e {\n \n \tpublic FileDocumentProvider() {\n-\t\tsuper(\"classpath:\", \"\");\n+\t\tsuper(\"file://\", \"\");\n \t}\n \n \t@Override\n \tprotected InputStream getInputStream(final Location location,\n \t\t\tfinal String path) throws FileNotFoundException {\n-\t\tfinal String url \u003d String.format(\"%s/%s\", location.getUrl(), path);\n+\t\tfinal String url \u003d String.format(\"file://%s\", path);\n \t\tlog.debug(\"Resolved url\u003d{}\", url);\n \t\ttry {\n \t\t\tfinal URL resourceUrl \u003d new URL(url);\n",
    "projectName": "smarkdown",
    "lineNum": 17,
    "nodeStartChar": 423,
    "before": "\"classpath:\"",
    "after": "\"file://\""
  },
  {
    "commitSHA1": "e52381af603dec6e227c9d100620a5ab56f6ac0c",
    "commitFile": "smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java",
    "patch": "diff --git a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\nindex fd4f70f..182c00e 100644\n--- a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n+++ b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n@@ -14,13 +14,13 @@\n public class FileDocumentProvider extends AbstractDocumentProvider\u003cLocation\u003e {\n \n \tpublic FileDocumentProvider() {\n-\t\tsuper(\"classpath:\", \"\");\n+\t\tsuper(\"file://\", \"\");\n \t}\n \n \t@Override\n \tprotected InputStream getInputStream(final Location location,\n \t\t\tfinal String path) throws FileNotFoundException {\n-\t\tfinal String url \u003d String.format(\"%s/%s\", location.getUrl(), path);\n+\t\tfinal String url \u003d String.format(\"file://%s\", path);\n \t\tlog.debug(\"Resolved url\u003d{}\", url);\n \t\ttry {\n \t\t\tfinal URL resourceUrl \u003d new URL(url);\ndiff --git a/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java b/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java\nindex 3fae09f..e3ccd73 100644\n--- a/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java\n+++ b/smarkdown-location-file/src/test/java/com/ja/smarkdown/location/file/FileListingProviderTest.java\n@@ -28,7 +28,7 @@\n \t}\n \n \t@Test\n-\tpublic void onEventSubDir() {\n+\tpublic void getDocumentsSubDir() {\n \t\tfinal Location location \u003d Location.create(String.format(\n \t\t\t\t\"file://%s/sub\", folder.getRoot().getAbsolutePath()));\n \n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void onEvent() {\n+\tpublic void getDocuments() {\n \t\tfinal Location location \u003d Location.create(String.format(\"file://%s\",\n \t\t\t\tfolder.getRoot().getAbsolutePath()));\n \n@@ -52,7 +52,7 @@\n \t}\n \n \t@Test\n-\tpublic void onEventWithMountPoint() {\n+\tpublic void getDocumentsWithMountPoint() {\n \t\tfinal Location location \u003d Location.create(String.format(\"file://%s\",\n \t\t\t\tfolder.getRoot().getAbsolutePath()));\n \t\tlocation.getConfig().put(Location.Properties.mountPoint.toString(),\ndiff --git a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\nindex fd4f70f..182c00e 100644\n--- a/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n+++ b/smarkdown-location-file/src/main/java/com/ja/smarkdown/location/file/FileDocumentProvider.java\n@@ -14,13 +14,13 @@\n public class FileDocumentProvider extends AbstractDocumentProvider\u003cLocation\u003e {\n \n \tpublic FileDocumentProvider() {\n-\t\tsuper(\"classpath:\", \"\");\n+\t\tsuper(\"file://\", \"\");\n \t}\n \n \t@Override\n \tprotected InputStream getInputStream(final Location location,\n \t\t\tfinal String path) throws FileNotFoundException {\n-\t\tfinal String url \u003d String.format(\"%s/%s\", location.getUrl(), path);\n+\t\tfinal String url \u003d String.format(\"file://%s\", path);\n \t\tlog.debug(\"Resolved url\u003d{}\", url);\n \t\ttry {\n \t\t\tfinal URL resourceUrl \u003d new URL(url);\n",
    "projectName": "smarkdown",
    "lineNum": 23,
    "nodeStartChar": 594,
    "before": "String.format(\"%s/%s\",location.getUrl(),path)",
    "after": "String.format(\"file://%s\",path)"
  },
  {
    "commitSHA1": "de7db62d69ddd75b90a425e3c3b466da2fbc2ffa",
    "commitFile": "socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java",
    "patch": "diff --git a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\nindex a660909..1f2af3c 100644\n--- a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n+++ b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n@@ -364,7 +364,7 @@\n             Set\u003cMap.Entry\u003e entries \u003d ((Map) json).entrySet();\n \n             for (Map.Entry e : entries)\n-                map.put(e.getKey(), extractBinaryObjects(e, attachments));\n+                map.put(e.getKey(), extractBinaryObjects(e.getValue(), attachments));\n \n             return map;\n         }\ndiff --git a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\nindex a660909..1f2af3c 100644\n--- a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n+++ b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n@@ -364,7 +364,7 @@\n             Set\u003cMap.Entry\u003e entries \u003d ((Map) json).entrySet();\n \n             for (Map.Entry e : entries)\n-                map.put(e.getKey(), extractBinaryObjects(e, attachments));\n+                map.put(e.getKey(), extractBinaryObjects(e.getValue(), attachments));\n \n             return map;\n         }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 367,
    "nodeStartChar": 11937,
    "before": "e",
    "after": "e.getValue()"
  },
  {
    "commitSHA1": "e7564e60768311caf9871ce373f7e78a208b7ba1",
    "commitFile": "socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java",
    "patch": "diff --git a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\nindex a660909..1f2af3c 100644\n--- a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n+++ b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n@@ -364,7 +364,7 @@\n             Set\u003cMap.Entry\u003e entries \u003d ((Map) json).entrySet();\n \n             for (Map.Entry e : entries)\n-                map.put(e.getKey(), extractBinaryObjects(e, attachments));\n+                map.put(e.getKey(), extractBinaryObjects(e.getValue(), attachments));\n \n             return map;\n         }\ndiff --git a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\nindex a660909..1f2af3c 100644\n--- a/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n+++ b/socket-io/src/main/java/com/codeminders/socketio/protocol/SocketIOProtocol.java\n@@ -364,7 +364,7 @@\n             Set\u003cMap.Entry\u003e entries \u003d ((Map) json).entrySet();\n \n             for (Map.Entry e : entries)\n-                map.put(e.getKey(), extractBinaryObjects(e, attachments));\n+                map.put(e.getKey(), extractBinaryObjects(e.getValue(), attachments));\n \n             return map;\n         }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 367,
    "nodeStartChar": 11937,
    "before": "e",
    "after": "e.getValue()"
  },
  {
    "commitSHA1": "32408e7c47fb187fc84d44c7de01b87776a141d3",
    "commitFile": "core/src/main/java/com/glines/socketio/common/DisconnectReason.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\ndiff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 35,
    "nodeStartChar": 1634,
    "before": "6",
    "after": "7"
  },
  {
    "commitSHA1": "305d9ff5a921ca7da6c2f824b4c612786889146b",
    "commitFile": "core/src/main/java/com/glines/socketio/common/DisconnectReason.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\ndiff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 35,
    "nodeStartChar": 1634,
    "before": "6",
    "after": "7"
  },
  {
    "commitSHA1": "a543f21a3722bd27029f18b9ff4295b4ff4aeccb",
    "commitFile": "core/src/main/java/com/glines/socketio/util/Web.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/util/Web.java b/core/src/main/java/com/glines/socketio/util/Web.java\nindex a854c64..660fe06 100644\n--- a/core/src/main/java/com/glines/socketio/util/Web.java\n+++ b/core/src/main/java/com/glines/socketio/util/Web.java\n@@ -45,7 +45,7 @@\n             if (path.startsWith(\"/\")) path \u003d path.substring(1);\n             String[] parts \u003d path.split(\"/\");\n             if (parts.length \u003e\u003d 2) {\n-                return parts[1] \u003d\u003d null ? null : (parts[1].length() \u003d\u003d 0 ? null : parts[1]);\n+                return parts[1] \u003d\u003d null || parts[1].length() \u003d\u003d 0 || parts[1].equals(\"null\") ? null : parts[1];\n             }\n         }\n         return null;\ndiff --git a/core/src/main/java/com/glines/socketio/util/Web.java b/core/src/main/java/com/glines/socketio/util/Web.java\nindex a854c64..660fe06 100644\n--- a/core/src/main/java/com/glines/socketio/util/Web.java\n+++ b/core/src/main/java/com/glines/socketio/util/Web.java\n@@ -45,7 +45,7 @@\n             if (path.startsWith(\"/\")) path \u003d path.substring(1);\n             String[] parts \u003d path.split(\"/\");\n             if (parts.length \u003e\u003d 2) {\n-                return parts[1] \u003d\u003d null ? null : (parts[1].length() \u003d\u003d 0 ? null : parts[1]);\n+                return parts[1] \u003d\u003d null || parts[1].length() \u003d\u003d 0 || parts[1].equals(\"null\") ? null : parts[1];\n             }\n         }\n         return null;\n",
    "projectName": "socket.io-server-java",
    "lineNum": 48,
    "nodeStartChar": 1949,
    "before": "parts[1] \u003d\u003d null ? null : (parts[1].length() \u003d\u003d 0 ? null : parts[1])",
    "after": "parts[1] \u003d\u003d null || parts[1].length() \u003d\u003d 0 || parts[1].equals(\"null\") ? null : parts[1]"
  },
  {
    "commitSHA1": "1874e5c82639b0e73f14ac7e9a2b99ab9bccaba0",
    "commitFile": "core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\nindex 1026e57..6021519 100644\n--- a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n+++ b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n@@ -35,6 +35,6 @@\n \n     @Override\n     protected DataHandler newDataHandler(SocketIOSession session) {\n-        return new JSONPPollingDataHandler(session);\n+        return new XHRPollingDataHandler(session);\n     }\n }\ndiff --git a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\nindex 1026e57..6021519 100644\n--- a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n+++ b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n@@ -35,6 +35,6 @@\n \n     @Override\n     protected DataHandler newDataHandler(SocketIOSession session) {\n-        return new JSONPPollingDataHandler(session);\n+        return new XHRPollingDataHandler(session);\n     }\n }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 38,
    "nodeStartChar": 1590,
    "before": "JSONPPollingDataHandler",
    "after": "XHRPollingDataHandler"
  },
  {
    "commitSHA1": "c1a0aecd318ab04b68b67b07f1faa8736efa6857",
    "commitFile": "gen/src/main/java/com/softlayer/api/gen/ClassWriter.java",
    "patch": "diff --git a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\nindex 6e318c8..671c04f 100644\n--- a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n+++ b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n@@ -272,7 +272,7 @@\n             if (!method.name.equals(method.meta.name)) {\n                 params.put(\"value\", stringLiteral(method.meta.name));\n             }\n-            if (!method.meta.isstatic) {\n+            if (!method.meta.isstatic \u0026\u0026 !\"SoftLayer_Resource_Metadata\".equals(type.meta.name)) {\n                 params.put(\"instanceRequired\", true);\n             }\n             emitAnnotation(TYPE_API_METHOD, params);\ndiff --git a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\nindex 6e318c8..671c04f 100644\n--- a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n+++ b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n@@ -272,7 +272,7 @@\n             if (!method.name.equals(method.meta.name)) {\n                 params.put(\"value\", stringLiteral(method.meta.name));\n             }\n-            if (!method.meta.isstatic) {\n+            if (!method.meta.isstatic \u0026\u0026 !\"SoftLayer_Resource_Metadata\".equals(type.meta.name)) {\n                 params.put(\"instanceRequired\", true);\n             }\n             emitAnnotation(TYPE_API_METHOD, params);\n",
    "projectName": "softlayer-java",
    "lineNum": 275,
    "nodeStartChar": 11997,
    "before": "!method.meta.isstatic",
    "after": "!method.meta.isstatic \u0026\u0026 !\"SoftLayer_Resource_Metadata\".equals(type.meta.name)"
  },
  {
    "commitSHA1": "f7f3f915025fdd934a372075358d5007d21a0fb8",
    "commitFile": "gen/src/main/java/com/softlayer/api/gen/ClassWriter.java",
    "patch": "diff --git a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\nindex 6e318c8..671c04f 100644\n--- a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n+++ b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n@@ -272,7 +272,7 @@\n             if (!method.name.equals(method.meta.name)) {\n                 params.put(\"value\", stringLiteral(method.meta.name));\n             }\n-            if (!method.meta.isstatic) {\n+            if (!method.meta.isstatic \u0026\u0026 !\"SoftLayer_Resource_Metadata\".equals(type.meta.name)) {\n                 params.put(\"instanceRequired\", true);\n             }\n             emitAnnotation(TYPE_API_METHOD, params);\ndiff --git a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\nindex 6e318c8..671c04f 100644\n--- a/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n+++ b/gen/src/main/java/com/softlayer/api/gen/ClassWriter.java\n@@ -272,7 +272,7 @@\n             if (!method.name.equals(method.meta.name)) {\n                 params.put(\"value\", stringLiteral(method.meta.name));\n             }\n-            if (!method.meta.isstatic) {\n+            if (!method.meta.isstatic \u0026\u0026 !\"SoftLayer_Resource_Metadata\".equals(type.meta.name)) {\n                 params.put(\"instanceRequired\", true);\n             }\n             emitAnnotation(TYPE_API_METHOD, params);\n",
    "projectName": "softlayer-java",
    "lineNum": 275,
    "nodeStartChar": 11997,
    "before": "!method.meta.isstatic",
    "after": "!method.meta.isstatic \u0026\u0026 !\"SoftLayer_Resource_Metadata\".equals(type.meta.name)"
  },
  {
    "commitSHA1": "b5a539d0be48efe0490c27de65b5f4c2ed621d87",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\nindex 7cbb0f2..4fa2c20 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n@@ -116,7 +116,7 @@\n \n         public RepositoryConnectorThreadFactory( String tgName, String tName )\n         {\n-            myTG \u003d new ThreadGroup( Thread.currentThread().getThreadGroup().getParent(), tgName );\n+            myTG \u003d new ThreadGroup( tgName );\n             this.tName \u003d tName;\n         }\n \ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\nindex 7cbb0f2..4fa2c20 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n@@ -116,7 +116,7 @@\n \n         public RepositoryConnectorThreadFactory( String tgName, String tName )\n         {\n-            myTG \u003d new ThreadGroup( Thread.currentThread().getThreadGroup().getParent(), tgName );\n+            myTG \u003d new ThreadGroup( tgName );\n             this.tName \u003d tName;\n         }\n \n",
    "projectName": "sonatype-aether",
    "lineNum": 119,
    "nodeStartChar": 4056,
    "before": "new ThreadGroup(Thread.currentThread().getThreadGroup().getParent(),tgName)",
    "after": "new ThreadGroup(tgName)"
  },
  {
    "commitSHA1": "5f70830f98062a18cfd667df8d42e59e10baf329",
    "commitFile": "aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java",
    "patch": "diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\nindex e35e39e..55c0daa 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n@@ -158,7 +158,7 @@\n         // The connection has timed out\n         if ( status \u003d\u003d null )\n         {\n-            throw new IllegalStateException( \"Connection timed out\" );\n+            throw new TransferException( \"Invalid AHC State. Response will possibly gets corrupted.\" );\n         }\n         return onCompleted( httpClient.getProvider().prepareResponse( status, headers,\n                                                                       Collections.\u003cHttpResponseBodyPart\u003e emptyList() ) );\ndiff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\nindex e35e39e..55c0daa 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n@@ -158,7 +158,7 @@\n         // The connection has timed out\n         if ( status \u003d\u003d null )\n         {\n-            throw new IllegalStateException( \"Connection timed out\" );\n+            throw new TransferException( \"Invalid AHC State. Response will possibly gets corrupted.\" );\n         }\n         return onCompleted( httpClient.getProvider().prepareResponse( status, headers,\n                                                                       Collections.\u003cHttpResponseBodyPart\u003e emptyList() ) );\n",
    "projectName": "sonatype-aether",
    "lineNum": 161,
    "nodeStartChar": 4777,
    "before": "IllegalStateException",
    "after": "TransferException"
  },
  {
    "commitSHA1": "9f6c767e8aec5949051dc675598771a6310bf1fa",
    "commitFile": "aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java",
    "patch": "diff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\nindex 45d8948..79e1c05 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n@@ -83,7 +83,7 @@\n         resolver \u003d\n             new DefaultArtifactResolver( NullLogger.INSTANCE, TestFileProcessor.INSTANCE,\n                                          new StubRepositoryEventDispatcher(), versionResolver, updateCheckManager,\n-                                         remoteRepositoryManager, null );\n+                                         remoteRepositoryManager );\n \n         artifact \u003d new StubArtifact( \"gid\", \"aid\", \"\", \"ext\", \"ver\" );\n \ndiff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\nindex 45d8948..79e1c05 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n@@ -83,7 +83,7 @@\n         resolver \u003d\n             new DefaultArtifactResolver( NullLogger.INSTANCE, TestFileProcessor.INSTANCE,\n                                          new StubRepositoryEventDispatcher(), versionResolver, updateCheckManager,\n-                                         remoteRepositoryManager, null );\n+                                         remoteRepositoryManager );\n \n         artifact \u003d new StubArtifact( \"gid\", \"aid\", \"\", \"ext\", \"ver\" );\n \n",
    "projectName": "sonatype-aether",
    "lineNum": 84,
    "nodeStartChar": 3528,
    "before": "new DefaultArtifactResolver(NullLogger.INSTANCE,TestFileProcessor.INSTANCE,new StubRepositoryEventDispatcher(),versionResolver,updateCheckManager,remoteRepositoryManager,null)",
    "after": "new DefaultArtifactResolver(NullLogger.INSTANCE,TestFileProcessor.INSTANCE,new StubRepositoryEventDispatcher(),versionResolver,updateCheckManager,remoteRepositoryManager)"
  },
  {
    "commitSHA1": "3eca3867dfbddedbbec330dbc8a0af448477586e",
    "commitFile": "aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java",
    "patch": "diff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\nindex 9baacea..d8388d8 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n@@ -109,7 +109,7 @@\n             {\n                 // mimic \"real\" connector\n                 artifactUpload.setState( State.ACTIVE );\n-                if ( artifactUpload.getArtifact().getFile() \u003d\u003d null )\n+                if ( artifactUpload.getFile() \u003d\u003d null )\n                 {\n                     artifactUpload.setException( new ArtifactTransferException( artifactUpload.getArtifact(), null,\n                                                                                 \"no file\" ) );\n@@ -124,7 +124,7 @@\n             {\n                 // mimic \"real\" connector\n                 metadataUpload.setState( State.ACTIVE );\n-                if ( metadataUpload.getMetadata().getFile() \u003d\u003d null )\n+                if ( metadataUpload.getFile() \u003d\u003d null )\n                 {\n                     metadataUpload.setException( new MetadataTransferException( metadataUpload.getMetadata(), null,\n                                                                                 \"no file\" ) );\ndiff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\nindex 9baacea..d8388d8 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n@@ -109,7 +109,7 @@\n             {\n                 // mimic \"real\" connector\n                 artifactUpload.setState( State.ACTIVE );\n-                if ( artifactUpload.getArtifact().getFile() \u003d\u003d null )\n+                if ( artifactUpload.getFile() \u003d\u003d null )\n                 {\n                     artifactUpload.setException( new ArtifactTransferException( artifactUpload.getArtifact(), null,\n                                                                                 \"no file\" ) );\n@@ -124,7 +124,7 @@\n             {\n                 // mimic \"real\" connector\n                 metadataUpload.setState( State.ACTIVE );\n-                if ( metadataUpload.getMetadata().getFile() \u003d\u003d null )\n+                if ( metadataUpload.getFile() \u003d\u003d null )\n                 {\n                     metadataUpload.setException( new MetadataTransferException( metadataUpload.getMetadata(), null,\n                                                                                 \"no file\" ) );\n",
    "projectName": "sonatype-aether",
    "lineNum": 112,
    "nodeStartChar": 4090,
    "before": "artifactUpload.getArtifact()",
    "after": "artifactUpload"
  },
  {
    "commitSHA1": "3eca3867dfbddedbbec330dbc8a0af448477586e",
    "commitFile": "aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java",
    "patch": "diff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\nindex 9baacea..d8388d8 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n@@ -109,7 +109,7 @@\n             {\n                 // mimic \"real\" connector\n                 artifactUpload.setState( State.ACTIVE );\n-                if ( artifactUpload.getArtifact().getFile() \u003d\u003d null )\n+                if ( artifactUpload.getFile() \u003d\u003d null )\n                 {\n                     artifactUpload.setException( new ArtifactTransferException( artifactUpload.getArtifact(), null,\n                                                                                 \"no file\" ) );\n@@ -124,7 +124,7 @@\n             {\n                 // mimic \"real\" connector\n                 metadataUpload.setState( State.ACTIVE );\n-                if ( metadataUpload.getMetadata().getFile() \u003d\u003d null )\n+                if ( metadataUpload.getFile() \u003d\u003d null )\n                 {\n                     metadataUpload.setException( new MetadataTransferException( metadataUpload.getMetadata(), null,\n                                                                                 \"no file\" ) );\ndiff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\nindex 9baacea..d8388d8 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/RecordingRepositoryConnector.java\n@@ -109,7 +109,7 @@\n             {\n                 // mimic \"real\" connector\n                 artifactUpload.setState( State.ACTIVE );\n-                if ( artifactUpload.getArtifact().getFile() \u003d\u003d null )\n+                if ( artifactUpload.getFile() \u003d\u003d null )\n                 {\n                     artifactUpload.setException( new ArtifactTransferException( artifactUpload.getArtifact(), null,\n                                                                                 \"no file\" ) );\n@@ -124,7 +124,7 @@\n             {\n                 // mimic \"real\" connector\n                 metadataUpload.setState( State.ACTIVE );\n-                if ( metadataUpload.getMetadata().getFile() \u003d\u003d null )\n+                if ( metadataUpload.getFile() \u003d\u003d null )\n                 {\n                     metadataUpload.setException( new MetadataTransferException( metadataUpload.getMetadata(), null,\n                                                                                 \"no file\" ) );\n",
    "projectName": "sonatype-aether",
    "lineNum": 127,
    "nodeStartChar": 4784,
    "before": "metadataUpload.getMetadata()",
    "after": "metadataUpload"
  },
  {
    "commitSHA1": "511f3edad94122a0535e5ddc06faf7f8c4f50d45",
    "commitFile": "aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 38ca814..bd6afca 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -150,7 +150,7 @@\n         checksumAlgos.put( \"MD5\", \".md5\" );\n \n         disableResumeSupport \u003d ConfigurationProperties.get( session, \"aether.connector.ahc.disableResumable\", false );\n-        maxIOExceptionRetry \u003d ConfigurationProperties.get( session, \"aether.connector.ahc.resumeRety\", 3 );\n+        maxIOExceptionRetry \u003d ConfigurationProperties.get( session, \"aether.connector.ahc.resumeRetry\", 3 );\n     }\n \n     private Realm getRealm( RemoteRepository repository )\ndiff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 38ca814..bd6afca 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -150,7 +150,7 @@\n         checksumAlgos.put( \"MD5\", \".md5\" );\n \n         disableResumeSupport \u003d ConfigurationProperties.get( session, \"aether.connector.ahc.disableResumable\", false );\n-        maxIOExceptionRetry \u003d ConfigurationProperties.get( session, \"aether.connector.ahc.resumeRety\", 3 );\n+        maxIOExceptionRetry \u003d ConfigurationProperties.get( session, \"aether.connector.ahc.resumeRetry\", 3 );\n     }\n \n     private Realm getRealm( RemoteRepository repository )\n",
    "projectName": "sonatype-aether",
    "lineNum": 153,
    "nodeStartChar": 6383,
    "before": "\"aether.connector.ahc.resumeRety\"",
    "after": "\"aether.connector.ahc.resumeRetry\""
  },
  {
    "commitSHA1": "fcf1158e013cdeb320096d6e0ab425d38cba9c38",
    "commitFile": "aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 583d0bd..5571634 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -506,7 +506,7 @@\n                             }\n                             else\n                             {\n-                                exception \u003d new Exception( t.getCause() );\n+                                exception \u003d new Exception( t );\n                             }\n                             fireTransferFailed();\n                         }\n@@ -771,7 +771,7 @@\n                     }\n                     else\n                     {\n-                        exception \u003d new Exception( t.getCause() );\n+                        exception \u003d new Exception( t );\n                     }\n                     if ( listener !\u003d null )\n                     {\n@@ -935,7 +935,7 @@\n                                 }\n                                 else\n                                 {\n-                                    exception \u003d new Exception( t.getCause() );\n+                                    exception \u003d new Exception( t );\n                                 }\n \n                                 if ( listener !\u003d null )\ndiff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 583d0bd..5571634 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -506,7 +506,7 @@\n                             }\n                             else\n                             {\n-                                exception \u003d new Exception( t.getCause() );\n+                                exception \u003d new Exception( t );\n                             }\n                             fireTransferFailed();\n                         }\n@@ -771,7 +771,7 @@\n                     }\n                     else\n                     {\n-                        exception \u003d new Exception( t.getCause() );\n+                        exception \u003d new Exception( t );\n                     }\n                     if ( listener !\u003d null )\n                     {\n@@ -935,7 +935,7 @@\n                                 }\n                                 else\n                                 {\n-                                    exception \u003d new Exception( t.getCause() );\n+                                    exception \u003d new Exception( t );\n                                 }\n \n                                 if ( listener !\u003d null )\n",
    "projectName": "sonatype-aether",
    "lineNum": 509,
    "nodeStartChar": 19157,
    "before": "t.getCause()",
    "after": "t"
  },
  {
    "commitSHA1": "fcf1158e013cdeb320096d6e0ab425d38cba9c38",
    "commitFile": "aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 583d0bd..5571634 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -506,7 +506,7 @@\n                             }\n                             else\n                             {\n-                                exception \u003d new Exception( t.getCause() );\n+                                exception \u003d new Exception( t );\n                             }\n                             fireTransferFailed();\n                         }\n@@ -771,7 +771,7 @@\n                     }\n                     else\n                     {\n-                        exception \u003d new Exception( t.getCause() );\n+                        exception \u003d new Exception( t );\n                     }\n                     if ( listener !\u003d null )\n                     {\n@@ -935,7 +935,7 @@\n                                 }\n                                 else\n                                 {\n-                                    exception \u003d new Exception( t.getCause() );\n+                                    exception \u003d new Exception( t );\n                                 }\n \n                                 if ( listener !\u003d null )\ndiff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 583d0bd..5571634 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -506,7 +506,7 @@\n                             }\n                             else\n                             {\n-                                exception \u003d new Exception( t.getCause() );\n+                                exception \u003d new Exception( t );\n                             }\n                             fireTransferFailed();\n                         }\n@@ -771,7 +771,7 @@\n                     }\n                     else\n                     {\n-                        exception \u003d new Exception( t.getCause() );\n+                        exception \u003d new Exception( t );\n                     }\n                     if ( listener !\u003d null )\n                     {\n@@ -935,7 +935,7 @@\n                                 }\n                                 else\n                                 {\n-                                    exception \u003d new Exception( t.getCause() );\n+                                    exception \u003d new Exception( t );\n                                 }\n \n                                 if ( listener !\u003d null )\n",
    "projectName": "sonatype-aether",
    "lineNum": 774,
    "nodeStartChar": 30568,
    "before": "t.getCause()",
    "after": "t"
  },
  {
    "commitSHA1": "fcf1158e013cdeb320096d6e0ab425d38cba9c38",
    "commitFile": "aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 583d0bd..5571634 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -506,7 +506,7 @@\n                             }\n                             else\n                             {\n-                                exception \u003d new Exception( t.getCause() );\n+                                exception \u003d new Exception( t );\n                             }\n                             fireTransferFailed();\n                         }\n@@ -771,7 +771,7 @@\n                     }\n                     else\n                     {\n-                        exception \u003d new Exception( t.getCause() );\n+                        exception \u003d new Exception( t );\n                     }\n                     if ( listener !\u003d null )\n                     {\n@@ -935,7 +935,7 @@\n                                 }\n                                 else\n                                 {\n-                                    exception \u003d new Exception( t.getCause() );\n+                                    exception \u003d new Exception( t );\n                                 }\n \n                                 if ( listener !\u003d null )\ndiff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\nindex 583d0bd..5571634 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/AsyncRepositoryConnector.java\n@@ -506,7 +506,7 @@\n                             }\n                             else\n                             {\n-                                exception \u003d new Exception( t.getCause() );\n+                                exception \u003d new Exception( t );\n                             }\n                             fireTransferFailed();\n                         }\n@@ -771,7 +771,7 @@\n                     }\n                     else\n                     {\n-                        exception \u003d new Exception( t.getCause() );\n+                        exception \u003d new Exception( t );\n                     }\n                     if ( listener !\u003d null )\n                     {\n@@ -935,7 +935,7 @@\n                                 }\n                                 else\n                                 {\n-                                    exception \u003d new Exception( t.getCause() );\n+                                    exception \u003d new Exception( t );\n                                 }\n \n                                 if ( listener !\u003d null )\n",
    "projectName": "sonatype-aether",
    "lineNum": 938,
    "nodeStartChar": 35601,
    "before": "t.getCause()",
    "after": "t"
  },
  {
    "commitSHA1": "371434f0ec6522c3b5c881465398b1c4cf88c812",
    "commitFile": "aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java",
    "patch": "diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\nindex 5dc6189..223e89e 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n@@ -50,7 +50,7 @@\n             {\n                 FileInputStream stream \u003d new FileInputStream( file );\n                 channel \u003d stream.getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), true );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), true );\n \n                 Properties props \u003d new Properties();\n                 props.load( stream );\n@@ -93,7 +93,7 @@\n             try\n             {\n                 channel \u003d new RandomAccessFile( file, \"rw\" ).getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), false );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), false );\n \n                 if ( file.canRead() )\n                 {\ndiff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\nindex 5dc6189..223e89e 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n@@ -50,7 +50,7 @@\n             {\n                 FileInputStream stream \u003d new FileInputStream( file );\n                 channel \u003d stream.getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), true );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), true );\n \n                 Properties props \u003d new Properties();\n                 props.load( stream );\n@@ -93,7 +93,7 @@\n             try\n             {\n                 channel \u003d new RandomAccessFile( file, \"rw\" ).getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), false );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), false );\n \n                 if ( file.canRead() )\n                 {\n",
    "projectName": "sonatype-aether",
    "lineNum": 53,
    "nodeStartChar": 1670,
    "before": "channel.size()",
    "after": "Math.max(1,channel.size())"
  },
  {
    "commitSHA1": "371434f0ec6522c3b5c881465398b1c4cf88c812",
    "commitFile": "aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java",
    "patch": "diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\nindex 5dc6189..223e89e 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n@@ -50,7 +50,7 @@\n             {\n                 FileInputStream stream \u003d new FileInputStream( file );\n                 channel \u003d stream.getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), true );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), true );\n \n                 Properties props \u003d new Properties();\n                 props.load( stream );\n@@ -93,7 +93,7 @@\n             try\n             {\n                 channel \u003d new RandomAccessFile( file, \"rw\" ).getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), false );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), false );\n \n                 if ( file.canRead() )\n                 {\ndiff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\nindex 5dc6189..223e89e 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n@@ -50,7 +50,7 @@\n             {\n                 FileInputStream stream \u003d new FileInputStream( file );\n                 channel \u003d stream.getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), true );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), true );\n \n                 Properties props \u003d new Properties();\n                 props.load( stream );\n@@ -93,7 +93,7 @@\n             try\n             {\n                 channel \u003d new RandomAccessFile( file, \"rw\" ).getChannel();\n-                lock \u003d channel.lock( 0, channel.size(), false );\n+                lock \u003d channel.lock( 0, Math.max( 1, channel.size() ), false );\n \n                 if ( file.canRead() )\n                 {\n",
    "projectName": "sonatype-aether",
    "lineNum": 96,
    "nodeStartChar": 2925,
    "before": "channel.size()",
    "after": "Math.max(1,channel.size())"
  },
  {
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 323,
    "nodeStartChar": 13747,
    "before": "private volatile MessageDigest digest; ",
    "after": "private MessageDigest digest; "
  },
  {
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 325,
    "nodeStartChar": 13795,
    "before": "private void initDigest() throws NoSuchAlgorithmException {   digest\u003dMessageDigest.getInstance(\"SHA-1\"); } ",
    "after": "private synchronized void initDigest() throws NoSuchAlgorithmException {   digest\u003dMessageDigest.getInstance(\"SHA-1\"); } "
  },
  {
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 352,
    "nodeStartChar": 14415,
    "before": "public void transferProgressed(TransferEvent event) throws TransferCancelledException {   digest.update(event.getDataBuffer()); } ",
    "after": "public synchronized void transferProgressed(TransferEvent event) throws TransferCancelledException {   digest.update(event.getDataBuffer()); } "
  },
  {
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 372,
    "nodeStartChar": 14931,
    "before": "public byte[] getHash(){   return digest.digest(); } ",
    "after": "public synchronized byte[] getHash(){   return digest.digest(); } "
  },
  {
    "commitSHA1": "2b1d640c4f67f3755fd834dd94ed2bf7d8568859",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\n",
    "projectName": "sonatype-aether",
    "lineNum": 90,
    "nodeStartChar": 3495,
    "before": "new StubArtifact(\"testGroup\",\"testArtifact\",\"jar\",\"\",\"1-test\")",
    "after": "new StubArtifact(\"testGroup\",\"testArtifact\",\"\",\"jar\",\"1-test\")"
  },
  {
    "commitSHA1": "2b1d640c4f67f3755fd834dd94ed2bf7d8568859",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\n",
    "projectName": "sonatype-aether",
    "lineNum": 171,
    "nodeStartChar": 7322,
    "before": "new StubArtifact(\"testGroup\",\"testArtifact\",\"jar\",\"\",i + \"-test\")",
    "after": "new StubArtifact(\"testGroup\",\"testArtifact\",\"\",\"jar\",i + \"-test\")"
  },
  {
    "commitSHA1": "2b1d640c4f67f3755fd834dd94ed2bf7d8568859",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\n",
    "projectName": "sonatype-aether",
    "lineNum": 205,
    "nodeStartChar": 8628,
    "before": "new StubArtifact(\"testGroup\",\"testArtifact\",\"jar\",\"\",i + \"-test\")",
    "after": "new StubArtifact(\"testGroup\",\"testArtifact\",\"\",\"jar\",i + \"-test\")"
  },
  {
    "commitSHA1": "2083a7dad75cee414497a9eb479bcaf0ed357422",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\nindex 34bd61e..37dba7b 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n@@ -226,7 +226,7 @@\n     @Override\n     public String toString()\n     {\n-        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getVersion(), getExtension() );\n+        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getExtension(), getVersion() );\n     }\n \n }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\nindex 34bd61e..37dba7b 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n@@ -226,7 +226,7 @@\n     @Override\n     public String toString()\n     {\n-        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getVersion(), getExtension() );\n+        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getExtension(), getVersion() );\n     }\n \n }\n",
    "projectName": "sonatype-aether",
    "lineNum": 229,
    "nodeStartChar": 6392,
    "before": "String.format(\"%s:%s:%s:%s\",getGroupId(),getArtifactId(),getVersion(),getExtension())",
    "after": "String.format(\"%s:%s:%s:%s\",getGroupId(),getArtifactId(),getExtension(),getVersion())"
  },
  {
    "commitSHA1": "6b27903881c83c074a5f63d1a6d071c98ec607f0",
    "commitFile": "aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java",
    "patch": "diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\nindex 364d858..167cbcc 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n@@ -448,8 +448,7 @@\n         }\n         else if ( RepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )\n         {\n-            // Get midnight boundary\n-            Calendar cal \u003d Calendar.getInstance( TimeZone.getTimeZone( \"UTC\" ) );\n+            Calendar cal \u003d Calendar.getInstance();\n             cal.set( Calendar.HOUR_OF_DAY, 0 );\n             cal.set( Calendar.MINUTE, 0 );\n             cal.set( Calendar.SECOND, 0 );\ndiff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\nindex 364d858..167cbcc 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n@@ -448,8 +448,7 @@\n         }\n         else if ( RepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )\n         {\n-            // Get midnight boundary\n-            Calendar cal \u003d Calendar.getInstance( TimeZone.getTimeZone( \"UTC\" ) );\n+            Calendar cal \u003d Calendar.getInstance();\n             cal.set( Calendar.HOUR_OF_DAY, 0 );\n             cal.set( Calendar.MINUTE, 0 );\n             cal.set( Calendar.SECOND, 0 );\n",
    "projectName": "sonatype-aether",
    "lineNum": 451,
    "nodeStartChar": 15449,
    "before": "Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))",
    "after": "Calendar.getInstance()"
  },
  {
    "commitSHA1": "cb1fe44da9abc61336a72d5bcb1b1db53685f305",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\nindex 9c149ff..ec49f1e 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\n@@ -48,7 +48,8 @@\n         throws NoRepositoryConnectorException\n     {\n         super( session.getConfigProperties() );\n-        if ( !\"default\".equalsIgnoreCase( repository.getContentType() ) )\n+\n+        if ( !\"default\".equals( repository.getContentType() ) )\n         {\n             throw new NoRepositoryConnectorException( repository );\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 52,
    "nodeStartChar": 1965,
    "before": "\"default\".equalsIgnoreCase(repository.getContentType())",
    "after": "\"default\".equals(repository.getContentType())"
  },
  {
    "commitSHA1": "1cd8a6fbee03e8d4377a8ba1d60e1a50891b1105",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\nindex 92cfa18..1616cef 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n@@ -150,7 +150,7 @@\n \n             assertTrue( \"invalid data offset: bigger than data length\", event.getDataOffset() \u003c event.getDataLength() );\n             assertTrue( \"invalid data window: offset+data length \u003e data buffer length\",\n-                        event.getDataOffset() + event.getDataLength() \u003c event.getDataBuffer().length );\n+                        event.getDataOffset() + event.getDataLength() \u003c\u003d event.getDataBuffer().length );\n \n             assertTrue( \"transferred byte is not set/not positive for type: \" + event.getType(),\n                         event.getTransferredBytes() \u003e -1 );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\nindex 92cfa18..1616cef 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n@@ -150,7 +150,7 @@\n \n             assertTrue( \"invalid data offset: bigger than data length\", event.getDataOffset() \u003c event.getDataLength() );\n             assertTrue( \"invalid data window: offset+data length \u003e data buffer length\",\n-                        event.getDataOffset() + event.getDataLength() \u003c event.getDataBuffer().length );\n+                        event.getDataOffset() + event.getDataLength() \u003c\u003d event.getDataBuffer().length );\n \n             assertTrue( \"transferred byte is not set/not positive for type: \" + event.getType(),\n                         event.getTransferredBytes() \u003e -1 );\n",
    "projectName": "sonatype-aether",
    "lineNum": 153,
    "nodeStartChar": 7016,
    "before": "event.getDataOffset() + event.getDataLength() \u003c event.getDataBuffer().length",
    "after": "event.getDataOffset() + event.getDataLength() \u003c\u003d event.getDataBuffer().length"
  },
  {
    "commitSHA1": "a2b4820b60572c3250b6f2086f946b4354636849",
    "commitFile": "aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java",
    "patch": "diff --git a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\nindex d669590..1c34a53 100644\n--- a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n+++ b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n@@ -116,7 +116,7 @@\n                 {\n                     managedLocalPaths \u003d new HashMap\u003cObject, String\u003e( this.managedLocalPaths );\n                 }\n-                managedLocalPaths.put( key, scope );\n+                managedLocalPaths.put( key, localPath );\n             }\n \n             Collection\u003cExclusion\u003e exclusions \u003d managedDependency.getExclusions();\ndiff --git a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\nindex d669590..1c34a53 100644\n--- a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n+++ b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n@@ -116,7 +116,7 @@\n                 {\n                     managedLocalPaths \u003d new HashMap\u003cObject, String\u003e( this.managedLocalPaths );\n                 }\n-                managedLocalPaths.put( key, scope );\n+                managedLocalPaths.put( key, localPath );\n             }\n \n             Collection\u003cExclusion\u003e exclusions \u003d managedDependency.getExclusions();\n",
    "projectName": "sonatype-aether",
    "lineNum": 119,
    "nodeStartChar": 4756,
    "before": "managedLocalPaths.put(key,scope)",
    "after": "managedLocalPaths.put(key,localPath)"
  },
  {
    "commitSHA1": "a0d4d3064e4f39b1dcbcfb02c9b5cedd557449c2",
    "commitFile": "aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java",
    "patch": "diff --git a/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java b/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java\nindex 3e67aca..c9cac52 100644\n--- a/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java\n+++ b/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java\n@@ -33,7 +33,7 @@\n      * \n      * @see #DEFAULT_INTERACTIVE\n      */\n-    public static final String INTERACTIVE \u003d PREFIX_AETHER + \".interactive\";\n+    public static final String INTERACTIVE \u003d PREFIX_AETHER + \"interactive\";\n \n     /**\n      * The default interactive mode if {@link #INTERACTIVE} isn\u0027t set.\ndiff --git a/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java b/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java\nindex 3e67aca..c9cac52 100644\n--- a/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java\n+++ b/aether-api/src/main/java/org/sonatype/aether/ConfigurationProperties.java\n@@ -33,7 +33,7 @@\n      * \n      * @see #DEFAULT_INTERACTIVE\n      */\n-    public static final String INTERACTIVE \u003d PREFIX_AETHER + \".interactive\";\n+    public static final String INTERACTIVE \u003d PREFIX_AETHER + \"interactive\";\n \n     /**\n      * The default interactive mode if {@link #INTERACTIVE} isn\u0027t set.\n",
    "projectName": "sonatype-aether",
    "lineNum": 36,
    "nodeStartChar": 1284,
    "before": "\".interactive\"",
    "after": "\"interactive\""
  },
  {
    "commitSHA1": "93c526ede54fc6401f10bd62f9d81fc2d771dbeb",
    "commitFile": "aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java",
    "patch": "diff --git a/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java b/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java\nindex a98c2a2..101970e 100644\n--- a/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java\n+++ b/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java\n@@ -71,7 +71,7 @@\n      */\n     public PatternInclusionsDependencyFilter( final VersionScheme versionScheme, final String... patterns )\n     {\n-        this( versionScheme, Arrays.asList( patterns ) );\n+        this( versionScheme, patterns \u003d\u003d null ? null : Arrays.asList( patterns ) );\n     }\n \n     /**\ndiff --git a/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java b/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java\nindex a98c2a2..101970e 100644\n--- a/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java\n+++ b/aether-util/src/main/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilter.java\n@@ -71,7 +71,7 @@\n      */\n     public PatternInclusionsDependencyFilter( final VersionScheme versionScheme, final String... patterns )\n     {\n-        this( versionScheme, Arrays.asList( patterns ) );\n+        this( versionScheme, patterns \u003d\u003d null ? null : Arrays.asList( patterns ) );\n     }\n \n     /**\n",
    "projectName": "sonatype-aether",
    "lineNum": 74,
    "nodeStartChar": 2854,
    "before": "Arrays.asList(patterns)",
    "after": "patterns \u003d\u003d null ? null : Arrays.asList(patterns)"
  },
  {
    "commitSHA1": "369ef0f9a5bfc0ee4a53799ee17781a9f024cde7",
    "commitFile": "aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java",
    "patch": "diff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\ndiff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\n",
    "projectName": "sonatype-aether",
    "lineNum": 36,
    "nodeStartChar": 1304,
    "before": "builder.artifactId(\"testArtifact\")",
    "after": "builder"
  },
  {
    "commitSHA1": "369ef0f9a5bfc0ee4a53799ee17781a9f024cde7",
    "commitFile": "aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java",
    "patch": "diff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\ndiff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\n",
    "projectName": "sonatype-aether",
    "lineNum": 51,
    "nodeStartChar": 2151,
    "before": "builder.groupId(\"com.example.test\")",
    "after": "builder"
  },
  {
    "commitSHA1": "369ef0f9a5bfc0ee4a53799ee17781a9f024cde7",
    "commitFile": "aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java",
    "patch": "diff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\ndiff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\n",
    "projectName": "sonatype-aether",
    "lineNum": 110,
    "nodeStartChar": 7037,
    "before": "builder.groupId(\"com.example.test\")",
    "after": "builder"
  },
  {
    "commitSHA1": "369ef0f9a5bfc0ee4a53799ee17781a9f024cde7",
    "commitFile": "aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java",
    "patch": "diff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\ndiff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\n",
    "projectName": "sonatype-aether",
    "lineNum": 126,
    "nodeStartChar": 8046,
    "before": "builder.groupId(\"com.example.test\")",
    "after": "builder"
  },
  {
    "commitSHA1": "369ef0f9a5bfc0ee4a53799ee17781a9f024cde7",
    "commitFile": "aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java",
    "patch": "diff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\ndiff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\n",
    "projectName": "sonatype-aether",
    "lineNum": 148,
    "nodeStartChar": 9856,
    "before": "builder.groupId(\"com.example.test\")",
    "after": "builder"
  },
  {
    "commitSHA1": "369ef0f9a5bfc0ee4a53799ee17781a9f024cde7",
    "commitFile": "aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java",
    "patch": "diff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\ndiff --git a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\nindex 1e60f24..2bd2017 100644\n--- a/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n+++ b/aether-util/src/test/java/org/sonatype/aether/util/filter/PatternInclusionsDependencyFilterTest.java\n@@ -33,7 +33,7 @@\n     public void acceptTestCornerCases()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.artifactId( \"testArtifact\" ).build();\n+        builder.artifactId( \"testArtifact\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // Empty String, Empty List\n@@ -48,7 +48,7 @@\n     public void acceptTestMatches()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         // full match\n@@ -107,7 +107,7 @@\n     public void acceptTestLessToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertTrue( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar\" ).accept( builder.build(),\n@@ -123,7 +123,7 @@\n     public void acceptTestMissmatch()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"OTHER.GROUP.ID:testArtifact:jar:1.0.3\" ).accept( builder.build(),\n@@ -145,7 +145,7 @@\n     public void acceptTestMoreToken()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         assertFalse( new PatternInclusionsDependencyFilter( \"com.example.test:testArtifact:jar:1.0.3:foo\" ).accept( builder.build(),\n@@ -156,7 +156,7 @@\n     public void acceptTestRange()\n     {\n         NodeBuilder builder \u003d new NodeBuilder();\n-        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" ).build();\n+        builder.groupId( \"com.example.test\" ).artifactId( \"testArtifact\" ).ext( \"jar\" ).version( \"1.0.3\" );\n         List\u003cDependencyNode\u003e parents \u003d new LinkedList\u003cDependencyNode\u003e();\n \n         String prefix \u003d \"com.example.test:testArtifact:jar:\";\n",
    "projectName": "sonatype-aether",
    "lineNum": 159,
    "nodeStartChar": 10414,
    "before": "builder.groupId(\"com.example.test\")",
    "after": "builder"
  },
  {
    "commitSHA1": "3ac6414c9f1b9bd96b988e56d4f6efc9684d40b0",
    "commitFile": "aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java",
    "patch": "diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\nindex c57d2ef..0dbc843 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n@@ -54,7 +54,7 @@\n             try\n             {\n                 FileInputStream stream \u003d new FileInputStream( file );\n-                channel \u003d new FileInputStream( file ).getChannel();\n+                channel \u003d stream.getChannel();\n                 lock \u003d channel.lock( 0, channel.size(), true );\n \n                 logger.debug( \"Reading resolution tracking file \" + file );\ndiff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\nindex c57d2ef..0dbc843 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/TrackingFileManager.java\n@@ -54,7 +54,7 @@\n             try\n             {\n                 FileInputStream stream \u003d new FileInputStream( file );\n-                channel \u003d new FileInputStream( file ).getChannel();\n+                channel \u003d stream.getChannel();\n                 lock \u003d channel.lock( 0, channel.size(), true );\n \n                 logger.debug( \"Reading resolution tracking file \" + file );\n",
    "projectName": "sonatype-aether",
    "lineNum": 57,
    "nodeStartChar": 1875,
    "before": "new FileInputStream(file)",
    "after": "stream"
  },
  {
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 93,
    "nodeStartChar": 2823,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 101,
    "nodeStartChar": 3056,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 110,
    "nodeStartChar": 3329,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 118,
    "nodeStartChar": 3601,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 128,
    "nodeStartChar": 3931,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "api/src/main/java/org/sonatype/aether/Dependency.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/aether/Dependency.java b/api/src/main/java/org/sonatype/aether/Dependency.java\nindex bcf1169..b8559dd 100644\n--- a/api/src/main/java/org/sonatype/aether/Dependency.java\n+++ b/api/src/main/java/org/sonatype/aether/Dependency.java\n@@ -137,7 +137,7 @@\n      */\n     public Dependency setScope( String scope )\n     {\n-        if ( this.scope.equals( scope ) || ( scope \u003d\u003d null \u0026\u0026 this.scope.length() \u003c\u003d 0 ) )\n+        if ( this.scope.equals( scope ) || scope \u003d\u003d null || this.scope.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -145,7 +145,7 @@\n     }\n \n     /**\n-     * Indicates whether this dependency is optional or not. Optional dependencies can usually be igored during\n+     * Indicates whether this dependency is optional or not. Optional dependencies can usually be ignored during\n      * transitive dependency resolution.\n      * \n      * @return {@code true} if the dependency is optional, {@code false} otherwise.\n@@ -189,7 +189,7 @@\n      */\n     public Dependency setExclusions( Collection\u003cExclusion\u003e exclusions )\n     {\n-        if ( getExclusions().equals( exclusions ) || ( exclusions \u003d\u003d null \u0026\u0026 this.exclusions.length \u003c\u003d 0 ) )\n+        if ( getExclusions().equals( exclusions ) || exclusions \u003d\u003d null || this.exclusions.length \u003c\u003d 0 )\n         {\n             return this;\n         }\ndiff --git a/api/src/main/java/org/sonatype/aether/Proxy.java b/api/src/main/java/org/sonatype/aether/Proxy.java\nindex 37f1fc0..60d5740 100644\n--- a/api/src/main/java/org/sonatype/aether/Proxy.java\n+++ b/api/src/main/java/org/sonatype/aether/Proxy.java\n@@ -64,7 +64,7 @@\n      */\n     public Proxy setType( String type )\n     {\n-        if ( this.type.equals( type ) || ( type \u003d\u003d null \u0026\u0026 this.type.length() \u003c\u003d 0 ) )\n+        if ( this.type.equals( type ) || type \u003d\u003d null || this.type.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -89,7 +89,7 @@\n      */\n     public Proxy setHost( String host )\n     {\n-        if ( this.host.equals( host ) || ( host \u003d\u003d null \u0026\u0026 this.host.length() \u003c\u003d 0 ) )\n+        if ( this.host.equals( host ) || host \u003d\u003d null || this.host.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\ndiff --git a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\nindex 87f8848..689dc00 100644\n--- a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n+++ b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n@@ -122,15 +122,15 @@\n                 getVersions( session, result, request, getNature( session, versionConstraint.getRanges() ) );\n \n             List\u003cVersion\u003e versions \u003d new ArrayList\u003cVersion\u003e();\n-            for ( String v : versionIndex.keySet() )\n+            for ( Map.Entry\u003cString, ArtifactRepository\u003e v : versionIndex.entrySet() )\n             {\n                 try\n                 {\n-                    Version ver \u003d versionScheme.parseVersion( v );\n+                    Version ver \u003d versionScheme.parseVersion( v.getKey() );\n                     if ( versionConstraint.containsVersion( ver ) )\n                     {\n                         versions.add( ver );\n-                        result.setRepository( ver, versionIndex.get( v ) );\n+                        result.setRepository( ver, v.getValue() );\n                     }\n                 }\n                 catch ( InvalidVersionException e )\ndiff --git a/api/src/main/java/org/sonatype/aether/Dependency.java b/api/src/main/java/org/sonatype/aether/Dependency.java\nindex bcf1169..b8559dd 100644\n--- a/api/src/main/java/org/sonatype/aether/Dependency.java\n+++ b/api/src/main/java/org/sonatype/aether/Dependency.java\n@@ -137,7 +137,7 @@\n      */\n     public Dependency setScope( String scope )\n     {\n-        if ( this.scope.equals( scope ) || ( scope \u003d\u003d null \u0026\u0026 this.scope.length() \u003c\u003d 0 ) )\n+        if ( this.scope.equals( scope ) || scope \u003d\u003d null || this.scope.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -145,7 +145,7 @@\n     }\n \n     /**\n-     * Indicates whether this dependency is optional or not. Optional dependencies can usually be igored during\n+     * Indicates whether this dependency is optional or not. Optional dependencies can usually be ignored during\n      * transitive dependency resolution.\n      * \n      * @return {@code true} if the dependency is optional, {@code false} otherwise.\n@@ -189,7 +189,7 @@\n      */\n     public Dependency setExclusions( Collection\u003cExclusion\u003e exclusions )\n     {\n-        if ( getExclusions().equals( exclusions ) || ( exclusions \u003d\u003d null \u0026\u0026 this.exclusions.length \u003c\u003d 0 ) )\n+        if ( getExclusions().equals( exclusions ) || exclusions \u003d\u003d null || this.exclusions.length \u003c\u003d 0 )\n         {\n             return this;\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 140,
    "nodeStartChar": 4620,
    "before": "this.scope.equals(scope)",
    "after": "this.scope.equals(scope) || scope \u003d\u003d null"
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "api/src/main/java/org/sonatype/aether/Dependency.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/aether/Dependency.java b/api/src/main/java/org/sonatype/aether/Dependency.java\nindex bcf1169..b8559dd 100644\n--- a/api/src/main/java/org/sonatype/aether/Dependency.java\n+++ b/api/src/main/java/org/sonatype/aether/Dependency.java\n@@ -137,7 +137,7 @@\n      */\n     public Dependency setScope( String scope )\n     {\n-        if ( this.scope.equals( scope ) || ( scope \u003d\u003d null \u0026\u0026 this.scope.length() \u003c\u003d 0 ) )\n+        if ( this.scope.equals( scope ) || scope \u003d\u003d null || this.scope.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -145,7 +145,7 @@\n     }\n \n     /**\n-     * Indicates whether this dependency is optional or not. Optional dependencies can usually be igored during\n+     * Indicates whether this dependency is optional or not. Optional dependencies can usually be ignored during\n      * transitive dependency resolution.\n      * \n      * @return {@code true} if the dependency is optional, {@code false} otherwise.\n@@ -189,7 +189,7 @@\n      */\n     public Dependency setExclusions( Collection\u003cExclusion\u003e exclusions )\n     {\n-        if ( getExclusions().equals( exclusions ) || ( exclusions \u003d\u003d null \u0026\u0026 this.exclusions.length \u003c\u003d 0 ) )\n+        if ( getExclusions().equals( exclusions ) || exclusions \u003d\u003d null || this.exclusions.length \u003c\u003d 0 )\n         {\n             return this;\n         }\ndiff --git a/api/src/main/java/org/sonatype/aether/Proxy.java b/api/src/main/java/org/sonatype/aether/Proxy.java\nindex 37f1fc0..60d5740 100644\n--- a/api/src/main/java/org/sonatype/aether/Proxy.java\n+++ b/api/src/main/java/org/sonatype/aether/Proxy.java\n@@ -64,7 +64,7 @@\n      */\n     public Proxy setType( String type )\n     {\n-        if ( this.type.equals( type ) || ( type \u003d\u003d null \u0026\u0026 this.type.length() \u003c\u003d 0 ) )\n+        if ( this.type.equals( type ) || type \u003d\u003d null || this.type.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -89,7 +89,7 @@\n      */\n     public Proxy setHost( String host )\n     {\n-        if ( this.host.equals( host ) || ( host \u003d\u003d null \u0026\u0026 this.host.length() \u003c\u003d 0 ) )\n+        if ( this.host.equals( host ) || host \u003d\u003d null || this.host.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\ndiff --git a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\nindex 87f8848..689dc00 100644\n--- a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n+++ b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n@@ -122,15 +122,15 @@\n                 getVersions( session, result, request, getNature( session, versionConstraint.getRanges() ) );\n \n             List\u003cVersion\u003e versions \u003d new ArrayList\u003cVersion\u003e();\n-            for ( String v : versionIndex.keySet() )\n+            for ( Map.Entry\u003cString, ArtifactRepository\u003e v : versionIndex.entrySet() )\n             {\n                 try\n                 {\n-                    Version ver \u003d versionScheme.parseVersion( v );\n+                    Version ver \u003d versionScheme.parseVersion( v.getKey() );\n                     if ( versionConstraint.containsVersion( ver ) )\n                     {\n                         versions.add( ver );\n-                        result.setRepository( ver, versionIndex.get( v ) );\n+                        result.setRepository( ver, v.getValue() );\n                     }\n                 }\n                 catch ( InvalidVersionException e )\ndiff --git a/api/src/main/java/org/sonatype/aether/Dependency.java b/api/src/main/java/org/sonatype/aether/Dependency.java\nindex bcf1169..b8559dd 100644\n--- a/api/src/main/java/org/sonatype/aether/Dependency.java\n+++ b/api/src/main/java/org/sonatype/aether/Dependency.java\n@@ -137,7 +137,7 @@\n      */\n     public Dependency setScope( String scope )\n     {\n-        if ( this.scope.equals( scope ) || ( scope \u003d\u003d null \u0026\u0026 this.scope.length() \u003c\u003d 0 ) )\n+        if ( this.scope.equals( scope ) || scope \u003d\u003d null || this.scope.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -145,7 +145,7 @@\n     }\n \n     /**\n-     * Indicates whether this dependency is optional or not. Optional dependencies can usually be igored during\n+     * Indicates whether this dependency is optional or not. Optional dependencies can usually be ignored during\n      * transitive dependency resolution.\n      * \n      * @return {@code true} if the dependency is optional, {@code false} otherwise.\n@@ -189,7 +189,7 @@\n      */\n     public Dependency setExclusions( Collection\u003cExclusion\u003e exclusions )\n     {\n-        if ( getExclusions().equals( exclusions ) || ( exclusions \u003d\u003d null \u0026\u0026 this.exclusions.length \u003c\u003d 0 ) )\n+        if ( getExclusions().equals( exclusions ) || exclusions \u003d\u003d null || this.exclusions.length \u003c\u003d 0 )\n         {\n             return this;\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 192,
    "nodeStartChar": 6261,
    "before": "getExclusions().equals(exclusions)",
    "after": "getExclusions().equals(exclusions) || exclusions \u003d\u003d null"
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "api/src/main/java/org/sonatype/aether/Proxy.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/aether/Proxy.java b/api/src/main/java/org/sonatype/aether/Proxy.java\nindex 37f1fc0..60d5740 100644\n--- a/api/src/main/java/org/sonatype/aether/Proxy.java\n+++ b/api/src/main/java/org/sonatype/aether/Proxy.java\n@@ -64,7 +64,7 @@\n      */\n     public Proxy setType( String type )\n     {\n-        if ( this.type.equals( type ) || ( type \u003d\u003d null \u0026\u0026 this.type.length() \u003c\u003d 0 ) )\n+        if ( this.type.equals( type ) || type \u003d\u003d null || this.type.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -89,7 +89,7 @@\n      */\n     public Proxy setHost( String host )\n     {\n-        if ( this.host.equals( host ) || ( host \u003d\u003d null \u0026\u0026 this.host.length() \u003c\u003d 0 ) )\n+        if ( this.host.equals( host ) || host \u003d\u003d null || this.host.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 67,
    "nodeStartChar": 2144,
    "before": "this.type.equals(type)",
    "after": "this.type.equals(type) || type \u003d\u003d null"
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "api/src/main/java/org/sonatype/aether/Proxy.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/aether/Proxy.java b/api/src/main/java/org/sonatype/aether/Proxy.java\nindex 37f1fc0..60d5740 100644\n--- a/api/src/main/java/org/sonatype/aether/Proxy.java\n+++ b/api/src/main/java/org/sonatype/aether/Proxy.java\n@@ -64,7 +64,7 @@\n      */\n     public Proxy setType( String type )\n     {\n-        if ( this.type.equals( type ) || ( type \u003d\u003d null \u0026\u0026 this.type.length() \u003c\u003d 0 ) )\n+        if ( this.type.equals( type ) || type \u003d\u003d null || this.type.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n@@ -89,7 +89,7 @@\n      */\n     public Proxy setHost( String host )\n     {\n-        if ( this.host.equals( host ) || ( host \u003d\u003d null \u0026\u0026 this.host.length() \u003c\u003d 0 ) )\n+        if ( this.host.equals( host ) || host \u003d\u003d null || this.host.length() \u003c\u003d 0 )\n         {\n             return this;\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 92,
    "nodeStartChar": 2736,
    "before": "this.host.equals(host)",
    "after": "this.host.equals(host) || host \u003d\u003d null"
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java",
    "patch": "diff --git a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\nindex 87f8848..689dc00 100644\n--- a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n+++ b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n@@ -122,15 +122,15 @@\n                 getVersions( session, result, request, getNature( session, versionConstraint.getRanges() ) );\n \n             List\u003cVersion\u003e versions \u003d new ArrayList\u003cVersion\u003e();\n-            for ( String v : versionIndex.keySet() )\n+            for ( Map.Entry\u003cString, ArtifactRepository\u003e v : versionIndex.entrySet() )\n             {\n                 try\n                 {\n-                    Version ver \u003d versionScheme.parseVersion( v );\n+                    Version ver \u003d versionScheme.parseVersion( v.getKey() );\n                     if ( versionConstraint.containsVersion( ver ) )\n                     {\n                         versions.add( ver );\n-                        result.setRepository( ver, versionIndex.get( v ) );\n+                        result.setRepository( ver, v.getValue() );\n                     }\n                 }\n                 catch ( InvalidVersionException e )\n",
    "projectName": "sonatype-aether",
    "lineNum": 125,
    "nodeStartChar": 4698,
    "before": "for (String v : versionIndex.keySet()) {   try {     Version ver\u003dversionScheme.parseVersion(v);     if (versionConstraint.containsVersion(ver)) {       versions.add(ver);       result.setRepository(ver,versionIndex.get(v));     }   }  catch (  InvalidVersionException e) {     result.addException(e);   } } ",
    "after": "for (Map.Entry\u003cString,ArtifactRepository\u003e v : versionIndex.entrySet()) {   try {     Version ver\u003dversionScheme.parseVersion(v);     if (versionConstraint.containsVersion(ver)) {       versions.add(ver);       result.setRepository(ver,versionIndex.get(v));     }   }  catch (  InvalidVersionException e) {     result.addException(e);   } } "
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java",
    "patch": "diff --git a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\nindex 87f8848..689dc00 100644\n--- a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n+++ b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n@@ -122,15 +122,15 @@\n                 getVersions( session, result, request, getNature( session, versionConstraint.getRanges() ) );\n \n             List\u003cVersion\u003e versions \u003d new ArrayList\u003cVersion\u003e();\n-            for ( String v : versionIndex.keySet() )\n+            for ( Map.Entry\u003cString, ArtifactRepository\u003e v : versionIndex.entrySet() )\n             {\n                 try\n                 {\n-                    Version ver \u003d versionScheme.parseVersion( v );\n+                    Version ver \u003d versionScheme.parseVersion( v.getKey() );\n                     if ( versionConstraint.containsVersion( ver ) )\n                     {\n                         versions.add( ver );\n-                        result.setRepository( ver, versionIndex.get( v ) );\n+                        result.setRepository( ver, v.getValue() );\n                     }\n                 }\n                 catch ( InvalidVersionException e )\n",
    "projectName": "sonatype-aether",
    "lineNum": 129,
    "nodeStartChar": 4853,
    "before": "v",
    "after": "v.getKey()"
  },
  {
    "commitSHA1": "270c890898474330c9fb278adf447a154ee293a8",
    "commitFile": "impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java",
    "patch": "diff --git a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\nindex 87f8848..689dc00 100644\n--- a/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n+++ b/impl/src/main/java/org/sonatype/aether/impl/internal/DefaultVersionRangeResolver.java\n@@ -122,15 +122,15 @@\n                 getVersions( session, result, request, getNature( session, versionConstraint.getRanges() ) );\n \n             List\u003cVersion\u003e versions \u003d new ArrayList\u003cVersion\u003e();\n-            for ( String v : versionIndex.keySet() )\n+            for ( Map.Entry\u003cString, ArtifactRepository\u003e v : versionIndex.entrySet() )\n             {\n                 try\n                 {\n-                    Version ver \u003d versionScheme.parseVersion( v );\n+                    Version ver \u003d versionScheme.parseVersion( v.getKey() );\n                     if ( versionConstraint.containsVersion( ver ) )\n                     {\n                         versions.add( ver );\n-                        result.setRepository( ver, versionIndex.get( v ) );\n+                        result.setRepository( ver, v.getValue() );\n                     }\n                 }\n                 catch ( InvalidVersionException e )\n",
    "projectName": "sonatype-aether",
    "lineNum": 133,
    "nodeStartChar": 5044,
    "before": "versionIndex.get(v)",
    "after": "v.getValue()"
  },
  {
    "commitSHA1": "00cbb95254c697098f94d9997aa6d90d367c35fe",
    "commitFile": "api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\nindex 0519831..2e0580e 100644\n--- a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n+++ b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n@@ -24,7 +24,7 @@\n import org.sonatype.maven.repository.DependencyNode;\n \n /**\n- * A dependency selector that excludes optional transitive dependencies.\n+ * A dependency selector that excludes optional dependencies which occur beyond level one of the dependency graph.\n  * \n  * @author Benjamin Bentmann\n  * @see Dependency#isOptional()\n@@ -55,7 +55,7 @@\n \n     public DependencySelector deriveChildSelector( DependencyNode node )\n     {\n-        boolean transitive \u003d node.getDependency() !\u003d null;\n+        boolean transitive \u003d node.getDepth() \u003e 0;\n \n         if ( transitive \u003d\u003d this.transitive )\n         {\ndiff --git a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\nindex 0519831..2e0580e 100644\n--- a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n+++ b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n@@ -24,7 +24,7 @@\n import org.sonatype.maven.repository.DependencyNode;\n \n /**\n- * A dependency selector that excludes optional transitive dependencies.\n+ * A dependency selector that excludes optional dependencies which occur beyond level one of the dependency graph.\n  * \n  * @author Benjamin Bentmann\n  * @see Dependency#isOptional()\n@@ -55,7 +55,7 @@\n \n     public DependencySelector deriveChildSelector( DependencyNode node )\n     {\n-        boolean transitive \u003d node.getDependency() !\u003d null;\n+        boolean transitive \u003d node.getDepth() \u003e 0;\n \n         if ( transitive \u003d\u003d this.transitive )\n         {\n",
    "projectName": "sonatype-aether",
    "lineNum": 58,
    "nodeStartChar": 1798,
    "before": "node.getDependency() !\u003d null",
    "after": "node.getDepth() \u003e 0"
  },
  {
    "commitSHA1": "73da5c260699ab303227568239127b225cbee3e0",
    "commitFile": "api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\nindex 0f9c063..0519831 100644\n--- a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n+++ b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n@@ -50,7 +50,7 @@\n \n     public boolean selectDependency( Dependency dependency )\n     {\n-        return !dependency.isOptional();\n+        return !transitive || !dependency.isOptional();\n     }\n \n     public DependencySelector deriveChildSelector( DependencyNode node )\ndiff --git a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\nindex 0f9c063..0519831 100644\n--- a/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n+++ b/api/src/main/java/org/sonatype/maven/repository/util/OptionalDependencySelector.java\n@@ -50,7 +50,7 @@\n \n     public boolean selectDependency( Dependency dependency )\n     {\n-        return !dependency.isOptional();\n+        return !transitive || !dependency.isOptional();\n     }\n \n     public DependencySelector deriveChildSelector( DependencyNode node )\n",
    "projectName": "sonatype-aether",
    "lineNum": 53,
    "nodeStartChar": 1642,
    "before": "!dependency.isOptional()",
    "after": "!transitive || !dependency.isOptional()"
  },
  {
    "commitSHA1": "1a82c1151e8b59743acfa1492a77a82ca78fed17",
    "commitFile": "api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java b/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java\nindex 7627fc4..8d20160 100644\n--- a/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java\n+++ b/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java\n@@ -54,13 +54,13 @@\n     {\n         if ( id \u003d\u003d null || id.length() \u003c 0 )\n         {\n-            throw new IllegalArgumentException( \"no stereotype id specified\" );\n+            throw new IllegalArgumentException( \"no type id specified\" );\n         }\n         this.id \u003d id;\n         this.extension \u003d ( extension !\u003d null \u0026\u0026 extension.length() \u003e 0 ) ? extension : id;\n         this.classifier \u003d ( classifier !\u003d null ) ? classifier : \"\";\n         Map\u003cString, String\u003e props \u003d new HashMap\u003cString, String\u003e();\n-        props.put( \"stereotype\", id );\n+        props.put( \"type\", id );\n         props.put( \"language\", ( language !\u003d null \u0026\u0026 language.length() \u003e 0 ) ? language : \"none\" );\n         props.put( \"includesDependencies\", Boolean.toString( includesDependencies ) );\n         props.put( \"constitutesBuildPath\", Boolean.toString( constitutesBuildPath ) );\n",
    "projectName": "sonatype-aether",
    "lineNum": 57,
    "nodeStartChar": 1795,
    "before": "\"no stereotype id specified\"",
    "after": "\"no type id specified\""
  },
  {
    "commitSHA1": "1a82c1151e8b59743acfa1492a77a82ca78fed17",
    "commitFile": "api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java",
    "patch": "diff --git a/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java b/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java\nindex 7627fc4..8d20160 100644\n--- a/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java\n+++ b/api/src/main/java/org/sonatype/maven/repository/util/DefaultArtifactType.java\n@@ -54,13 +54,13 @@\n     {\n         if ( id \u003d\u003d null || id.length() \u003c 0 )\n         {\n-            throw new IllegalArgumentException( \"no stereotype id specified\" );\n+            throw new IllegalArgumentException( \"no type id specified\" );\n         }\n         this.id \u003d id;\n         this.extension \u003d ( extension !\u003d null \u0026\u0026 extension.length() \u003e 0 ) ? extension : id;\n         this.classifier \u003d ( classifier !\u003d null ) ? classifier : \"\";\n         Map\u003cString, String\u003e props \u003d new HashMap\u003cString, String\u003e();\n-        props.put( \"stereotype\", id );\n+        props.put( \"type\", id );\n         props.put( \"language\", ( language !\u003d null \u0026\u0026 language.length() \u003e 0 ) ? language : \"none\" );\n         props.put( \"includesDependencies\", Boolean.toString( includesDependencies ) );\n         props.put( \"constitutesBuildPath\", Boolean.toString( constitutesBuildPath ) );\n",
    "projectName": "sonatype-aether",
    "lineNum": 63,
    "nodeStartChar": 2104,
    "before": "\"stereotype\"",
    "after": "\"type\""
  },
  {
    "commitSHA1": "ffd7d0cb1c420a81506bc486e70cdb105b04e673",
    "commitFile": "impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java",
    "patch": "diff --git a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\nindex 0a68e3c..882a214 100644\n--- a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n+++ b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n@@ -91,12 +91,12 @@\n \n         for ( int i \u003d 0; i \u003c bytes.length; i++ )\n         {\n-            byte b \u003d bytes[i];\n+            int b \u003d bytes[i] \u0026 0xFF;\n             if ( b \u003c 0x10 )\n             {\n                 buffer.append( \u00270\u0027 );\n             }\n-            buffer.append( Integer.toHexString( b \u0026 0xFF ) );\n+            buffer.append( Integer.toHexString( b ) );\n         }\n \n         return buffer.toString();\ndiff --git a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\nindex 0a68e3c..882a214 100644\n--- a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n+++ b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n@@ -91,12 +91,12 @@\n \n         for ( int i \u003d 0; i \u003c bytes.length; i++ )\n         {\n-            byte b \u003d bytes[i];\n+            int b \u003d bytes[i] \u0026 0xFF;\n             if ( b \u003c 0x10 )\n             {\n                 buffer.append( \u00270\u0027 );\n             }\n-            buffer.append( Integer.toHexString( b \u0026 0xFF ) );\n+            buffer.append( Integer.toHexString( b ) );\n         }\n \n         return buffer.toString();\n",
    "projectName": "sonatype-aether",
    "lineNum": 94,
    "nodeStartChar": 2852,
    "before": "byte",
    "after": "int"
  },
  {
    "commitSHA1": "ffd7d0cb1c420a81506bc486e70cdb105b04e673",
    "commitFile": "impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java",
    "patch": "diff --git a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\nindex 0a68e3c..882a214 100644\n--- a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n+++ b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n@@ -91,12 +91,12 @@\n \n         for ( int i \u003d 0; i \u003c bytes.length; i++ )\n         {\n-            byte b \u003d bytes[i];\n+            int b \u003d bytes[i] \u0026 0xFF;\n             if ( b \u003c 0x10 )\n             {\n                 buffer.append( \u00270\u0027 );\n             }\n-            buffer.append( Integer.toHexString( b \u0026 0xFF ) );\n+            buffer.append( Integer.toHexString( b ) );\n         }\n \n         return buffer.toString();\ndiff --git a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\nindex 0a68e3c..882a214 100644\n--- a/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n+++ b/impl/src/main/java/org/apache/maven/repository/internal/ChecksumUtils.java\n@@ -91,12 +91,12 @@\n \n         for ( int i \u003d 0; i \u003c bytes.length; i++ )\n         {\n-            byte b \u003d bytes[i];\n+            int b \u003d bytes[i] \u0026 0xFF;\n             if ( b \u003c 0x10 )\n             {\n                 buffer.append( \u00270\u0027 );\n             }\n-            buffer.append( Integer.toHexString( b \u0026 0xFF ) );\n+            buffer.append( Integer.toHexString( b ) );\n         }\n \n         return buffer.toString();\n",
    "projectName": "sonatype-aether",
    "lineNum": 99,
    "nodeStartChar": 3013,
    "before": "b \u0026 0xFF",
    "after": "b"
  },
  {
    "commitSHA1": "a50a4eed5b156290557cfaa7bad45fe499613992",
    "commitFile": "src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java",
    "patch": "diff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\nindex 0196381..34f7f38 100644\n--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n@@ -1416,11 +1416,11 @@\n                 if (valueMatched) {\n                     // Given property and value\n                     for (OWLAnnotationAssertionAxiom ax : unannotatedAxioms) {\n-                        if (ax.getProperty().equals(propertyArg.getValueAsIRI())) {\n+                        if (ax.getProperty().getIRI().equals(propertyArg.getValueAsIRI())) {\n                             QueryBindingImpl new_binding \u003d binding.clone();\n                             OWLAnnotationValue value \u003d getBoundAnnotationValue(valueArg);\n                             if (ax.getValue().equals(value)) {\n-                                // Any subject\n+                                // Any subject match\n                                 bindAnnotationSubject(ax, subjectArg, new_binding);\n                                 eval(query, group.bind(new_binding), result, new_binding, BoundChecking.DO_NOT_CHECK_BOUND);\n                                 ret \u003d true;\ndiff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\nindex 0196381..34f7f38 100644\n--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n@@ -1416,11 +1416,11 @@\n                 if (valueMatched) {\n                     // Given property and value\n                     for (OWLAnnotationAssertionAxiom ax : unannotatedAxioms) {\n-                        if (ax.getProperty().equals(propertyArg.getValueAsIRI())) {\n+                        if (ax.getProperty().getIRI().equals(propertyArg.getValueAsIRI())) {\n                             QueryBindingImpl new_binding \u003d binding.clone();\n                             OWLAnnotationValue value \u003d getBoundAnnotationValue(valueArg);\n                             if (ax.getValue().equals(value)) {\n-                                // Any subject\n+                                // Any subject match\n                                 bindAnnotationSubject(ax, subjectArg, new_binding);\n                                 eval(query, group.bind(new_binding), result, new_binding, BoundChecking.DO_NOT_CHECK_BOUND);\n                                 ret \u003d true;\n",
    "projectName": "sparql-dl-api",
    "lineNum": 1419,
    "nodeStartChar": 65951,
    "before": "ax",
    "after": "ax.getProperty()"
  },
  {
    "commitSHA1": "4b479223630827596d3f48f622b76be16c8bd399",
    "commitFile": "src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java",
    "patch": "diff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\nindex b3f30bc..8aa3395 100644\n--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n@@ -1119,7 +1119,7 @@\n \t\t\t\t\tfor(OWLObjectPropertyExpression p : candidates) {\n \t\t\t\t\t\tif(!p.isAnonymous()) {\n \t\t\t\t\t\t\tnew_binding \u003d binding.clone();\n-\t\t\t\t\t\t\tnew_binding.set(arg0, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n+\t\t\t\t\t\t\tnew_binding.set(arg1, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n \t\t\t\t\t\t\tif(eval(query, group.bind(new_binding), result, new_binding)) {\n \t\t\t\t\t\t\t\tret \u003d true;\n \t\t\t\t\t\t\t}\ndiff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\nindex b3f30bc..8aa3395 100644\n--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n@@ -1119,7 +1119,7 @@\n \t\t\t\t\tfor(OWLObjectPropertyExpression p : candidates) {\n \t\t\t\t\t\tif(!p.isAnonymous()) {\n \t\t\t\t\t\t\tnew_binding \u003d binding.clone();\n-\t\t\t\t\t\t\tnew_binding.set(arg0, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n+\t\t\t\t\t\t\tnew_binding.set(arg1, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n \t\t\t\t\t\t\tif(eval(query, group.bind(new_binding), result, new_binding)) {\n \t\t\t\t\t\t\t\tret \u003d true;\n \t\t\t\t\t\t\t}\n",
    "projectName": "sparql-dl-api",
    "lineNum": 1122,
    "nodeStartChar": 34534,
    "before": "new_binding.set(arg0,QueryArgument.newURI(p.getNamedProperty().getIRI()))",
    "after": "new_binding.set(arg1,QueryArgument.newURI(p.getNamedProperty().getIRI()))"
  },
  {
    "commitSHA1": "bd3f377fbf94efe8004f2c5a9c742759e094c7dd",
    "commitFile": "src/main/java/nl/_42/boot/csv/file/CsvFileService.java",
    "patch": "diff --git a/src/main/java/nl/_42/boot/csv/file/CsvFileService.java b/src/main/java/nl/_42/boot/csv/file/CsvFileService.java\nindex f49829a..a0dd97e 100644\n--- a/src/main/java/nl/_42/boot/csv/file/CsvFileService.java\n+++ b/src/main/java/nl/_42/boot/csv/file/CsvFileService.java\n@@ -43,7 +43,7 @@\n     }\n   }\n \n-  @Scheduled(cron \u003d \"csv.file.cron\")\n+  @Scheduled(cron \u003d \"${csv.file.cron}\")\n   public void run() {\n     Collection\u003cString\u003e types \u003d getTypes();\n     types.forEach(this::run);\ndiff --git a/src/main/java/nl/_42/boot/csv/file/CsvFileService.java b/src/main/java/nl/_42/boot/csv/file/CsvFileService.java\nindex f49829a..a0dd97e 100644\n--- a/src/main/java/nl/_42/boot/csv/file/CsvFileService.java\n+++ b/src/main/java/nl/_42/boot/csv/file/CsvFileService.java\n@@ -43,7 +43,7 @@\n     }\n   }\n \n-  @Scheduled(cron \u003d \"csv.file.cron\")\n+  @Scheduled(cron \u003d \"${csv.file.cron}\")\n   public void run() {\n     Collection\u003cString\u003e types \u003d getTypes();\n     types.forEach(this::run);\n",
    "projectName": "spring-boot-starter-csv",
    "lineNum": 46,
    "nodeStartChar": 1209,
    "before": "\"csv.file.cron\"",
    "after": "\"${csv.file.cron}\""
  },
  {
    "commitSHA1": "411d5ccc48667b22648f1285b3a3693bd727e745",
    "commitFile": "src/main/java/com/smartertravel/metrics/aop/TimingAspect.java",
    "patch": "diff --git a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\nindex b61faef..57b61c2 100644\n--- a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n+++ b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n@@ -16,9 +16,6 @@\n  * This aspect uses the {@link TimingPointcut} pointcut which will track method execution\n  * for all methods annotated with the {@link Timed} annotation.\n  * \u003cp\u003e\n- * Note that his aspect will prefix all metric keys created by the {@code KeyGenerator} with\n- * \"timer.\"\n- * \u003cp\u003e\n  * This class is thread safe.\n  *\n  * @see \u003ca href\u003d\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics\"\u003eSpring Boot Metrics Docs\u003c/a\u003e\n@@ -37,10 +34,11 @@\n      * The default key generator has the following properties:\n      * \u003cul\u003e\n      * \u003cli\u003e\n-     * If a key is specified as the value of the {@link Timed} annotation that key will be used.\n+     * If a key is specified as the value of the {@link Timed} annotation that key will be used, prefixed\n+     * with the string \"timer.\".\n      * \u003c/li\u003e\n      * \u003cli\u003e\n-     * Otherwise, the key will be of the form \"$CLASS.$METHOD\" where \"$CLASS\" is the short class\n+     * Otherwise, the key will be of the form \"timer.$CLASS.$METHOD\" where \"$CLASS\" is the short class\n      * name of the bean that the {@code Timed} method is part of, and \"$METHOD\" is the name of the\n      * {@code Timed} method.\n      * \u003c/li\u003e\n@@ -70,7 +68,7 @@\n \n     @Around(value \u003d \"target(bean) \u0026\u0026 TimingPointcut.performanceLog(timed)\", argNames \u003d \"joinPoint,bean,timed\")\n     public Object performanceLog(ProceedingJoinPoint joinPoint, Object bean, Timed timed) throws Throwable {\n-        final String key \u003d \"timer.\" + keyGenerator.getKey(joinPoint, bean, timed);\n+        final String key \u003d keyGenerator.getKey(joinPoint, bean, timed);\n         final long start \u003d System.nanoTime();\n \n         try {\n@@ -90,10 +88,12 @@\n      * of this parameters (but obviously you should be using \u003cem\u003esome\u003c/em\u003e of them).\n      * \u003cp\u003e\n      * Metrics keys are expected to be several period \u0027.\u0027 separated values. For example\n-     * \"SomeDaoClass.doSomething\" or \"SomeServiceClient.getThing\".\n+     * \"timer.SomeDaoClass.doSomething\" or \"timer.SomeServiceClient.getThing\".\n      * \u003cp\u003e\n-     * Note that the {@code TimingAspect} will add a \"timer.\" prefix to the metric key\n-     * no matter what.\n+     * Prefixing metrics with the string \"timer.\" may cause the metric to be treated in\n+     * a special manner by a particular backend. For example, DropWizard treats metrics\n+     * with keys that start with \"timer.\" as, well, timers instead of counters or\n+     * gauges. However, it is not required for implementations to do this.\n      * \u003cp\u003e\n      * Implementations must be thread safe.\n      */\n@@ -113,7 +113,8 @@\n     /**\n      * Default implementation of a {@code KeyGenerator} that generates a key based\n      * on the bean class name and annotated method name or, optionally, the key\n-     * specified as part of the {@code Timed} annotation.\n+     * specified as part of the {@code Timed} annotation. In either case, the string\n+     * \"timer.\" will be prefixed to the key.\n      */\n     // VisibleForTesting\n     static class DefaultKeyGenerator implements KeyGenerator {\n@@ -121,10 +122,10 @@\n         public String getKey(JoinPoint jp, Object bean, Timed timed) {\n             final String annotationValue \u003d timed.value();\n             if (annotationValue.length() !\u003d 0) {\n-                return annotationValue;\n+                return \"timer.\" + annotationValue;\n             }\n \n-            return bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n+            return \"timer.\" + bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n         }\n     }\n \ndiff --git a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\nindex 804744d..b263532 100644\n--- a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n+++ b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n@@ -75,7 +75,7 @@\n         final Timed[] annotations \u003d method.getAnnotationsByType(Timed.class);\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n@@ -88,7 +88,7 @@\n         when(signature.getName()).thenReturn(\"userExists\");\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\ndiff --git a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\nindex b61faef..57b61c2 100644\n--- a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n+++ b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n@@ -16,9 +16,6 @@\n  * This aspect uses the {@link TimingPointcut} pointcut which will track method execution\n  * for all methods annotated with the {@link Timed} annotation.\n  * \u003cp\u003e\n- * Note that his aspect will prefix all metric keys created by the {@code KeyGenerator} with\n- * \"timer.\"\n- * \u003cp\u003e\n  * This class is thread safe.\n  *\n  * @see \u003ca href\u003d\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics\"\u003eSpring Boot Metrics Docs\u003c/a\u003e\n@@ -37,10 +34,11 @@\n      * The default key generator has the following properties:\n      * \u003cul\u003e\n      * \u003cli\u003e\n-     * If a key is specified as the value of the {@link Timed} annotation that key will be used.\n+     * If a key is specified as the value of the {@link Timed} annotation that key will be used, prefixed\n+     * with the string \"timer.\".\n      * \u003c/li\u003e\n      * \u003cli\u003e\n-     * Otherwise, the key will be of the form \"$CLASS.$METHOD\" where \"$CLASS\" is the short class\n+     * Otherwise, the key will be of the form \"timer.$CLASS.$METHOD\" where \"$CLASS\" is the short class\n      * name of the bean that the {@code Timed} method is part of, and \"$METHOD\" is the name of the\n      * {@code Timed} method.\n      * \u003c/li\u003e\n@@ -70,7 +68,7 @@\n \n     @Around(value \u003d \"target(bean) \u0026\u0026 TimingPointcut.performanceLog(timed)\", argNames \u003d \"joinPoint,bean,timed\")\n     public Object performanceLog(ProceedingJoinPoint joinPoint, Object bean, Timed timed) throws Throwable {\n-        final String key \u003d \"timer.\" + keyGenerator.getKey(joinPoint, bean, timed);\n+        final String key \u003d keyGenerator.getKey(joinPoint, bean, timed);\n         final long start \u003d System.nanoTime();\n \n         try {\n@@ -90,10 +88,12 @@\n      * of this parameters (but obviously you should be using \u003cem\u003esome\u003c/em\u003e of them).\n      * \u003cp\u003e\n      * Metrics keys are expected to be several period \u0027.\u0027 separated values. For example\n-     * \"SomeDaoClass.doSomething\" or \"SomeServiceClient.getThing\".\n+     * \"timer.SomeDaoClass.doSomething\" or \"timer.SomeServiceClient.getThing\".\n      * \u003cp\u003e\n-     * Note that the {@code TimingAspect} will add a \"timer.\" prefix to the metric key\n-     * no matter what.\n+     * Prefixing metrics with the string \"timer.\" may cause the metric to be treated in\n+     * a special manner by a particular backend. For example, DropWizard treats metrics\n+     * with keys that start with \"timer.\" as, well, timers instead of counters or\n+     * gauges. However, it is not required for implementations to do this.\n      * \u003cp\u003e\n      * Implementations must be thread safe.\n      */\n@@ -113,7 +113,8 @@\n     /**\n      * Default implementation of a {@code KeyGenerator} that generates a key based\n      * on the bean class name and annotated method name or, optionally, the key\n-     * specified as part of the {@code Timed} annotation.\n+     * specified as part of the {@code Timed} annotation. In either case, the string\n+     * \"timer.\" will be prefixed to the key.\n      */\n     // VisibleForTesting\n     static class DefaultKeyGenerator implements KeyGenerator {\n@@ -121,10 +122,10 @@\n         public String getKey(JoinPoint jp, Object bean, Timed timed) {\n             final String annotationValue \u003d timed.value();\n             if (annotationValue.length() !\u003d 0) {\n-                return annotationValue;\n+                return \"timer.\" + annotationValue;\n             }\n \n-            return bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n+            return \"timer.\" + bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n         }\n     }\n \n",
    "projectName": "st-metrics",
    "lineNum": 73,
    "nodeStartChar": 3204,
    "before": "\"timer.\" + keyGenerator.getKey(joinPoint,bean,timed)",
    "after": "keyGenerator.getKey(joinPoint,bean,timed)"
  },
  {
    "commitSHA1": "411d5ccc48667b22648f1285b3a3693bd727e745",
    "commitFile": "src/main/java/com/smartertravel/metrics/aop/TimingAspect.java",
    "patch": "diff --git a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\nindex b61faef..57b61c2 100644\n--- a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n+++ b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n@@ -16,9 +16,6 @@\n  * This aspect uses the {@link TimingPointcut} pointcut which will track method execution\n  * for all methods annotated with the {@link Timed} annotation.\n  * \u003cp\u003e\n- * Note that his aspect will prefix all metric keys created by the {@code KeyGenerator} with\n- * \"timer.\"\n- * \u003cp\u003e\n  * This class is thread safe.\n  *\n  * @see \u003ca href\u003d\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics\"\u003eSpring Boot Metrics Docs\u003c/a\u003e\n@@ -37,10 +34,11 @@\n      * The default key generator has the following properties:\n      * \u003cul\u003e\n      * \u003cli\u003e\n-     * If a key is specified as the value of the {@link Timed} annotation that key will be used.\n+     * If a key is specified as the value of the {@link Timed} annotation that key will be used, prefixed\n+     * with the string \"timer.\".\n      * \u003c/li\u003e\n      * \u003cli\u003e\n-     * Otherwise, the key will be of the form \"$CLASS.$METHOD\" where \"$CLASS\" is the short class\n+     * Otherwise, the key will be of the form \"timer.$CLASS.$METHOD\" where \"$CLASS\" is the short class\n      * name of the bean that the {@code Timed} method is part of, and \"$METHOD\" is the name of the\n      * {@code Timed} method.\n      * \u003c/li\u003e\n@@ -70,7 +68,7 @@\n \n     @Around(value \u003d \"target(bean) \u0026\u0026 TimingPointcut.performanceLog(timed)\", argNames \u003d \"joinPoint,bean,timed\")\n     public Object performanceLog(ProceedingJoinPoint joinPoint, Object bean, Timed timed) throws Throwable {\n-        final String key \u003d \"timer.\" + keyGenerator.getKey(joinPoint, bean, timed);\n+        final String key \u003d keyGenerator.getKey(joinPoint, bean, timed);\n         final long start \u003d System.nanoTime();\n \n         try {\n@@ -90,10 +88,12 @@\n      * of this parameters (but obviously you should be using \u003cem\u003esome\u003c/em\u003e of them).\n      * \u003cp\u003e\n      * Metrics keys are expected to be several period \u0027.\u0027 separated values. For example\n-     * \"SomeDaoClass.doSomething\" or \"SomeServiceClient.getThing\".\n+     * \"timer.SomeDaoClass.doSomething\" or \"timer.SomeServiceClient.getThing\".\n      * \u003cp\u003e\n-     * Note that the {@code TimingAspect} will add a \"timer.\" prefix to the metric key\n-     * no matter what.\n+     * Prefixing metrics with the string \"timer.\" may cause the metric to be treated in\n+     * a special manner by a particular backend. For example, DropWizard treats metrics\n+     * with keys that start with \"timer.\" as, well, timers instead of counters or\n+     * gauges. However, it is not required for implementations to do this.\n      * \u003cp\u003e\n      * Implementations must be thread safe.\n      */\n@@ -113,7 +113,8 @@\n     /**\n      * Default implementation of a {@code KeyGenerator} that generates a key based\n      * on the bean class name and annotated method name or, optionally, the key\n-     * specified as part of the {@code Timed} annotation.\n+     * specified as part of the {@code Timed} annotation. In either case, the string\n+     * \"timer.\" will be prefixed to the key.\n      */\n     // VisibleForTesting\n     static class DefaultKeyGenerator implements KeyGenerator {\n@@ -121,10 +122,10 @@\n         public String getKey(JoinPoint jp, Object bean, Timed timed) {\n             final String annotationValue \u003d timed.value();\n             if (annotationValue.length() !\u003d 0) {\n-                return annotationValue;\n+                return \"timer.\" + annotationValue;\n             }\n \n-            return bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n+            return \"timer.\" + bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n         }\n     }\n \ndiff --git a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\nindex 804744d..b263532 100644\n--- a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n+++ b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n@@ -75,7 +75,7 @@\n         final Timed[] annotations \u003d method.getAnnotationsByType(Timed.class);\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n@@ -88,7 +88,7 @@\n         when(signature.getName()).thenReturn(\"userExists\");\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\ndiff --git a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\nindex b61faef..57b61c2 100644\n--- a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n+++ b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n@@ -16,9 +16,6 @@\n  * This aspect uses the {@link TimingPointcut} pointcut which will track method execution\n  * for all methods annotated with the {@link Timed} annotation.\n  * \u003cp\u003e\n- * Note that his aspect will prefix all metric keys created by the {@code KeyGenerator} with\n- * \"timer.\"\n- * \u003cp\u003e\n  * This class is thread safe.\n  *\n  * @see \u003ca href\u003d\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics\"\u003eSpring Boot Metrics Docs\u003c/a\u003e\n@@ -37,10 +34,11 @@\n      * The default key generator has the following properties:\n      * \u003cul\u003e\n      * \u003cli\u003e\n-     * If a key is specified as the value of the {@link Timed} annotation that key will be used.\n+     * If a key is specified as the value of the {@link Timed} annotation that key will be used, prefixed\n+     * with the string \"timer.\".\n      * \u003c/li\u003e\n      * \u003cli\u003e\n-     * Otherwise, the key will be of the form \"$CLASS.$METHOD\" where \"$CLASS\" is the short class\n+     * Otherwise, the key will be of the form \"timer.$CLASS.$METHOD\" where \"$CLASS\" is the short class\n      * name of the bean that the {@code Timed} method is part of, and \"$METHOD\" is the name of the\n      * {@code Timed} method.\n      * \u003c/li\u003e\n@@ -70,7 +68,7 @@\n \n     @Around(value \u003d \"target(bean) \u0026\u0026 TimingPointcut.performanceLog(timed)\", argNames \u003d \"joinPoint,bean,timed\")\n     public Object performanceLog(ProceedingJoinPoint joinPoint, Object bean, Timed timed) throws Throwable {\n-        final String key \u003d \"timer.\" + keyGenerator.getKey(joinPoint, bean, timed);\n+        final String key \u003d keyGenerator.getKey(joinPoint, bean, timed);\n         final long start \u003d System.nanoTime();\n \n         try {\n@@ -90,10 +88,12 @@\n      * of this parameters (but obviously you should be using \u003cem\u003esome\u003c/em\u003e of them).\n      * \u003cp\u003e\n      * Metrics keys are expected to be several period \u0027.\u0027 separated values. For example\n-     * \"SomeDaoClass.doSomething\" or \"SomeServiceClient.getThing\".\n+     * \"timer.SomeDaoClass.doSomething\" or \"timer.SomeServiceClient.getThing\".\n      * \u003cp\u003e\n-     * Note that the {@code TimingAspect} will add a \"timer.\" prefix to the metric key\n-     * no matter what.\n+     * Prefixing metrics with the string \"timer.\" may cause the metric to be treated in\n+     * a special manner by a particular backend. For example, DropWizard treats metrics\n+     * with keys that start with \"timer.\" as, well, timers instead of counters or\n+     * gauges. However, it is not required for implementations to do this.\n      * \u003cp\u003e\n      * Implementations must be thread safe.\n      */\n@@ -113,7 +113,8 @@\n     /**\n      * Default implementation of a {@code KeyGenerator} that generates a key based\n      * on the bean class name and annotated method name or, optionally, the key\n-     * specified as part of the {@code Timed} annotation.\n+     * specified as part of the {@code Timed} annotation. In either case, the string\n+     * \"timer.\" will be prefixed to the key.\n      */\n     // VisibleForTesting\n     static class DefaultKeyGenerator implements KeyGenerator {\n@@ -121,10 +122,10 @@\n         public String getKey(JoinPoint jp, Object bean, Timed timed) {\n             final String annotationValue \u003d timed.value();\n             if (annotationValue.length() !\u003d 0) {\n-                return annotationValue;\n+                return \"timer.\" + annotationValue;\n             }\n \n-            return bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n+            return \"timer.\" + bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n         }\n     }\n \n",
    "projectName": "st-metrics",
    "lineNum": 124,
    "nodeStartChar": 5327,
    "before": "annotationValue",
    "after": "\"timer.\" + annotationValue"
  },
  {
    "commitSHA1": "411d5ccc48667b22648f1285b3a3693bd727e745",
    "commitFile": "src/main/java/com/smartertravel/metrics/aop/TimingAspect.java",
    "patch": "diff --git a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\nindex b61faef..57b61c2 100644\n--- a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n+++ b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n@@ -16,9 +16,6 @@\n  * This aspect uses the {@link TimingPointcut} pointcut which will track method execution\n  * for all methods annotated with the {@link Timed} annotation.\n  * \u003cp\u003e\n- * Note that his aspect will prefix all metric keys created by the {@code KeyGenerator} with\n- * \"timer.\"\n- * \u003cp\u003e\n  * This class is thread safe.\n  *\n  * @see \u003ca href\u003d\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics\"\u003eSpring Boot Metrics Docs\u003c/a\u003e\n@@ -37,10 +34,11 @@\n      * The default key generator has the following properties:\n      * \u003cul\u003e\n      * \u003cli\u003e\n-     * If a key is specified as the value of the {@link Timed} annotation that key will be used.\n+     * If a key is specified as the value of the {@link Timed} annotation that key will be used, prefixed\n+     * with the string \"timer.\".\n      * \u003c/li\u003e\n      * \u003cli\u003e\n-     * Otherwise, the key will be of the form \"$CLASS.$METHOD\" where \"$CLASS\" is the short class\n+     * Otherwise, the key will be of the form \"timer.$CLASS.$METHOD\" where \"$CLASS\" is the short class\n      * name of the bean that the {@code Timed} method is part of, and \"$METHOD\" is the name of the\n      * {@code Timed} method.\n      * \u003c/li\u003e\n@@ -70,7 +68,7 @@\n \n     @Around(value \u003d \"target(bean) \u0026\u0026 TimingPointcut.performanceLog(timed)\", argNames \u003d \"joinPoint,bean,timed\")\n     public Object performanceLog(ProceedingJoinPoint joinPoint, Object bean, Timed timed) throws Throwable {\n-        final String key \u003d \"timer.\" + keyGenerator.getKey(joinPoint, bean, timed);\n+        final String key \u003d keyGenerator.getKey(joinPoint, bean, timed);\n         final long start \u003d System.nanoTime();\n \n         try {\n@@ -90,10 +88,12 @@\n      * of this parameters (but obviously you should be using \u003cem\u003esome\u003c/em\u003e of them).\n      * \u003cp\u003e\n      * Metrics keys are expected to be several period \u0027.\u0027 separated values. For example\n-     * \"SomeDaoClass.doSomething\" or \"SomeServiceClient.getThing\".\n+     * \"timer.SomeDaoClass.doSomething\" or \"timer.SomeServiceClient.getThing\".\n      * \u003cp\u003e\n-     * Note that the {@code TimingAspect} will add a \"timer.\" prefix to the metric key\n-     * no matter what.\n+     * Prefixing metrics with the string \"timer.\" may cause the metric to be treated in\n+     * a special manner by a particular backend. For example, DropWizard treats metrics\n+     * with keys that start with \"timer.\" as, well, timers instead of counters or\n+     * gauges. However, it is not required for implementations to do this.\n      * \u003cp\u003e\n      * Implementations must be thread safe.\n      */\n@@ -113,7 +113,8 @@\n     /**\n      * Default implementation of a {@code KeyGenerator} that generates a key based\n      * on the bean class name and annotated method name or, optionally, the key\n-     * specified as part of the {@code Timed} annotation.\n+     * specified as part of the {@code Timed} annotation. In either case, the string\n+     * \"timer.\" will be prefixed to the key.\n      */\n     // VisibleForTesting\n     static class DefaultKeyGenerator implements KeyGenerator {\n@@ -121,10 +122,10 @@\n         public String getKey(JoinPoint jp, Object bean, Timed timed) {\n             final String annotationValue \u003d timed.value();\n             if (annotationValue.length() !\u003d 0) {\n-                return annotationValue;\n+                return \"timer.\" + annotationValue;\n             }\n \n-            return bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n+            return \"timer.\" + bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n         }\n     }\n \ndiff --git a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\nindex 804744d..b263532 100644\n--- a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n+++ b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n@@ -75,7 +75,7 @@\n         final Timed[] annotations \u003d method.getAnnotationsByType(Timed.class);\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n@@ -88,7 +88,7 @@\n         when(signature.getName()).thenReturn(\"userExists\");\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\ndiff --git a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\nindex b61faef..57b61c2 100644\n--- a/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n+++ b/src/main/java/com/smartertravel/metrics/aop/TimingAspect.java\n@@ -16,9 +16,6 @@\n  * This aspect uses the {@link TimingPointcut} pointcut which will track method execution\n  * for all methods annotated with the {@link Timed} annotation.\n  * \u003cp\u003e\n- * Note that his aspect will prefix all metric keys created by the {@code KeyGenerator} with\n- * \"timer.\"\n- * \u003cp\u003e\n  * This class is thread safe.\n  *\n  * @see \u003ca href\u003d\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-metrics\"\u003eSpring Boot Metrics Docs\u003c/a\u003e\n@@ -37,10 +34,11 @@\n      * The default key generator has the following properties:\n      * \u003cul\u003e\n      * \u003cli\u003e\n-     * If a key is specified as the value of the {@link Timed} annotation that key will be used.\n+     * If a key is specified as the value of the {@link Timed} annotation that key will be used, prefixed\n+     * with the string \"timer.\".\n      * \u003c/li\u003e\n      * \u003cli\u003e\n-     * Otherwise, the key will be of the form \"$CLASS.$METHOD\" where \"$CLASS\" is the short class\n+     * Otherwise, the key will be of the form \"timer.$CLASS.$METHOD\" where \"$CLASS\" is the short class\n      * name of the bean that the {@code Timed} method is part of, and \"$METHOD\" is the name of the\n      * {@code Timed} method.\n      * \u003c/li\u003e\n@@ -70,7 +68,7 @@\n \n     @Around(value \u003d \"target(bean) \u0026\u0026 TimingPointcut.performanceLog(timed)\", argNames \u003d \"joinPoint,bean,timed\")\n     public Object performanceLog(ProceedingJoinPoint joinPoint, Object bean, Timed timed) throws Throwable {\n-        final String key \u003d \"timer.\" + keyGenerator.getKey(joinPoint, bean, timed);\n+        final String key \u003d keyGenerator.getKey(joinPoint, bean, timed);\n         final long start \u003d System.nanoTime();\n \n         try {\n@@ -90,10 +88,12 @@\n      * of this parameters (but obviously you should be using \u003cem\u003esome\u003c/em\u003e of them).\n      * \u003cp\u003e\n      * Metrics keys are expected to be several period \u0027.\u0027 separated values. For example\n-     * \"SomeDaoClass.doSomething\" or \"SomeServiceClient.getThing\".\n+     * \"timer.SomeDaoClass.doSomething\" or \"timer.SomeServiceClient.getThing\".\n      * \u003cp\u003e\n-     * Note that the {@code TimingAspect} will add a \"timer.\" prefix to the metric key\n-     * no matter what.\n+     * Prefixing metrics with the string \"timer.\" may cause the metric to be treated in\n+     * a special manner by a particular backend. For example, DropWizard treats metrics\n+     * with keys that start with \"timer.\" as, well, timers instead of counters or\n+     * gauges. However, it is not required for implementations to do this.\n      * \u003cp\u003e\n      * Implementations must be thread safe.\n      */\n@@ -113,7 +113,8 @@\n     /**\n      * Default implementation of a {@code KeyGenerator} that generates a key based\n      * on the bean class name and annotated method name or, optionally, the key\n-     * specified as part of the {@code Timed} annotation.\n+     * specified as part of the {@code Timed} annotation. In either case, the string\n+     * \"timer.\" will be prefixed to the key.\n      */\n     // VisibleForTesting\n     static class DefaultKeyGenerator implements KeyGenerator {\n@@ -121,10 +122,10 @@\n         public String getKey(JoinPoint jp, Object bean, Timed timed) {\n             final String annotationValue \u003d timed.value();\n             if (annotationValue.length() !\u003d 0) {\n-                return annotationValue;\n+                return \"timer.\" + annotationValue;\n             }\n \n-            return bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n+            return \"timer.\" + bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName();\n         }\n     }\n \n",
    "projectName": "st-metrics",
    "lineNum": 127,
    "nodeStartChar": 5378,
    "before": "bean.getClass().getSimpleName() + \".\" + jp.getSignature().getName()",
    "after": "\"timer.\" + bean.getClass().getSimpleName() + \".\"+ jp.getSignature().getName()"
  },
  {
    "commitSHA1": "411d5ccc48667b22648f1285b3a3693bd727e745",
    "commitFile": "src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java",
    "patch": "diff --git a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\nindex 804744d..b263532 100644\n--- a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n+++ b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n@@ -75,7 +75,7 @@\n         final Timed[] annotations \u003d method.getAnnotationsByType(Timed.class);\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n@@ -88,7 +88,7 @@\n         when(signature.getName()).thenReturn(\"userExists\");\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n",
    "projectName": "st-metrics",
    "lineNum": 78,
    "nodeStartChar": 2140,
    "before": "\"mysqlDao.userExists\"",
    "after": "\"timer.mysqlDao.userExists\""
  },
  {
    "commitSHA1": "411d5ccc48667b22648f1285b3a3693bd727e745",
    "commitFile": "src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java",
    "patch": "diff --git a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\nindex 804744d..b263532 100644\n--- a/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n+++ b/src/test/java/com/smartertravel/metrics/aop/TimingAspectTest.java\n@@ -75,7 +75,7 @@\n         final Timed[] annotations \u003d method.getAnnotationsByType(Timed.class);\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.mysqlDao.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n@@ -88,7 +88,7 @@\n         when(signature.getName()).thenReturn(\"userExists\");\n \n         final DefaultKeyGenerator keyGenerator \u003d new DefaultKeyGenerator();\n-        assertEquals(\"UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n+        assertEquals(\"timer.UserDaoHystrix.userExists\", keyGenerator.getKey(joinPoint, dao, annotations[0]));\n     }\n \n     @Test\n",
    "projectName": "st-metrics",
    "lineNum": 91,
    "nodeStartChar": 2765,
    "before": "\"UserDaoHystrix.userExists\"",
    "after": "\"timer.UserDaoHystrix.userExists\""
  },
  {
    "commitSHA1": "a11b9cbbdc0e9e3468235fd09a0b86c3b549fc68",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\nindex 3a151d6..89dbb8d 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\n@@ -257,7 +257,7 @@\n         logger.debug(\"{} event type received...\", symEvent.getType());\n \n \n-        if (symEvent.getType() !\u003d null)\n+        if (symEvent.getType() \u003d\u003d null)\n             return;\n \n \n",
    "projectName": "symphony-java-client",
    "lineNum": 260,
    "nodeStartChar": 9240,
    "before": "symEvent.getType() !\u003d null",
    "after": "symEvent.getType() \u003d\u003d null"
  },
  {
    "commitSHA1": "0ea6d09aec43a2e837e026e46272f6399c929588",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\nindex d722f2e..79464af 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\n@@ -257,7 +257,7 @@\n         logger.debug(\"{} event type received...\", symEvent.getType());\n \n \n-        if (symEvent.getId() \u003d\u003d null \u0026\u0026 symEvent.getType() !\u003d null)\n+        if (symEvent.getType() !\u003d null)\n             return;\n \n \n",
    "projectName": "symphony-java-client",
    "lineNum": 260,
    "nodeStartChar": 9240,
    "before": "symEvent.getId() \u003d\u003d null \u0026\u0026 symEvent.getType() !\u003d null",
    "after": "symEvent.getType() !\u003d null"
  },
  {
    "commitSHA1": "39d6a9bf43e85155f51c1ad6e33440c435dfb670",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\nindex 3260f7b..37fea5b 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n@@ -107,8 +107,7 @@\n             logger.info(\"Successfully refreshed SymAuth tokens...\");\n \n             logger.info(\"Exposing SymAgentHealthCheck as JMX MBean...\");\n-            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient,\n-                    AgentSystemClientFactory.TYPE.DEFAULT);\n+            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient);\n             SymAgentHealthCheck check \u003d agentSystemClient.getAgentHealthCheck();\n             MBeanServer mbs \u003d ManagementFactory.getPlatformMBeanServer();\n             ObjectName mBeanName \u003d new ObjectName(\"org.symphonyoss.client:type\u003dHealthCheck\");\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\nindex 3260f7b..37fea5b 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n@@ -107,8 +107,7 @@\n             logger.info(\"Successfully refreshed SymAuth tokens...\");\n \n             logger.info(\"Exposing SymAgentHealthCheck as JMX MBean...\");\n-            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient,\n-                    AgentSystemClientFactory.TYPE.DEFAULT);\n+            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient);\n             SymAgentHealthCheck check \u003d agentSystemClient.getAgentHealthCheck();\n             MBeanServer mbs \u003d ManagementFactory.getPlatformMBeanServer();\n             ObjectName mBeanName \u003d new ObjectName(\"org.symphonyoss.client:type\u003dHealthCheck\");\n",
    "projectName": "symphony-java-client",
    "lineNum": 110,
    "nodeStartChar": 3940,
    "before": "AgentSystemClientFactory.getClient(symClient,AgentSystemClientFactory.TYPE.DEFAULT)",
    "after": "AgentSystemClientFactory.getClient(symClient)"
  },
  {
    "commitSHA1": "a0172c8c96cc59dd0a39ba8237be5cc83e95e232",
    "commitFile": "symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java",
    "patch": "diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\nindex ff10d47..ce1a4d4 100644\n--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n@@ -254,7 +254,7 @@\n \n \n             SymMessage message \u003d new SymMessage();\n-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n \n             sendResponse(message);\n \ndiff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\nindex ff10d47..ce1a4d4 100644\n--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n@@ -254,7 +254,7 @@\n \n \n             SymMessage message \u003d new SymMessage();\n-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n \n             sendResponse(message);\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 257,
    "nodeStartChar": 7707,
    "before": "message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString())",
    "after": "message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString())"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1354,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1495,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1342,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1483,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1366,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1511,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 41,
    "nodeStartChar": 1321,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 43,
    "nodeStartChar": 1459,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 39,
    "nodeStartChar": 1339,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 41,
    "nodeStartChar": 1477,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\n",
    "projectName": "symphony-java-client",
    "lineNum": 43,
    "nodeStartChar": 1435,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\n",
    "projectName": "symphony-java-client",
    "lineNum": 45,
    "nodeStartChar": 1571,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "commitSHA1": "aa40cfde9848a99481e2da836856c6fd35d70b0b",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\nindex 4dbc227..44903e1 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n@@ -119,7 +119,7 @@\n \n             return symClient;\n \n-        } catch (NetworkException ae) {\n+        } catch (AuthorizationException ae) {\n \n             logger.error(ae.getMessage(), ae);\n         } catch (InitException e) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\nindex 4dbc227..44903e1 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n@@ -119,7 +119,7 @@\n \n             return symClient;\n \n-        } catch (NetworkException ae) {\n+        } catch (AuthorizationException ae) {\n \n             logger.error(ae.getMessage(), ae);\n         } catch (InitException e) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 122,
    "nodeStartChar": 4390,
    "before": "NetworkException",
    "after": "AuthorizationException"
  },
  {
    "commitSHA1": "ba79403cb493da4999bcacf9f65ede3ece01ee49",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\n",
    "projectName": "symphony-java-client",
    "lineNum": 27,
    "nodeStartChar": 969,
    "before": "/**   * Created by Frank Tarsillo on 5/15/2016.  */ interface MessageListener {   void onMessage(  SymMessage message); } ",
    "after": "/**   * Created by Frank Tarsillo on 5/15/2016.  */ public interface MessageListener {   void onMessage(  SymMessage message); } "
  },
  {
    "commitSHA1": "8a17ded45826eba40e7fcf4de01af14de2ec465c",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\n",
    "projectName": "symphony-java-client",
    "lineNum": 27,
    "nodeStartChar": 969,
    "before": "/**   * Created by Frank Tarsillo on 5/15/2016.  */ interface MessageListener {   void onMessage(  SymMessage message); } ",
    "after": "/**   * Created by Frank Tarsillo on 5/15/2016.  */ public interface MessageListener {   void onMessage(  SymMessage message); } "
  },
  {
    "commitSHA1": "f08d59b19856300212df8396ea859d451abfec8e",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/model/Room.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\nindex 50103f5..01f8252 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\n@@ -85,7 +85,7 @@\n \n     public void setStream(Stream stream) {\n         this.stream \u003d stream;\n-        if(stream\u003d\u003dnull)\n+        if(streamId\u003d\u003dnull)\n             streamId\u003dstream.getId();\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 88,
    "nodeStartChar": 2476,
    "before": "stream \u003d\u003d null",
    "after": "streamId \u003d\u003d null"
  },
  {
    "commitSHA1": "04c5151cbde111747df511befb1c342bf09e7855",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java\nindex 647df74..09e1e09 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java\n@@ -105,7 +105,7 @@\n \n         final Chat other \u003d (Chat) obj;\n \n-        if (!this.stream.equals(other.stream)) {\n+        if (this.stream\u003d\u003dnull || !this.stream.equals(other.stream)) {\n             return false;\n         }\n         return true;\n",
    "projectName": "symphony-java-client",
    "lineNum": 108,
    "nodeStartChar": 2826,
    "before": "!this.stream.equals(other.stream)",
    "after": "this.stream \u003d\u003d null || !this.stream.equals(other.stream)"
  },
  {
    "commitSHA1": "c275e753a51f1a7b2f4f5cb8011966ef7df51462",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex 24ea82e..d126b44 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -173,7 +173,7 @@\n     }\n \n \n-    private String getText() {\n+    public String getText() {\n         return textDoc.toString();\n     }\n \n@@ -182,7 +182,7 @@\n     }\n \n \n-    private String getHtmlStartingFromText(String text) {\n+    public String getHtmlStartingFromText(String text) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex 24ea82e..d126b44 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -173,7 +173,7 @@\n     }\n \n \n-    private String getText() {\n+    public String getText() {\n         return textDoc.toString();\n     }\n \n@@ -182,7 +182,7 @@\n     }\n \n \n-    private String getHtmlStartingFromText(String text) {\n+    public String getHtmlStartingFromText(String text) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n",
    "projectName": "symphony-java-client",
    "lineNum": 176,
    "nodeStartChar": 6118,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "c275e753a51f1a7b2f4f5cb8011966ef7df51462",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex 24ea82e..d126b44 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -173,7 +173,7 @@\n     }\n \n \n-    private String getText() {\n+    public String getText() {\n         return textDoc.toString();\n     }\n \n@@ -182,7 +182,7 @@\n     }\n \n \n-    private String getHtmlStartingFromText(String text) {\n+    public String getHtmlStartingFromText(String text) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex 24ea82e..d126b44 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -173,7 +173,7 @@\n     }\n \n \n-    private String getText() {\n+    public String getText() {\n         return textDoc.toString();\n     }\n \n@@ -182,7 +182,7 @@\n     }\n \n \n-    private String getHtmlStartingFromText(String text) {\n+    public String getHtmlStartingFromText(String text) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n",
    "projectName": "symphony-java-client",
    "lineNum": 185,
    "nodeStartChar": 6274,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 39,
    "nodeStartChar": 1316,
    "before": "class MlMessageParser extends DefaultHandler {   private String messageMl;   private Element elementMessageML;   private Document doc;   private Document originalDoc;   private StringBuilder textDoc\u003dnew StringBuilder();   private String[] textChunks;   private SymphonyClient symClient;   private final Logger logger\u003dLoggerFactory.getLogger(MlMessageParser.class);   private MlMessageParser(  SymphonyClient symClient){     this.symClient\u003dsymClient;   }   private MlMessageParser(){   }   private void parseMessage(  String message) throws Exception {     Document doc\u003dJsoup.parse(message);     originalDoc\u003ddoc.clone();     Element elementErrors\u003ddoc.body().getElementsByTag(\"errors\").first();     if (elementErrors !\u003d null)     logger.debug(\"Errors found in message: {}\",elementErrors.outerHtml());     doc.select(\"errors\").remove();     elementMessageML\u003ddoc.select(\"messageML\").first();     if (elementMessageML !\u003d null) {       logger.debug(\"Doc parsed: {}\",elementMessageML.outerHtml());     }  else {       logger.error(\"Could not parse document for message {}\",message);       throw new Exception(\"Malformed message\");     }     textDoc\u003dnew StringBuilder();     stripTags(textDoc,elementMessageML.childNodes());     textChunks\u003dtextDoc.toString().split(\"\\\\s+\");   }   public String[] getTextChunks(){     return textChunks;   }   public void setTextChunks(  String[] textChunks){     this.textChunks\u003dtextChunks;   }   private void stripTags(  StringBuilder builder,  List\u003cNode\u003e nodesList){     for (    Node node : nodesList) {       String nodeName\u003dnode.nodeName();       if (nodeName.equalsIgnoreCase(\"#text\")) {         builder.append(node.toString().trim()).append(\" \");       }  else {         if (nodeName.equalsIgnoreCase(NodeTypes.ANCHOR.toString())) {           if (node.attributes().hasKey(AttribTypes.HREF.toString()))           builder.append(node.attr(AttribTypes.HREF.toString()));         }  else         if (nodeName.equalsIgnoreCase(NodeTypes.HASHTAG.toString())) {           if (node.attributes().hasKey(AttribTypes.TAG.toString()))           builder.append(\"#\").append(node.attr(AttribTypes.TAG.toString())).append(\" \");         }  else         if (nodeName.equalsIgnoreCase(NodeTypes.MENTION.toString())) {           User user\u003dnew User();           user.setEmailAddress(\"UID:\" + node.attr(AttribTypes.UID.toString()));           user.setId(Long.valueOf(node.attr(AttribTypes.UID.toString())));           if (node.attributes().hasKey(AttribTypes.UID.toString())) {             if (symClient !\u003d null)             try {               user\u003dsymClient.getUsersClient().getUserFromId(Long.valueOf(node.attr(AttribTypes.UID.toString())));             }  catch (            Exception e) {               e.printStackTrace();             }           }  else           if (node.attributes().hasKey(AttribTypes.EMAIL.toString())) {             user.setEmailAddress(node.attr(AttribTypes.EMAIL.toString()));           }           builder.append(user.getEmailAddress());         }  else         if (nodeName.equalsIgnoreCase(NodeTypes.CASHTAG.toString())) {           if (node.attributes().hasKey(AttribTypes.TAG.toString()))           builder.append(\"$\").append(node.attr(AttribTypes.TAG.toString())).append(\" \");         }  else {           stripTags(builder,node.childNodes());         }       }     }   }   public static void main(  String[] args){     MlMessageParser m2\u003dnew MlMessageParser();     try {       m2.parseMessage(\"\u003cmessageML\u003eadd \u003chash TAG\u003d\\\"test\\\"/\u003e\u003ca HREF\u003d\\\"https://bits.mdevlab.com\\\"\u003e\u003cb\u003eANCHOR \u003ci\u003eTEXT\u003c/i\u003e\u003c/b\u003e\u003c/a\u003e some other stuff \u003ccash tag\u003d\\\"mrkt\\\"/\u003e is there \u003cmention uid\u003d\\\"221232232\\\"/\u003e \u003cb\u003etest of \u003c/b\u003e\u003ca HREF\u003d\\\"https://bits.mdevlab.com\\\"/\u003esomething\u003cerrors\u003e\u003cerror\u003eInvalid control characters in message\u003c/error\u003e\u003c/errors\u003e\u003c/messageML\u003e\");       System.out.println(m2.getText());       System.out.println(m2.getHtmlStartingFromText(\"add\"));       System.out.println(m2.getHtmlStartingFromNode(NodeTypes.CASHTAG.toString(),AttribTypes.TAG.toString(),\"mrkt\"));       System.out.println(m2.getHtmlStartingFromNode(NodeTypes.HASHTAG.toString(),AttribTypes.TAG.toString(),\"test\"));     }  catch (    Exception e) {       e.printStackTrace();     }   }   private String getText(){     return textDoc.toString();   }   public String getOuterHtml(){     return originalDoc.outerHtml();   }   private String getHtmlStartingFromText(  String text){     StringBuilder stringBuilder\u003dnew StringBuilder();     getHtmlStartingFromText(text,stringBuilder,elementMessageML.childNodes(),false);     return stringBuilder.toString();   }   private String getHtmlStartingFromNode(  String nodeType,  String attrib,  String attribValue){     StringBuilder stringBuilder\u003dnew StringBuilder();     getHtmlStartingFromNode(nodeType,attrib,attribValue,stringBuilder,elementMessageML.childNodes(),false);     return stringBuilder.toString();   }   private void getHtmlStartingFromText(  String text,  StringBuilder builder,  List\u003cNode\u003e nodesList,  boolean append){     for (    Node node : nodesList) {       String nodeName\u003dnode.nodeName();       if (append) {         builder.append(node.outerHtml());         continue;       }       if (nodeName.equalsIgnoreCase(\"#text\")) {         if (node.toString().trim().equalsIgnoreCase(text))         append\u003dtrue;       }       getHtmlStartingFromText(text,builder,node.childNodes(),append);     }   }   private void getHtmlStartingFromNode(  String nodeType,  String attrib,  String attribValue,  StringBuilder builder,  List\u003cNode\u003e nodesList,  boolean append){     for (    Node node : nodesList) {       String nodeName\u003dnode.nodeName();       if (append) {         if (node.nodeName().equalsIgnoreCase(\"#text\") \u0026\u0026 node.outerHtml().charAt(0) !\u003d \u0027 \u0027)         builder.append(\" \");         builder.append(node.outerHtml());         if (!node.nodeName().equalsIgnoreCase(\"#text\"))         builder.append(\" \");         continue;       }       if (nodeName.equalsIgnoreCase(nodeType)) {         if (node.attributes().hasKey(attrib) \u0026\u0026 node.attr(attrib).equalsIgnoreCase(attribValue))         append\u003dtrue;       }       getHtmlStartingFromNode(nodeType,attrib,attribValue,builder,node.childNodes(),append);     }   }   public Elements getAllElements(){     return elementMessageML.getAllElements();   }   public List\u003cNode\u003e getChildNodes(){     return elementMessageML.childNodes();   } } ",
    "after": "public class MlMessageParser extends DefaultHandler {   private String messageMl;   private Element elementMessageML;   private Document doc;   private Document originalDoc;   private StringBuilder textDoc\u003dnew StringBuilder();   private String[] textChunks;   private SymphonyClient symClient;   private final Logger logger\u003dLoggerFactory.getLogger(MlMessageParser.class);   private MlMessageParser(  SymphonyClient symClient){     this.symClient\u003dsymClient;   }   private MlMessageParser(){   }   private void parseMessage(  String message) throws Exception {     Document doc\u003dJsoup.parse(message);     originalDoc\u003ddoc.clone();     Element elementErrors\u003ddoc.body().getElementsByTag(\"errors\").first();     if (elementErrors !\u003d null)     logger.debug(\"Errors found in message: {}\",elementErrors.outerHtml());     doc.select(\"errors\").remove();     elementMessageML\u003ddoc.select(\"messageML\").first();     if (elementMessageML !\u003d null) {       logger.debug(\"Doc parsed: {}\",elementMessageML.outerHtml());     }  else {       logger.error(\"Could not parse document for message {}\",message);       throw new Exception(\"Malformed message\");     }     textDoc\u003dnew StringBuilder();     stripTags(textDoc,elementMessageML.childNodes());     textChunks\u003dtextDoc.toString().split(\"\\\\s+\");   }   public String[] getTextChunks(){     return textChunks;   }   public void setTextChunks(  String[] textChunks){     this.textChunks\u003dtextChunks;   }   private void stripTags(  StringBuilder builder,  List\u003cNode\u003e nodesList){     for (    Node node : nodesList) {       String nodeName\u003dnode.nodeName();       if (nodeName.equalsIgnoreCase(\"#text\")) {         builder.append(node.toString().trim()).append(\" \");       }  else {         if (nodeName.equalsIgnoreCase(NodeTypes.ANCHOR.toString())) {           if (node.attributes().hasKey(AttribTypes.HREF.toString()))           builder.append(node.attr(AttribTypes.HREF.toString()));         }  else         if (nodeName.equalsIgnoreCase(NodeTypes.HASHTAG.toString())) {           if (node.attributes().hasKey(AttribTypes.TAG.toString()))           builder.append(\"#\").append(node.attr(AttribTypes.TAG.toString())).append(\" \");         }  else         if (nodeName.equalsIgnoreCase(NodeTypes.MENTION.toString())) {           User user\u003dnew User();           user.setEmailAddress(\"UID:\" + node.attr(AttribTypes.UID.toString()));           user.setId(Long.valueOf(node.attr(AttribTypes.UID.toString())));           if (node.attributes().hasKey(AttribTypes.UID.toString())) {             if (symClient !\u003d null)             try {               user\u003dsymClient.getUsersClient().getUserFromId(Long.valueOf(node.attr(AttribTypes.UID.toString())));             }  catch (            Exception e) {               e.printStackTrace();             }           }  else           if (node.attributes().hasKey(AttribTypes.EMAIL.toString())) {             user.setEmailAddress(node.attr(AttribTypes.EMAIL.toString()));           }           builder.append(user.getEmailAddress());         }  else         if (nodeName.equalsIgnoreCase(NodeTypes.CASHTAG.toString())) {           if (node.attributes().hasKey(AttribTypes.TAG.toString()))           builder.append(\"$\").append(node.attr(AttribTypes.TAG.toString())).append(\" \");         }  else {           stripTags(builder,node.childNodes());         }       }     }   }   public static void main(  String[] args){     MlMessageParser m2\u003dnew MlMessageParser();     try {       m2.parseMessage(\"\u003cmessageML\u003eadd \u003chash TAG\u003d\\\"test\\\"/\u003e\u003ca HREF\u003d\\\"https://bits.mdevlab.com\\\"\u003e\u003cb\u003eANCHOR \u003ci\u003eTEXT\u003c/i\u003e\u003c/b\u003e\u003c/a\u003e some other stuff \u003ccash tag\u003d\\\"mrkt\\\"/\u003e is there \u003cmention uid\u003d\\\"221232232\\\"/\u003e \u003cb\u003etest of \u003c/b\u003e\u003ca HREF\u003d\\\"https://bits.mdevlab.com\\\"/\u003esomething\u003cerrors\u003e\u003cerror\u003eInvalid control characters in message\u003c/error\u003e\u003c/errors\u003e\u003c/messageML\u003e\");       System.out.println(m2.getText());       System.out.println(m2.getHtmlStartingFromText(\"add\"));       System.out.println(m2.getHtmlStartingFromNode(NodeTypes.CASHTAG.toString(),AttribTypes.TAG.toString(),\"mrkt\"));       System.out.println(m2.getHtmlStartingFromNode(NodeTypes.HASHTAG.toString(),AttribTypes.TAG.toString(),\"test\"));     }  catch (    Exception e) {       e.printStackTrace();     }   }   private String getText(){     return textDoc.toString();   }   public String getOuterHtml(){     return originalDoc.outerHtml();   }   private String getHtmlStartingFromText(  String text){     StringBuilder stringBuilder\u003dnew StringBuilder();     getHtmlStartingFromText(text,stringBuilder,elementMessageML.childNodes(),false);     return stringBuilder.toString();   }   private String getHtmlStartingFromNode(  String nodeType,  String attrib,  String attribValue){     StringBuilder stringBuilder\u003dnew StringBuilder();     getHtmlStartingFromNode(nodeType,attrib,attribValue,stringBuilder,elementMessageML.childNodes(),false);     return stringBuilder.toString();   }   private void getHtmlStartingFromText(  String text,  StringBuilder builder,  List\u003cNode\u003e nodesList,  boolean append){     for (    Node node : nodesList) {       String nodeName\u003dnode.nodeName();       if (append) {         builder.append(node.outerHtml());         continue;       }       if (nodeName.equalsIgnoreCase(\"#text\")) {         if (node.toString().trim().equalsIgnoreCase(text))         append\u003dtrue;       }       getHtmlStartingFromText(text,builder,node.childNodes(),append);     }   }   private void getHtmlStartingFromNode(  String nodeType,  String attrib,  String attribValue,  StringBuilder builder,  List\u003cNode\u003e nodesList,  boolean append){     for (    Node node : nodesList) {       String nodeName\u003dnode.nodeName();       if (append) {         if (node.nodeName().equalsIgnoreCase(\"#text\") \u0026\u0026 node.outerHtml().charAt(0) !\u003d \u0027 \u0027)         builder.append(\" \");         builder.append(node.outerHtml());         if (!node.nodeName().equalsIgnoreCase(\"#text\"))         builder.append(\" \");         continue;       }       if (nodeName.equalsIgnoreCase(nodeType)) {         if (node.attributes().hasKey(attrib) \u0026\u0026 node.attr(attrib).equalsIgnoreCase(attribValue))         append\u003dtrue;       }       getHtmlStartingFromNode(nodeType,attrib,attribValue,builder,node.childNodes(),append);     }   }   public Elements getAllElements(){     return elementMessageML.getAllElements();   }   public List\u003cNode\u003e getChildNodes(){     return elementMessageML.childNodes();   } } "
  },
  {
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 52,
    "nodeStartChar": 1710,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 57,
    "nodeStartChar": 1809,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 60,
    "nodeStartChar": 1848,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 193,
    "nodeStartChar": 6529,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 202,
    "nodeStartChar": 6853,
    "before": "private",
    "after": "public"
  },
  {
    "commitSHA1": "ba43f45e0e7602181e9c84a1f2c24ad2e9183d66",
    "commitFile": "src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\ndiff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\n",
    "projectName": "templating-maven-plugin",
    "lineNum": 93,
    "nodeStartChar": 2929,
    "before": "System.out",
    "after": "getLog()"
  },
  {
    "commitSHA1": "ba43f45e0e7602181e9c84a1f2c24ad2e9183d66",
    "commitFile": "src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\ndiff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\n",
    "projectName": "templating-maven-plugin",
    "lineNum": 100,
    "nodeStartChar": 3308,
    "before": "System.err",
    "after": "getLog()"
  },
  {
    "commitSHA1": "ba43f45e0e7602181e9c84a1f2c24ad2e9183d66",
    "commitFile": "src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\ndiff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\n",
    "projectName": "templating-maven-plugin",
    "lineNum": 105,
    "nodeStartChar": 3604,
    "before": "Collections.EMPTY_LIST",
    "after": "Collections.\u003cString\u003eemptyList()"
  },
  {
    "commitSHA1": "ba43f45e0e7602181e9c84a1f2c24ad2e9183d66",
    "commitFile": "src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\ndiff --git a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\nindex d0ee843..633a2ba 100644\n--- a/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n+++ b/src/main/java/org/codehaus/mojo/templating/AddFilteredSourceMojo.java\n@@ -90,19 +90,19 @@\n \r\n \tpublic void execute() throws MojoExecutionException\r\n \t{\r\n-\t\tSystem.out.println(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n+\t    getLog().debug(\"source\u003d\" + templateSourceDirectory + \" target\u003d\" + targetGenerated);\r\n \t\t// System.out.println(\"Nombre de filtres \u003d \" + getCombinedFiltersList().size());\r\n \r\n \t\t// 1 Copy with filtering the given source (default java-templates) to target dir\r\n \t\tList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();\r\n \t\tResource resource \u003d new Resource();\r\n \t\tresource.setFiltering(true);\r\n-\t\tSystem.err.println(templateSourceDirectory);\r\n+\t\tgetLog().debug(templateSourceDirectory.getAbsolutePath());\r\n \t\tresource.setDirectory(templateSourceDirectory.getAbsolutePath());\r\n \t\tresources.add(resource);\r\n \r\n \t\tMavenResourcesExecution mavenResourcesExecution \u003d new MavenResourcesExecution(resources,\r\n-\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.EMPTY_LIST,\r\n+\t\t\ttargetGenerated, project, encoding, Collections.emptyList(), Collections.\u003cString\u003eemptyList(),\r\n \t\t\tsession);\r\n \t\tmavenResourcesExecution.setInjectProjectBuildFilters(false);\r\n \t\t// mavenResourcesExecution.setUseDefaultFilterWrappers(true);\r\n@@ -120,7 +120,7 @@\n \t\tthis.project.addCompileSourceRoot(targetGenerated.getAbsolutePath());\r\n \t\tif (getLog().isInfoEnabled())\r\n \t\t{\r\n-\t\t\tSystem.err.println(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n+\t\t    getLog().info(\"XXXXXX Source directory: \" + targetGenerated + \" added.\");\r\n \t\t}\r\n \r\n \t}\r\n",
    "projectName": "templating-maven-plugin",
    "lineNum": 123,
    "nodeStartChar": 4098,
    "before": "System.err",
    "after": "getLog()"
  },
  {
    "commitSHA1": "6d88137e9fce29e719585aa85cb9f134f8ffbbaf",
    "commitFile": "src/test/java/org/torpedoquery/jpa/TorpedoTest.java",
    "patch": "diff --git a/src/test/java/org/torpedoquery/jpa/TorpedoTest.java b/src/test/java/org/torpedoquery/jpa/TorpedoTest.java\nindex 062206a..f33be41 100644\n--- a/src/test/java/org/torpedoquery/jpa/TorpedoTest.java\n+++ b/src/test/java/org/torpedoquery/jpa/TorpedoTest.java\n@@ -122,7 +122,7 @@\n \t\twhere(entity.getPrimitiveInt()).eq(10).and(entity.getIntegerField()).eq(20);\n \t\torg.torpedoquery.jpa.Query\u003cLong\u003e select \u003d select(count(entity)).freeze();\n \t\t\n-\t\tassertEquals(\"select count(entity_0) from Entity entity_0 where entity_0.primitiveInt \u003d :primitiveInt_1\",\n+\t\tassertEquals(\"select count(entity_0) from Entity entity_0 where entity_0.primitiveInt \u003d :primitiveInt_1 and entity_0.integerField \u003d :integerField_2\",\n \t\t\t\tselect.getQuery());\n \t\tassertEquals(10, select.getParameters().get(\"primitiveInt_1\"));\n \t}\n",
    "projectName": "torpedoquery",
    "lineNum": 125,
    "nodeStartChar": 4614,
    "before": "\"select count(entity_0) from Entity entity_0 where entity_0.primitiveInt \u003d :primitiveInt_1\"",
    "after": "\"select count(entity_0) from Entity entity_0 where entity_0.primitiveInt \u003d :primitiveInt_1 and entity_0.integerField \u003d :integerField_2\""
  },
  {
    "commitSHA1": "008310f312f78c18e4e0b0a1516cfb20c1c47981",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex aa9ac06..c2d6d83 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha(data);\n+    return DigestUtils.sha1(data);\n   }\n \n   /**\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex aa9ac06..c2d6d83 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha(data);\n+    return DigestUtils.sha1(data);\n   }\n \n   /**\n",
    "projectName": "ttorrent",
    "lineNum": 17,
    "nodeStartChar": 404,
    "before": "DigestUtils.sha(data)",
    "after": "DigestUtils.sha1(data)"
  },
  {
    "commitSHA1": "a0566f03367c7ec9043887afb0350040bec26cc5",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\n",
    "projectName": "ttorrent",
    "lineNum": 348,
    "nodeStartChar": 9788,
    "before": "logger.debug(\"Attempting to send a message to non-connected peer {}!\",this)",
    "after": "logger.trace(\"Attempting to send a message to non-connected peer {}!\",this)"
  },
  {
    "commitSHA1": "a0566f03367c7ec9043887afb0350040bec26cc5",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\n",
    "projectName": "ttorrent",
    "lineNum": 619,
    "nodeStartChar": 18899,
    "before": "logger.debug(\"Discarding block for already completed \" + p)",
    "after": "logger.trace(\"Discarding block for already completed \" + p)"
  },
  {
    "commitSHA1": "589397f9ac16b1ac78622844934e7f14699e6b0d",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex 001ea41..14d1889 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha1(data);\n+    return DigestUtils.sha(data);\n   }\n \n   /**\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex 001ea41..14d1889 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha1(data);\n+    return DigestUtils.sha(data);\n   }\n \n   /**\n",
    "projectName": "ttorrent",
    "lineNum": 17,
    "nodeStartChar": 404,
    "before": "DigestUtils.sha1(data)",
    "after": "DigestUtils.sha(data)"
  },
  {
    "commitSHA1": "83128e44e04bd19bbcdda6a5348204614f03ef46",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 368ba5b..41795eb 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -49,7 +49,8 @@\n       try {\n         read \u003d socketChannel.read(messageBytes);\n       } catch (IOException e) {\n-        LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from channel \" + socketChannel, e);\n+        //Some clients close connection so that java throws IOException \"An existing connection was forcibly closed by the remote host\"\n+        logger.debug(\"unable to read data from channel \" + socketChannel, e);\n         return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n       }\n       if (read \u003c 0) {\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 368ba5b..41795eb 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -49,7 +49,8 @@\n       try {\n         read \u003d socketChannel.read(messageBytes);\n       } catch (IOException e) {\n-        LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from channel \" + socketChannel, e);\n+        //Some clients close connection so that java throws IOException \"An existing connection was forcibly closed by the remote host\"\n+        logger.debug(\"unable to read data from channel \" + socketChannel, e);\n         return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n       }\n       if (read \u003c 0) {\n",
    "projectName": "ttorrent",
    "lineNum": 53,
    "nodeStartChar": 1979,
    "before": "LoggerUtils.warnAndDebugDetails(logger,\"unable to read data from channel \" + socketChannel,e)",
    "after": "logger.debug(\"unable to read data from channel \" + socketChannel,e)"
  },
  {
    "commitSHA1": "9ac4b94e8bcb6dd0a60797fac84a7f2f83b552d0",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex e891290..df37f83 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -260,7 +260,7 @@\n           unannouncedTorrents.addAll(e.getValue());\n         } catch (ConnectException t) {\n           LoggerUtils.warnWithMessageAndDebugDetails(logger, \"Cannot connect to the tracker {}\", e.getKey(), t);\n-          logger.info(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n+          logger.debug(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n         }\n       } else {\n         logger.warn(\"Tracker client for {} is null. Torrents are not announced on tracker\", e.getKey());\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex e891290..df37f83 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -260,7 +260,7 @@\n           unannouncedTorrents.addAll(e.getValue());\n         } catch (ConnectException t) {\n           LoggerUtils.warnWithMessageAndDebugDetails(logger, \"Cannot connect to the tracker {}\", e.getKey(), t);\n-          logger.info(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n+          logger.debug(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n         }\n       } else {\n         logger.warn(\"Tracker client for {} is null. Torrents are not announced on tracker\", e.getKey());\n",
    "projectName": "ttorrent",
    "lineNum": 263,
    "nodeStartChar": 8951,
    "before": "logger.info(\"next torrents contain {} in tracker list. {}\",e.getKey(),e.getValue())",
    "after": "logger.debug(\"next torrents contain {} in tracker list. {}\",e.getKey(),e.getValue())"
  },
  {
    "commitSHA1": "280a6b2742883c6fa803cfee15f39f2b42af0495",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 29b7a3e..6dc84e1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -1041,7 +1041,7 @@\n       }\n     };\n     th.start();\n-    Thread.sleep(200);\n+    Thread.sleep(100);\n     th.interrupt();\n     new WaitFor(10 * 1000) {\n       @Override\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 29b7a3e..6dc84e1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -1041,7 +1041,7 @@\n       }\n     };\n     th.start();\n-    Thread.sleep(200);\n+    Thread.sleep(100);\n     th.interrupt();\n     new WaitFor(10 * 1000) {\n       @Override\n",
    "projectName": "ttorrent",
    "lineNum": 1044,
    "nodeStartChar": 39027,
    "before": "200",
    "after": "100"
  },
  {
    "commitSHA1": "4695b2842dee3b11f647f46086348d6f1f25d58e",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 883f00c..8e7b9c1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -712,7 +712,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final ExecutorService es \u003d Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);\n     final Client leecher \u003d new Client(es) {\n       @Override\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 883f00c..8e7b9c1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -712,7 +712,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final ExecutorService es \u003d Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);\n     final Client leecher \u003d new Client(es) {\n       @Override\n",
    "projectName": "ttorrent",
    "lineNum": 715,
    "nodeStartChar": 25922,
    "before": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent())",
    "after": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent(),true,false)"
  },
  {
    "commitSHA1": "cd59fe559544b0d7b86ebe840c102b600f1dc672",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex 9161714..7e44f55 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -202,7 +202,7 @@\n \n   private synchronized void closeFileChannelIfNecessary() throws IOException {\n     logger.debug(\"Closing file  channel for {} if necessary. Downloaders: {}\", getParentFile().getAbsolutePath() + \"/\" + getName(), myDownloaders.size());\n-    if (isFileChannelOpen) {\n+    if (isFileChannelOpen \u0026\u0026 myDownloaders.size() \u003d\u003d 0) {\n       this.bucket.close();\n       isFileChannelOpen \u003d false;\n     }\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex 9161714..7e44f55 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -202,7 +202,7 @@\n \n   private synchronized void closeFileChannelIfNecessary() throws IOException {\n     logger.debug(\"Closing file  channel for {} if necessary. Downloaders: {}\", getParentFile().getAbsolutePath() + \"/\" + getName(), myDownloaders.size());\n-    if (isFileChannelOpen) {\n+    if (isFileChannelOpen \u0026\u0026 myDownloaders.size() \u003d\u003d 0) {\n       this.bucket.close();\n       isFileChannelOpen \u003d false;\n     }\n",
    "projectName": "ttorrent",
    "lineNum": 205,
    "nodeStartChar": 7686,
    "before": "isFileChannelOpen",
    "after": "isFileChannelOpen \u0026\u0026 myDownloaders.size() \u003d\u003d 0"
  },
  {
    "commitSHA1": "505a7b8c76ddf245345f5108541218d816db0fc5",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex e740022..8d98ae6 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -850,7 +850,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final Client leecher \u003d createClient();\n     leecher.start(InetAddress.getLocalHost());\n     final AtomicBoolean interrupted \u003d new AtomicBoolean();\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex e740022..8d98ae6 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -850,7 +850,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final Client leecher \u003d createClient();\n     leecher.start(InetAddress.getLocalHost());\n     final AtomicBoolean interrupted \u003d new AtomicBoolean();\n",
    "projectName": "ttorrent",
    "lineNum": 853,
    "nodeStartChar": 31143,
    "before": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent())",
    "after": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent(),true,false)"
  },
  {
    "commitSHA1": "5bf5504d82f59ba1ffe800574ea9155157c6767d",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\nindex 957f8ac..28d1cc8 100644\n--- a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n@@ -277,7 +277,7 @@\n     c2.start(InetAddress.getLocalHost());\n     File torrentFile \u003d new File(TEST_RESOURCES + \"/torrents\", \"file1.jar.torrent\");\n     File parentFiles \u003d new File(TEST_RESOURCES + \"/parentFiles\");\n-    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath());\n+    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath(), true, false);\n \n     final TrackedTorrent tt \u003d tracker.getTrackedTorrent(torrent.getHexInfoHash());\n     new WaitFor(10 * 1000) {\ndiff --git a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\nindex 957f8ac..28d1cc8 100644\n--- a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n@@ -277,7 +277,7 @@\n     c2.start(InetAddress.getLocalHost());\n     File torrentFile \u003d new File(TEST_RESOURCES + \"/torrents\", \"file1.jar.torrent\");\n     File parentFiles \u003d new File(TEST_RESOURCES + \"/parentFiles\");\n-    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath());\n+    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath(), true, false);\n \n     final TrackedTorrent tt \u003d tracker.getTrackedTorrent(torrent.getHexInfoHash());\n     new WaitFor(10 * 1000) {\n",
    "projectName": "ttorrent",
    "lineNum": 280,
    "nodeStartChar": 10940,
    "before": "c2.addTorrent(torrentFile.getAbsolutePath(),parentFiles.getAbsolutePath())",
    "after": "c2.addTorrent(torrentFile.getAbsolutePath(),parentFiles.getAbsolutePath(),true,false)"
  },
  {
    "commitSHA1": "f95b7ca2ee3881be8d51bdc60c2e28679c6b64c9",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 5f20a61..e740022 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -833,7 +833,8 @@\n       }\n     });\n     try {\n-      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60);\n+      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60,\n+              0, new AtomicBoolean(), 10);\n     } finally {\n       future.cancel(true);\n       service.shutdown();\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 5f20a61..e740022 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -833,7 +833,8 @@\n       }\n     });\n     try {\n-      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60);\n+      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60,\n+              0, new AtomicBoolean(), 10);\n     } finally {\n       future.cancel(true);\n       service.shutdown();\n",
    "projectName": "ttorrent",
    "lineNum": 836,
    "nodeStartChar": 30416,
    "before": "leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(),tempFiles.createTempDir().getAbsolutePath(),60)",
    "after": "leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(),tempFiles.createTempDir().getAbsolutePath(),60,0,new AtomicBoolean(),10)"
  },
  {
    "commitSHA1": "8d4fc2a8f72b9085b1f095e8a1ca70fea712ea7b",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\nindex 1073c39..5d32dfb 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n@@ -263,7 +263,7 @@\n \n       return new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER, infoHash,\n               new Peer(ip, port, ByteBuffer.wrap(peerId)),\n-              downloaded, uploaded, left, compact, noPeerId,\n+              uploaded, downloaded, left, compact, noPeerId,\n               event, numWant);\n     } catch (InvalidBEncodingException ibee) {\n       throw new MessageValidationException(\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\nindex 1073c39..5d32dfb 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n@@ -263,7 +263,7 @@\n \n       return new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER, infoHash,\n               new Peer(ip, port, ByteBuffer.wrap(peerId)),\n-              downloaded, uploaded, left, compact, noPeerId,\n+              uploaded, downloaded, left, compact, noPeerId,\n               event, numWant);\n     } catch (InvalidBEncodingException ibee) {\n       throw new MessageValidationException(\n",
    "projectName": "ttorrent",
    "lineNum": 264,
    "nodeStartChar": 7671,
    "before": "new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER,infoHash,new Peer(ip,port,ByteBuffer.wrap(peerId)),downloaded,uploaded,left,compact,noPeerId,event,numWant)",
    "after": "new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER,infoHash,new Peer(ip,port,ByteBuffer.wrap(peerId)),uploaded,downloaded,left,compact,noPeerId,event,numWant)"
  },
  {
    "commitSHA1": "cf9427341a96a0ccae42e8b5a0425bcb127c3115",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex d87dfdb..6c29e52 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -563,7 +563,7 @@\n           }\n         });\n         try {\n-          future.get(5, TimeUnit.SECONDS);\n+          future.get(10, TimeUnit.SECONDS);\n         } catch (ExecutionException e) {\n           fail(\"get execution exception on accept connection\", e);\n         } catch (TimeoutException e) {\ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex d87dfdb..6c29e52 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -563,7 +563,7 @@\n           }\n         });\n         try {\n-          future.get(5, TimeUnit.SECONDS);\n+          future.get(10, TimeUnit.SECONDS);\n         } catch (ExecutionException e) {\n           fail(\"get execution exception on accept connection\", e);\n         } catch (TimeoutException e) {\n",
    "projectName": "ttorrent",
    "lineNum": 566,
    "nodeStartChar": 20264,
    "before": "5",
    "after": "10"
  },
  {
    "commitSHA1": "f1d23d20b352d9ef5b299191f2a76dd18e5d6d29",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\n",
    "projectName": "ttorrent",
    "lineNum": 87,
    "nodeStartChar": 3470,
    "before": "myContext.getTorrentsStorage().hasTorrent(hexInfoHash)",
    "after": "!myContext.getTorrentsStorage().hasTorrent(hexInfoHash)"
  },
  {
    "commitSHA1": "00614d055f840211e861f99b14d03fa2b8389c76",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\n",
    "projectName": "ttorrent",
    "lineNum": 87,
    "nodeStartChar": 3470,
    "before": "myContext.getTorrentsStorage().hasTorrent(hexInfoHash)",
    "after": "!myContext.getTorrentsStorage().hasTorrent(hexInfoHash)"
  },
  {
    "commitSHA1": "e5a12b705edd194233e922f70f91297e96963f66",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\n",
    "projectName": "ttorrent",
    "lineNum": 48,
    "nodeStartChar": 1751,
    "before": "torrent.update(event,peerId,hexPeerId,ip,port,uploaded,downloaded,left)",
    "after": "actualTorrent.update(event,peerId,hexPeerId,ip,port,uploaded,downloaded,left)"
  },
  {
    "commitSHA1": "e5a12b705edd194233e922f70f91297e96963f66",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\n",
    "projectName": "ttorrent",
    "lineNum": 56,
    "nodeStartChar": 1994,
    "before": "torrentHash.hashCode()",
    "after": "Math.abs(torrentHash.hashCode())"
  },
  {
    "commitSHA1": "a8b9bcfd896c2708dd7243e3caade60b3fafc84f",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java b/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java\nindex 8006326..bd59aae 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java\n@@ -124,7 +124,7 @@\n \t\ttry {\n \t\t\tannounceRequest \u003d this.parseQuery(uri, hostAddress);\n \t\t} catch (MessageValidationException mve) {\n-\t\t\tLoggerUtils.warnAndDebugDetails(logger, \"Unable to parse request message. Request url is \", uri, mve);\n+\t\t\tLoggerUtils.warnAndDebugDetails(logger, \"Unable to parse request message. Request url is {}\", uri, mve);\n       serveError(Status.BAD_REQUEST, mve.getMessage(), requestHandler);\n \t\t\treturn;\n \t\t}\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java b/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java\nindex 8006326..bd59aae 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackerRequestProcessor.java\n@@ -124,7 +124,7 @@\n \t\ttry {\n \t\t\tannounceRequest \u003d this.parseQuery(uri, hostAddress);\n \t\t} catch (MessageValidationException mve) {\n-\t\t\tLoggerUtils.warnAndDebugDetails(logger, \"Unable to parse request message. Request url is \", uri, mve);\n+\t\t\tLoggerUtils.warnAndDebugDetails(logger, \"Unable to parse request message. Request url is {}\", uri, mve);\n       serveError(Status.BAD_REQUEST, mve.getMessage(), requestHandler);\n \t\t\treturn;\n \t\t}\n",
    "projectName": "ttorrent",
    "lineNum": 127,
    "nodeStartChar": 4345,
    "before": "\"Unable to parse request message. Request url is \"",
    "after": "\"Unable to parse request message. Request url is {}\""
  },
  {
    "commitSHA1": "20c70d1e05d936b685ada2345cc0359a076ec676",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\nindex dd7fa97..b8823af 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n@@ -163,7 +163,7 @@\n \tpublic void collectUnfreshPeers(int expireTimeoutSec) {\n \t\tfor (TrackedPeer peer : this.peers.values()) {\n \t\t\tif (!peer.isFresh(expireTimeoutSec)) {\n-\t\t\t\tthis.peers.remove(peer.getHexPeerId());\n+\t\t\t\tthis.peers.remove(new PeerUID(peer.getAddress(), this.getHexInfoHash()));\n \t\t\t}\n \t\t}\n \t}\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\nindex dd7fa97..b8823af 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n@@ -163,7 +163,7 @@\n \tpublic void collectUnfreshPeers(int expireTimeoutSec) {\n \t\tfor (TrackedPeer peer : this.peers.values()) {\n \t\t\tif (!peer.isFresh(expireTimeoutSec)) {\n-\t\t\t\tthis.peers.remove(peer.getHexPeerId());\n+\t\t\t\tthis.peers.remove(new PeerUID(peer.getAddress(), this.getHexInfoHash()));\n \t\t\t}\n \t\t}\n \t}\n",
    "projectName": "ttorrent",
    "lineNum": 166,
    "nodeStartChar": 4729,
    "before": "peer.getHexPeerId()",
    "after": "new PeerUID(peer.getAddress(),this.getHexInfoHash())"
  },
  {
    "commitSHA1": "e5b01d30552984021eb576e96abc47b50bbdc6a0",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex dabf756..c9ddd1e 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -110,7 +110,7 @@\n   }\n \n   private boolean needRunCleanup() {\n-    return (myTimeService.now() - lastCleanupTime) \u003c myCleanupTimeoutMillis;\n+    return (myTimeService.now() - lastCleanupTime) \u003e myCleanupTimeoutMillis;\n   }\n \n   private void processWriteTasks() {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex dabf756..c9ddd1e 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -110,7 +110,7 @@\n   }\n \n   private boolean needRunCleanup() {\n-    return (myTimeService.now() - lastCleanupTime) \u003c myCleanupTimeoutMillis;\n+    return (myTimeService.now() - lastCleanupTime) \u003e myCleanupTimeoutMillis;\n   }\n \n   private void processWriteTasks() {\n",
    "projectName": "ttorrent",
    "lineNum": 113,
    "nodeStartChar": 3956,
    "before": "(myTimeService.now() - lastCleanupTime) \u003c myCleanupTimeoutMillis",
    "after": "(myTimeService.now() - lastCleanupTime) \u003e myCleanupTimeoutMillis"
  },
  {
    "commitSHA1": "70c6e0d5667c4e9d07572743eb0770434a7690c7",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\n",
    "projectName": "ttorrent",
    "lineNum": 58,
    "nodeStartChar": 2134,
    "before": "new ShutdownProcessor()",
    "after": "new ShutdownProcessor().processAndGetNext(socketChannel)"
  },
  {
    "commitSHA1": "70c6e0d5667c4e9d07572743eb0770434a7690c7",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\n",
    "projectName": "ttorrent",
    "lineNum": 76,
    "nodeStartChar": 2699,
    "before": "new ShutdownProcessor()",
    "after": "new ShutdownProcessor().processAndGetNext(socketChannel)"
  },
  {
    "commitSHA1": "70c6e0d5667c4e9d07572743eb0770434a7690c7",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\n",
    "projectName": "ttorrent",
    "lineNum": 84,
    "nodeStartChar": 2893,
    "before": "new ShutdownProcessor()",
    "after": "new ShutdownProcessor().processAndGetNext(socketChannel)"
  },
  {
    "commitSHA1": "70c6e0d5667c4e9d07572743eb0770434a7690c7",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\n",
    "projectName": "ttorrent",
    "lineNum": 93,
    "nodeStartChar": 3222,
    "before": "new ShutdownProcessor()",
    "after": "new ShutdownProcessor().processAndGetNext(socketChannel)"
  },
  {
    "commitSHA1": "70c6e0d5667c4e9d07572743eb0770434a7690c7",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex c3ab171..e394103 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -55,7 +55,7 @@\n       } catch (IOException ignored) {\n       }\n       if (readBytes \u003d\u003d -1) {\n-        return new ShutdownProcessor();\n+        return new ShutdownProcessor().processAndGetNext(socketChannel);\n       }\n       if (readBytes \u003d\u003d 0) {\n         return this;\n@@ -73,7 +73,7 @@\n       LoggerUtils.warnAndDebugDetails(logger, \"unable to read data from {}\", socketChannel, e);\n     }\n     if (readBytes \u003d\u003d -1) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n     if (messageBytes.remaining() !\u003d 0) {\n       return this;\n@@ -81,7 +81,7 @@\n     Handshake hs \u003d parseHandshake(socketChannel.toString());\n \n     if (hs \u003d\u003d null) {\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n@@ -90,7 +90,7 @@\n       logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n@@ -104,7 +104,7 @@\n     SharingPeer old \u003d peersStorageProvider.getPeersStorage().putIfAbsent(peerUID, sharingPeer, myIsOutgoingConnection);\n     if (old !\u003d null) {\n       logger.debug(\"Already connected to old peer {}, close current connection with {}\", old, sharingPeer);\n-      return new ShutdownProcessor();\n+      return new ShutdownProcessor().processAndGetNext(socketChannel);\n     }\n \n     if (!myIsOutgoingConnection) {\n",
    "projectName": "ttorrent",
    "lineNum": 107,
    "nodeStartChar": 3922,
    "before": "new ShutdownProcessor()",
    "after": "new ShutdownProcessor().processAndGetNext(socketChannel)"
  },
  {
    "commitSHA1": "e8a8b1f8761491550ea2bf70b7561f129512544b",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex 95d2cd6..511e24d 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -84,7 +84,7 @@\n             cleanup();\n           }\n         } catch (Throwable e) {\n-          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys\", e);\n+          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys. Error message {}\", e.getMessage(), e);\n         }\n       }\n     } catch (Throwable e) {\n@@ -182,7 +182,7 @@\n       try {\n         processSelectedKey(key);\n       } catch (Exception e) {\n-        LoggerUtils.warnAndDebugDetails(logger, \"error in processing key. Close channel for this key...\", e);\n+        LoggerUtils.warnAndDebugDetails(logger, \"error {} in processing key. Close channel for this key\", e.getMessage(), e);\n         try {\n           key.channel().close();\n         } catch (IOException ioe) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex 95d2cd6..511e24d 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -84,7 +84,7 @@\n             cleanup();\n           }\n         } catch (Throwable e) {\n-          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys\", e);\n+          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys. Error message {}\", e.getMessage(), e);\n         }\n       }\n     } catch (Throwable e) {\n@@ -182,7 +182,7 @@\n       try {\n         processSelectedKey(key);\n       } catch (Exception e) {\n-        LoggerUtils.warnAndDebugDetails(logger, \"error in processing key. Close channel for this key...\", e);\n+        LoggerUtils.warnAndDebugDetails(logger, \"error {} in processing key. Close channel for this key\", e.getMessage(), e);\n         try {\n           key.channel().close();\n         } catch (IOException ioe) {\n",
    "projectName": "ttorrent",
    "lineNum": 87,
    "nodeStartChar": 3143,
    "before": "LoggerUtils.warnAndDebugDetails(logger,\"unable to select channel keys\",e)",
    "after": "LoggerUtils.warnAndDebugDetails(logger,\"unable to select channel keys. Error message {}\",e.getMessage(),e)"
  },
  {
    "commitSHA1": "e8a8b1f8761491550ea2bf70b7561f129512544b",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex 95d2cd6..511e24d 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -84,7 +84,7 @@\n             cleanup();\n           }\n         } catch (Throwable e) {\n-          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys\", e);\n+          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys. Error message {}\", e.getMessage(), e);\n         }\n       }\n     } catch (Throwable e) {\n@@ -182,7 +182,7 @@\n       try {\n         processSelectedKey(key);\n       } catch (Exception e) {\n-        LoggerUtils.warnAndDebugDetails(logger, \"error in processing key. Close channel for this key...\", e);\n+        LoggerUtils.warnAndDebugDetails(logger, \"error {} in processing key. Close channel for this key\", e.getMessage(), e);\n         try {\n           key.channel().close();\n         } catch (IOException ioe) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex 95d2cd6..511e24d 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -84,7 +84,7 @@\n             cleanup();\n           }\n         } catch (Throwable e) {\n-          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys\", e);\n+          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys. Error message {}\", e.getMessage(), e);\n         }\n       }\n     } catch (Throwable e) {\n@@ -182,7 +182,7 @@\n       try {\n         processSelectedKey(key);\n       } catch (Exception e) {\n-        LoggerUtils.warnAndDebugDetails(logger, \"error in processing key. Close channel for this key...\", e);\n+        LoggerUtils.warnAndDebugDetails(logger, \"error {} in processing key. Close channel for this key\", e.getMessage(), e);\n         try {\n           key.channel().close();\n         } catch (IOException ioe) {\n",
    "projectName": "ttorrent",
    "lineNum": 185,
    "nodeStartChar": 6823,
    "before": "LoggerUtils.warnAndDebugDetails(logger,\"error in processing key. Close channel for this key...\",e)",
    "after": "LoggerUtils.warnAndDebugDetails(logger,\"error {} in processing key. Close channel for this key\",e.getMessage(),e)"
  },
  {
    "commitSHA1": "8256e070461aea8de48e91f8ff92abbc609669dc",
    "commitFile": "src/main/java/com/turn/ttorrent/client/Piece.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/Piece.java b/src/main/java/com/turn/ttorrent/client/Piece.java\nindex fb14c4e..52b8d3b 100644\n--- a/src/main/java/com/turn/ttorrent/client/Piece.java\n+++ b/src/main/java/com/turn/ttorrent/client/Piece.java\n@@ -253,7 +253,7 @@\n \t */\n \tpublic synchronized void record(ByteBuffer block, int offset)\n \t\tthrows IOException {\n-\t\tif (this.data \u003d\u003d null || offset \u003d\u003d 0) {\n+\t\tif (this.data \u003d\u003d null) {\n \t\t\t// TODO: remove cast to int when large ByteBuffer support is\n \t\t\t// implemented in Java.\n \t\t\tthis.data \u003d ByteBuffer.allocate((int)this.length);\ndiff --git a/src/main/java/com/turn/ttorrent/client/Piece.java b/src/main/java/com/turn/ttorrent/client/Piece.java\nindex fb14c4e..52b8d3b 100644\n--- a/src/main/java/com/turn/ttorrent/client/Piece.java\n+++ b/src/main/java/com/turn/ttorrent/client/Piece.java\n@@ -253,7 +253,7 @@\n \t */\n \tpublic synchronized void record(ByteBuffer block, int offset)\n \t\tthrows IOException {\n-\t\tif (this.data \u003d\u003d null || offset \u003d\u003d 0) {\n+\t\tif (this.data \u003d\u003d null) {\n \t\t\t// TODO: remove cast to int when large ByteBuffer support is\n \t\t\t// implemented in Java.\n \t\t\tthis.data \u003d ByteBuffer.allocate((int)this.length);\n",
    "projectName": "ttorrent",
    "lineNum": 256,
    "nodeStartChar": 7662,
    "before": "this.data \u003d\u003d null || offset \u003d\u003d 0",
    "after": "this.data \u003d\u003d null"
  },
  {
    "commitSHA1": "c311b0ca3d08fac418942589e993aee908796225",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\nindex 45feee9..a7bb4a0 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n@@ -255,7 +255,7 @@\n \t\tint count \u003d 0;\n \t\tfor (TrackedPeer candidate : candidates) {\n \t\t\t// Don\u0027t include the requesting peer in the answer.\n-\t\t\tif (peer.looksLike(candidate)) {\n+\t\t\tif (peer !\u003d null \u0026\u0026 peer.looksLike(candidate)) {\n \t\t\t\tcontinue;\n \t\t\t}\n \ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\nindex 45feee9..a7bb4a0 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackedTorrent.java\n@@ -255,7 +255,7 @@\n \t\tint count \u003d 0;\n \t\tfor (TrackedPeer candidate : candidates) {\n \t\t\t// Don\u0027t include the requesting peer in the answer.\n-\t\t\tif (peer.looksLike(candidate)) {\n+\t\t\tif (peer !\u003d null \u0026\u0026 peer.looksLike(candidate)) {\n \t\t\t\tcontinue;\n \t\t\t}\n \n",
    "projectName": "ttorrent",
    "lineNum": 258,
    "nodeStartChar": 7714,
    "before": "peer.looksLike(candidate)",
    "after": "peer !\u003d null \u0026\u0026 peer.looksLike(candidate)"
  },
  {
    "commitSHA1": "7fa3538d1fc8c1a8360b6519d7ac68f032d75ce8",
    "commitFile": "src/main/java/com/turn/ttorrent/client/Client.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/Client.java b/src/main/java/com/turn/ttorrent/client/Client.java\nindex 5295f22..4e38d30 100644\n--- a/src/main/java/com/turn/ttorrent/client/Client.java\n+++ b/src/main/java/com/turn/ttorrent/client/Client.java\n@@ -390,7 +390,7 @@\n       removeAndDeleteTorrent(torrent);\n       final String errorMsg;\n       if (System.currentTimeMillis() \u003e maxIdleTime) {\n-        errorMsg \u003d String.format(\"Timed out (%d seconds elapsed)\", idleTimeoutSec);\n+        errorMsg \u003d String.format(\"No pieces has been downloaded in %d seconds\", idleTimeoutSec);\n       } else if (seedersCount \u003c minSeedersCount) {\n         errorMsg \u003d String.format(\"Not enough seeders. Required %d, found %d\", minSeedersCount, seedersCount);\n       } else if (torrent.getClientState() \u003d\u003d ClientState.ERROR) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/Client.java b/src/main/java/com/turn/ttorrent/client/Client.java\nindex 5295f22..4e38d30 100644\n--- a/src/main/java/com/turn/ttorrent/client/Client.java\n+++ b/src/main/java/com/turn/ttorrent/client/Client.java\n@@ -390,7 +390,7 @@\n       removeAndDeleteTorrent(torrent);\n       final String errorMsg;\n       if (System.currentTimeMillis() \u003e maxIdleTime) {\n-        errorMsg \u003d String.format(\"Timed out (%d seconds elapsed)\", idleTimeoutSec);\n+        errorMsg \u003d String.format(\"No pieces has been downloaded in %d seconds\", idleTimeoutSec);\n       } else if (seedersCount \u003c minSeedersCount) {\n         errorMsg \u003d String.format(\"Not enough seeders. Required %d, found %d\", minSeedersCount, seedersCount);\n       } else if (torrent.getClientState() \u003d\u003d ClientState.ERROR) {\n",
    "projectName": "ttorrent",
    "lineNum": 393,
    "nodeStartChar": 14565,
    "before": "\"Timed out (%d seconds elapsed)\"",
    "after": "\"No pieces has been downloaded in %d seconds\""
  },
  {
    "commitSHA1": "61ca0cbfdb23aadba4fd9c2f49c09303a64b8e33",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 61d8b02..a20d76f 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -498,7 +498,7 @@\n         public void handlePieceCompleted(SharingPeer peer, Piece piece) throws IOException {\n           super.handlePieceCompleted(peer, piece);\n           if (piece.getIndex()%4\u003d\u003d0 \u0026\u0026 interrupts.incrementAndGet() \u003c\u003d 2){\n-            peer.getSocketChannel().close();\n+            peer.unbind(true);\n           }\n         }\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 61d8b02..a20d76f 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -498,7 +498,7 @@\n         public void handlePieceCompleted(SharingPeer peer, Piece piece) throws IOException {\n           super.handlePieceCompleted(peer, piece);\n           if (piece.getIndex()%4\u003d\u003d0 \u0026\u0026 interrupts.incrementAndGet() \u003c\u003d 2){\n-            peer.getSocketChannel().close();\n+            peer.unbind(true);\n           }\n         }\n \n",
    "projectName": "ttorrent",
    "lineNum": 501,
    "nodeStartChar": 17890,
    "before": "peer.getSocketChannel()",
    "after": "peer"
  },
  {
    "commitSHA1": "7be503a547164d3c7a7fb8cab0f9d0ab12d042b0",
    "commitFile": "src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\nindex 884d546..bfb4ab2 100644\n--- a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n+++ b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n@@ -103,7 +103,7 @@\n \n \t\tfor (FileOffset fo : this.select(offset, requested)) {\n \t\t\tbuffer.limit(bytes + (int)fo.length);\n-      bytes +\u003d fo.file.write(buffer, (int) fo.offset);\n+      bytes +\u003d fo.file.write(buffer, fo.offset);\n \t\t}\n \n \t\tif (bytes \u003c requested) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\nindex 884d546..bfb4ab2 100644\n--- a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n+++ b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n@@ -103,7 +103,7 @@\n \n \t\tfor (FileOffset fo : this.select(offset, requested)) {\n \t\t\tbuffer.limit(bytes + (int)fo.length);\n-      bytes +\u003d fo.file.write(buffer, (int) fo.offset);\n+      bytes +\u003d fo.file.write(buffer, fo.offset);\n \t\t}\n \n \t\tif (bytes \u003c requested) {\n",
    "projectName": "ttorrent",
    "lineNum": 106,
    "nodeStartChar": 2992,
    "before": "(int)fo.offset",
    "after": "fo.offset"
  },
  {
    "commitSHA1": "980d895da21cc30b8c24bd6b77582bc94e6493b5",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex 90a6349..c823d4d 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -210,7 +210,7 @@\n   public boolean offerWrite(WriteTask writeTask, int timeout, TimeUnit timeUnit) {\n     boolean done \u003d addTaskToQueue(writeTask, timeout, timeUnit, myWriteQueue);\n     if (!done) {\n-      writeTask.getListener().onWriteFailed(\"unable add task \" + writeTask + \" to the queue. Maybe queue if overload\", null);\n+      writeTask.getListener().onWriteFailed(\"unable add task \" + writeTask + \" to the queue. Maybe queue is overload\", null);\n     }\n     return done;\n   }\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex 90a6349..c823d4d 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -210,7 +210,7 @@\n   public boolean offerWrite(WriteTask writeTask, int timeout, TimeUnit timeUnit) {\n     boolean done \u003d addTaskToQueue(writeTask, timeout, timeUnit, myWriteQueue);\n     if (!done) {\n-      writeTask.getListener().onWriteFailed(\"unable add task \" + writeTask + \" to the queue. Maybe queue if overload\", null);\n+      writeTask.getListener().onWriteFailed(\"unable add task \" + writeTask + \" to the queue. Maybe queue is overload\", null);\n     }\n     return done;\n   }\n",
    "projectName": "ttorrent",
    "lineNum": 213,
    "nodeStartChar": 8110,
    "before": "\" to the queue. Maybe queue if overload\"",
    "after": "\" to the queue. Maybe queue is overload\""
  },
  {
    "commitSHA1": "ac5fdd56112271976261f5e0417a9bb7596f4edf",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex 52c38df..11fcf31 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -84,13 +84,13 @@\n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n \n     if (torrent \u003d\u003d null) {\n-      logger.debug(\"peer {} try download torrent with hash {}, but it\u0027s unknown torrent for self\",\n+      logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n       return new ShutdownProcessor();\n     }\n \n-    logger.debug(\"get handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n+    logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n \n     if (!myOnlyRead) {\n       logger.debug(\"send handshake to {}\", socketChannel);\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex 52c38df..11fcf31 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -84,13 +84,13 @@\n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n \n     if (torrent \u003d\u003d null) {\n-      logger.debug(\"peer {} try download torrent with hash {}, but it\u0027s unknown torrent for self\",\n+      logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n       return new ShutdownProcessor();\n     }\n \n-    logger.debug(\"get handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n+    logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n \n     if (!myOnlyRead) {\n       logger.debug(\"send handshake to {}\", socketChannel);\n",
    "projectName": "ttorrent",
    "lineNum": 87,
    "nodeStartChar": 2846,
    "before": "\"peer {} try download torrent with hash {}, but it\u0027s unknown torrent for self\"",
    "after": "\"peer {} tries to download unknown torrent {}\""
  },
  {
    "commitSHA1": "ac5fdd56112271976261f5e0417a9bb7596f4edf",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex 52c38df..11fcf31 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -84,13 +84,13 @@\n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n \n     if (torrent \u003d\u003d null) {\n-      logger.debug(\"peer {} try download torrent with hash {}, but it\u0027s unknown torrent for self\",\n+      logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n       return new ShutdownProcessor();\n     }\n \n-    logger.debug(\"get handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n+    logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n \n     if (!myOnlyRead) {\n       logger.debug(\"send handshake to {}\", socketChannel);\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\nindex 52c38df..11fcf31 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/HandshakeReceiver.java\n@@ -84,13 +84,13 @@\n     SharedTorrent torrent \u003d torrentsStorageProvider.getTorrentsStorage().getTorrent(hs.getHexInfoHash());\n \n     if (torrent \u003d\u003d null) {\n-      logger.debug(\"peer {} try download torrent with hash {}, but it\u0027s unknown torrent for self\",\n+      logger.debug(\"peer {} tries to download unknown torrent {}\",\n               Arrays.toString(hs.getPeerId()),\n               hs.getHexInfoHash());\n       return new ShutdownProcessor();\n     }\n \n-    logger.debug(\"get handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n+    logger.debug(\"got handshake {} from {}\", Arrays.toString(messageBytes.array()), socketChannel);\n \n     if (!myOnlyRead) {\n       logger.debug(\"send handshake to {}\", socketChannel);\n",
    "projectName": "ttorrent",
    "lineNum": 93,
    "nodeStartChar": 3071,
    "before": "\"get handshake {} from {}\"",
    "after": "\"got handshake {} from {}\""
  },
  {
    "commitSHA1": "07645f934d1b9a9cfda7bb7882aa5d76656d952a",
    "commitFile": "src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \n",
    "projectName": "ttorrent",
    "lineNum": 76,
    "nodeStartChar": 2534,
    "before": "new Socket()",
    "after": "null"
  },
  {
    "commitSHA1": "07645f934d1b9a9cfda7bb7882aa5d76656d952a",
    "commitFile": "src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \n",
    "projectName": "ttorrent",
    "lineNum": 79,
    "nodeStartChar": 2628,
    "before": "socket.connect(new InetSocketAddress(\"127.0.0.1\",serverPort))",
    "after": "socket\u003dnew Socket(\"127.0.0.1\",serverPort)"
  },
  {
    "commitSHA1": "07645f934d1b9a9cfda7bb7882aa5d76656d952a",
    "commitFile": "src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \n",
    "projectName": "ttorrent",
    "lineNum": 85,
    "nodeStartChar": 2812,
    "before": "!socket.isConnected()",
    "after": "socket \u003d\u003d null || !socket.isConnected()"
  },
  {
    "commitSHA1": "240ce72fe5301773a657cea43b00341d706f341d",
    "commitFile": "src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\ndiff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\n",
    "projectName": "ttorrent",
    "lineNum": 70,
    "nodeStartChar": 2146,
    "before": "private boolean stop; ",
    "after": "private volatile boolean stop; "
  },
  {
    "commitSHA1": "240ce72fe5301773a657cea43b00341d706f341d",
    "commitFile": "src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\ndiff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\n",
    "projectName": "ttorrent",
    "lineNum": 220,
    "nodeStartChar": 6739,
    "before": "Thread",
    "after": "Thread.currentThread()"
  },
  {
    "commitSHA1": "240ce72fe5301773a657cea43b00341d706f341d",
    "commitFile": "src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\ndiff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\n",
    "projectName": "ttorrent",
    "lineNum": 223,
    "nodeStartChar": 6914,
    "before": "Thread",
    "after": "Thread.currentThread()"
  },
  {
    "commitSHA1": "9e429af1bbb24c911a16ef7d126752bb55f19874",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 41d8802..5b2eaf8 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -640,7 +640,7 @@\n \n   public void interrupt_download() throws IOException, InterruptedException, NoSuchAlgorithmException {\n     tracker.setAcceptForeignTorrents(true);\n-    Client seeder \u003d createClient();\n+    final Client seeder \u003d createClient();\n     final File dwnlFile \u003d tempFiles.createTempFile(513 * 1024 * 60);\n     final Torrent torrent \u003d Torrent.create(dwnlFile, null, tracker.getAnnounceURI(), \"Test\");\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 41d8802..5b2eaf8 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -640,7 +640,7 @@\n \n   public void interrupt_download() throws IOException, InterruptedException, NoSuchAlgorithmException {\n     tracker.setAcceptForeignTorrents(true);\n-    Client seeder \u003d createClient();\n+    final Client seeder \u003d createClient();\n     final File dwnlFile \u003d tempFiles.createTempFile(513 * 1024 * 60);\n     final Torrent torrent \u003d Torrent.create(dwnlFile, null, tracker.getAnnounceURI(), \"Test\");\n \n",
    "projectName": "ttorrent",
    "lineNum": 643,
    "nodeStartChar": 23615,
    "before": "Client seeder\u003dcreateClient(); ",
    "after": "final Client seeder\u003dcreateClient(); "
  },
  {
    "commitSHA1": "f352b3581ccd17571e53362991f8cef1ab3c2b9d",
    "commitFile": "src/main/java/com/turn/ttorrent/client/Client.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/Client.java b/src/main/java/com/turn/ttorrent/client/Client.java\nindex c9047aa..ecd205c 100644\n--- a/src/main/java/com/turn/ttorrent/client/Client.java\n+++ b/src/main/java/com/turn/ttorrent/client/Client.java\n@@ -141,7 +141,7 @@\n       torrent.setClientState(ClientState.DONE);\n       torrent.close();\n     } else {\n-      logger.warn(String.format(\"Torrent %s alreay removed from myTorrents\", torrentHash.getHexInfoHash()));\n+      logger.warn(String.format(\"Torrent %s already removed from myTorrents\", torrentHash.getHexInfoHash()));\n     }\n   }\n   public void removeAndDeleteTorrent(TorrentHash torrentHash) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/Client.java b/src/main/java/com/turn/ttorrent/client/Client.java\nindex c9047aa..ecd205c 100644\n--- a/src/main/java/com/turn/ttorrent/client/Client.java\n+++ b/src/main/java/com/turn/ttorrent/client/Client.java\n@@ -141,7 +141,7 @@\n       torrent.setClientState(ClientState.DONE);\n       torrent.close();\n     } else {\n-      logger.warn(String.format(\"Torrent %s alreay removed from myTorrents\", torrentHash.getHexInfoHash()));\n+      logger.warn(String.format(\"Torrent %s already removed from myTorrents\", torrentHash.getHexInfoHash()));\n     }\n   }\n   public void removeAndDeleteTorrent(TorrentHash torrentHash) {\n",
    "projectName": "ttorrent",
    "lineNum": 144,
    "nodeStartChar": 4913,
    "before": "\"Torrent %s alreay removed from myTorrents\"",
    "after": "\"Torrent %s already removed from myTorrents\""
  },
  {
    "commitSHA1": "6c94eab1e51b45297de99b575330d759169f20bd",
    "commitFile": "src/test/java/com/turn/ttorrent/common/TorrentTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/common/TorrentTest.java b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\nindex 8d41e81..49e28cc 100644\n--- a/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n+++ b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n@@ -51,7 +51,7 @@\n   }\n \n   public void testFilenames() throws IOException, NoSuchAlgorithmException {\n-    File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.torrent\");\n+    File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.win.torrent\");\n     Torrent t2 \u003d Torrent.load(torrentFile);\n     final List\u003cString\u003e tmpFileNames \u003d t2.getFilenames();\n     final List\u003cString\u003e normalizedFilenames \u003d new ArrayList\u003cString\u003e(tmpFileNames.size());\ndiff --git a/src/test/java/com/turn/ttorrent/common/TorrentTest.java b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\nindex 8d41e81..49e28cc 100644\n--- a/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n+++ b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n@@ -51,7 +51,7 @@\n   }\n \n   public void testFilenames() throws IOException, NoSuchAlgorithmException {\n-    File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.torrent\");\n+    File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.win.torrent\");\n     Torrent t2 \u003d Torrent.load(torrentFile);\n     final List\u003cString\u003e tmpFileNames \u003d t2.getFilenames();\n     final List\u003cString\u003e normalizedFilenames \u003d new ArrayList\u003cString\u003e(tmpFileNames.size());\n",
    "projectName": "ttorrent",
    "lineNum": 54,
    "nodeStartChar": 2627,
    "before": "\"src/test/resources/torrents/parentDir.torrent\"",
    "after": "\"src/test/resources/torrents/parentDir.win.torrent\""
  },
  {
    "commitSHA1": "1ac71f69879b6c77435e656d2fb9f41fc0416dc9",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 62af5ea..50ac783 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -508,7 +508,7 @@\n         }\n       }\n     });\n-    leecher.downloadUninterruptibly(st, 6000);\n+    leecher.downloadUninterruptibly(st, 60);\n \n /*\n     seeder.start(InetAddress.getLocalHost());\ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 62af5ea..50ac783 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -508,7 +508,7 @@\n         }\n       }\n     });\n-    leecher.downloadUninterruptibly(st, 6000);\n+    leecher.downloadUninterruptibly(st, 60);\n \n /*\n     seeder.start(InetAddress.getLocalHost());\n",
    "projectName": "ttorrent",
    "lineNum": 511,
    "nodeStartChar": 18389,
    "before": "6000",
    "after": "60"
  },
  {
    "commitSHA1": "8b92b7b4a11f573a63ddbbaf2a972b8cde628fc1",
    "commitFile": "src/test/java/com/turn/ttorrent/common/TorrentTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/common/TorrentTest.java b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\nindex 947130c..0a34f1e 100644\n--- a/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n+++ b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n@@ -40,10 +40,10 @@\n     URI announceURI \u003d new URI(\"http://localhost:6969/announce\");\n     String createdBy \u003d \"Test2\";\n     final File parentDir \u003d new File(\"src/test/resources/parentFiles/parentDir\");\n-    long creationTimeSecs \u003d 1376051603;\n+    final long creationTimeSecs \u003d 1376051000;\n     Torrent t \u003d Torrent.create(parentDir,addFilesRecursively(parentDir), announceURI, null, createdBy, creationTimeSecs, Torrent.DEFAULT_PIECE_LENGTH);\n     File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.torrent\");\n-    Torrent t2 \u003d Torrent.load(torrentFile);\n+    Torrent.load(torrentFile); // try to load\n     final byte[] expectedBytes \u003d FileUtils.readFileToByteArray(torrentFile);\n     final byte[] actualBytes \u003d t.getEncoded();\n     assertEquals(HexBin.encode(expectedBytes), HexBin.encode(actualBytes));\ndiff --git a/src/test/java/com/turn/ttorrent/common/TorrentTest.java b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\nindex 947130c..0a34f1e 100644\n--- a/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n+++ b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n@@ -40,10 +40,10 @@\n     URI announceURI \u003d new URI(\"http://localhost:6969/announce\");\n     String createdBy \u003d \"Test2\";\n     final File parentDir \u003d new File(\"src/test/resources/parentFiles/parentDir\");\n-    long creationTimeSecs \u003d 1376051603;\n+    final long creationTimeSecs \u003d 1376051000;\n     Torrent t \u003d Torrent.create(parentDir,addFilesRecursively(parentDir), announceURI, null, createdBy, creationTimeSecs, Torrent.DEFAULT_PIECE_LENGTH);\n     File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.torrent\");\n-    Torrent t2 \u003d Torrent.load(torrentFile);\n+    Torrent.load(torrentFile); // try to load\n     final byte[] expectedBytes \u003d FileUtils.readFileToByteArray(torrentFile);\n     final byte[] actualBytes \u003d t.getEncoded();\n     assertEquals(HexBin.encode(expectedBytes), HexBin.encode(actualBytes));\n",
    "projectName": "ttorrent",
    "lineNum": 43,
    "nodeStartChar": 1796,
    "before": "long creationTimeSecs\u003d1376051603; ",
    "after": "final long creationTimeSecs\u003d1376051000; "
  },
  {
    "commitSHA1": "8b92b7b4a11f573a63ddbbaf2a972b8cde628fc1",
    "commitFile": "src/test/java/com/turn/ttorrent/common/TorrentTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/common/TorrentTest.java b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\nindex 947130c..0a34f1e 100644\n--- a/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n+++ b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n@@ -40,10 +40,10 @@\n     URI announceURI \u003d new URI(\"http://localhost:6969/announce\");\n     String createdBy \u003d \"Test2\";\n     final File parentDir \u003d new File(\"src/test/resources/parentFiles/parentDir\");\n-    long creationTimeSecs \u003d 1376051603;\n+    final long creationTimeSecs \u003d 1376051000;\n     Torrent t \u003d Torrent.create(parentDir,addFilesRecursively(parentDir), announceURI, null, createdBy, creationTimeSecs, Torrent.DEFAULT_PIECE_LENGTH);\n     File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.torrent\");\n-    Torrent t2 \u003d Torrent.load(torrentFile);\n+    Torrent.load(torrentFile); // try to load\n     final byte[] expectedBytes \u003d FileUtils.readFileToByteArray(torrentFile);\n     final byte[] actualBytes \u003d t.getEncoded();\n     assertEquals(HexBin.encode(expectedBytes), HexBin.encode(actualBytes));\ndiff --git a/src/test/java/com/turn/ttorrent/common/TorrentTest.java b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\nindex 947130c..0a34f1e 100644\n--- a/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n+++ b/src/test/java/com/turn/ttorrent/common/TorrentTest.java\n@@ -40,10 +40,10 @@\n     URI announceURI \u003d new URI(\"http://localhost:6969/announce\");\n     String createdBy \u003d \"Test2\";\n     final File parentDir \u003d new File(\"src/test/resources/parentFiles/parentDir\");\n-    long creationTimeSecs \u003d 1376051603;\n+    final long creationTimeSecs \u003d 1376051000;\n     Torrent t \u003d Torrent.create(parentDir,addFilesRecursively(parentDir), announceURI, null, createdBy, creationTimeSecs, Torrent.DEFAULT_PIECE_LENGTH);\n     File torrentFile \u003d new File(\"src/test/resources/torrents/parentDir.torrent\");\n-    Torrent t2 \u003d Torrent.load(torrentFile);\n+    Torrent.load(torrentFile); // try to load\n     final byte[] expectedBytes \u003d FileUtils.readFileToByteArray(torrentFile);\n     final byte[] actualBytes \u003d t.getEncoded();\n     assertEquals(HexBin.encode(expectedBytes), HexBin.encode(actualBytes));\n",
    "projectName": "ttorrent",
    "lineNum": 46,
    "nodeStartChar": 2070,
    "before": "Torrent t2\u003dTorrent.load(torrentFile); ",
    "after": "Torrent.load(torrentFile); "
  },
  {
    "commitSHA1": "38e04f8377e461f23efc3f9b13a97411458a2a0a",
    "commitFile": "src/test/java/com/turn/ttorrent/tracker/TrackerTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\nindex 9017d1f..f0b43ce 100644\n--- a/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n+++ b/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n@@ -570,8 +570,8 @@\n     for (Client client : clientsList) {\n       final SharedTorrent st \u003d client.getTorrents().iterator().next();\n       final File file \u003d new File(st.getParentFile(), st.getFilenames().get(0));\n-      assertEquals(String.format(\"MD5 hash is invalid. C:%s, O:%s \",\n-        file.getAbsolutePath(), baseFile.getAbsolutePath()), baseMD5, getFileMD5(file, md5));\n+      assertEquals(baseMD5, getFileMD5(file, md5), String.format(\"MD5 hash is invalid. C:%s, O:%s \",\n+        file.getAbsolutePath(), baseFile.getAbsolutePath()));\n     }\n   }\n \ndiff --git a/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\nindex 9017d1f..f0b43ce 100644\n--- a/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n+++ b/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n@@ -570,8 +570,8 @@\n     for (Client client : clientsList) {\n       final SharedTorrent st \u003d client.getTorrents().iterator().next();\n       final File file \u003d new File(st.getParentFile(), st.getFilenames().get(0));\n-      assertEquals(String.format(\"MD5 hash is invalid. C:%s, O:%s \",\n-        file.getAbsolutePath(), baseFile.getAbsolutePath()), baseMD5, getFileMD5(file, md5));\n+      assertEquals(baseMD5, getFileMD5(file, md5), String.format(\"MD5 hash is invalid. C:%s, O:%s \",\n+        file.getAbsolutePath(), baseFile.getAbsolutePath()));\n     }\n   }\n \n",
    "projectName": "ttorrent",
    "lineNum": 573,
    "nodeStartChar": 19855,
    "before": "assertEquals(String.format(\"MD5 hash is invalid. C:%s, O:%s \",file.getAbsolutePath(),baseFile.getAbsolutePath()),baseMD5,getFileMD5(file,md5))",
    "after": "assertEquals(baseMD5,getFileMD5(file,md5),String.format(\"MD5 hash is invalid. C:%s, O:%s \",file.getAbsolutePath(),baseFile.getAbsolutePath()))"
  },
  {
    "commitSHA1": "9278bb1016905a1c5dc510986bad4fda61bd5239",
    "commitFile": "src/main/java/com/turn/ttorrent/common/Torrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/common/Torrent.java b/src/main/java/com/turn/ttorrent/common/Torrent.java\nindex a968007..7191f5b 100644\n--- a/src/main/java/com/turn/ttorrent/common/Torrent.java\n+++ b/src/main/java/com/turn/ttorrent/common/Torrent.java\n@@ -575,7 +575,7 @@\n \n \t\tMap\u003cString, BEValue\u003e torrent \u003d new HashMap\u003cString, BEValue\u003e();\n \t\ttorrent.put(\"announce\", new BEValue(announce.toString()));\n-\t\ttorrent.put(\"creation date\", new BEValue(new Date().getTime()));\n+\t\ttorrent.put(\"creation date\", new BEValue(new Date().getTime() / 1000));\n \t\ttorrent.put(\"created by\", new BEValue(createdBy));\n \n \t\tMap\u003cString, BEValue\u003e info \u003d new TreeMap\u003cString, BEValue\u003e();\ndiff --git a/src/main/java/com/turn/ttorrent/common/Torrent.java b/src/main/java/com/turn/ttorrent/common/Torrent.java\nindex a968007..7191f5b 100644\n--- a/src/main/java/com/turn/ttorrent/common/Torrent.java\n+++ b/src/main/java/com/turn/ttorrent/common/Torrent.java\n@@ -575,7 +575,7 @@\n \n \t\tMap\u003cString, BEValue\u003e torrent \u003d new HashMap\u003cString, BEValue\u003e();\n \t\ttorrent.put(\"announce\", new BEValue(announce.toString()));\n-\t\ttorrent.put(\"creation date\", new BEValue(new Date().getTime()));\n+\t\ttorrent.put(\"creation date\", new BEValue(new Date().getTime() / 1000));\n \t\ttorrent.put(\"created by\", new BEValue(createdBy));\n \n \t\tMap\u003cString, BEValue\u003e info \u003d new TreeMap\u003cString, BEValue\u003e();\n",
    "projectName": "ttorrent",
    "lineNum": 578,
    "nodeStartChar": 16752,
    "before": "new Date().getTime()",
    "after": "new Date().getTime() / 1000"
  },
  {
    "commitSHA1": "98a66e6298a5c3e4ef3524cc312dd84ca97359af",
    "commitFile": "src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\nindex 7a8e00e..d9d01d3 100644\n--- a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n+++ b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n@@ -96,8 +96,18 @@\n \t\treturn this.type;\n \t}\n \n+\t/**\n+\t * Returns a {@link ByteBuffer} backed by the same data as this message.\n+\t *\n+\t * \u003cp\u003e\n+\t * This method returns a duplicate of the buffer stored in this {@link\n+\t * PeerMessage} object to allow for multiple consumers to read from the\n+\t * same message without conflicting access to the buffer\u0027s position, mark\n+\t * and limit.\n+\t * \u003c/p\u003e\n+\t */\n \tpublic ByteBuffer getData() {\n-\t\treturn this.data;\n+\t\treturn this.data.duplicate();\n \t}\n \n \t/**\ndiff --git a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\nindex 7a8e00e..d9d01d3 100644\n--- a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n+++ b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n@@ -96,8 +96,18 @@\n \t\treturn this.type;\n \t}\n \n+\t/**\n+\t * Returns a {@link ByteBuffer} backed by the same data as this message.\n+\t *\n+\t * \u003cp\u003e\n+\t * This method returns a duplicate of the buffer stored in this {@link\n+\t * PeerMessage} object to allow for multiple consumers to read from the\n+\t * same message without conflicting access to the buffer\u0027s position, mark\n+\t * and limit.\n+\t * \u003c/p\u003e\n+\t */\n \tpublic ByteBuffer getData() {\n-\t\treturn this.data;\n+\t\treturn this.data.duplicate();\n \t}\n \n \t/**\n",
    "projectName": "ttorrent",
    "lineNum": 100,
    "nodeStartChar": 2354,
    "before": "this.data",
    "after": "this.data.duplicate()"
  },
  {
    "commitSHA1": "5c758752ae3956bea3551bc9651a3abe8d824fdc",
    "commitFile": "src/main/java/com/turn/ttorrent/client/SharedTorrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex bfb097a..a1f0eda 100644\n--- a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -351,18 +351,23 @@\n \t\t\tThread.sleep(10);\n \t\t}\n \n-\t\tlogger.debug(\"{}: we have {}/{} bytes (%.1f) [{}/{} pieces].\",\n+\t\tlogger.debug(\"{}: we have {}/{} bytes ({}%) [{}/{} pieces].\",\n \t\t\tnew Object[] {\n \t\t\t\tthis.getName(),\n \t\t\t\t(this.getSize() - this.left),\n \t\t\t\tthis.getSize(),\n-\t\t\t\t(100f * this.left / this.getSize()),\n+\t\t\t\tString.format(\"%.1f\", (100f * (1f - this.left / this.getSize()))),\n \t\t\t\tthis.completedPieces.cardinality(),\n \t\t\t\tthis.pieces.length\n \t\t\t});\n \t\tthis.initialized \u003d true;\n \t}\n \n+\t/**\n+\t * Process the pieces enqueued for hash validation so far.\n+\t *\n+\t * @param results The list of {@link Future}s of pieces to process.\n+\t */\n \tprivate void validatePieces(List\u003cFuture\u003cPiece\u003e\u003e results)\n \t\t\tthrows InterruptedException, IOException {\n \t\ttry {\ndiff --git a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex bfb097a..a1f0eda 100644\n--- a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -351,18 +351,23 @@\n \t\t\tThread.sleep(10);\n \t\t}\n \n-\t\tlogger.debug(\"{}: we have {}/{} bytes (%.1f) [{}/{} pieces].\",\n+\t\tlogger.debug(\"{}: we have {}/{} bytes ({}%) [{}/{} pieces].\",\n \t\t\tnew Object[] {\n \t\t\t\tthis.getName(),\n \t\t\t\t(this.getSize() - this.left),\n \t\t\t\tthis.getSize(),\n-\t\t\t\t(100f * this.left / this.getSize()),\n+\t\t\t\tString.format(\"%.1f\", (100f * (1f - this.left / this.getSize()))),\n \t\t\t\tthis.completedPieces.cardinality(),\n \t\t\t\tthis.pieces.length\n \t\t\t});\n \t\tthis.initialized \u003d true;\n \t}\n \n+\t/**\n+\t * Process the pieces enqueued for hash validation so far.\n+\t *\n+\t * @param results The list of {@link Future}s of pieces to process.\n+\t */\n \tprivate void validatePieces(List\u003cFuture\u003cPiece\u003e\u003e results)\n \t\t\tthrows InterruptedException, IOException {\n \t\ttry {\n",
    "projectName": "ttorrent",
    "lineNum": 354,
    "nodeStartChar": 10893,
    "before": "\"{}: we have {}/{} bytes (%.1f) [{}/{} pieces].\"",
    "after": "\"{}: we have {}/{} bytes ({}%) [{}/{} pieces].\""
  },
  {
    "commitSHA1": "5c758752ae3956bea3551bc9651a3abe8d824fdc",
    "commitFile": "src/main/java/com/turn/ttorrent/client/SharedTorrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex bfb097a..a1f0eda 100644\n--- a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -351,18 +351,23 @@\n \t\t\tThread.sleep(10);\n \t\t}\n \n-\t\tlogger.debug(\"{}: we have {}/{} bytes (%.1f) [{}/{} pieces].\",\n+\t\tlogger.debug(\"{}: we have {}/{} bytes ({}%) [{}/{} pieces].\",\n \t\t\tnew Object[] {\n \t\t\t\tthis.getName(),\n \t\t\t\t(this.getSize() - this.left),\n \t\t\t\tthis.getSize(),\n-\t\t\t\t(100f * this.left / this.getSize()),\n+\t\t\t\tString.format(\"%.1f\", (100f * (1f - this.left / this.getSize()))),\n \t\t\t\tthis.completedPieces.cardinality(),\n \t\t\t\tthis.pieces.length\n \t\t\t});\n \t\tthis.initialized \u003d true;\n \t}\n \n+\t/**\n+\t * Process the pieces enqueued for hash validation so far.\n+\t *\n+\t * @param results The list of {@link Future}s of pieces to process.\n+\t */\n \tprivate void validatePieces(List\u003cFuture\u003cPiece\u003e\u003e results)\n \t\t\tthrows InterruptedException, IOException {\n \t\ttry {\ndiff --git a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex bfb097a..a1f0eda 100644\n--- a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -351,18 +351,23 @@\n \t\t\tThread.sleep(10);\n \t\t}\n \n-\t\tlogger.debug(\"{}: we have {}/{} bytes (%.1f) [{}/{} pieces].\",\n+\t\tlogger.debug(\"{}: we have {}/{} bytes ({}%) [{}/{} pieces].\",\n \t\t\tnew Object[] {\n \t\t\t\tthis.getName(),\n \t\t\t\t(this.getSize() - this.left),\n \t\t\t\tthis.getSize(),\n-\t\t\t\t(100f * this.left / this.getSize()),\n+\t\t\t\tString.format(\"%.1f\", (100f * (1f - this.left / this.getSize()))),\n \t\t\t\tthis.completedPieces.cardinality(),\n \t\t\t\tthis.pieces.length\n \t\t\t});\n \t\tthis.initialized \u003d true;\n \t}\n \n+\t/**\n+\t * Process the pieces enqueued for hash validation so far.\n+\t *\n+\t * @param results The list of {@link Future}s of pieces to process.\n+\t */\n \tprivate void validatePieces(List\u003cFuture\u003cPiece\u003e\u003e results)\n \t\t\tthrows InterruptedException, IOException {\n \t\ttry {\n",
    "projectName": "ttorrent",
    "lineNum": 359,
    "nodeStartChar": 11039,
    "before": "(100f * this.left / this.getSize())",
    "after": "String.format(\"%.1f\",(100f * (1f - this.left / this.getSize())))"
  },
  {
    "commitSHA1": "d0f68d504cff77538d6037412aa6614904b47db2",
    "commitFile": "src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\nindex fc98d81..01469b1 100644\n--- a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n+++ b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n@@ -409,7 +409,8 @@\n \t\t}\n \n \t\tpublic static BitfieldMessage craft(BitSet availablePieces) {\n-\t\t\tbyte[] bitfield \u003d new byte[availablePieces.length()/8 + 1];\n+\t\t\tbyte[] bitfield \u003d new byte[\n+\t\t\t\t(int) Math.ceil((double)availablePieces.length()/8)];\n \t\t\tfor (int i\u003davailablePieces.nextSetBit(0); i \u003e\u003d 0;\n \t\t\t\t\ti\u003davailablePieces.nextSetBit(i+1)) {\n \t\t\t\tbitfield[i/8] |\u003d 1 \u003c\u003c (7 -(i % 8));\ndiff --git a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\nindex fc98d81..01469b1 100644\n--- a/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n+++ b/src/main/java/com/turn/ttorrent/common/protocol/PeerMessage.java\n@@ -409,7 +409,8 @@\n \t\t}\n \n \t\tpublic static BitfieldMessage craft(BitSet availablePieces) {\n-\t\t\tbyte[] bitfield \u003d new byte[availablePieces.length()/8 + 1];\n+\t\t\tbyte[] bitfield \u003d new byte[\n+\t\t\t\t(int) Math.ceil((double)availablePieces.length()/8)];\n \t\t\tfor (int i\u003davailablePieces.nextSetBit(0); i \u003e\u003d 0;\n \t\t\t\t\ti\u003davailablePieces.nextSetBit(i+1)) {\n \t\t\t\tbitfield[i/8] |\u003d 1 \u003c\u003c (7 -(i % 8));\n",
    "projectName": "ttorrent",
    "lineNum": 413,
    "nodeStartChar": 10518,
    "before": "availablePieces.length() / 8 + 1",
    "after": "(int)Math.ceil((double)availablePieces.length() / 8)"
  },
  {
    "commitSHA1": "73f3b21c076164ce608ba6e3787e2d896bef6755",
    "commitFile": "src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\nindex be7db32..740ccf9 100644\n--- a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n+++ b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n@@ -94,7 +94,7 @@\n \n \t\tfor (FileOffset fo : this.select(offset, requested)) {\n \t\t\tbuffer.limit(bytes + (int)fo.length);\n-\t\t\tbytes +\u003d fo.file.write(buffer, (int)fo.offset);\n+\t\t\tbytes +\u003d fo.file.write(buffer, fo.offset);\n \t\t}\n \n \t\tif (bytes \u003c requested) {\ndiff --git a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\nindex be7db32..740ccf9 100644\n--- a/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n+++ b/src/main/java/com/turn/ttorrent/client/storage/FileCollectionStorage.java\n@@ -94,7 +94,7 @@\n \n \t\tfor (FileOffset fo : this.select(offset, requested)) {\n \t\t\tbuffer.limit(bytes + (int)fo.length);\n-\t\t\tbytes +\u003d fo.file.write(buffer, (int)fo.offset);\n+\t\t\tbytes +\u003d fo.file.write(buffer, fo.offset);\n \t\t}\n \n \t\tif (bytes \u003c requested) {\n",
    "projectName": "ttorrent",
    "lineNum": 97,
    "nodeStartChar": 2753,
    "before": "(int)fo.offset",
    "after": "fo.offset"
  },
  {
    "commitSHA1": "f1ed02c8021785553eefc2b8eedf659ea80917b5",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TrackerService.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TrackerService.java b/src/main/java/com/turn/ttorrent/tracker/TrackerService.java\nindex 6498a5b..014ec5d 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackerService.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackerService.java\n@@ -63,8 +63,15 @@\n \tprivate static final Logger logger \u003d\n \t\tLoggerFactory.getLogger(TrackerService.class);\n \n-\tprivate static final String[] NUMERIC_REQUEST_FIELDS \u003d new String[] {\n-\t\t\"port\", \"uploaded\", \"downloaded\", \"left\", \"compact\", \"no_peer_id\" };\n+\t/**\n+\t * The list of announce request URL fields that need to be interpreted as\n+\t * numeric and thus converted as such in the request message parsing.\n+\t */\n+\tprivate static final String[] NUMERIC_REQUEST_FIELDS \u003d\n+\t\tnew String[] {\n+\t\t\t\"port\", \"uploaded\", \"downloaded\", \"left\",\n+\t\t\t\"compact\", \"no_peer_id\", \"numwant\"\n+\t\t};\n \n \tprivate final String version;\n \tprivate final ConcurrentMap\u003cString, TrackedTorrent\u003e torrents;\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TrackerService.java b/src/main/java/com/turn/ttorrent/tracker/TrackerService.java\nindex 6498a5b..014ec5d 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TrackerService.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TrackerService.java\n@@ -63,8 +63,15 @@\n \tprivate static final Logger logger \u003d\n \t\tLoggerFactory.getLogger(TrackerService.class);\n \n-\tprivate static final String[] NUMERIC_REQUEST_FIELDS \u003d new String[] {\n-\t\t\"port\", \"uploaded\", \"downloaded\", \"left\", \"compact\", \"no_peer_id\" };\n+\t/**\n+\t * The list of announce request URL fields that need to be interpreted as\n+\t * numeric and thus converted as such in the request message parsing.\n+\t */\n+\tprivate static final String[] NUMERIC_REQUEST_FIELDS \u003d\n+\t\tnew String[] {\n+\t\t\t\"port\", \"uploaded\", \"downloaded\", \"left\",\n+\t\t\t\"compact\", \"no_peer_id\", \"numwant\"\n+\t\t};\n \n \tprivate final String version;\n \tprivate final ConcurrentMap\u003cString, TrackedTorrent\u003e torrents;\n",
    "projectName": "ttorrent",
    "lineNum": 66,
    "nodeStartChar": 2146,
    "before": "private static final String[] NUMERIC_REQUEST_FIELDS\u003dnew String[]{\"port\",\"uploaded\",\"downloaded\",\"left\",\"compact\",\"no_peer_id\"}; ",
    "after": "/**   * The list of announce request URL fields that need to be interpreted as numeric and thus converted as such in the request message parsing.  */ private static final String[] NUMERIC_REQUEST_FIELDS\u003dnew String[]{\"port\",\"uploaded\",\"downloaded\",\"left\",\"compact\",\"no_peer_id\",\"numwant\"}; "
  },
  {
    "commitSHA1": "b21da525f41659e201d74f69c69cb4601da87b74",
    "commitFile": "src/main/java/com/turn/ttorrent/common/Torrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/common/Torrent.java b/src/main/java/com/turn/ttorrent/common/Torrent.java\nindex 9b6cdee..c08a00d 100644\n--- a/src/main/java/com/turn/ttorrent/common/Torrent.java\n+++ b/src/main/java/com/turn/ttorrent/common/Torrent.java\n@@ -727,7 +727,7 @@\n \t\t\t\tlength,\n \t\t\t\tresults.size(),\n \t\t\t\texpectedPieces,\n-\t\t\t\tString.format(\"%.1f\", elapsed/1024.0/1024.0),\n+\t\t\t\tString.format(\"%.1f\", elapsed/1e6),\n \t\t\t});\n \n \t\treturn hashes.toString();\ndiff --git a/src/main/java/com/turn/ttorrent/common/Torrent.java b/src/main/java/com/turn/ttorrent/common/Torrent.java\nindex 9b6cdee..c08a00d 100644\n--- a/src/main/java/com/turn/ttorrent/common/Torrent.java\n+++ b/src/main/java/com/turn/ttorrent/common/Torrent.java\n@@ -727,7 +727,7 @@\n \t\t\t\tlength,\n \t\t\t\tresults.size(),\n \t\t\t\texpectedPieces,\n-\t\t\t\tString.format(\"%.1f\", elapsed/1024.0/1024.0),\n+\t\t\t\tString.format(\"%.1f\", elapsed/1e6),\n \t\t\t});\n \n \t\treturn hashes.toString();\n",
    "projectName": "ttorrent",
    "lineNum": 730,
    "nodeStartChar": 21181,
    "before": "elapsed / 1024.0 / 1024.0",
    "after": "elapsed / 1e6"
  },
  {
    "commitSHA1": "488b655439cebbdbe1a7f81d58a009dbc0fdbc68",
    "commitFile": "src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java b/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java\nindex 4f53c45..b757e0e 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java\n@@ -150,7 +150,7 @@\n \tprotected void fireAnnounceResponseEvent(int complete, int incomplete,\n \t\tint interval) {\n \t\tfor (AnnounceResponseListener listener : this.listeners) {\n-\t\t\tlistener.handleAnnounceResponse(complete, incomplete, interval);\n+\t\t\tlistener.handleAnnounceResponse(interval, complete, incomplete);\n \t\t}\n \t}\n \ndiff --git a/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java b/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java\nindex 4f53c45..b757e0e 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/TrackerClient.java\n@@ -150,7 +150,7 @@\n \tprotected void fireAnnounceResponseEvent(int complete, int incomplete,\n \t\tint interval) {\n \t\tfor (AnnounceResponseListener listener : this.listeners) {\n-\t\t\tlistener.handleAnnounceResponse(complete, incomplete, interval);\n+\t\t\tlistener.handleAnnounceResponse(interval, complete, incomplete);\n \t\t}\n \t}\n \n",
    "projectName": "ttorrent",
    "lineNum": 153,
    "nodeStartChar": 4588,
    "before": "listener.handleAnnounceResponse(complete,incomplete,interval)",
    "after": "listener.handleAnnounceResponse(interval,complete,incomplete)"
  },
  {
    "commitSHA1": "5e2cfa05db760b9abfcb3c0e3ce9d6bf3dc8a382",
    "commitFile": "src/main/java/com/turn/ttorrent/client/SharedTorrent.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex 3e1ad0e..b97ffad 100644\n--- a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -686,7 +686,7 @@\n \t\t\tthis.markCompleted(piece);\n \t\t} else {\n \t\t\t// When invalid, remark that piece as non-requested.\n-\t\t\tlogger.warn(\"Downloaded piece {} was nod valid ;-(\", piece);\n+\t\t\tlogger.warn(\"Downloaded piece {} was not valid ;-(\", piece);\n \t\t}\n \n \t\tlogger.trace(\"We now have {} piece(s) and {} outstanding request(s): {}.\",\ndiff --git a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\nindex 3e1ad0e..b97ffad 100644\n--- a/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/main/java/com/turn/ttorrent/client/SharedTorrent.java\n@@ -686,7 +686,7 @@\n \t\t\tthis.markCompleted(piece);\n \t\t} else {\n \t\t\t// When invalid, remark that piece as non-requested.\n-\t\t\tlogger.warn(\"Downloaded piece {} was nod valid ;-(\", piece);\n+\t\t\tlogger.warn(\"Downloaded piece {} was not valid ;-(\", piece);\n \t\t}\n \n \t\tlogger.trace(\"We now have {} piece(s) and {} outstanding request(s): {}.\",\n",
    "projectName": "ttorrent",
    "lineNum": 689,
    "nodeStartChar": 20877,
    "before": "\"Downloaded piece {} was nod valid ;-(\"",
    "after": "\"Downloaded piece {} was not valid ;-(\""
  },
  {
    "commitSHA1": "22c2965de0cac11bb5ea4e1482206bb15ec9550b",
    "commitFile": "src/com/turn/ttorrent/client/SharedTorrent.java",
    "patch": "diff --git a/src/com/turn/ttorrent/client/SharedTorrent.java b/src/com/turn/ttorrent/client/SharedTorrent.java\nindex 9336763..3e1ad0e 100644\n--- a/src/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/com/turn/ttorrent/client/SharedTorrent.java\n@@ -167,7 +167,7 @@\n \t\t\t\t\t.getBytes());\n \n \t\t\tif (this.piecesHashes.capacity() / Torrent.PIECE_HASH_SIZE *\n-\t\t\t\t\tthis.pieceLength \u003c this.getSize()) {\n+\t\t\t\t\t(long)this.pieceLength \u003c this.getSize()) {\n \t\t\t\tthrow new IllegalArgumentException(\"Torrent size does not \" +\n \t\t\t\t\t\t\"match the number of pieces and the piece size!\");\n \t\t\t}\n",
    "projectName": "ttorrent",
    "lineNum": 170,
    "nodeStartChar": 5934,
    "before": "this.pieceLength",
    "after": "(long)this.pieceLength"
  },
  {
    "commitSHA1": "8035f1aeecd64c310b6d399507e6730d32530c0f",
    "commitFile": "src/com/turn/ttorrent/client/SharedTorrent.java",
    "patch": "diff --git a/src/com/turn/ttorrent/client/SharedTorrent.java b/src/com/turn/ttorrent/client/SharedTorrent.java\nindex ddf17af..ba7154c 100644\n--- a/src/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/com/turn/ttorrent/client/SharedTorrent.java\n@@ -454,8 +454,10 @@\n \t * number of pieces in this torrent, times 100.\n \t */\n \tpublic float getCompletion() {\n-\t\treturn (float)this.completedPieces.cardinality() /\n-\t\t\t(float)this.pieces.length * 100.0f;\n+\t\treturn this.isInitialized()\n+\t\t\t? (float)this.completedPieces.cardinality() /\n+\t\t\t\t(float)this.pieces.length * 100.0f\n+\t\t\t: 0.0f;\n \t}\n \n \t/** Mark a piece as completed, decremeting the piece size in bytes from our\ndiff --git a/src/com/turn/ttorrent/client/SharedTorrent.java b/src/com/turn/ttorrent/client/SharedTorrent.java\nindex ddf17af..ba7154c 100644\n--- a/src/com/turn/ttorrent/client/SharedTorrent.java\n+++ b/src/com/turn/ttorrent/client/SharedTorrent.java\n@@ -454,8 +454,10 @@\n \t * number of pieces in this torrent, times 100.\n \t */\n \tpublic float getCompletion() {\n-\t\treturn (float)this.completedPieces.cardinality() /\n-\t\t\t(float)this.pieces.length * 100.0f;\n+\t\treturn this.isInitialized()\n+\t\t\t? (float)this.completedPieces.cardinality() /\n+\t\t\t\t(float)this.pieces.length * 100.0f\n+\t\t\t: 0.0f;\n \t}\n \n \t/** Mark a piece as completed, decremeting the piece size in bytes from our\n",
    "projectName": "ttorrent",
    "lineNum": 457,
    "nodeStartChar": 14187,
    "before": "(float)this.completedPieces.cardinality() / (float)this.pieces.length * 100.0f",
    "after": "this.isInitialized() ? (float)this.completedPieces.cardinality() / (float)this.pieces.length * 100.0f : 0.0f"
  },
  {
    "commitSHA1": "39c012f47a4cf6455afc6fe10d17e57364cc827c",
    "commitFile": "src/com/turn/ttorrent/tracker/TrackedPeer.java",
    "patch": "diff --git a/src/com/turn/ttorrent/tracker/TrackedPeer.java b/src/com/turn/ttorrent/tracker/TrackedPeer.java\nindex 09dbfe6..493db25 100644\n--- a/src/com/turn/ttorrent/tracker/TrackedPeer.java\n+++ b/src/com/turn/ttorrent/tracker/TrackedPeer.java\n@@ -120,8 +120,8 @@\n \t\t\tlogger.info(\"Peer {} {} download of {}.\",\n \t\t\t\tnew Object[] {\n \t\t\t\t\tthis,\n-\t\t\t\t\tstate.name().toLowerCase() +\n-\t\t\t\t\tthis.torrent\n+\t\t\t\t\tstate.name().toLowerCase(),\n+\t\t\t\t\tthis.torrent,\n \t\t\t\t});\n \t\t}\n \ndiff --git a/src/com/turn/ttorrent/tracker/TrackedPeer.java b/src/com/turn/ttorrent/tracker/TrackedPeer.java\nindex 09dbfe6..493db25 100644\n--- a/src/com/turn/ttorrent/tracker/TrackedPeer.java\n+++ b/src/com/turn/ttorrent/tracker/TrackedPeer.java\n@@ -120,8 +120,8 @@\n \t\t\tlogger.info(\"Peer {} {} download of {}.\",\n \t\t\t\tnew Object[] {\n \t\t\t\t\tthis,\n-\t\t\t\t\tstate.name().toLowerCase() +\n-\t\t\t\t\tthis.torrent\n+\t\t\t\t\tstate.name().toLowerCase(),\n+\t\t\t\t\tthis.torrent,\n \t\t\t\t});\n \t\t}\n \n",
    "projectName": "ttorrent",
    "lineNum": 121,
    "nodeStartChar": 3995,
    "before": "{this,state.name().toLowerCase() + this.torrent}",
    "after": "{this,state.name().toLowerCase(),this.torrent}"
  },
  {
    "commitSHA1": "32dc067b63ba7be9a63ec8b2d56d8c8fe20f87f1",
    "commitFile": "src/com/turn/ttorrent/client/Announce.java",
    "patch": "diff --git a/src/com/turn/ttorrent/client/Announce.java b/src/com/turn/ttorrent/client/Announce.java\nindex 429ba1b..2a13bba 100644\n--- a/src/com/turn/ttorrent/client/Announce.java\n+++ b/src/com/turn/ttorrent/client/Announce.java\n@@ -304,7 +304,7 @@\n \t\t\tthis.stop(true);\n \t\t} catch (IOException ioe) {\n \t\t\tlogger.warn(\"Error reading response from tracker: {}\",\n-\t\t\t\tioe.getMessage(), ioe);\n+\t\t\t\tioe.getMessage());\n \t\t} finally {\n \t\t\tif (result !\u003d null \u0026\u0026 result.containsKey(\"failure reason\")) {\n \t\t\t\ttry {\ndiff --git a/src/com/turn/ttorrent/client/Announce.java b/src/com/turn/ttorrent/client/Announce.java\nindex 429ba1b..2a13bba 100644\n--- a/src/com/turn/ttorrent/client/Announce.java\n+++ b/src/com/turn/ttorrent/client/Announce.java\n@@ -304,7 +304,7 @@\n \t\t\tthis.stop(true);\n \t\t} catch (IOException ioe) {\n \t\t\tlogger.warn(\"Error reading response from tracker: {}\",\n-\t\t\t\tioe.getMessage(), ioe);\n+\t\t\t\tioe.getMessage());\n \t\t} finally {\n \t\t\tif (result !\u003d null \u0026\u0026 result.containsKey(\"failure reason\")) {\n \t\t\t\ttry {\n",
    "projectName": "ttorrent",
    "lineNum": 306,
    "nodeStartChar": 9458,
    "before": "logger.warn(\"Error reading response from tracker: {}\",ioe.getMessage(),ioe)",
    "after": "logger.warn(\"Error reading response from tracker: {}\",ioe.getMessage())"
  },
  {
    "commitSHA1": "586d7f3d6203f2139e412b48d33f750797a01ae3",
    "commitFile": "src/main/java/org/znerd/uasniffer/Sniffer.java",
    "patch": "diff --git a/src/main/java/org/znerd/uasniffer/Sniffer.java b/src/main/java/org/znerd/uasniffer/Sniffer.java\nindex 6b0a5e7..81b5e93 100644\n--- a/src/main/java/org/znerd/uasniffer/Sniffer.java\n+++ b/src/main/java/org/znerd/uasniffer/Sniffer.java\n@@ -9,9 +9,9 @@\n  */\n public final class Sniffer {\n \n-    private static final String[] UA_MOBILE_DEVICE_SNIPPETS \u003d new String[] { \"windows ce\", \"windowsce\", \"symbian\", \"nokia\", \"opera mini\", \"wget\", \"fennec\", \"opera mobi\", \"windows; ppc\", \"blackberry\", \"portable\", \"vita\" };\n+    private static final String[] UA_MOBILE_DEVICE_SNIPPETS \u003d new String[] { \"windows ce\", \"windowsce\", \"symbian\", \"nokia\", \"opera mini\", \"wget\", \"fennec\", \"opera mobi\", \"windows; ppc\", \"blackberry\", \"portable\", \"vita\", \"mobile\" };\n     private static final String[] UA_TABLET_DEVICE_SNIPPETS \u003d new String[] { \"ipad\", \"xoom\", \"tablet\" };\n-    private static final String[] UA_MOBILE_DEVICE_WITHOUT_TEL_SUPPORT \u003d new String[] { \"opera/8.\", \"opera/7.\", \"opera/6.\", \"opera/5.\", \"opera/4.\", \"opera/3.\", \"ipod\", \"playstation\" };\n+    private static final String[] UA_MOBILE_DEVICE_WITHOUT_TEL_SUPPORT \u003d new String[] { \"opera/8.\", \"opera/7.\", \"opera/6.\", \"opera/5.\", \"opera/4.\", \"opera/3.\", \"ipod\", \"ipad\", \"tablet\", \"playstation\" };\n     private static final String[] UA_BOT_SNIPPETS \u003d new String[] { \"spider\", \"bot\", \"crawl\", \"miner\", \"checker\", \"java\", \"pingdom\" };\n \n     private Sniffer() {\n",
    "projectName": "uasniffer",
    "lineNum": 12,
    "nodeStartChar": 312,
    "before": "{\"windows ce\",\"windowsce\",\"symbian\",\"nokia\",\"opera mini\",\"wget\",\"fennec\",\"opera mobi\",\"windows; ppc\",\"blackberry\",\"portable\",\"vita\"}",
    "after": "{\"windows ce\",\"windowsce\",\"symbian\",\"nokia\",\"opera mini\",\"wget\",\"fennec\",\"opera mobi\",\"windows; ppc\",\"blackberry\",\"portable\",\"vita\",\"mobile\"}"
  },
  {
    "commitSHA1": "586d7f3d6203f2139e412b48d33f750797a01ae3",
    "commitFile": "src/main/java/org/znerd/uasniffer/Sniffer.java",
    "patch": "diff --git a/src/main/java/org/znerd/uasniffer/Sniffer.java b/src/main/java/org/znerd/uasniffer/Sniffer.java\nindex 6b0a5e7..81b5e93 100644\n--- a/src/main/java/org/znerd/uasniffer/Sniffer.java\n+++ b/src/main/java/org/znerd/uasniffer/Sniffer.java\n@@ -9,9 +9,9 @@\n  */\n public final class Sniffer {\n \n-    private static final String[] UA_MOBILE_DEVICE_SNIPPETS \u003d new String[] { \"windows ce\", \"windowsce\", \"symbian\", \"nokia\", \"opera mini\", \"wget\", \"fennec\", \"opera mobi\", \"windows; ppc\", \"blackberry\", \"portable\", \"vita\" };\n+    private static final String[] UA_MOBILE_DEVICE_SNIPPETS \u003d new String[] { \"windows ce\", \"windowsce\", \"symbian\", \"nokia\", \"opera mini\", \"wget\", \"fennec\", \"opera mobi\", \"windows; ppc\", \"blackberry\", \"portable\", \"vita\", \"mobile\" };\n     private static final String[] UA_TABLET_DEVICE_SNIPPETS \u003d new String[] { \"ipad\", \"xoom\", \"tablet\" };\n-    private static final String[] UA_MOBILE_DEVICE_WITHOUT_TEL_SUPPORT \u003d new String[] { \"opera/8.\", \"opera/7.\", \"opera/6.\", \"opera/5.\", \"opera/4.\", \"opera/3.\", \"ipod\", \"playstation\" };\n+    private static final String[] UA_MOBILE_DEVICE_WITHOUT_TEL_SUPPORT \u003d new String[] { \"opera/8.\", \"opera/7.\", \"opera/6.\", \"opera/5.\", \"opera/4.\", \"opera/3.\", \"ipod\", \"ipad\", \"tablet\", \"playstation\" };\n     private static final String[] UA_BOT_SNIPPETS \u003d new String[] { \"spider\", \"bot\", \"crawl\", \"miner\", \"checker\", \"java\", \"pingdom\" };\n \n     private Sniffer() {\n",
    "projectName": "uasniffer",
    "lineNum": 14,
    "nodeStartChar": 650,
    "before": "{\"opera/8.\",\"opera/7.\",\"opera/6.\",\"opera/5.\",\"opera/4.\",\"opera/3.\",\"ipod\",\"playstation\"}",
    "after": "{\"opera/8.\",\"opera/7.\",\"opera/6.\",\"opera/5.\",\"opera/4.\",\"opera/3.\",\"ipod\",\"ipad\",\"tablet\",\"playstation\"}"
  },
  {
    "commitSHA1": "f2a957a00fdd52011f035fabca8c84c06e011448",
    "commitFile": "src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java",
    "patch": "diff --git a/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java b/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java\nindex 8546050..31dade4 100644\n--- a/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java\n+++ b/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java\n@@ -1,7 +1,7 @@\n /*\r\n  * $Id$\r\n  *\r\n- * Copyright (c) 2012 Valentyn Kolesnikov\r\n+ * Copyright 2012 Valentyn Kolesnikov\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -26,7 +26,7 @@\n  * @author Valentyn Kolesnikov\r\n  * @version $Revision$ $Date$\r\n  */\r\n-public class UkrainianToLatin {\r\n+public final class UkrainianToLatin {\r\n     private static final int INDEX_0 \u003d 0;\r\n     private static final int INDEX_1 \u003d 1;\r\n     private static final int INDEX_2 \u003d 2;\r\n",
    "projectName": "ukrainiantolatin",
    "lineNum": 23,
    "nodeStartChar": 705,
    "before": "/**   * UkrainianToLatin utility class.  * @author Valentyn Kolesnikov  * @version $Revision$ $Date$  */ public class UkrainianToLatin {   private static final int INDEX_0\u003d0;   private static final int INDEX_1\u003d1;   private static final int INDEX_2\u003d2;   private static final int INDEX_3\u003d3;   private static final int INDEX_4\u003d4;   private static final int INDEX_8\u003d8;   private static final int LENGTH_2\u003d2;   private static final int LENGTH_3\u003d3;   private static final int LENGTH_4\u003d4;   private static final int LENGTH_8\u003d8;   private enum Convert {  AA(\"Аа\"),   BB(\"Бб\"),   VV(\"Вв\"),   HH(\"Гг\"),   GG(\"Ґґ\"),   DD(\"Дд\"),   EE(\"Ее\"),   YeIe(\"Єє\"),   ZhZh(\"Жж\"),   ZZ(\"Зз\"),   YY(\"Ии\"),   II(\"Іі\"),   YiI(\"Її\"),   YI(\"Йй\"),   KK(\"Кк\"),   LL(\"Лл\"),   MM(\"Мм\"),   NN(\"Нн\"),   OO(\"Оо\"),   PP(\"Пп\"),   RR(\"Рр\"),   SS(\"Сс\"),   TT(\"Тт\"),   UU(\"Уу\"),   FF(\"Фф\"),   KhKh(\"Хх\"),   TsTs(\"Цц\"),   ChCh(\"Чч\"),   ShSh(\"Шш\"),   ShchShch(\"Щщ\"),   YuIu(\"Юю\"),   YaIa(\"Яя\");   private String cyrilic;   private Convert(  String cyrilic){     this.cyrilic\u003dcyrilic;   }   /**   * Gets cyrilic.  * @return the cyrilic  */   public String getCyrilic(){     return cyrilic;   } }   private static Map\u003cString,ConvertCase\u003e cyrToLat; private static class ConvertCase {     private final Convert convert;     private final boolean lowcase;     public ConvertCase(    Convert convert,    boolean lowcase){       this.convert\u003dconvert;       this.lowcase\u003dlowcase;     }     public Convert getConvert(){       return convert;     }     public boolean isLowcase(){       return lowcase;     }   } static {     cyrToLat\u003dnew HashMap\u003cString,ConvertCase\u003e();     for (    Convert convert : Convert.values()) {       cyrToLat.put(convert.getCyrilic().substring(INDEX_0,INDEX_1),new ConvertCase(convert,false));       cyrToLat.put(convert.getCyrilic().substring(INDEX_1,INDEX_2),new ConvertCase(convert,true));       if (convert \u003d\u003d Convert.EE) {         cyrToLat.put(\"Ё\",new ConvertCase(convert,false));         cyrToLat.put(\"ё\",new ConvertCase(convert,true));       }     }   }   private UkrainianToLatin(){     super();   }   /**   * Generates latinic from cyrilic.  * @param name the name  * @return the result  */   public static String generateLat(  String name){     StringBuffer result\u003dnew StringBuffer();     ConvertCase prevConvertCase\u003dnull;     for (int index\u003d0; index \u003c name.length(); index+\u003d1) {       String curChar\u003dname.substring(index,index + INDEX_1);       String nextChar\u003dindex \u003d\u003d name.length() - 1 ? null : name.substring(index + INDEX_1,index + INDEX_2);       if (curChar.matches(\"[-\u0027’,]\")) {         continue;       }       if (cyrToLat.get(curChar) \u003d\u003d null) {         if (\" \".equals(curChar)) {           prevConvertCase\u003dnull;           result.append(\u0027 \u0027);         }         continue;       }       ConvertCase convertCase\u003dcyrToLat.get(curChar);       if (prevConvertCase \u003d\u003d null) {         checkFirstChar(result,convertCase,cyrToLat.get(nextChar) \u003d\u003d null ? convertCase : cyrToLat.get(nextChar));       }  else {         checkMiddleChar(result,convertCase,cyrToLat.get(nextChar) \u003d\u003d null ? convertCase : cyrToLat.get(nextChar));       }       prevConvertCase\u003dconvertCase;     }     return result.toString();   }   /**   * @param result  * @param convertCase  * @param prevChar  */   private static void checkFirstChar(  StringBuffer result,  ConvertCase convertCase,  ConvertCase nextConvertCase){     String latName\u003dconvertCase.getConvert().name(); switch (latName.length()) { case LENGTH_2:       result.append(convertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_1).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_1) : latName.substring(INDEX_0,INDEX_1).toUpperCase());     if (convertCase.getConvert() \u003d\u003d Convert.ZZ \u0026\u0026 nextConvertCase.getConvert() \u003d\u003d Convert.HH) {       result.append(nextConvertCase.isLowcase() ? \"g\" : \"G\");     }   break; case LENGTH_3: case LENGTH_4: result.append(convertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_2).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_2) : latName.substring(INDEX_0,INDEX_2).toUpperCase()); break; case LENGTH_8: result.append(convertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_4).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_4) : latName.substring(INDEX_0,INDEX_4).toUpperCase()); break; default : break; } } /**   * @param result  * @param convertCase  * @param prevChar  */ private static void checkMiddleChar(StringBuffer result,ConvertCase convertCase,ConvertCase nextConvertCase){ String latName\u003dconvertCase.getConvert().name(); switch (latName.length()) { case LENGTH_2: result.append(convertCase.isLowcase() ? latName.substring(INDEX_1,INDEX_2).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_1,INDEX_2) : latName.substring(INDEX_1,INDEX_2).toUpperCase()); if (convertCase.getConvert() \u003d\u003d Convert.ZZ \u0026\u0026 nextConvertCase.getConvert() \u003d\u003d Convert.HH) { result.append(nextConvertCase.isLowcase() ? \"g\" : \"G\"); } break; case LENGTH_3: result.append(convertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_3).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_3) : latName.substring(INDEX_2,INDEX_3).toUpperCase()); break; case LENGTH_4: result.append(convertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_4).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_4) : latName.substring(INDEX_2,INDEX_4).toUpperCase()); break; case LENGTH_8: result.append(convertCase.isLowcase() ? latName.substring(INDEX_4,INDEX_8).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_4,INDEX_8) : latName.substring(INDEX_4,INDEX_8).toUpperCase()); break; default : break; } } } ",
    "after": "/**   * UkrainianToLatin utility class.  * @author Valentyn Kolesnikov  * @version $Revision$ $Date$  */ public final class UkrainianToLatin {   private static final int INDEX_0\u003d0;   private static final int INDEX_1\u003d1;   private static final int INDEX_2\u003d2;   private static final int INDEX_3\u003d3;   private static final int INDEX_4\u003d4;   private static final int INDEX_8\u003d8;   private static final int LENGTH_2\u003d2;   private static final int LENGTH_3\u003d3;   private static final int LENGTH_4\u003d4;   private static final int LENGTH_8\u003d8;   private enum Convert {  AA(\"Аа\"),   BB(\"Бб\"),   VV(\"Вв\"),   HH(\"Гг\"),   GG(\"Ґґ\"),   DD(\"Дд\"),   EE(\"Ее\"),   YeIe(\"Єє\"),   ZhZh(\"Жж\"),   ZZ(\"Зз\"),   YY(\"Ии\"),   II(\"Іі\"),   YiI(\"Її\"),   YI(\"Йй\"),   KK(\"Кк\"),   LL(\"Лл\"),   MM(\"Мм\"),   NN(\"Нн\"),   OO(\"Оо\"),   PP(\"Пп\"),   RR(\"Рр\"),   SS(\"Сс\"),   TT(\"Тт\"),   UU(\"Уу\"),   FF(\"Фф\"),   KhKh(\"Хх\"),   TsTs(\"Цц\"),   ChCh(\"Чч\"),   ShSh(\"Шш\"),   ShchShch(\"Щщ\"),   YuIu(\"Юю\"),   YaIa(\"Яя\");   private String cyrilic;   private Convert(  String cyrilic){     this.cyrilic\u003dcyrilic;   }   /**   * Gets cyrilic.  * @return the cyrilic  */   public String getCyrilic(){     return cyrilic;   } }   private static Map\u003cString,ConvertCase\u003e cyrToLat; private static class ConvertCase {     private final Convert convert;     private final boolean lowcase;     public ConvertCase(    Convert convert,    boolean lowcase){       this.convert\u003dconvert;       this.lowcase\u003dlowcase;     }     public Convert getConvert(){       return convert;     }     public boolean isLowcase(){       return lowcase;     }   } static {     cyrToLat\u003dnew HashMap\u003cString,ConvertCase\u003e();     for (    Convert convert : Convert.values()) {       cyrToLat.put(convert.getCyrilic().substring(INDEX_0,INDEX_1),new ConvertCase(convert,false));       cyrToLat.put(convert.getCyrilic().substring(INDEX_1,INDEX_2),new ConvertCase(convert,true));       if (convert \u003d\u003d Convert.EE) {         cyrToLat.put(\"Ё\",new ConvertCase(convert,false));         cyrToLat.put(\"ё\",new ConvertCase(convert,true));       }     }   }   private UkrainianToLatin(){     super();   }   /**   * Generates latinic from cyrilic.  * @param name the name  * @return the result  */   public static String generateLat(  String name){     StringBuffer result\u003dnew StringBuffer();     ConvertCase prevConvertCase\u003dnull;     for (int index\u003d0; index \u003c name.length(); index+\u003d1) {       String curChar\u003dname.substring(index,index + INDEX_1);       String nextChar\u003dindex \u003d\u003d name.length() - 1 ? null : name.substring(index + INDEX_1,index + INDEX_2);       if (curChar.matches(\"[-\u0027’,]\")) {         continue;       }       if (cyrToLat.get(curChar) \u003d\u003d null) {         if (\" \".equals(curChar)) {           prevConvertCase\u003dnull;           result.append(\u0027 \u0027);         }         continue;       }       ConvertCase convertCase\u003dcyrToLat.get(curChar);       if (prevConvertCase \u003d\u003d null) {         checkFirstChar(result,convertCase,cyrToLat.get(nextChar) \u003d\u003d null ? convertCase : cyrToLat.get(nextChar));       }  else {         checkMiddleChar(result,convertCase,cyrToLat.get(nextChar) \u003d\u003d null ? convertCase : cyrToLat.get(nextChar));       }       prevConvertCase\u003dconvertCase;     }     return result.toString();   }   /**   * @param result  * @param convertCase  * @param prevChar  */   private static void checkFirstChar(  StringBuffer result,  ConvertCase convertCase,  ConvertCase nextConvertCase){     String latName\u003dconvertCase.getConvert().name(); switch (latName.length()) { case LENGTH_2:       result.append(convertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_1).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_1) : latName.substring(INDEX_0,INDEX_1).toUpperCase());     if (convertCase.getConvert() \u003d\u003d Convert.ZZ \u0026\u0026 nextConvertCase.getConvert() \u003d\u003d Convert.HH) {       result.append(nextConvertCase.isLowcase() ? \"g\" : \"G\");     }   break; case LENGTH_3: case LENGTH_4: result.append(convertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_2).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_2) : latName.substring(INDEX_0,INDEX_2).toUpperCase()); break; case LENGTH_8: result.append(convertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_4).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_0,INDEX_4) : latName.substring(INDEX_0,INDEX_4).toUpperCase()); break; default : break; } } /**   * @param result  * @param convertCase  * @param prevChar  */ private static void checkMiddleChar(StringBuffer result,ConvertCase convertCase,ConvertCase nextConvertCase){ String latName\u003dconvertCase.getConvert().name(); switch (latName.length()) { case LENGTH_2: result.append(convertCase.isLowcase() ? latName.substring(INDEX_1,INDEX_2).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_1,INDEX_2) : latName.substring(INDEX_1,INDEX_2).toUpperCase()); if (convertCase.getConvert() \u003d\u003d Convert.ZZ \u0026\u0026 nextConvertCase.getConvert() \u003d\u003d Convert.HH) { result.append(nextConvertCase.isLowcase() ? \"g\" : \"G\"); } break; case LENGTH_3: result.append(convertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_3).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_3) : latName.substring(INDEX_2,INDEX_3).toUpperCase()); break; case LENGTH_4: result.append(convertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_4).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_2,INDEX_4) : latName.substring(INDEX_2,INDEX_4).toUpperCase()); break; case LENGTH_8: result.append(convertCase.isLowcase() ? latName.substring(INDEX_4,INDEX_8).toLowerCase() : nextConvertCase.isLowcase() ? latName.substring(INDEX_4,INDEX_8) : latName.substring(INDEX_4,INDEX_8).toUpperCase()); break; default : break; } } } "
  },
  {
    "commitSHA1": "56f55fbd3de388a4f90511bd7ee7b238c719789b",
    "commitFile": "src/test/java/io/github/benas/unixstream/components/PwdTest.java",
    "patch": "diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d9a74a7..f0c71b0 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,7 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).contains(\"unix-stream\");\n     }\n \n }\ndiff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d9a74a7..f0c71b0 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,7 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).contains(\"unix-stream\");\n     }\n \n }\n",
    "projectName": "unix-stream",
    "lineNum": 21,
    "nodeStartChar": 495,
    "before": "assertThat(paths.get(0).toString()).endsWith(\"unix-stream\")",
    "after": "assertThat(paths.get(0).toString()).contains(\"unix-stream\")"
  },
  {
    "commitSHA1": "85d864e5e5732d8782fca20bb34f5a98aa4aec28",
    "commitFile": "src/main/java/io/github/benas/unixstream/UnixStream.java",
    "patch": "diff --git a/src/main/java/io/github/benas/unixstream/UnixStream.java b/src/main/java/io/github/benas/unixstream/UnixStream.java\nindex 3977b10..caa0ced 100755\n--- a/src/main/java/io/github/benas/unixstream/UnixStream.java\n+++ b/src/main/java/io/github/benas/unixstream/UnixStream.java\n@@ -134,7 +134,7 @@\n      * @return a new UnixStream with the absolute path of the current directory.\n      */\n     static UnixStream\u003cPath\u003e pwd() {\n-        return new UnixStreamImpl\u003c\u003e(Stream.of(Paths.get(\"\")));\n+        return new UnixStreamImpl\u003c\u003e(Stream.of(Paths.get(\"\").toAbsolutePath()));\n     }\n \n \ndiff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d726481..d9a74a7 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,8 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        // TODO toAbsolutePath should not be be called by the client\n-        assertThat(paths.get(0).toAbsolutePath().toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n     }\n \n }\ndiff --git a/src/main/java/io/github/benas/unixstream/UnixStream.java b/src/main/java/io/github/benas/unixstream/UnixStream.java\nindex 3977b10..caa0ced 100755\n--- a/src/main/java/io/github/benas/unixstream/UnixStream.java\n+++ b/src/main/java/io/github/benas/unixstream/UnixStream.java\n@@ -134,7 +134,7 @@\n      * @return a new UnixStream with the absolute path of the current directory.\n      */\n     static UnixStream\u003cPath\u003e pwd() {\n-        return new UnixStreamImpl\u003c\u003e(Stream.of(Paths.get(\"\")));\n+        return new UnixStreamImpl\u003c\u003e(Stream.of(Paths.get(\"\").toAbsolutePath()));\n     }\n \n \n",
    "projectName": "unix-stream",
    "lineNum": 137,
    "nodeStartChar": 4810,
    "before": "Paths",
    "after": "Paths.get(\"\")"
  },
  {
    "commitSHA1": "85d864e5e5732d8782fca20bb34f5a98aa4aec28",
    "commitFile": "src/test/java/io/github/benas/unixstream/components/PwdTest.java",
    "patch": "diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d726481..d9a74a7 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,8 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        // TODO toAbsolutePath should not be be called by the client\n-        assertThat(paths.get(0).toAbsolutePath().toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n     }\n \n }\n",
    "projectName": "unix-stream",
    "lineNum": 21,
    "nodeStartChar": 506,
    "before": "paths.get(0)",
    "after": "paths"
  },
  {
    "commitSHA1": "cebc3b154a1ece1b33e81ad3e8d16a931942dbb2",
    "commitFile": "src/main/java/io/github/benas/unixstream/components/WordCount.java",
    "patch": "diff --git a/src/main/java/io/github/benas/unixstream/components/WordCount.java b/src/main/java/io/github/benas/unixstream/components/WordCount.java\nindex a320375..bb8c2d5 100755\n--- a/src/main/java/io/github/benas/unixstream/components/WordCount.java\n+++ b/src/main/java/io/github/benas/unixstream/components/WordCount.java\n@@ -52,7 +52,7 @@\n         if (option.equals(Option.L)) {\n             return Stream.of(valueOf(input.count()));\n         } else {\n-            Stream\u003cString\u003e stringStream \u003d input.flatMap(s -\u003e Stream.of(s.split(\" \")));\n+            Stream\u003cString\u003e stringStream \u003d input.flatMap(s -\u003e Stream.of(s.split(\" +\")));\n             return Stream.of(valueOf(stringStream.count()));\n         }\n     }\ndiff --git a/src/main/java/io/github/benas/unixstream/components/WordCount.java b/src/main/java/io/github/benas/unixstream/components/WordCount.java\nindex a320375..bb8c2d5 100755\n--- a/src/main/java/io/github/benas/unixstream/components/WordCount.java\n+++ b/src/main/java/io/github/benas/unixstream/components/WordCount.java\n@@ -52,7 +52,7 @@\n         if (option.equals(Option.L)) {\n             return Stream.of(valueOf(input.count()));\n         } else {\n-            Stream\u003cString\u003e stringStream \u003d input.flatMap(s -\u003e Stream.of(s.split(\" \")));\n+            Stream\u003cString\u003e stringStream \u003d input.flatMap(s -\u003e Stream.of(s.split(\" +\")));\n             return Stream.of(valueOf(stringStream.count()));\n         }\n     }\n",
    "projectName": "unix-stream",
    "lineNum": 55,
    "nodeStartChar": 1316,
    "before": "\" \"",
    "after": "\" +\""
  },
  {
    "commitSHA1": "82effe35960225857e6afa5649d873161a52364b",
    "commitFile": "peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java",
    "patch": "diff --git a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\nindex f1d5114..dca88d8 100644\n--- a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n+++ b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n@@ -52,7 +52,8 @@\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertTrue(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, date)));\n-        Assert.assertFalse(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, new Date())));\n+        Assert.assertFalse(Signed.of(\"1\", certificate, date)\n+                .equals(Signed.of(\"1\", certificate, new Date(System.currentTimeMillis() + (10 * 1000)))));\n \n         Assert.assertNotNull(signed.hashCode());\n         Assert.assertNotNull(Signed.of(\"1\", certificate, date).hashCode());\ndiff --git a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\nindex bb6b87e..d2cf783 100644\n--- a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n+++ b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n@@ -167,7 +167,7 @@\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.eventReason(EventReason.MAILBOX_FULL)));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.issuer(\"Somebody\")));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.evidenceIdentifier(InstanceIdentifier.generateUUID())));\n-        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date())));\n+        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date(System.currentTimeMillis() + (10 * 1000)))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.sender(ParticipantIdentifier.of(\"9908:999999999\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.receiver(ParticipantIdentifier.of(\"9908:111111111\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.documentTypeIdentifier(DocumentTypeIdentifier.of(\"Testing...\"))));\ndiff --git a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\nindex f1d5114..dca88d8 100644\n--- a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n+++ b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n@@ -52,7 +52,8 @@\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertTrue(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, date)));\n-        Assert.assertFalse(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, new Date())));\n+        Assert.assertFalse(Signed.of(\"1\", certificate, date)\n+                .equals(Signed.of(\"1\", certificate, new Date(System.currentTimeMillis() + (10 * 1000)))));\n \n         Assert.assertNotNull(signed.hashCode());\n         Assert.assertNotNull(Signed.of(\"1\", certificate, date).hashCode());\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 56,
    "nodeStartChar": 2219,
    "before": "new Date()",
    "after": "new Date(System.currentTimeMillis() + (10 * 1000))"
  },
  {
    "commitSHA1": "82effe35960225857e6afa5649d873161a52364b",
    "commitFile": "peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java",
    "patch": "diff --git a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\nindex bb6b87e..d2cf783 100644\n--- a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n+++ b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n@@ -167,7 +167,7 @@\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.eventReason(EventReason.MAILBOX_FULL)));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.issuer(\"Somebody\")));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.evidenceIdentifier(InstanceIdentifier.generateUUID())));\n-        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date())));\n+        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date(System.currentTimeMillis() + (10 * 1000)))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.sender(ParticipantIdentifier.of(\"9908:999999999\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.receiver(ParticipantIdentifier.of(\"9908:111111111\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.documentTypeIdentifier(DocumentTypeIdentifier.of(\"Testing...\"))));\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 170,
    "nodeStartChar": 9039,
    "before": "new Date()",
    "after": "new Date(System.currentTimeMillis() + (10 * 1000))"
  },
  {
    "commitSHA1": "9cef2d697326efb210e39ba5a4320fae02b6eee2",
    "commitFile": "peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java",
    "patch": "diff --git a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java\nindex 6c28df9..d401dae 100644\n--- a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java\n+++ b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java\n@@ -90,7 +90,7 @@\n             for (ServiceMetadataReferenceType reference :\n                     serviceGroup.getServiceMetadataReferenceCollection().getServiceMetadataReference()) {\n                 String hrefDocumentTypeIdentifier \u003d\n-                        URLDecoder.decode(reference.getHref().split(\"/services/\")[1], \"UTF-8\");\n+                        URLDecoder.decode(reference.getHref(), \"UTF-8\").split(\"/services/\")[1];\n                 String[] parts \u003d hrefDocumentTypeIdentifier.split(\"::\", 2);\n \n                 try {\ndiff --git a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java\nindex c08eea7..e40a564 100644\n--- a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java\n+++ b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java\n@@ -90,7 +90,7 @@\n             for (ServiceMetadataReferenceType reference :\n                     serviceGroup.getServiceMetadataReferenceCollection().getServiceMetadataReference()) {\n                 String hrefDocumentTypeIdentifier \u003d\n-                        URLDecoder.decode(reference.getHref().split(\"/services/\")[1], \"UTF-8\");\n+                        URLDecoder.decode(reference.getHref(), \"UTF-8\").split(\"/services/\")[1];\n                 String[] parts \u003d hrefDocumentTypeIdentifier.split(\"::\", 2);\n \n                 try {\ndiff --git a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java\nindex 5328f47..c646e36 100644\n--- a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java\n+++ b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java\n@@ -91,7 +91,7 @@\n             for (ServiceMetadataReferenceType reference :\n                     serviceGroup.getServiceMetadataReferenceCollection().getServiceMetadataReference()) {\n                 String hrefDocumentTypeIdentifier \u003d\n-                        URLDecoder.decode(reference.getHref().split(\"/services/\")[1], \"UTF-8\");\n+                        URLDecoder.decode(reference.getHref(), \"UTF-8\").split(\"/services/\")[1];\n                 String[] parts \u003d hrefDocumentTypeIdentifier.split(\"::\", 2);\n \n                 try {\ndiff --git a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java\nindex 6c28df9..d401dae 100644\n--- a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java\n+++ b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201407Reader.java\n@@ -90,7 +90,7 @@\n             for (ServiceMetadataReferenceType reference :\n                     serviceGroup.getServiceMetadataReferenceCollection().getServiceMetadataReference()) {\n                 String hrefDocumentTypeIdentifier \u003d\n-                        URLDecoder.decode(reference.getHref().split(\"/services/\")[1], \"UTF-8\");\n+                        URLDecoder.decode(reference.getHref(), \"UTF-8\").split(\"/services/\")[1];\n                 String[] parts \u003d hrefDocumentTypeIdentifier.split(\"::\", 2);\n \n                 try {\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 93,
    "nodeStartChar": 3745,
    "before": "URLDecoder.decode(reference.getHref().split(\"/services/\")[1],\"UTF-8\")",
    "after": "URLDecoder.decode(reference.getHref(),\"UTF-8\").split(\"/services/\")[1]"
  },
  {
    "commitSHA1": "9cef2d697326efb210e39ba5a4320fae02b6eee2",
    "commitFile": "peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java",
    "patch": "diff --git a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java\nindex c08eea7..e40a564 100644\n--- a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java\n+++ b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/Bdxr201605Reader.java\n@@ -90,7 +90,7 @@\n             for (ServiceMetadataReferenceType reference :\n                     serviceGroup.getServiceMetadataReferenceCollection().getServiceMetadataReference()) {\n                 String hrefDocumentTypeIdentifier \u003d\n-                        URLDecoder.decode(reference.getHref().split(\"/services/\")[1], \"UTF-8\");\n+                        URLDecoder.decode(reference.getHref(), \"UTF-8\").split(\"/services/\")[1];\n                 String[] parts \u003d hrefDocumentTypeIdentifier.split(\"::\", 2);\n \n                 try {\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 93,
    "nodeStartChar": 3745,
    "before": "URLDecoder.decode(reference.getHref().split(\"/services/\")[1],\"UTF-8\")",
    "after": "URLDecoder.decode(reference.getHref(),\"UTF-8\").split(\"/services/\")[1]"
  },
  {
    "commitSHA1": "9cef2d697326efb210e39ba5a4320fae02b6eee2",
    "commitFile": "peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java",
    "patch": "diff --git a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java\nindex 5328f47..c646e36 100644\n--- a/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java\n+++ b/peppol-lookup/src/main/java/no/difi/vefa/peppol/lookup/reader/BusdoxReader.java\n@@ -91,7 +91,7 @@\n             for (ServiceMetadataReferenceType reference :\n                     serviceGroup.getServiceMetadataReferenceCollection().getServiceMetadataReference()) {\n                 String hrefDocumentTypeIdentifier \u003d\n-                        URLDecoder.decode(reference.getHref().split(\"/services/\")[1], \"UTF-8\");\n+                        URLDecoder.decode(reference.getHref(), \"UTF-8\").split(\"/services/\")[1];\n                 String[] parts \u003d hrefDocumentTypeIdentifier.split(\"::\", 2);\n \n                 try {\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 94,
    "nodeStartChar": 3786,
    "before": "URLDecoder.decode(reference.getHref().split(\"/services/\")[1],\"UTF-8\")",
    "after": "URLDecoder.decode(reference.getHref(),\"UTF-8\").split(\"/services/\")[1]"
  },
  {
    "commitSHA1": "37709be77a02ae46f65f10ced6d90e3aa0466d2f",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex fede42a..f1dc31c 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -177,7 +177,7 @@\n         }\n \n         if (projectId \u003d\u003d null || projectId.isEmpty()){\n-            String msg \u003d \"Searched in \" + pPath1 + \" and \" + pPath2 + \" for project_id but could\u0027t find any. Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\";\n+            String msg \u003d \"Searched in [\" + pPath1 + \", \" + pPath2 + \", \"+ propertiesPath +\"] for project_id but could\u0027t find any.\";\n             getLog().error(msg);\n             throw new MojoExecutionException(msg);\n         }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 180,
    "nodeStartChar": 6055,
    "before": "\"Searched in \" + pPath1 + \" and \"+ pPath2+ \" for project_id but could\u0027t find any. Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\"",
    "after": "\"Searched in [\" + pPath1 + \", \"+ pPath2+ \", \"+ propertiesPath+ \"] for project_id but could\u0027t find any.\""
  },
  {
    "commitSHA1": "0c59fb90d1d3aa29898f70a5f7123188ecf95fda",
    "commitFile": "src/test/java/com/versioneye/utils/HttpUtilsTest.java",
    "patch": "diff --git a/src/test/java/com/versioneye/utils/HttpUtilsTest.java b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\nindex 41d8786..770958a 100644\n--- a/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n+++ b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n@@ -27,7 +27,7 @@\n         mapper.writeValue(outstream, input);\n \n         String url \u003d \"http://localhost:3000/api/v2/projects/1_54d11ffa6c13297974000002?api_key\u003df511fb2\";\n-        HttpUtils.post(url, outstream.toByteArray(), \"project_file\");\n+        HttpUtils.post(url, outstream.toByteArray(), \"project_file\", null, null, null, null);\n     }\n \n }\ndiff --git a/src/test/java/com/versioneye/utils/HttpUtilsTest.java b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\nindex 41d8786..770958a 100644\n--- a/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n+++ b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n@@ -27,7 +27,7 @@\n         mapper.writeValue(outstream, input);\n \n         String url \u003d \"http://localhost:3000/api/v2/projects/1_54d11ffa6c13297974000002?api_key\u003df511fb2\";\n-        HttpUtils.post(url, outstream.toByteArray(), \"project_file\");\n+        HttpUtils.post(url, outstream.toByteArray(), \"project_file\", null, null, null, null);\n     }\n \n }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 30,
    "nodeStartChar": 1022,
    "before": "HttpUtils.post(url,outstream.toByteArray(),\"project_file\")",
    "after": "HttpUtils.post(url,outstream.toByteArray(),\"project_file\",null,null,null,null)"
  },
  {
    "commitSHA1": "fdaaa77a460d09c61bd2b8448f9debc6200e840e",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 1455edd..7c4e6f9 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -90,7 +90,7 @@\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n             throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n                     \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n-        return apiKey;\n+        return projectId;\n     }\n \n     protected Properties fetchPropertiesFor( String key ) throws Exception {\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 1455edd..7c4e6f9 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -90,7 +90,7 @@\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n             throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n                     \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n-        return apiKey;\n+        return projectId;\n     }\n \n     protected Properties fetchPropertiesFor( String key ) throws Exception {\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 93,
    "nodeStartChar": 3521,
    "before": "return apiKey; ",
    "after": "return projectId; "
  },
  {
    "commitSHA1": "a369f0e6806ad651d877692e6993fd76f0e2e884",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 80,
    "nodeStartChar": 2797,
    "before": "\"com.versioneye.properties found but without an API Key! \"",
    "after": "\"versioneye.properties found but without an API Key! \""
  },
  {
    "commitSHA1": "a369f0e6806ad651d877692e6993fd76f0e2e884",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 91,
    "nodeStartChar": 3361,
    "before": "\"com.versioneye.properties found but without project_id! \"",
    "after": "\"versioneye.properties found but without project_id! \""
  },
  {
    "commitSHA1": "a369f0e6806ad651d877692e6993fd76f0e2e884",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 136,
    "nodeStartChar": 5441,
    "before": "\"https://github.com/com.versioneye/versioneye_maven_plugin\"",
    "after": "\"https://github.com/versioneye/versioneye_maven_plugin\""
  },
  {
    "commitSHA1": "a369f0e6806ad651d877692e6993fd76f0e2e884",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex ee23047..1455edd 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -77,8 +77,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"api_key\");\n         apiKey \u003d properties.getProperty(\"api_key\");\n         if (apiKey \u003d\u003d null || apiKey.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without an API Key! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without an API Key! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -88,8 +88,8 @@\n         Properties properties \u003d fetchPropertiesFor(\"project_id\");\n         projectId \u003d properties.getProperty(\"project_id\");\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n-            throw new MojoExecutionException(\"com.versioneye.properties found but without project_id! \" +\n-                    \"Read the instructions at https://github.com/com.versioneye/versioneye_maven_plugin\");\n+            throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n+                    \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n         return apiKey;\n     }\n \n@@ -133,7 +133,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         PropertiesUtils propertiesUtils \u003d new PropertiesUtils();\n         homeProperties \u003d propertiesUtils.readProperties(propertiesPath);\n         return homeProperties;\n@@ -154,7 +154,7 @@\n         }\n         if (!file.exists())\n             throw new MojoExecutionException(propertiesPath + \" is missing! Read the instructions at \" +\n-                    \"https://github.com/com.versioneye/versioneye_maven_plugin\");\n+                    \"https://github.com/versioneye/versioneye_maven_plugin\");\n         this.propertiesPath \u003d propertiesPath;\n         return propertiesPath;\n     }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 157,
    "nodeStartChar": 6438,
    "before": "\"https://github.com/com.versioneye/versioneye_maven_plugin\"",
    "after": "\"https://github.com/versioneye/versioneye_maven_plugin\""
  },
  {
    "commitSHA1": "d801137b12c6494b772a05f83b18537abc55bd15",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 03eb0e3..523b417 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -51,7 +51,7 @@\n     @Parameter( defaultValue \u003d \"${user.home}\" )\n     protected File homeDirectory;\n \n-    @Parameter( property \u003d \"baseUrl\", defaultValue \u003d \"https://www.com.versioneye.com\" )\n+    @Parameter( property \u003d \"baseUrl\", defaultValue \u003d \"https://www.versioneye.com\" )\n     protected String baseUrl;\n \n     @Parameter( property \u003d \"apiPath\", defaultValue \u003d \"/api/v2\" )\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 54,
    "nodeStartChar": 1826,
    "before": "\"https://www.com.versioneye.com\"",
    "after": "\"https://www.versioneye.com\""
  },
  {
    "commitSHA1": "66c8a7cad241dd1090c6fdf08b64c65214b1a680",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 03eb0e3..523b417 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -51,7 +51,7 @@\n     @Parameter( defaultValue \u003d \"${user.home}\" )\n     protected File homeDirectory;\n \n-    @Parameter( property \u003d \"baseUrl\", defaultValue \u003d \"https://www.com.versioneye.com\" )\n+    @Parameter( property \u003d \"baseUrl\", defaultValue \u003d \"https://www.versioneye.com\" )\n     protected String baseUrl;\n \n     @Parameter( property \u003d \"apiPath\", defaultValue \u003d \"/api/v2\" )\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 03eb0e3..523b417 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -51,7 +51,7 @@\n     @Parameter( defaultValue \u003d \"${user.home}\" )\n     protected File homeDirectory;\n \n-    @Parameter( property \u003d \"baseUrl\", defaultValue \u003d \"https://www.com.versioneye.com\" )\n+    @Parameter( property \u003d \"baseUrl\", defaultValue \u003d \"https://www.versioneye.com\" )\n     protected String baseUrl;\n \n     @Parameter( property \u003d \"apiPath\", defaultValue \u003d \"/api/v2\" )\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 54,
    "nodeStartChar": 1826,
    "before": "\"https://www.com.versioneye.com\"",
    "after": "\"https://www.versioneye.com\""
  },
  {
    "commitSHA1": "4b3402b71a57cf1780e259b1988199256c197afd",
    "commitFile": "src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java",
    "patch": "diff --git a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\nindex bf1801f..e90d288 100644\n--- a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n+++ b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n@@ -18,7 +18,7 @@\n \t\tthis.key \u003d key;\n \t\tthis.bundle \u003d bundle;\n \t\tthis.locale \u003d locale;\n-\t\tthis.formatter \u003d NumberFormat.getNumberInstance(bundle.getLocale());\n+\t\tthis.formatter \u003d NumberFormat.getNumberInstance(locale);\n \t}\n \n \t@Override\ndiff --git a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\nindex bf1801f..e90d288 100644\n--- a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n+++ b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n@@ -18,7 +18,7 @@\n \t\tthis.key \u003d key;\n \t\tthis.bundle \u003d bundle;\n \t\tthis.locale \u003d locale;\n-\t\tthis.formatter \u003d NumberFormat.getNumberInstance(bundle.getLocale());\n+\t\tthis.formatter \u003d NumberFormat.getNumberInstance(locale);\n \t}\n \n \t@Override\n",
    "projectName": "vraptor-i18n",
    "lineNum": 21,
    "nodeStartChar": 577,
    "before": "bundle.getLocale()",
    "after": "locale"
  },
  {
    "commitSHA1": "d81342cfab75ecc204845fc3e2e1e863ea8542aa",
    "commitFile": "src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java",
    "patch": "diff --git a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\nindex bf1801f..e90d288 100644\n--- a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n+++ b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n@@ -18,7 +18,7 @@\n \t\tthis.key \u003d key;\n \t\tthis.bundle \u003d bundle;\n \t\tthis.locale \u003d locale;\n-\t\tthis.formatter \u003d NumberFormat.getNumberInstance(bundle.getLocale());\n+\t\tthis.formatter \u003d NumberFormat.getNumberInstance(locale);\n \t}\n \n \t@Override\ndiff --git a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\nindex bf1801f..e90d288 100644\n--- a/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n+++ b/src/main/java/br/com/caelum/vraptor/i18n/LocalizedNumber.java\n@@ -18,7 +18,7 @@\n \t\tthis.key \u003d key;\n \t\tthis.bundle \u003d bundle;\n \t\tthis.locale \u003d locale;\n-\t\tthis.formatter \u003d NumberFormat.getNumberInstance(bundle.getLocale());\n+\t\tthis.formatter \u003d NumberFormat.getNumberInstance(locale);\n \t}\n \n \t@Override\n",
    "projectName": "vraptor-i18n",
    "lineNum": 21,
    "nodeStartChar": 577,
    "before": "bundle.getLocale()",
    "after": "locale"
  },
  {
    "commitSHA1": "bc1c232ffd699913279835caa7c562841cce27cb",
    "commitFile": "src/main/java/org/jboss/windup/plugin/WindupMojo.java",
    "patch": "diff --git a/src/main/java/org/jboss/windup/plugin/WindupMojo.java b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\nindex ea5bc31..9b2ddb6 100644\n--- a/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n+++ b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n@@ -257,7 +257,7 @@\n         GraphContextFactory graphContextFactory \u003d addonRegistry.getServices(GraphContextFactory.class).get();\n \n         Path graphPath \u003d windupConfiguration.getOutputDirectory().resolve(\"graph\");\n-        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath))\n+        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath, true))\n         {\n             windupConfiguration.setGraphContext(graphContext);\n             windupProcessor.execute(windupConfiguration);\ndiff --git a/src/main/java/org/jboss/windup/plugin/WindupMojo.java b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\nindex ea5bc31..9b2ddb6 100644\n--- a/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n+++ b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n@@ -257,7 +257,7 @@\n         GraphContextFactory graphContextFactory \u003d addonRegistry.getServices(GraphContextFactory.class).get();\n \n         Path graphPath \u003d windupConfiguration.getOutputDirectory().resolve(\"graph\");\n-        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath))\n+        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath, true))\n         {\n             windupConfiguration.setGraphContext(graphContext);\n             windupProcessor.execute(windupConfiguration);\n",
    "projectName": "windup-maven-plugin",
    "lineNum": 260,
    "nodeStartChar": 11590,
    "before": "graphContextFactory.create(graphPath)",
    "after": "graphContextFactory.create(graphPath,true)"
  },
  {
    "commitSHA1": "651b778f7a3f1b302b0d5e4549279527b74773f6",
    "commitFile": "src/main/java/org/freedesktop/DesktopEntryWriter.java",
    "patch": "diff --git a/src/main/java/org/freedesktop/DesktopEntryWriter.java b/src/main/java/org/freedesktop/DesktopEntryWriter.java\nindex e7868e6..baa89b6 100644\n--- a/src/main/java/org/freedesktop/DesktopEntryWriter.java\n+++ b/src/main/java/org/freedesktop/DesktopEntryWriter.java\n@@ -5,16 +5,16 @@\n \n public class DesktopEntryWriter {\n \n-    private IniStyleFileWriter delgate;\n+    private IniStyleFileWriter delegate;\n \n     /**\n      * @param writer the writer must be using a utf-8 encoding\n      */\n     public DesktopEntryWriter(Writer writer) {\n-        this.delgate \u003d new IniStyleFileWriter(writer);\n+        this.delegate \u003d new IniStyleFileWriter(writer);\n     }\n \n     public void write(DesktopEntry file) throws IOException {\n-        delgate.write(file);\n+        delegate.write(file);\n     }\n }\ndiff --git a/src/main/java/org/freedesktop/DesktopEntryWriter.java b/src/main/java/org/freedesktop/DesktopEntryWriter.java\nindex e7868e6..baa89b6 100644\n--- a/src/main/java/org/freedesktop/DesktopEntryWriter.java\n+++ b/src/main/java/org/freedesktop/DesktopEntryWriter.java\n@@ -5,16 +5,16 @@\n \n public class DesktopEntryWriter {\n \n-    private IniStyleFileWriter delgate;\n+    private IniStyleFileWriter delegate;\n \n     /**\n      * @param writer the writer must be using a utf-8 encoding\n      */\n     public DesktopEntryWriter(Writer writer) {\n-        this.delgate \u003d new IniStyleFileWriter(writer);\n+        this.delegate \u003d new IniStyleFileWriter(writer);\n     }\n \n     public void write(DesktopEntry file) throws IOException {\n-        delgate.write(file);\n+        delegate.write(file);\n     }\n }\n",
    "projectName": "xdg-java",
    "lineNum": 14,
    "nodeStartChar": 288,
    "before": "this.delgate",
    "after": "this.delegate"
  },
  {
    "commitSHA1": "9f62ef2e0302ffce251a98ead30f771232b3b429",
    "commitFile": "src/test/java/org/freedesktop/BaseDirectoryTest.java",
    "patch": "diff --git a/src/test/java/org/freedesktop/BaseDirectoryTest.java b/src/test/java/org/freedesktop/BaseDirectoryTest.java\nindex 54f5068..ea89d29 100644\n--- a/src/test/java/org/freedesktop/BaseDirectoryTest.java\n+++ b/src/test/java/org/freedesktop/BaseDirectoryTest.java\n@@ -55,11 +55,11 @@\n     @Test\n     public void testConfigHomeWithEnvSet() {\n         Map\u003cString, String\u003e env \u003d buildCustomEnvironment();\n-        env.put(\"XDG_CONFIG_DIRS\", \"${XDG_CONFIG_DIRS}\");\n+        env.put(\"XDG_CONFIG_HOME\", \"${XDG_CONFIG_HOME}\");\n         BaseDirectory.setEnvironment(env);\n-        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_DIRS);\n+        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_HOME);\n         assertNotNull(dir);\n-        assertEquals(\"${XDG_CONFIG_DIRS}\", dir);\n+        assertEquals(\"${XDG_CONFIG_HOME}\", dir);\n     }\n \n     @Test\ndiff --git a/src/test/java/org/freedesktop/BaseDirectoryTest.java b/src/test/java/org/freedesktop/BaseDirectoryTest.java\nindex 54f5068..ea89d29 100644\n--- a/src/test/java/org/freedesktop/BaseDirectoryTest.java\n+++ b/src/test/java/org/freedesktop/BaseDirectoryTest.java\n@@ -55,11 +55,11 @@\n     @Test\n     public void testConfigHomeWithEnvSet() {\n         Map\u003cString, String\u003e env \u003d buildCustomEnvironment();\n-        env.put(\"XDG_CONFIG_DIRS\", \"${XDG_CONFIG_DIRS}\");\n+        env.put(\"XDG_CONFIG_HOME\", \"${XDG_CONFIG_HOME}\");\n         BaseDirectory.setEnvironment(env);\n-        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_DIRS);\n+        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_HOME);\n         assertNotNull(dir);\n-        assertEquals(\"${XDG_CONFIG_DIRS}\", dir);\n+        assertEquals(\"${XDG_CONFIG_HOME}\", dir);\n     }\n \n     @Test\n",
    "projectName": "xdg-java",
    "lineNum": 58,
    "nodeStartChar": 1645,
    "before": "env.put(\"XDG_CONFIG_DIRS\",\"${XDG_CONFIG_DIRS}\")",
    "after": "env.put(\"XDG_CONFIG_HOME\",\"${XDG_CONFIG_HOME}\")"
  },
  {
    "commitSHA1": "9f62ef2e0302ffce251a98ead30f771232b3b429",
    "commitFile": "src/test/java/org/freedesktop/BaseDirectoryTest.java",
    "patch": "diff --git a/src/test/java/org/freedesktop/BaseDirectoryTest.java b/src/test/java/org/freedesktop/BaseDirectoryTest.java\nindex 54f5068..ea89d29 100644\n--- a/src/test/java/org/freedesktop/BaseDirectoryTest.java\n+++ b/src/test/java/org/freedesktop/BaseDirectoryTest.java\n@@ -55,11 +55,11 @@\n     @Test\n     public void testConfigHomeWithEnvSet() {\n         Map\u003cString, String\u003e env \u003d buildCustomEnvironment();\n-        env.put(\"XDG_CONFIG_DIRS\", \"${XDG_CONFIG_DIRS}\");\n+        env.put(\"XDG_CONFIG_HOME\", \"${XDG_CONFIG_HOME}\");\n         BaseDirectory.setEnvironment(env);\n-        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_DIRS);\n+        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_HOME);\n         assertNotNull(dir);\n-        assertEquals(\"${XDG_CONFIG_DIRS}\", dir);\n+        assertEquals(\"${XDG_CONFIG_HOME}\", dir);\n     }\n \n     @Test\ndiff --git a/src/test/java/org/freedesktop/BaseDirectoryTest.java b/src/test/java/org/freedesktop/BaseDirectoryTest.java\nindex 54f5068..ea89d29 100644\n--- a/src/test/java/org/freedesktop/BaseDirectoryTest.java\n+++ b/src/test/java/org/freedesktop/BaseDirectoryTest.java\n@@ -55,11 +55,11 @@\n     @Test\n     public void testConfigHomeWithEnvSet() {\n         Map\u003cString, String\u003e env \u003d buildCustomEnvironment();\n-        env.put(\"XDG_CONFIG_DIRS\", \"${XDG_CONFIG_DIRS}\");\n+        env.put(\"XDG_CONFIG_HOME\", \"${XDG_CONFIG_HOME}\");\n         BaseDirectory.setEnvironment(env);\n-        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_DIRS);\n+        String dir \u003d BaseDirectory.get(BaseDirectory.XDG_CONFIG_HOME);\n         assertNotNull(dir);\n-        assertEquals(\"${XDG_CONFIG_DIRS}\", dir);\n+        assertEquals(\"${XDG_CONFIG_HOME}\", dir);\n     }\n \n     @Test\n",
    "projectName": "xdg-java",
    "lineNum": 62,
    "nodeStartChar": 1858,
    "before": "\"${XDG_CONFIG_DIRS}\"",
    "after": "\"${XDG_CONFIG_HOME}\""
  },
  {
    "commitSHA1": "308f1d85821e03d616f70fe4d6e3d8d0e973b2a1",
    "commitFile": "src/main/java/org/exquery/xqdoc/XQueryVisitor.java",
    "patch": "diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\nindex 39d2664..623b9e9 100644\n--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n@@ -461,7 +461,7 @@\n         String namespacePrefix \u003d null;\n         String namespace \u003d null;\n         String localName \u003d null;\n-        String[] tmp \u003d context.functionName().getText().split(\":\", 2);\n+        String[] tmp \u003d context.eqName().getText().split(\":\", 2);\n         if (tmp.length \u003e 1) {\n             namespacePrefix \u003d tmp[0];\n             localName \u003d tmp[1];\ndiff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\nindex 39d2664..623b9e9 100644\n--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n@@ -461,7 +461,7 @@\n         String namespacePrefix \u003d null;\n         String namespace \u003d null;\n         String localName \u003d null;\n-        String[] tmp \u003d context.functionName().getText().split(\":\", 2);\n+        String[] tmp \u003d context.eqName().getText().split(\":\", 2);\n         if (tmp.length \u003e 1) {\n             namespacePrefix \u003d tmp[0];\n             localName \u003d tmp[1];\n",
    "projectName": "xqdoc",
    "lineNum": 464,
    "nodeStartChar": 18200,
    "before": "context.functionName()",
    "after": "context.eqName()"
  },
  {
    "commitSHA1": "eb84100ddf897c4cad6635bd2f155647873f7063",
    "commitFile": "src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java",
    "patch": "diff --git a/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java b/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java\nindex 6250c1f..df18df7 100644\n--- a/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java\n+++ b/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java\n@@ -71,11 +71,11 @@\n \t\t\t\tListheader listheader \u003d (Listheader) component;\r\n \t\t\t\tString sortDirection \u003d listheader.getSortDirection();\r\n \r\n-\t\t\t\tif (sortDirection.equals(\"ascending\"))\r\n+\t\t\t\tif (\"ascending\".equals(sortDirection))\r\n \t\t\t\t{\r\n \t\t\t\t\treturn new Sorting(listheader.getSortAscending(), true);\r\n \t\t\t\t}\r\n-\t\t\t\telse if (sortDirection.equals(\"descending\"))\r\n+\t\t\t\telse if (\"descending\".equals(sortDirection))\r\n \t\t\t\t{\r\n \t\t\t\t\treturn new Sorting(listheader.getSortDescending(), false);\r\n \t\t\t\t}\r\n",
    "projectName": "zkoss-helper",
    "lineNum": 74,
    "nodeStartChar": 2241,
    "before": "sortDirection",
    "after": "\"ascending\""
  },
  {
    "commitSHA1": "eb84100ddf897c4cad6635bd2f155647873f7063",
    "commitFile": "src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java",
    "patch": "diff --git a/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java b/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java\nindex 6250c1f..df18df7 100644\n--- a/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java\n+++ b/src/main/java/com/itelg/zkoss/helper/listbox/ListboxSortingHelper.java\n@@ -71,11 +71,11 @@\n \t\t\t\tListheader listheader \u003d (Listheader) component;\r\n \t\t\t\tString sortDirection \u003d listheader.getSortDirection();\r\n \r\n-\t\t\t\tif (sortDirection.equals(\"ascending\"))\r\n+\t\t\t\tif (\"ascending\".equals(sortDirection))\r\n \t\t\t\t{\r\n \t\t\t\t\treturn new Sorting(listheader.getSortAscending(), true);\r\n \t\t\t\t}\r\n-\t\t\t\telse if (sortDirection.equals(\"descending\"))\r\n+\t\t\t\telse if (\"descending\".equals(sortDirection))\r\n \t\t\t\t{\r\n \t\t\t\t\treturn new Sorting(listheader.getSortDescending(), false);\r\n \t\t\t\t}\r\n",
    "projectName": "zkoss-helper",
    "lineNum": 78,
    "nodeStartChar": 2363,
    "before": "sortDirection",
    "after": "\"descending\""
  }
]