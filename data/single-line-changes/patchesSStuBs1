diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
index 00f38b3..d8a1475 100644
--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
@@ -65,7 +65,7 @@
      * @param baseDirName    查找的文件夹路径
      * @param targetFileName 需要查找的文件名
      */
-    private static List<String> findFiles(String baseDirName, String targetFileName) {
+    private  List<String> findFiles(String baseDirName, String targetFileName) {
         /**
          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。
          */
@@ -82,7 +82,7 @@
                 } else {
                     if (wildcardMatch(targetFileName, file.getName())) {
                         String fileName = file.getAbsolutePath();
-                        String open = PathKit.getRootClassPath() + File.separator;
+                        String open = classpath + File.separator;
                         String close = ".class";
                         int start = fileName.indexOf(open);
                         int end = fileName.indexOf(close, start + open.length());
diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
index 00f38b3..d8a1475 100644
--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
@@ -65,7 +65,7 @@
      * @param baseDirName    查找的文件夹路径
      * @param targetFileName 需要查找的文件名
      */
-    private static List<String> findFiles(String baseDirName, String targetFileName) {
+    private  List<String> findFiles(String baseDirName, String targetFileName) {
         /**
          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。
          */
@@ -82,7 +82,7 @@
                 } else {
                     if (wildcardMatch(targetFileName, file.getName())) {
                         String fileName = file.getAbsolutePath();
-                        String open = PathKit.getRootClassPath() + File.separator;
+                        String open = classpath + File.separator;
                         String close = ".class";
                         int start = fileName.indexOf(open);
                         int end = fileName.indexOf(close, start + open.length());
diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
index e271805..00f38b3 100644
--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
@@ -86,7 +86,7 @@
                         String close = ".class";
                         int start = fileName.indexOf(open);
                         int end = fileName.indexOf(close, start + open.length());
-                        String className = fileName.substring(start + open.length(), end).replaceAll(File.separator, ".");
+                        String className = fileName.substring(start + open.length(), end).replace(File.separator, ".");
                         classFiles.add(className);
                     }
                 }
diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
index e271805..00f38b3 100644
--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
@@ -86,7 +86,7 @@
                         String close = ".class";
                         int start = fileName.indexOf(open);
                         int end = fileName.indexOf(close, start + open.length());
-                        String className = fileName.substring(start + open.length(), end).replaceAll(File.separator, ".");
+                        String className = fileName.substring(start + open.length(), end).replace(File.separator, ".");
                         classFiles.add(className);
                     }
                 }
diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
index e271805..00f38b3 100644
--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
@@ -86,7 +86,7 @@
                         String close = ".class";
                         int start = fileName.indexOf(open);
                         int end = fileName.indexOf(close, start + open.length());
-                        String className = fileName.substring(start + open.length(), end).replaceAll(File.separator, ".");
+                        String className = fileName.substring(start + open.length(), end).replace(File.separator, ".");
                         classFiles.add(className);
                     }
                 }
diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
index e271805..00f38b3 100644
--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java
@@ -86,7 +86,7 @@
                         String close = ".class";
                         int start = fileName.indexOf(open);
                         int end = fileName.indexOf(close, start + open.length());
-                        String className = fileName.substring(start + open.length(), end).replaceAll(File.separator, ".");
+                        String className = fileName.substring(start + open.length(), end).replace(File.separator, ".");
                         classFiles.add(className);
                     }
                 }
diff --git a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java
index 5a8f85c..511bfd6 100644
--- a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java
+++ b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java
@@ -116,7 +116,7 @@
 								.header("Content-Type", "image/png")
 								.content(IOUtils.toByteArray(texture.openStream()));
 
-						requireEmpty(requester.requestWithPayload("PUT", url, multipart.finish(), multipart.getContentType()));
+						requireEmpty(requester.requestWithPayload("PUT", url, multipart.finish(), multipart.getContentType(), headers));
 					}
 				}
 
diff --git a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java
index 5a8f85c..511bfd6 100644
--- a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java
+++ b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java
@@ -116,7 +116,7 @@
 								.header("Content-Type", "image/png")
 								.content(IOUtils.toByteArray(texture.openStream()));
 
-						requireEmpty(requester.requestWithPayload("PUT", url, multipart.finish(), multipart.getContentType()));
+						requireEmpty(requester.requestWithPayload("PUT", url, multipart.finish(), multipart.getContentType(), headers));
 					}
 				}
 
diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java
index 083be28..204c2df 100644
--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java
+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java
@@ -13,7 +13,7 @@
 	@Override
 	public void execute(final CombinedDownloadContext<Void> context) throws Exception {
 		for (CombinedDownloadTask<?> task : tasks) {
-			if (task == null) {
+			if (task != null) {
 				context.submit(task, null, true);
 			}
 		}
diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java
index 083be28..204c2df 100644
--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java
+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java
@@ -13,7 +13,7 @@
 	@Override
 	public void execute(final CombinedDownloadContext<Void> context) throws Exception {
 		for (CombinedDownloadTask<?> task : tasks) {
-			if (task == null) {
+			if (task != null) {
 				context.submit(task, null, true);
 			}
 		}
diff --git a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java
index 4c2fe77..b5448e1 100644
--- a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java
+++ b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java
@@ -18,7 +18,7 @@
 
 		@Override
 		public void run() {
-			while (Thread.interrupted()) {
+			while (!Thread.interrupted()) {
 				try {
 					if (in.read() == -1) {
 						break;
diff --git a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java
index 4c2fe77..b5448e1 100644
--- a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java
+++ b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java
@@ -18,7 +18,7 @@
 
 		@Override
 		public void run() {
-			while (Thread.interrupted()) {
+			while (!Thread.interrupted()) {
 				try {
 					if (in.read() == -1) {
 						break;
diff --git a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java
index f21f977..b9b7ca3 100644
--- a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java
+++ b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java
@@ -88,7 +88,7 @@
             args.add("--server");
             args.add(launchOption.getServerInfo().getHost());
 
-            if (launchOption.getServerInfo().getPort() == 0) {
+            if (launchOption.getServerInfo().getPort() > 0) {
                 args.add("--port");
                 args.add(String.valueOf(launchOption.getServerInfo().getPort()));
             }
diff --git a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java
index f21f977..b9b7ca3 100644
--- a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java
+++ b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java
@@ -88,7 +88,7 @@
             args.add("--server");
             args.add(launchOption.getServerInfo().getHost());
 
-            if (launchOption.getServerInfo().getPort() == 0) {
+            if (launchOption.getServerInfo().getPort() > 0) {
                 args.add("--port");
                 args.add(String.valueOf(launchOption.getServerInfo().getPort()));
             }
diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java
index fc22d37..d0d4040 100644
--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java
+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java
@@ -49,7 +49,7 @@
 		try {
 			return new URI(uri);
 		} catch (URISyntaxException e) {
-			throw new IllegalStateException("unable to convert " + uri + " to URI");
+			throw new IllegalStateException("unable to convert " + uri + " to URI", e);
 		}
 	}
 
diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java
index fc22d37..d0d4040 100644
--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java
+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java
@@ -49,7 +49,7 @@
 		try {
 			return new URI(uri);
 		} catch (URISyntaxException e) {
-			throw new IllegalStateException("unable to convert " + uri + " to URI");
+			throw new IllegalStateException("unable to convert " + uri + " to URI", e);
 		}
 	}
 
diff --git a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java
index 25f3f90..3b73daa 100644
--- a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java
+++ b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java
@@ -23,7 +23,8 @@
 
         JSONObject json = readJson(minecraftDir.getVersionJson(name));
         String version = json.getString("id");
-        String assets = json.getString("assets");
+        // see https://github.com/to2mbn/JMCCC/issues/8
+        String assets = json.optString("assets", "legacy");
         String mainClass = json.getString("mainClass");
         String launchArgs = json.getString("minecraftArguments");
         loadDepends(json.getJSONArray("libraries"), libraries);
diff --git a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java
index 25f3f90..3b73daa 100644
--- a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java
+++ b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java
@@ -23,7 +23,8 @@
 
         JSONObject json = readJson(minecraftDir.getVersionJson(name));
         String version = json.getString("id");
-        String assets = json.getString("assets");
+        // see https://github.com/to2mbn/JMCCC/issues/8
+        String assets = json.optString("assets", "legacy");
         String mainClass = json.getString("mainClass");
         String launchArgs = json.getString("minecraftArguments");
         loadDepends(json.getJSONArray("libraries"), libraries);
diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
index 965274c..03054bb 100644
--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
@@ -91,14 +91,14 @@
 			properties = new JSONObject(session.getUserProperties()).toString();
 		}
 
-		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());
+		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());
 	}
 
 	abstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;
 
 	protected SessionService getSessionService() {
 		if (sessionService == null) {
-			sessionService = new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);
+			sessionService = new YggdrasilSessionService(clientToken, Agent.MINECRAFT);
 		}
 		return sessionService;
 	}
diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
index 965274c..03054bb 100644
--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
@@ -91,14 +91,14 @@
 			properties = new JSONObject(session.getUserProperties()).toString();
 		}
 
-		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());
+		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());
 	}
 
 	abstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;
 
 	protected SessionService getSessionService() {
 		if (sessionService == null) {
-			sessionService = new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);
+			sessionService = new YggdrasilSessionService(clientToken, Agent.MINECRAFT);
 		}
 		return sessionService;
 	}
diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
index 965274c..03054bb 100644
--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
@@ -91,14 +91,14 @@
 			properties = new JSONObject(session.getUserProperties()).toString();
 		}
 
-		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());
+		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());
 	}
 
 	abstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;
 
 	protected SessionService getSessionService() {
 		if (sessionService == null) {
-			sessionService = new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);
+			sessionService = new YggdrasilSessionService(clientToken, Agent.MINECRAFT);
 		}
 		return sessionService;
 	}
diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
index 965274c..03054bb 100644
--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java
@@ -91,14 +91,14 @@
 			properties = new JSONObject(session.getUserProperties()).toString();
 		}
 
-		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());
+		return new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());
 	}
 
 	abstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;
 
 	protected SessionService getSessionService() {
 		if (sessionService == null) {
-			sessionService = new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);
+			sessionService = new YggdrasilSessionService(clientToken, Agent.MINECRAFT);
 		}
 		return sessionService;
 	}
diff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java
index 678e767..a87a0ba 100644
--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java
+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java
@@ -9,7 +9,7 @@
 	}
 
 	public static UUID fromUUIDString(String uuid) {
-		if (uuid.length() == 32) {
+		if (uuid.length() == 36) {
 			return UUID.fromString(uuid);
 		} else {
 			return UUID.fromString(uuid.substring(0, 8) + "-" + uuid.substring(8, 4) + "-" + uuid.substring(12, 4) + "-" + uuid.substring(16, 4) + "-" + uuid.substring(20, 12));
diff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java
index 678e767..a87a0ba 100644
--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java
+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java
@@ -9,7 +9,7 @@
 	}
 
 	public static UUID fromUUIDString(String uuid) {
-		if (uuid.length() == 32) {
+		if (uuid.length() == 36) {
 			return UUID.fromString(uuid);
 		} else {
 			return UUID.fromString(uuid.substring(0, 8) + "-" + uuid.substring(8, 4) + "-" + uuid.substring(12, 4) + "-" + uuid.substring(16, 4) + "-" + uuid.substring(20, 12));
diff --git a/src/main/java/com/github/to2mbn/jmccc/version/Library.java b/src/main/java/com/github/to2mbn/jmccc/version/Library.java
index 4fa4fc9..542eba6 100644
--- a/src/main/java/com/github/to2mbn/jmccc/version/Library.java
+++ b/src/main/java/com/github/to2mbn/jmccc/version/Library.java
@@ -132,7 +132,7 @@
      * @return true if the library is missing in the given minecraft directory
      */
     public boolean isMissing(MinecraftDirectory minecraftDir) {
-        return new File(minecraftDir.getLibraries(), path).isFile();
+        return !new File(minecraftDir.getLibraries(), path).isFile();
     }
 
     @Override
diff --git a/src/main/java/com/github/to2mbn/jmccc/version/Library.java b/src/main/java/com/github/to2mbn/jmccc/version/Library.java
index 4fa4fc9..542eba6 100644
--- a/src/main/java/com/github/to2mbn/jmccc/version/Library.java
+++ b/src/main/java/com/github/to2mbn/jmccc/version/Library.java
@@ -132,7 +132,7 @@
      * @return true if the library is missing in the given minecraft directory
      */
     public boolean isMissing(MinecraftDirectory minecraftDir) {
-        return new File(minecraftDir.getLibraries(), path).isFile();
+        return !new File(minecraftDir.getLibraries(), path).isFile();
     }
 
     @Override
diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
index 37a538a..52b8d3a 100644
--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
@@ -77,7 +77,7 @@
                     }
                 }
 
-                in.getNextEntry();
+                in.closeEntry();
             }
         }
     }
diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
index 37a538a..52b8d3a 100644
--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
@@ -77,7 +77,7 @@
                     }
                 }
 
-                in.getNextEntry();
+                in.closeEntry();
             }
         }
     }
diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
index 37a538a..52b8d3a 100644
--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
@@ -77,7 +77,7 @@
                     }
                 }
 
-                in.getNextEntry();
+                in.closeEntry();
             }
         }
     }
diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
index 37a538a..52b8d3a 100644
--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java
@@ -77,7 +77,7 @@
                     }
                 }
 
-                in.getNextEntry();
+                in.closeEntry();
             }
         }
     }
diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
index d7e8bf0..838c833 100644
--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
@@ -96,7 +96,7 @@
             try {
                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -105,7 +105,7 @@
                 getCleanerMethod = Class.forName("sun.nio.ch.DirectBuffer").getMethod("cleaner");
                 cleanMethod = Class.forName("sun.misc.Cleaner").getMethod("clean");
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner not available", e);
+                throw new AssertionError("Java 6 Cleaner not available");
             }
         }
 
@@ -123,7 +123,7 @@
             try {
                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -131,7 +131,7 @@
             try {
                 INVOKE_CLEANER = UnsafeAccess.UNSAFE.getClass().getMethod("invokeCleaner", ByteBuffer.class);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner not available", e);
+                throw new AssertionError("Java 9 Cleaner not available");
             }
         }
 
diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
index d7e8bf0..838c833 100644
--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
@@ -96,7 +96,7 @@
             try {
                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -105,7 +105,7 @@
                 getCleanerMethod = Class.forName("sun.nio.ch.DirectBuffer").getMethod("cleaner");
                 cleanMethod = Class.forName("sun.misc.Cleaner").getMethod("clean");
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner not available", e);
+                throw new AssertionError("Java 6 Cleaner not available");
             }
         }
 
@@ -123,7 +123,7 @@
             try {
                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -131,7 +131,7 @@
             try {
                 INVOKE_CLEANER = UnsafeAccess.UNSAFE.getClass().getMethod("invokeCleaner", ByteBuffer.class);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner not available", e);
+                throw new AssertionError("Java 9 Cleaner not available");
             }
         }
 
diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
index d7e8bf0..838c833 100644
--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
@@ -96,7 +96,7 @@
             try {
                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -105,7 +105,7 @@
                 getCleanerMethod = Class.forName("sun.nio.ch.DirectBuffer").getMethod("cleaner");
                 cleanMethod = Class.forName("sun.misc.Cleaner").getMethod("clean");
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner not available", e);
+                throw new AssertionError("Java 6 Cleaner not available");
             }
         }
 
@@ -123,7 +123,7 @@
             try {
                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -131,7 +131,7 @@
             try {
                 INVOKE_CLEANER = UnsafeAccess.UNSAFE.getClass().getMethod("invokeCleaner", ByteBuffer.class);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner not available", e);
+                throw new AssertionError("Java 9 Cleaner not available");
             }
         }
 
diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
index d7e8bf0..838c833 100644
--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java
@@ -96,7 +96,7 @@
             try {
                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 6 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -105,7 +105,7 @@
                 getCleanerMethod = Class.forName("sun.nio.ch.DirectBuffer").getMethod("cleaner");
                 cleanMethod = Class.forName("sun.misc.Cleaner").getMethod("clean");
             } catch (Exception e) {
-                throw new AssertionError("Java 6 Cleaner not available", e);
+                throw new AssertionError("Java 6 Cleaner not available");
             }
         }
 
@@ -123,7 +123,7 @@
             try {
                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer", e);
+                throw new AssertionError("Java 9 Cleaner failed to free DirectBuffer");
             }
         }
 
@@ -131,7 +131,7 @@
             try {
                 INVOKE_CLEANER = UnsafeAccess.UNSAFE.getClass().getMethod("invokeCleaner", ByteBuffer.class);
             } catch (Exception e) {
-                throw new AssertionError("Java 9 Cleaner not available", e);
+                throw new AssertionError("Java 9 Cleaner not available");
             }
         }
 
diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java
index a6da72c..3cf5adf 100644
--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java
+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java
@@ -83,7 +83,7 @@
         }
         catch (IOException e)
         {
-            throw new ConfigurationException("The configuration file could not be read.");
+            throw new ConfigurationException("The configuration file could not be read.", e);
         }
 
         MessageExtractor messageExtractor = null;
@@ -110,7 +110,7 @@
                 }
                 catch (Exception e)
                 {
-                    throw new ConfigurationException("Could not create a MessageExtractor instance of " + messageExtractorClass.getName());
+                    throw new ConfigurationException("Could not create a MessageExtractor instance of '" + messageExtractorClass.getName() + "'.", e);
                 }
                 sourceNode = node;
             }
@@ -128,7 +128,7 @@
                 }
                 catch (Exception e)
                 {
-                    throw new ConfigurationException("Could not create an CatalogFormat instance of " + catalogFormatClass.getName());
+                    throw new ConfigurationException("Could not create an CatalogFormat instance of '" + catalogFormatClass.getName() + "'.", e);
                 }
                 catalogNode = node;
             }
diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java
index cfdd50c..a7132f4 100644
--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java
+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java
@@ -32,9 +32,9 @@
 
     public void execute() throws MojoExecutionException, MojoFailureException
     {
-        for (String configuration : configurations)
+        if (this.project == null)
         {
-            this.getLog().info(configuration);
+            throw new MojoFailureException("It's not a maven project, isn't it?");
         }
         if (this.project.getPackaging().equalsIgnoreCase("pom"))
         {
@@ -90,7 +90,7 @@
             }
             catch (MessageCatalogException e)
             {
-                throw new MojoFailureException(e.getMessage(), e.getCause());
+                throw new MojoFailureException(e.getMessage(), e);
             }
         }
         while (!foundConfiguration && i < this.configurations.length);
diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java
index a6da72c..3cf5adf 100644
--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java
+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java
@@ -83,7 +83,7 @@
         }
         catch (IOException e)
         {
-            throw new ConfigurationException("The configuration file could not be read.");
+            throw new ConfigurationException("The configuration file could not be read.", e);
         }
 
         MessageExtractor messageExtractor = null;
@@ -110,7 +110,7 @@
                 }
                 catch (Exception e)
                 {
-                    throw new ConfigurationException("Could not create a MessageExtractor instance of " + messageExtractorClass.getName());
+                    throw new ConfigurationException("Could not create a MessageExtractor instance of '" + messageExtractorClass.getName() + "'.", e);
                 }
                 sourceNode = node;
             }
@@ -128,7 +128,7 @@
                 }
                 catch (Exception e)
                 {
-                    throw new ConfigurationException("Could not create an CatalogFormat instance of " + catalogFormatClass.getName());
+                    throw new ConfigurationException("Could not create an CatalogFormat instance of '" + catalogFormatClass.getName() + "'.", e);
                 }
                 catalogNode = node;
             }
diff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java
index 8a5212c..3a09d55 100644
--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java
+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java
@@ -41,7 +41,7 @@
   protected ConcatenateFilterFactory(Map<String, String> args) {
     super(args);
     tokenSeparator = get(args, "tokenSeparator", ShingleFilter.TOKEN_SEPARATOR);
-    if (tokenSeparator.length() != 0)
+    if (tokenSeparator.length() != 1)
       throw new IllegalArgumentException("tokenSeparator should be 1 char: "+tokenSeparator);
     if (!args.isEmpty()) {
       throw new IllegalArgumentException("Unknown parameters: " + args);
diff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java
index 8a5212c..3a09d55 100644
--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java
+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java
@@ -41,7 +41,7 @@
   protected ConcatenateFilterFactory(Map<String, String> args) {
     super(args);
     tokenSeparator = get(args, "tokenSeparator", ShingleFilter.TOKEN_SEPARATOR);
-    if (tokenSeparator.length() != 0)
+    if (tokenSeparator.length() != 1)
       throw new IllegalArgumentException("tokenSeparator should be 1 char: "+tokenSeparator);
     if (!args.isEmpty()) {
       throw new IllegalArgumentException("Unknown parameters: " + args);
diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java
index ebe1580..70c4c39 100644
--- a/src/main/java/com/google/acai/Dependencies.java
+++ b/src/main/java/com/google/acai/Dependencies.java
@@ -138,7 +138,7 @@
      * Removes the directed edge from {@code tail} to {@code head}.
      */
     void removeEdge(T tail, T head) {
-      checkState(successors.remove(tail, head), "Attempt to remove non-existent edge");
+      checkArgument(successors.remove(tail, head), "Attempt to remove non-existent edge");
       checkState(predecessors.remove(head, tail), "Graph state was invalid.");
     }
 
diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java
index ebe1580..70c4c39 100644
--- a/src/main/java/com/google/acai/Dependencies.java
+++ b/src/main/java/com/google/acai/Dependencies.java
@@ -138,7 +138,7 @@
      * Removes the directed edge from {@code tail} to {@code head}.
      */
     void removeEdge(T tail, T head) {
-      checkState(successors.remove(tail, head), "Attempt to remove non-existent edge");
+      checkArgument(successors.remove(tail, head), "Attempt to remove non-existent edge");
       checkState(predecessors.remove(head, tail), "Graph state was invalid.");
     }
 
diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java
index ebe1580..70c4c39 100644
--- a/src/main/java/com/google/acai/Dependencies.java
+++ b/src/main/java/com/google/acai/Dependencies.java
@@ -138,7 +138,7 @@
      * Removes the directed edge from {@code tail} to {@code head}.
      */
     void removeEdge(T tail, T head) {
-      checkState(successors.remove(tail, head), "Attempt to remove non-existent edge");
+      checkArgument(successors.remove(tail, head), "Attempt to remove non-existent edge");
       checkState(predecessors.remove(head, tail), "Graph state was invalid.");
     }
 
diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java
index ebe1580..70c4c39 100644
--- a/src/main/java/com/google/acai/Dependencies.java
+++ b/src/main/java/com/google/acai/Dependencies.java
@@ -138,7 +138,7 @@
      * Removes the directed edge from {@code tail} to {@code head}.
      */
     void removeEdge(T tail, T head) {
-      checkState(successors.remove(tail, head), "Attempt to remove non-existent edge");
+      checkArgument(successors.remove(tail, head), "Attempt to remove non-existent edge");
       checkState(predecessors.remove(head, tail), "Graph state was invalid.");
     }
 
diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
index da57093..5f9353d 100644
--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
@@ -205,7 +205,7 @@
 
     public String getCreateMessage() {
         if (createMessage == null) {
-            createMessage = Messages.getMessage("entity.create-message");
+            createMessage = Messages.getMessage("entity.create-message", entity.getClass().getSimpleName());
             if (createMessage.startsWith("??")) {
                 createMessage = "Record created successfully";
             }
@@ -215,7 +215,7 @@
 
     public String getRemoveMessage() {
         if (removeMessage == null) {
-            removeMessage = Messages.getMessage("entity.remove-message");
+            removeMessage = Messages.getMessage("entity.remove-message", entity.getClass().getSimpleName());
             if (removeMessage.startsWith("??")) {
                 removeMessage = "Record removed successfully";
             }
@@ -225,7 +225,7 @@
 
     public String getUpdateMessage() {
         if (updateMessage == null) {
-            updateMessage = Messages.getMessage("entity.update-message");
+            updateMessage = Messages.getMessage("entity.update-message", entity.getClass().getSimpleName());
             if (updateMessage.startsWith("??")) {
                 updateMessage = "Record updated successfully";
             }
diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
index da57093..5f9353d 100644
--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
@@ -205,7 +205,7 @@
 
     public String getCreateMessage() {
         if (createMessage == null) {
-            createMessage = Messages.getMessage("entity.create-message");
+            createMessage = Messages.getMessage("entity.create-message", entity.getClass().getSimpleName());
             if (createMessage.startsWith("??")) {
                 createMessage = "Record created successfully";
             }
@@ -215,7 +215,7 @@
 
     public String getRemoveMessage() {
         if (removeMessage == null) {
-            removeMessage = Messages.getMessage("entity.remove-message");
+            removeMessage = Messages.getMessage("entity.remove-message", entity.getClass().getSimpleName());
             if (removeMessage.startsWith("??")) {
                 removeMessage = "Record removed successfully";
             }
@@ -225,7 +225,7 @@
 
     public String getUpdateMessage() {
         if (updateMessage == null) {
-            updateMessage = Messages.getMessage("entity.update-message");
+            updateMessage = Messages.getMessage("entity.update-message", entity.getClass().getSimpleName());
             if (updateMessage.startsWith("??")) {
                 updateMessage = "Record updated successfully";
             }
diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
index da57093..5f9353d 100644
--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
@@ -205,7 +205,7 @@
 
     public String getCreateMessage() {
         if (createMessage == null) {
-            createMessage = Messages.getMessage("entity.create-message");
+            createMessage = Messages.getMessage("entity.create-message", entity.getClass().getSimpleName());
             if (createMessage.startsWith("??")) {
                 createMessage = "Record created successfully";
             }
@@ -215,7 +215,7 @@
 
     public String getRemoveMessage() {
         if (removeMessage == null) {
-            removeMessage = Messages.getMessage("entity.remove-message");
+            removeMessage = Messages.getMessage("entity.remove-message", entity.getClass().getSimpleName());
             if (removeMessage.startsWith("??")) {
                 removeMessage = "Record removed successfully";
             }
@@ -225,7 +225,7 @@
 
     public String getUpdateMessage() {
         if (updateMessage == null) {
-            updateMessage = Messages.getMessage("entity.update-message");
+            updateMessage = Messages.getMessage("entity.update-message", entity.getClass().getSimpleName());
             if (updateMessage.startsWith("??")) {
                 updateMessage = "Record updated successfully";
             }
diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
index da57093..5f9353d 100644
--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
@@ -205,7 +205,7 @@
 
     public String getCreateMessage() {
         if (createMessage == null) {
-            createMessage = Messages.getMessage("entity.create-message");
+            createMessage = Messages.getMessage("entity.create-message", entity.getClass().getSimpleName());
             if (createMessage.startsWith("??")) {
                 createMessage = "Record created successfully";
             }
@@ -215,7 +215,7 @@
 
     public String getRemoveMessage() {
         if (removeMessage == null) {
-            removeMessage = Messages.getMessage("entity.remove-message");
+            removeMessage = Messages.getMessage("entity.remove-message", entity.getClass().getSimpleName());
             if (removeMessage.startsWith("??")) {
                 removeMessage = "Record removed successfully";
             }
@@ -225,7 +225,7 @@
 
     public String getUpdateMessage() {
         if (updateMessage == null) {
-            updateMessage = Messages.getMessage("entity.update-message");
+            updateMessage = Messages.getMessage("entity.update-message", entity.getClass().getSimpleName());
             if (updateMessage.startsWith("??")) {
                 updateMessage = "Record updated successfully";
             }
diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
index da57093..5f9353d 100644
--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
@@ -205,7 +205,7 @@
 
     public String getCreateMessage() {
         if (createMessage == null) {
-            createMessage = Messages.getMessage("entity.create-message");
+            createMessage = Messages.getMessage("entity.create-message", entity.getClass().getSimpleName());
             if (createMessage.startsWith("??")) {
                 createMessage = "Record created successfully";
             }
@@ -215,7 +215,7 @@
 
     public String getRemoveMessage() {
         if (removeMessage == null) {
-            removeMessage = Messages.getMessage("entity.remove-message");
+            removeMessage = Messages.getMessage("entity.remove-message", entity.getClass().getSimpleName());
             if (removeMessage.startsWith("??")) {
                 removeMessage = "Record removed successfully";
             }
@@ -225,7 +225,7 @@
 
     public String getUpdateMessage() {
         if (updateMessage == null) {
-            updateMessage = Messages.getMessage("entity.update-message");
+            updateMessage = Messages.getMessage("entity.update-message", entity.getClass().getSimpleName());
             if (updateMessage.startsWith("??")) {
                 updateMessage = "Record updated successfully";
             }
diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
index da57093..5f9353d 100644
--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java
@@ -205,7 +205,7 @@
 
     public String getCreateMessage() {
         if (createMessage == null) {
-            createMessage = Messages.getMessage("entity.create-message");
+            createMessage = Messages.getMessage("entity.create-message", entity.getClass().getSimpleName());
             if (createMessage.startsWith("??")) {
                 createMessage = "Record created successfully";
             }
@@ -215,7 +215,7 @@
 
     public String getRemoveMessage() {
         if (removeMessage == null) {
-            removeMessage = Messages.getMessage("entity.remove-message");
+            removeMessage = Messages.getMessage("entity.remove-message", entity.getClass().getSimpleName());
             if (removeMessage.startsWith("??")) {
                 removeMessage = "Record removed successfully";
             }
@@ -225,7 +225,7 @@
 
     public String getUpdateMessage() {
         if (updateMessage == null) {
-            updateMessage = Messages.getMessage("entity.update-message");
+            updateMessage = Messages.getMessage("entity.update-message", entity.getClass().getSimpleName());
             if (updateMessage.startsWith("??")) {
                 updateMessage = "Record updated successfully";
             }
diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java
index 3aa63b1..1064263 100644
--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java
+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java
@@ -9,7 +9,7 @@
  * Created by rmpestano on 9/7/14.
  * class which holds database pagination metadata
  */
-public class Filter<T extends Serializable> {
+public class Filter<T extends PersistenceEntity> {
     private T entity;
     private int first;
     private int pageSize;
diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java
index 3aa63b1..1064263 100644
--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java
+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java
@@ -9,7 +9,7 @@
  * Created by rmpestano on 9/7/14.
  * class which holds database pagination metadata
  */
-public class Filter<T extends Serializable> {
+public class Filter<T extends PersistenceEntity> {
     private T entity;
     private int first;
     private int pageSize;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
index f54e02f..2737b36 100644
--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java
@@ -90,7 +90,7 @@
   /**
    * Close the underlying transport if necessary.
    * 
-   * @throws ProbeSenderException if something goes wrong
+   * @throws TransportException if something goes wrong
    */
   public void close() throws TransportException {
     probeTransport.close();
diff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
index 114e706..077bd02 100644
--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java
@@ -220,7 +220,7 @@
    * Actually send the probe out on the wire.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
   @Override
diff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
index 99b65e5..c07f95b 100755
--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java
@@ -136,7 +136,7 @@
   /**
    * Create a new instance of a Responder.
    * 
-   * @param cliValues - the list of command line arguments
+   * @param config  - the list of command line arguments
    */
   public Responder(ResponderConfiguration config) {
     this._config = config;
diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
index 4409faf..8b5e722 100644
--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java
@@ -38,16 +38,16 @@
    * @param networkInterface name of the network interface
    * @throws TransportConfigException if something goes wrong
    */
-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;
+  void initialize(Properties p, String networkInterface) throws TransportConfigException;
 
   /**
    * Actually send the probe out on transport mechanism.
    * 
    * @param probe the Probe instance that has been pre-configured
-   * @throws ProbeSenderException if something bad happened when sending the
+   * @throws TransportException if something bad happened when sending the
    *           probe
    */
-  public void sendProbe(Probe probe) throws TransportException;
+  void sendProbe(Probe probe) throws TransportException;
 
   /**
    * Return the maximum payload size that this transport can handle. For
@@ -58,20 +58,20 @@
    * 
    * @return max payload size in bytes
    */
-  public int maxPayloadSize();
+  int maxPayloadSize();
 
   /**
    * Return the name of the network interface associated with this transport.
    * 
    * @return the name of the network interface associated with this transport
    */
-  public String getNetworkInterfaceName();
+  String getNetworkInterfaceName();
 
   /**
    * Close the transport.
    * 
-   * @throws ProbeSenderException if something bad happened
+   * @throws TransportException if something bad happened
    */
-  public void close() throws TransportException;
+  void close() throws TransportException;
 
 }
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
index e022f04..c48c317 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
@@ -84,7 +84,7 @@
 		mapper.registerModule(new TestModule());
 		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 		
-		doReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());
+		doReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());
 	}
 	
 	@Test
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
index 7216c3a..2604073 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
@@ -259,7 +259,7 @@
 		
 		private BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod;
 		
-		public HandlerInstantiatorTestParams(Class<?> clazz,
+		HandlerInstantiatorTestParams(Class<?> clazz,
 			BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod) {
 			
 			this.clazz = clazz;
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
index e022f04..c48c317 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
@@ -84,7 +84,7 @@
 		mapper.registerModule(new TestModule());
 		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 		
-		doReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());
+		doReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());
 	}
 	
 	@Test
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
index 7216c3a..2604073 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
@@ -259,7 +259,7 @@
 		
 		private BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod;
 		
-		public HandlerInstantiatorTestParams(Class<?> clazz,
+		HandlerInstantiatorTestParams(Class<?> clazz,
 			BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod) {
 			
 			this.clazz = clazz;
diff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java
index 6a0ce87..3bf899b 100644
--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java
+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java
@@ -112,10 +112,10 @@
         Map<String, String> queryParams = (Map<String, String>) parameters.get(Constants.QUERY_PARAMETERS);
         Map<String, String> bodyParams = (Map<String, String>) parameters.get(Constants.BODY_PARAMETERS);
 
-        if (bodyParams.get(paramName) != null) {
+        if (bodyParams != null && bodyParams.get(paramName) != null) {
             return bodyParams.get(paramName);
         } else {
-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {
+            if (queryParams != null && StringUtils.isNotBlank(queryParams.get(paramName))) {
                 try {
                     decode = URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());
                 } catch (UnsupportedEncodingException e) {
diff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java
index 6a0ce87..3bf899b 100644
--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java
+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java
@@ -112,10 +112,10 @@
         Map<String, String> queryParams = (Map<String, String>) parameters.get(Constants.QUERY_PARAMETERS);
         Map<String, String> bodyParams = (Map<String, String>) parameters.get(Constants.BODY_PARAMETERS);
 
-        if (bodyParams.get(paramName) != null) {
+        if (bodyParams != null && bodyParams.get(paramName) != null) {
             return bodyParams.get(paramName);
         } else {
-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {
+            if (queryParams != null && StringUtils.isNotBlank(queryParams.get(paramName))) {
                 try {
                     decode = URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());
                 } catch (UnsupportedEncodingException e) {
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 115b630..a834bf5 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -63,7 +63,7 @@
      * @return the number of roles matching the filter by each domain
      */
     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         //add 3 more for the counts of Internal, Application domains
         PairDTO[] roleCounts = new PairDTO[userStoreDomains.size() + 2];
         int i = 0;
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
index b952d53..63a6ed1 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
@@ -93,7 +93,7 @@
             realmConfiguration = CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();
 
             while (realmConfiguration != null) {
-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) != null) {
+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {
                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
                 }
                 realmConfiguration = realmConfiguration.getSecondaryRealmConfig();
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
index b952d53..63a6ed1 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
@@ -93,7 +93,7 @@
             realmConfiguration = CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();
 
             while (realmConfiguration != null) {
-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) != null) {
+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {
                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
                 }
                 realmConfiguration = realmConfiguration.getSecondaryRealmConfig();
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
index b952d53..63a6ed1 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
@@ -93,7 +93,7 @@
             realmConfiguration = CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();
 
             while (realmConfiguration != null) {
-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) != null) {
+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {
                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
                 }
                 realmConfiguration = realmConfiguration.getSecondaryRealmConfig();
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
index b952d53..63a6ed1 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java
@@ -93,7 +93,7 @@
             realmConfiguration = CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();
 
             while (realmConfiguration != null) {
-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) != null) {
+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {
                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));
                 }
                 realmConfiguration = realmConfiguration.getSecondaryRealmConfig();
diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
index 00c941f..115b630 100644
--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java
@@ -97,7 +97,7 @@
      * @return the number of users matching the given claim and filter by each domain
      */
     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {
-        Set<String> userStoreDomains = UserStoreCountUtils.getUserStoreDomains();
+        Set<String> userStoreDomains = UserStoreCountUtils.getCountEnabledUserStores();
         PairDTO[] claimCounts = new PairDTO[userStoreDomains.size()];
         int i = 0;
 
diff --git a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java
index 1743200..062ea25 100644
--- a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java
+++ b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java
@@ -40,7 +40,7 @@
 	}
 
 	@RdfProperty(Rr.objectMap)
-	@RdfTypeDecider(String.class)
+	@RdfTypeDecider(ObjectMapTypeDecider.class)
 	@Override
 	public Set<BaseObjectMap> getObjectMaps() {
 		return objectMaps;
diff --git a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java
index 1743200..062ea25 100644
--- a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java
+++ b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java
@@ -40,7 +40,7 @@
 	}
 
 	@RdfProperty(Rr.objectMap)
-	@RdfTypeDecider(String.class)
+	@RdfTypeDecider(ObjectMapTypeDecider.class)
 	@Override
 	public Set<BaseObjectMap> getObjectMaps() {
 		return objectMaps;
diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
index f3df6b0..9c02caf 100644
--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
@@ -168,7 +168,7 @@
                     headerValue = headerValue.toUpperCase();
                 }
                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {
-                    userContentLength = Long.valueOf(headerValue);
+                    userContentLength = Long.parseLong(headerValue);
                 }
                 clientRequest.header(headerName, headerValue);
             }
@@ -176,7 +176,7 @@
             // Work around Jetty bug that strips Content-Length
             // https://bugs.eclipse.org/bugs/show_bug.cgi?id=475613.
             final long length = userContentLength;
-            clientRequest.content(new InputStreamContentProvider(is) {
+            clientRequest.content(new InputStreamContentProvider(iss) {
                     @Override
                     public long getLength() {
                         return length != -1 ? length : super.getLength();
diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
index f3df6b0..9c02caf 100644
--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
@@ -168,7 +168,7 @@
                     headerValue = headerValue.toUpperCase();
                 }
                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {
-                    userContentLength = Long.valueOf(headerValue);
+                    userContentLength = Long.parseLong(headerValue);
                 }
                 clientRequest.header(headerName, headerValue);
             }
@@ -176,7 +176,7 @@
             // Work around Jetty bug that strips Content-Length
             // https://bugs.eclipse.org/bugs/show_bug.cgi?id=475613.
             final long length = userContentLength;
-            clientRequest.content(new InputStreamContentProvider(is) {
+            clientRequest.content(new InputStreamContentProvider(iss) {
                     @Override
                     public long getLength() {
                         return length != -1 ? length : super.getLength();
diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
index f3df6b0..9c02caf 100644
--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
@@ -168,7 +168,7 @@
                     headerValue = headerValue.toUpperCase();
                 }
                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {
-                    userContentLength = Long.valueOf(headerValue);
+                    userContentLength = Long.parseLong(headerValue);
                 }
                 clientRequest.header(headerName, headerValue);
             }
@@ -176,7 +176,7 @@
             // Work around Jetty bug that strips Content-Length
             // https://bugs.eclipse.org/bugs/show_bug.cgi?id=475613.
             final long length = userContentLength;
-            clientRequest.content(new InputStreamContentProvider(is) {
+            clientRequest.content(new InputStreamContentProvider(iss) {
                     @Override
                     public long getLength() {
                         return length != -1 ? length : super.getLength();
diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
index f3df6b0..9c02caf 100644
--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
@@ -168,7 +168,7 @@
                     headerValue = headerValue.toUpperCase();
                 }
                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {
-                    userContentLength = Long.valueOf(headerValue);
+                    userContentLength = Long.parseLong(headerValue);
                 }
                 clientRequest.header(headerName, headerValue);
             }
@@ -176,7 +176,7 @@
             // Work around Jetty bug that strips Content-Length
             // https://bugs.eclipse.org/bugs/show_bug.cgi?id=475613.
             final long length = userContentLength;
-            clientRequest.content(new InputStreamContentProvider(is) {
+            clientRequest.content(new InputStreamContentProvider(iss) {
                     @Override
                     public long getLength() {
                         return length != -1 ? length : super.getLength();
diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
index f3df6b0..9c02caf 100644
--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
@@ -168,7 +168,7 @@
                     headerValue = headerValue.toUpperCase();
                 }
                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {
-                    userContentLength = Long.valueOf(headerValue);
+                    userContentLength = Long.parseLong(headerValue);
                 }
                 clientRequest.header(headerName, headerValue);
             }
@@ -176,7 +176,7 @@
             // Work around Jetty bug that strips Content-Length
             // https://bugs.eclipse.org/bugs/show_bug.cgi?id=475613.
             final long length = userContentLength;
-            clientRequest.content(new InputStreamContentProvider(is) {
+            clientRequest.content(new InputStreamContentProvider(iss) {
                     @Override
                     public long getLength() {
                         return length != -1 ? length : super.getLength();
diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
index f3df6b0..9c02caf 100644
--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java
@@ -168,7 +168,7 @@
                     headerValue = headerValue.toUpperCase();
                 }
                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {
-                    userContentLength = Long.valueOf(headerValue);
+                    userContentLength = Long.parseLong(headerValue);
                 }
                 clientRequest.header(headerName, headerValue);
             }
@@ -176,7 +176,7 @@
             // Work around Jetty bug that strips Content-Length
             // https://bugs.eclipse.org/bugs/show_bug.cgi?id=475613.
             final long length = userContentLength;
-            clientRequest.content(new InputStreamContentProvider(is) {
+            clientRequest.content(new InputStreamContentProvider(iss) {
                     @Override
                     public long getLength() {
                         return length != -1 ? length : super.getLength();
diff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java
index 2ccf6c2..ab7686d 100644
--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java
+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java
@@ -125,7 +125,7 @@
 			int combinationsLength, boolean isOrderImportant,
 			boolean excludeEmptySet) {
 
-		if (combinationsLength > originalVector.getSize())
+		if (excludeEmptySet && combinationsLength > originalVector.getSize())
 			throw new RuntimeException(
 					"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: "
 							+ combinationsLength
diff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java
index 2ccf6c2..ab7686d 100644
--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java
+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java
@@ -125,7 +125,7 @@
 			int combinationsLength, boolean isOrderImportant,
 			boolean excludeEmptySet) {
 
-		if (combinationsLength > originalVector.getSize())
+		if (excludeEmptySet && combinationsLength > originalVector.getSize())
 			throw new RuntimeException(
 					"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: "
 							+ combinationsLength
diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java
index 3ff2cc8..34e3098 100644
--- a/src/main/java/com/contentful/java/cda/AbsQuery.java
+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java
@@ -17,7 +17,7 @@
  * @param <Resource> The type of the resource to be returned by this query.
  * @param <Query>    The query type to be returned on chaining to avoid casting on client side.
  */
-abstract class AbsQuery<Resource extends CDAResource, Query extends AbsQuery<Resource, Query>> {
+public abstract class AbsQuery<Resource extends CDAResource, Query extends AbsQuery<Resource, Query>> {
   private static final String PARAMETER_CONTENT_TYPE = "content_type";
   private static final String PARAMETER_SELECT = "select";
   private static final String PARAMETER_ORDER = "order";
@@ -153,6 +153,7 @@
    * <p>
    * Use this for a more controlled and versatile way of doing specialized search requests.
    *
+   * @param <T>            value type the operation uses.
    * @param name           which attribute should be checked?
    * @param queryOperation specify the queryOperation here.
    * @param values         a list of values to be checked.
diff --git a/src/main/java/com/contentful/java/cda/QueryOperation.java b/src/main/java/com/contentful/java/cda/QueryOperation.java
index 0c14b66..8c1b50d 100644
--- a/src/main/java/com/contentful/java/cda/QueryOperation.java
+++ b/src/main/java/com/contentful/java/cda/QueryOperation.java
@@ -3,7 +3,7 @@
 /**
  * This enumeration will be used to formulate more complex search queries.
  *
- * @see FetchQuery<T>.#where(String, QueryOperation, T...)
+ * @see AbsQuery#where(String, QueryOperation, Object...)
  */
 public class QueryOperation<T> {
 
diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java
index 3ff2cc8..34e3098 100644
--- a/src/main/java/com/contentful/java/cda/AbsQuery.java
+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java
@@ -17,7 +17,7 @@
  * @param <Resource> The type of the resource to be returned by this query.
  * @param <Query>    The query type to be returned on chaining to avoid casting on client side.
  */
-abstract class AbsQuery<Resource extends CDAResource, Query extends AbsQuery<Resource, Query>> {
+public abstract class AbsQuery<Resource extends CDAResource, Query extends AbsQuery<Resource, Query>> {
   private static final String PARAMETER_CONTENT_TYPE = "content_type";
   private static final String PARAMETER_SELECT = "select";
   private static final String PARAMETER_ORDER = "order";
@@ -153,6 +153,7 @@
    * <p>
    * Use this for a more controlled and versatile way of doing specialized search requests.
    *
+   * @param <T>            value type the operation uses.
    * @param name           which attribute should be checked?
    * @param queryOperation specify the queryOperation here.
    * @param values         a list of values to be checked.
diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java
index f5389a9..7338d98 100644
--- a/src/main/java/com/contentful/java/cda/Util.java
+++ b/src/main/java/com/contentful/java/cda/Util.java
@@ -77,7 +77,7 @@
   }
 
   @SuppressWarnings("unchecked")
-  static <T> T extractNested(Map<?, ?> source, String... keys) {
+  static <T> T extractNested(Map<?, ?> source, Object... keys) {
     Map<?, ?> curr = source;
     for (int i = 0; i < keys.length; i++) {
       if (i == keys.length - 1) {
diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java
index f5389a9..7338d98 100644
--- a/src/main/java/com/contentful/java/cda/Util.java
+++ b/src/main/java/com/contentful/java/cda/Util.java
@@ -77,7 +77,7 @@
   }
 
   @SuppressWarnings("unchecked")
-  static <T> T extractNested(Map<?, ?> source, String... keys) {
+  static <T> T extractNested(Map<?, ?> source, Object... keys) {
     Map<?, ?> curr = source;
     for (int i = 0; i < keys.length; i++) {
       if (i == keys.length - 1) {
diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java
index de48b08..0759bb2 100644
--- a/src/main/java/com/contentful/java/cda/AbsQuery.java
+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java
@@ -5,7 +5,7 @@
 
 import static com.contentful.java.cda.Util.resourcePath;
 
-public abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
+abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
   final Class<T> type;
 
   final CDAClient client;
diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java
index fc29f97..829db60 100644
--- a/src/main/java/com/contentful/java/cda/FetchQuery.java
+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java
@@ -1,6 +1,6 @@
 package com.contentful.java.cda;
 
-public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, ObserveQuery<T>> {
+public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, FetchQuery<T>> {
   public FetchQuery(Class<T> type, CDAClient client) {
     super(type, client);
   }
diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java
index de48b08..0759bb2 100644
--- a/src/main/java/com/contentful/java/cda/AbsQuery.java
+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java
@@ -5,7 +5,7 @@
 
 import static com.contentful.java.cda.Util.resourcePath;
 
-public abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
+abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
   final Class<T> type;
 
   final CDAClient client;
diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java
index fc29f97..829db60 100644
--- a/src/main/java/com/contentful/java/cda/FetchQuery.java
+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java
@@ -1,6 +1,6 @@
 package com.contentful.java.cda;
 
-public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, ObserveQuery<T>> {
+public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, FetchQuery<T>> {
   public FetchQuery(Class<T> type, CDAClient client) {
     super(type, client);
   }
diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java
index de48b08..0759bb2 100644
--- a/src/main/java/com/contentful/java/cda/AbsQuery.java
+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java
@@ -5,7 +5,7 @@
 
 import static com.contentful.java.cda.Util.resourcePath;
 
-public abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
+abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
   final Class<T> type;
 
   final CDAClient client;
diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java
index fc29f97..829db60 100644
--- a/src/main/java/com/contentful/java/cda/FetchQuery.java
+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java
@@ -1,6 +1,6 @@
 package com.contentful.java.cda;
 
-public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, ObserveQuery<T>> {
+public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, FetchQuery<T>> {
   public FetchQuery(Class<T> type, CDAClient client) {
     super(type, client);
   }
diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java
index de48b08..0759bb2 100644
--- a/src/main/java/com/contentful/java/cda/AbsQuery.java
+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java
@@ -5,7 +5,7 @@
 
 import static com.contentful.java.cda.Util.resourcePath;
 
-public abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
+abstract class AbsQuery<T extends CDAResource, E extends AbsQuery<T, E>> {
   final Class<T> type;
 
   final CDAClient client;
diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java
index fc29f97..829db60 100644
--- a/src/main/java/com/contentful/java/cda/FetchQuery.java
+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java
@@ -1,6 +1,6 @@
 package com.contentful.java.cda;
 
-public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, ObserveQuery<T>> {
+public final class FetchQuery<T extends CDAResource> extends AbsQuery<T, FetchQuery<T>> {
   public FetchQuery(Class<T> type, CDAClient client) {
     super(type, client);
   }
diff --git a/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java b/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java
index 53bec76..ac327ed 100644
--- a/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java
+++ b/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java
@@ -87,7 +87,7 @@
     public abstract StatefulConnection<K, V> build(final HealthCheckRegistry healthChecks, final LifecycleEnvironment lifecycle,
                                                    final MetricRegistry metrics, @Nullable final Tracing tracing);
 
-    List<EventVisitor> buildEventVisitors(final MetricRegistry metrics) {
+    protected List<EventVisitor> buildEventVisitors(final MetricRegistry metrics) {
         // Extract this, and the event wrapper builders, to Dropwizard factories, if more event types are added frequently enough?
         return ImmutableList.of(
                 new ClusterTopologyChangedEventVisitor(name, metrics),
diff --git a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java
index 25cccd0..ee329fb 100644
--- a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java
+++ b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java
@@ -241,7 +241,7 @@
         }
         if(sourceType.isPrimitive()) {
             if(sourceType == void.class) {
-                return true; // Void can be losslessly represented by any type
+                return false; // Void can't be losslessly represented by any type
             }
             if(targetType.isPrimitive()) {
                 return isProperPrimitiveLosslessSubtype(sourceType, targetType);
diff --git a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java
index 25cccd0..ee329fb 100644
--- a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java
+++ b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java
@@ -241,7 +241,7 @@
         }
         if(sourceType.isPrimitive()) {
             if(sourceType == void.class) {
-                return true; // Void can be losslessly represented by any type
+                return false; // Void can't be losslessly represented by any type
             }
             if(targetType.isPrimitive()) {
                 return isProperPrimitiveLosslessSubtype(sourceType, targetType);
diff --git a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java
index 5909ab2..c8a3b7b 100644
--- a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java
+++ b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java
@@ -54,7 +54,7 @@
             if(name.startsWith("get") && name.length() > 3 && method.getParameterTypes().length == 0) {
                 addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));
             } else if(name.startsWith("is") && name.length() > 2 && method.getParameterTypes().length == 0) {
-                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));
+                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(2)));
             }
         }
         return descs.values();
diff --git a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java
index 5909ab2..c8a3b7b 100644
--- a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java
+++ b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java
@@ -54,7 +54,7 @@
             if(name.startsWith("get") && name.length() > 3 && method.getParameterTypes().length == 0) {
                 addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));
             } else if(name.startsWith("is") && name.length() > 2 && method.getParameterTypes().length == 0) {
-                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));
+                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(2)));
             }
         }
         return descs.values();
diff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java
index 545f200..1b9799e 100644
--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java
+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java
@@ -157,7 +157,7 @@
             if(!TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {
                 return Comparison.TYPE_1_BETTER;
             }
-        } else if(TypeUtilities.isMethodInvocationConvertible(targetType2, sourceType)) {
+        } else if(TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {
             return Comparison.TYPE_2_BETTER;
         }
         for(ConversionComparator comparator: comparators) {
diff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java
index 545f200..1b9799e 100644
--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java
+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java
@@ -157,7 +157,7 @@
             if(!TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {
                 return Comparison.TYPE_1_BETTER;
             }
-        } else if(TypeUtilities.isMethodInvocationConvertible(targetType2, sourceType)) {
+        } else if(TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {
             return Comparison.TYPE_2_BETTER;
         }
         for(ConversionComparator comparator: comparators) {
diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
index 233d3af..11b58c0 100644
--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
@@ -47,7 +47,7 @@
  */
 public final class DefaultRulesEngine implements RulesEngine {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRuleListener.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRulesEngine.class);
 
     private RulesEngineParameters parameters;
     private List<RuleListener> ruleListeners;
diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
index 233d3af..11b58c0 100644
--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java
@@ -47,7 +47,7 @@
  */
 public final class DefaultRulesEngine implements RulesEngine {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRuleListener.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRulesEngine.class);
 
     private RulesEngineParameters parameters;
     private List<RuleListener> ruleListeners;
diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
index 7434eb2..46bc48b 100644
--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
@@ -34,7 +34,7 @@
 
 class DefaultRulesEngineListener implements RulesEngineListener {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRuleListener.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRulesEngineListener.class);
 
     private RulesEngineParameters parameters;
 
diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
index 7434eb2..46bc48b 100644
--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java
@@ -34,7 +34,7 @@
 
 class DefaultRulesEngineListener implements RulesEngineListener {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRuleListener.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRulesEngineListener.class);
 
     private RulesEngineParameters parameters;
 
diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
index ee0a04e..2a63168 100644
--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
@@ -146,7 +146,7 @@
             if (annotations.length == 1) {
                 String factName = ((Fact) (annotations[0])).value(); //validated upfront.
                 Object fact = facts.get(factName);
-                if (fact == null) {
+                if (fact == null && !facts.asMap().containsKey(factName)) {
                     throw new NoSuchFactException(format("No fact named '%s' found in known facts: \n%s", factName, facts), factName);
                 }
                 actualParameters.add(fact);
diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
index ee0a04e..2a63168 100644
--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java
@@ -146,7 +146,7 @@
             if (annotations.length == 1) {
                 String factName = ((Fact) (annotations[0])).value(); //validated upfront.
                 Object fact = facts.get(factName);
-                if (fact == null) {
+                if (fact == null && !facts.asMap().containsKey(factName)) {
                     throw new NoSuchFactException(format("No fact named '%s' found in known facts: \n%s", factName, facts), factName);
                 }
                 actualParameters.add(fact);
diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
index fed18f5..ce85902 100644
--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
@@ -100,7 +100,7 @@
     }
 
     if (vowelHarmonyExceptions == null) {
-      vowelHarmonyExceptions = TurkishStemmer.getDefaultLastConsonantSet();
+      vowelHarmonyExceptions = TurkishStemmer.getDefaultVowelHarmonySet();
     }
 
     return vowelHarmonyExceptions;
diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
index fed18f5..ce85902 100644
--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
@@ -100,7 +100,7 @@
     }
 
     if (vowelHarmonyExceptions == null) {
-      vowelHarmonyExceptions = TurkishStemmer.getDefaultLastConsonantSet();
+      vowelHarmonyExceptions = TurkishStemmer.getDefaultVowelHarmonySet();
     }
 
     return vowelHarmonyExceptions;
diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
index fed18f5..ce85902 100644
--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
@@ -100,7 +100,7 @@
     }
 
     if (vowelHarmonyExceptions == null) {
-      vowelHarmonyExceptions = TurkishStemmer.getDefaultLastConsonantSet();
+      vowelHarmonyExceptions = TurkishStemmer.getDefaultVowelHarmonySet();
     }
 
     return vowelHarmonyExceptions;
diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
index fed18f5..ce85902 100644
--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java
@@ -100,7 +100,7 @@
     }
 
     if (vowelHarmonyExceptions == null) {
-      vowelHarmonyExceptions = TurkishStemmer.getDefaultLastConsonantSet();
+      vowelHarmonyExceptions = TurkishStemmer.getDefaultVowelHarmonySet();
     }
 
     return vowelHarmonyExceptions;
diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
index be6770b..e0fe00e 100644
--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
@@ -86,7 +86,7 @@
 
     @Override
     public TokenStream create(TokenStream tokenStream) {
-		return new WordDelimiterFilter(version, tokenStream,
+		return new WordDelimiterFilter(tokenStream,
 				charTypeTable,
 				flags,
 				protoWords);
diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
index be6770b..e0fe00e 100644
--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
@@ -86,7 +86,7 @@
 
     @Override
     public TokenStream create(TokenStream tokenStream) {
-		return new WordDelimiterFilter(version, tokenStream,
+		return new WordDelimiterFilter(tokenStream,
 				charTypeTable,
 				flags,
 				protoWords);
diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
index 231c85a..be6770b 100644
--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
@@ -80,7 +80,7 @@
         flags |= getFlag(STEM_ENGLISH_POSSESSIVE, settings, "stem_english_possessive", true);
         // If not null is the set of tokens to protect from being delimited
         Set<?> protectedWords = Analysis.getWordSet(env, settings, "protected_words", version);
-        this.protoWords = protectedWords == null ? null : CharArraySet.copy(Lucene.VERSION, protectedWords);
+        this.protoWords = protectedWords == null ? null : CharArraySet.copy(protectedWords);
         this.flags = flags;
     }
 
diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
index 231c85a..be6770b 100644
--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java
@@ -80,7 +80,7 @@
         flags |= getFlag(STEM_ENGLISH_POSSESSIVE, settings, "stem_english_possessive", true);
         // If not null is the set of tokens to protect from being delimited
         Set<?> protectedWords = Analysis.getWordSet(env, settings, "protected_words", version);
-        this.protoWords = protectedWords == null ? null : CharArraySet.copy(Lucene.VERSION, protectedWords);
+        this.protoWords = protectedWords == null ? null : CharArraySet.copy(protectedWords);
         this.flags = flags;
     }
 
diff --git a/src/main/java/org/opengis/cite/cat30/TestNGController.java b/src/main/java/org/opengis/cite/cat30/TestNGController.java
index 4670aca..b773781 100644
--- a/src/main/java/org/opengis/cite/cat30/TestNGController.java
+++ b/src/main/java/org/opengis/cite/cat30/TestNGController.java
@@ -34,13 +34,11 @@
     /**
      * A convenience method to facilitate test development.
      *
-     * @param args
-     *            Test run arguments (optional). The first argument must refer
-     *            to an XML properties file containing the expected set of test
-     *            run arguments. If no argument is supplied, the file located at
+     * @param args Test run arguments (optional). The first argument must refer
+     * to an XML properties file containing the expected set of test run
+     * arguments. If no argument is supplied, the file located at
      *            ${user.home}/test-run-props.xml will be used.
-     * @throws Exception
-     *             If the test run cannot be executed (usually due to
+     * @throws Exception If the test run cannot be executed (usually due to
      *             unsatisfied pre-conditions).
      */
     public static void main(String[] args) throws Exception {
@@ -75,9 +73,8 @@
     /**
      * Construct a controller that writes results to the given output directory.
      * 
-     * @param outputDirUri
-     *            A file URI that specifies the location of the directory in
-     *            which test results will be written. It will be created if it
+     * @param outputDirUri A file URI that specifies the location of the
+     * directory in which test results will be written. It will be created if it
      *            does not exist.
      */
     public TestNGController(String outputDirUri) {
@@ -120,16 +117,15 @@
     }
 
     /**
-     * Validates the test run arguments. The test run is aborted if any of 
-     * these checks fail.
+     * Validates the test run arguments. The test run is aborted if any of these
+     * checks fail.
      *
-     * @param testRunArgs
-     *            A DOM Document containing a set of XML properties (key-value
-     *            pairs).
-     * @throws IllegalArgumentException
-     *             If any arguments are missing or invalid for some reason.
+     * @param testRunArgs A DOM Document containing a set of XML properties
+     * (key-value pairs).
+     * @throws IllegalArgumentException If any test run arguments are missing or
+     * invalid.
      */
-    void validateTestRunArgs(Document testRunArgs) throws Exception {
+    void validateTestRunArgs(Document testRunArgs) throws IllegalArgumentException {
         if (null == testRunArgs
                 || !testRunArgs.getDocumentElement().getNodeName()
                         .equals("properties")) {
@@ -141,7 +137,7 @@
         if (entries.getLength() == 0) {
             throw new IllegalArgumentException("No test run arguments found.");
         }
-        Map<String, String> args = new HashMap<String, String>();
+        Map<String, String> args = new HashMap<>();
         for (int i = 0; i < entries.getLength(); i++) {
             Element entry = (Element) entries.item(i);
             args.put(entry.getAttribute("key"), entry.getTextContent());
diff --git a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java
index 1cf8cd9..0d30df3 100644
--- a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java
+++ b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java
@@ -244,7 +244,7 @@
 
     private String valueToAcronym(final String value) {
         // index only short, name-like values, avoiding free-form text if possible
-        if (value.length() <= 100) {
+        if (null != value && value.length() <= 100) {
             String clean = cleanForAcronym(value);
             StringBuilder acronym = new StringBuilder();
             boolean isInside = false;
diff --git a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java
index 1cf8cd9..0d30df3 100644
--- a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java
+++ b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java
@@ -244,7 +244,7 @@
 
     private String valueToAcronym(final String value) {
         // index only short, name-like values, avoiding free-form text if possible
-        if (value.length() <= 100) {
+        if (null != value && value.length() <= 100) {
             String clean = cleanForAcronym(value);
             StringBuilder acronym = new StringBuilder();
             boolean isInside = false;
diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java
index f79fc05..b93cc8d 100644
--- a/src/main/java/gate/merger/AnnotationMergingMain.java
+++ b/src/main/java/gate/merger/AnnotationMergingMain.java
@@ -182,7 +182,7 @@
         StringBuffer annNames = new StringBuffer();
         for(int i = 0; i < annIndex.length; ++i) {
           if(i > 0) annNames.append("/");
-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);
+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);
         }
         featM.put("annotators", annNames.toString());
         try {
diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java
index f79fc05..b93cc8d 100644
--- a/src/main/java/gate/merger/AnnotationMergingMain.java
+++ b/src/main/java/gate/merger/AnnotationMergingMain.java
@@ -182,7 +182,7 @@
         StringBuffer annNames = new StringBuffer();
         for(int i = 0; i < annIndex.length; ++i) {
           if(i > 0) annNames.append("/");
-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);
+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);
         }
         featM.put("annotators", annNames.toString());
         try {
diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java
index f79fc05..b93cc8d 100644
--- a/src/main/java/gate/merger/AnnotationMergingMain.java
+++ b/src/main/java/gate/merger/AnnotationMergingMain.java
@@ -182,7 +182,7 @@
         StringBuffer annNames = new StringBuffer();
         for(int i = 0; i < annIndex.length; ++i) {
           if(i > 0) annNames.append("/");
-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);
+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);
         }
         featM.put("annotators", annNames.toString());
         try {
diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java
index f79fc05..b93cc8d 100644
--- a/src/main/java/gate/merger/AnnotationMergingMain.java
+++ b/src/main/java/gate/merger/AnnotationMergingMain.java
@@ -182,7 +182,7 @@
         StringBuffer annNames = new StringBuffer();
         for(int i = 0; i < annIndex.length; ++i) {
           if(i > 0) annNames.append("/");
-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);
+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);
         }
         featM.put("annotators", annNames.toString());
         try {
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
index 38b1e21..50a21a1 100644
--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java
@@ -92,7 +92,7 @@
 	    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		logger.info("Keyspace for Cassandra migration is missing. Needs to be created...");
 		CreateNamespace createNamespace = dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);
-		createNamespace.execute(tableStore);
+		createNamespace.execute();
 		if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) == null) {
 		    throw new TransformationException("Could not create namespace '" + NAMESPACE_NAME + "'.");
 		}
@@ -100,7 +100,8 @@
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) == null) {
 		logger.info("ChangeLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,
+			"Contains the changelog of Genesis.");
 		table.addColumn("changelog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("changelog", "component", ColumnType.VARCHAR);
 		table.addColumn("changelog", "machine", ColumnType.VARCHAR);
@@ -110,12 +111,13 @@
 		table.addColumn("changelog", "comment", ColumnType.VARCHAR);
 		table.addColumn("changelog", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine", "version", "command");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("ChangeLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) == null) {
 		logger.info("MigrationLog table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,
+			"Contains the migration log of Genesis which is a collection of the logs of the steps.");
 		table.addColumn("migrationlog", "time", ColumnType.TIMESTAMP);
 		table.addColumn("migrationlog", "severity", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "machine", ColumnType.VARCHAR);
@@ -125,13 +127,13 @@
 		table.addColumn("migrationlog", "exception_message", ColumnType.VARCHAR);
 		table.addColumn("migrationlog", "stacktrace", ColumnType.VARCHAR);
 		table.setPrimaryKey("time", "machine", "thread", "message");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("MigrationLog table for Cassandra migration created.");
 	    }
 	    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) == null) {
 		logger.info("LastTransformations table for Cassandra migration is missing. Needs to be created...");
-		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,
-			LAST_TRANSFORMATIONS_TABLE);
+		CreateTable table = dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,
+			"Contains the last transformation of Genesis.");
 		table.addColumn("transformations", "time", ColumnType.TIMESTAMP);
 		table.addColumn("transformations", "component", ColumnType.VARCHAR);
 		table.addColumn("transformations", "machine", ColumnType.VARCHAR);
@@ -143,7 +145,7 @@
 		table.addColumn("transformations", "comment", ColumnType.VARCHAR);
 		table.addColumn("transformations", "hashid", ColumnType.VARCHAR);
 		table.setPrimaryKey("component", "machine");
-		table.execute(tableStore);
+		table.execute();
 		logger.info("LastTransformations table for Cassandra migration created.");
 	    }
 	} catch (ExecutionException e) {
@@ -251,14 +253,14 @@
 	    BoundStatement boundStatement = preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    // Last Transformations...
 	    String nextVersionString = metadata.getNextVersion() != null ? metadata.getNextVersion().toString() : "";
 	    boundStatement = preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),
 		    machine.getHostAddress(), metadata.getStartVersion().toString(),
 		    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),
 		    metadata.getDeveloper(), metadata.getComment(), hashId.toString());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (IOException | ExecutionException e) {
 	    throw new TransformationException("Could not track migration step.", e);
 	}
@@ -275,7 +277,7 @@
 	    BoundStatement boundStatement = preparedSelectStatement.bind(component, machine.getHostAddress(),
 		    version.toString(), command);
 	    TableRowIterable result;
-	    result = boundStatement.execute(tableStore);
+	    result = boundStatement.execute();
 	    return result.iterator().hasNext();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not check whether a migration took place.", e);
@@ -291,9 +293,9 @@
 	    }
 	    TableStore tableStore = ductileDB.getTableStore();
 	    BoundStatement boundStatement = preparedDropComponentStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	    boundStatement = preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());
-	    boundStatement.execute(tableStore);
+	    boundStatement.execute();
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not drop component history.", e);
 	}
@@ -310,12 +312,12 @@
 	    if (cause == null) {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, "", "", "");
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    } else {
 		BoundStatement boundStatement = preparedLoggingStatement.bind(time, severity.name(),
 			machine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),
 			cause.getMessage(), cause.toString());
-		boundStatement.execute(tableStore);
+		boundStatement.execute();
 	    }
 	} catch (ExecutionException e) {
 	    throw new TransformationException("Could not log migration.", e);
@@ -331,7 +333,7 @@
 	TableStore tableStore = ductileDB.getTableStore();
 	BoundStatement boundStatement = preparedSelectLastTransformationStatement.bind(component,
 		machine.getHostAddress());
-	try (TableRowIterable resultSet = boundStatement.execute(tableStore)) {
+	try (TableRowIterable resultSet = boundStatement.execute()) {
 	    TableRow next = resultSet.iterator().next();
 	    if (next == null) {
 		return null;
diff --git a/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java b/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java
index 726fee2..5aeb616 100644
--- a/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java
+++ b/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java
@@ -580,7 +580,7 @@
 					throw new GeoPackageException(
 							"The related table must be a "
 									+ relationType.getName()
-									+ " table. Related Table: " + baseTableName
+									+ " table. Related Table: " + relatedTableName
 									+ ", Type: "
 									+ geoPackage.getTableType(relatedTableName));
 				}
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index e717a7e..b58560a 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -234,7 +234,7 @@
             mergeTranslation(bundle, language, bf.getType(), bf.getFile(), outputFile);
             break;
 
-        case REVIEWD_WITH_FALLBACK:
+        case REVIEWED_WITH_FALLBACK:
             bundle = getBundle(client, bf.getBundleId(), language, true, true);
             exportTranslation(bundle, language, bf.getType(), outputFile);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java
index 7f83442..da35288 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java
@@ -52,7 +52,7 @@
      * is not available or, not marked as reviewed, the value from the
      * source bundle is used.
      */
-    REVIEWD_WITH_FALLBACK,
+    REVIEWED_WITH_FALLBACK,
 
     /**
      * Exports only translated resources marked as reviewed.
diff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java
index 4cd0d50..4ef8f10 100644
--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java
+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java
@@ -1,5 +1,5 @@
 /*  
- * Copyright IBM Corp. 2015
+ * Copyright IBM Corp. 2015, 2016
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * 
  * @author Yoshito Umaoka
  */
-class ResourceTypeConverter implements IStringConverter<ResourceType>{
+public class ResourceTypeConverter implements IStringConverter<ResourceType>{
 
     @Override
     public ResourceType convert(String type) {
diff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java
index 4cd0d50..4ef8f10 100644
--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java
+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java
@@ -1,5 +1,5 @@
 /*  
- * Copyright IBM Corp. 2015
+ * Copyright IBM Corp. 2015, 2016
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * 
  * @author Yoshito Umaoka
  */
-class ResourceTypeConverter implements IStringConverter<ResourceType>{
+public class ResourceTypeConverter implements IStringConverter<ResourceType>{
 
     @Override
     public ResourceType convert(String type) {
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
index ef321d0..040ee85 100644
--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java
@@ -153,7 +153,7 @@
 
         switch (bundleLayout) {
         case LANGUAGE_SUFFIX: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             int idx = srcFileName.lastIndexOf('.');
             String tgtName = null;
             if (idx < 0) {
@@ -166,13 +166,13 @@
             break;
         }
         case LANGUAGE_SUBDIR: {
-            File dir = (new File(outputDir, relPath)).getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile();
             File langSubDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langSubDir, srcFileName);
             break;
         }
         case LANGUAGE_DIR:
-            File dir = (new File(outputDir, relPath)).getParentFile().getParentFile();
+            File dir = (new File(outBaseDir, relPath)).getParentFile().getParentFile();
             File langDir = new File(dir, getLanguageId(language, langIdStyle, langMap));
             outputFile = new File(langDir, srcFileName);
             break;
diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
index c5e769a..47b1196 100644
--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
@@ -18,10 +18,10 @@
                 return new LoginRespTextDtoParser().apply(buf);
 
             case Verify_Req:
-                return new VerifyReqDtoParser().apply(buf);
+                return new VerifyReqTextDtoParser().apply(buf);
 
             case Verify_Resp:
-                return new VerifyRespDtoParser().apply(buf);
+                return new VerifyRespTextDtoParser().apply(buf);
 
             case UNK02:
                 return new Unk02TextDtoParser().apply(buf);
diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
index c5e769a..47b1196 100644
--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
@@ -18,10 +18,10 @@
                 return new LoginRespTextDtoParser().apply(buf);
 
             case Verify_Req:
-                return new VerifyReqDtoParser().apply(buf);
+                return new VerifyReqTextDtoParser().apply(buf);
 
             case Verify_Resp:
-                return new VerifyRespDtoParser().apply(buf);
+                return new VerifyRespTextDtoParser().apply(buf);
 
             case UNK02:
                 return new Unk02TextDtoParser().apply(buf);
diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
index c5e769a..47b1196 100644
--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
@@ -18,10 +18,10 @@
                 return new LoginRespTextDtoParser().apply(buf);
 
             case Verify_Req:
-                return new VerifyReqDtoParser().apply(buf);
+                return new VerifyReqTextDtoParser().apply(buf);
 
             case Verify_Resp:
-                return new VerifyRespDtoParser().apply(buf);
+                return new VerifyRespTextDtoParser().apply(buf);
 
             case UNK02:
                 return new Unk02TextDtoParser().apply(buf);
diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
index c5e769a..47b1196 100644
--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java
@@ -18,10 +18,10 @@
                 return new LoginRespTextDtoParser().apply(buf);
 
             case Verify_Req:
-                return new VerifyReqDtoParser().apply(buf);
+                return new VerifyReqTextDtoParser().apply(buf);
 
             case Verify_Resp:
-                return new VerifyRespDtoParser().apply(buf);
+                return new VerifyRespTextDtoParser().apply(buf);
 
             case UNK02:
                 return new Unk02TextDtoParser().apply(buf);
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
index e022f04..c48c317 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
@@ -84,7 +84,7 @@
 		mapper.registerModule(new TestModule());
 		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 		
-		doReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());
+		doReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());
 	}
 	
 	@Test
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
index 7216c3a..2604073 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
@@ -259,7 +259,7 @@
 		
 		private BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod;
 		
-		public HandlerInstantiatorTestParams(Class<?> clazz,
+		HandlerInstantiatorTestParams(Class<?> clazz,
 			BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod) {
 			
 			this.clazz = clazz;
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
index e022f04..c48c317 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java
@@ -84,7 +84,7 @@
 		mapper.registerModule(new TestModule());
 		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 		
-		doReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());
+		doReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());
 	}
 	
 	@Test
diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
index 7216c3a..2604073 100644
--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java
@@ -259,7 +259,7 @@
 		
 		private BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod;
 		
-		public HandlerInstantiatorTestParams(Class<?> clazz,
+		HandlerInstantiatorTestParams(Class<?> clazz,
 			BiFunction<HandlerInstantiator, Class<?>, Object> instantiationMethod) {
 			
 			this.clazz = clazz;
diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
index 4638afb..7f65b44 100644
--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
@@ -28,7 +28,7 @@
 
     private final StAXProcessor<Statistic> statProcessor;
 
-    StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {
+    public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {
         statProcessor = processorFactory.forClass(Statistic.class);
     }
 
diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
index 4638afb..7f65b44 100644
--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
@@ -28,7 +28,7 @@
 
     private final StAXProcessor<Statistic> statProcessor;
 
-    StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {
+    public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {
         statProcessor = processorFactory.forClass(Statistic.class);
     }
 
diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
index d5d9f72..4638afb 100644
--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
@@ -22,7 +22,8 @@
  * Implementation of {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of
  * {@link Statistic}.
  */
-class StatisticProcessor extends AbstractStAXProcessor<Set<Statistic>> {
+@SuppressWarnings("WeakerAccess")
+public class StatisticProcessor extends AbstractStAXProcessor<Set<Statistic>> {
     private static final long serialVersionUID = -5289889557164139830L;
 
     private final StAXProcessor<Statistic> statProcessor;
diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
index d5d9f72..4638afb 100644
--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java
@@ -22,7 +22,8 @@
  * Implementation of {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of
  * {@link Statistic}.
  */
-class StatisticProcessor extends AbstractStAXProcessor<Set<Statistic>> {
+@SuppressWarnings("WeakerAccess")
+public class StatisticProcessor extends AbstractStAXProcessor<Set<Statistic>> {
     private static final long serialVersionUID = -5289889557164139830L;
 
     private final StAXProcessor<Statistic> statProcessor;
diff --git a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java
index 095ab94..18b0c04 100644
--- a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java
+++ b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java
@@ -92,7 +92,7 @@
         final List<HodSearchResult> documentList = new LinkedList<>();
         addDomainToSearchResults(documentList, suggestRequest.getQueryRestrictions().getDatabases(), results.getDocuments());
 
-        return new Documents<>(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection());
+        return new Documents<>(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection(), results.getWarnings());
     }
 
     @Cacheable(CacheNames.GET_DOCUMENT_CONTENT)
diff --git a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java
index 095ab94..18b0c04 100644
--- a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java
+++ b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java
@@ -92,7 +92,7 @@
         final List<HodSearchResult> documentList = new LinkedList<>();
         addDomainToSearchResults(documentList, suggestRequest.getQueryRestrictions().getDatabases(), results.getDocuments());
 
-        return new Documents<>(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection());
+        return new Documents<>(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection(), results.getWarnings());
     }
 
     @Cacheable(CacheNames.GET_DOCUMENT_CONTENT)
diff --git a/src/main/java/org/holmes/HolmesEngine.java b/src/main/java/org/holmes/HolmesEngine.java
index dd883a1..3e89fb0 100644
--- a/src/main/java/org/holmes/HolmesEngine.java
+++ b/src/main/java/org/holmes/HolmesEngine.java
@@ -126,15 +126,15 @@
 	}
 
 	/**
-	 * Creates a new {@link Rule} for a {@link Object} target type.
+	 * Creates a new {@link Rule} for a generic {@link Object} target type.
 	 * 
 	 * @param object
 	 *            the target
 	 * @return an appropriated {@link Evaluator} for the given target type.
 	 */
-	public ObjectEvaluator<Object> ensureThat(final Object object) {
+	public <T> ObjectEvaluator<T> ensureThat(final T object) {
 
-		return configure(new ObjectEvaluator<Object>(object));
+		return configure(new ObjectEvaluator<T>(object));
 	}
 
 	/**
diff --git a/src/main/java/org/holmes/HolmesEngine.java b/src/main/java/org/holmes/HolmesEngine.java
index dd883a1..3e89fb0 100644
--- a/src/main/java/org/holmes/HolmesEngine.java
+++ b/src/main/java/org/holmes/HolmesEngine.java
@@ -126,15 +126,15 @@
 	}
 
 	/**
-	 * Creates a new {@link Rule} for a {@link Object} target type.
+	 * Creates a new {@link Rule} for a generic {@link Object} target type.
 	 * 
 	 * @param object
 	 *            the target
 	 * @return an appropriated {@link Evaluator} for the given target type.
 	 */
-	public ObjectEvaluator<Object> ensureThat(final Object object) {
+	public <T> ObjectEvaluator<T> ensureThat(final T object) {
 
-		return configure(new ObjectEvaluator<Object>(object));
+		return configure(new ObjectEvaluator<T>(object));
 	}
 
 	/**
diff --git a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java
index b720c9c..482f636 100644
--- a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java
+++ b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java
@@ -201,7 +201,7 @@
     public JSONArray getQualityProfileConfigurationChanges(String instanceUrl,String qualityProfile) throws ParseException{
     	String url = instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;
     	try {
-    		JSONArray qualityProfileConfigChanges = this.parseAsArray(instanceUrl, "events");
+    		JSONArray qualityProfileConfigChanges = this.parseAsArray(url, "events");
     		return qualityProfileConfigChanges;
     	} catch (ParseException e) {
     		LOG.error("Could not parse response from: " + url, e);
diff --git a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java
index b720c9c..482f636 100644
--- a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java
+++ b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java
@@ -201,7 +201,7 @@
     public JSONArray getQualityProfileConfigurationChanges(String instanceUrl,String qualityProfile) throws ParseException{
     	String url = instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;
     	try {
-    		JSONArray qualityProfileConfigChanges = this.parseAsArray(instanceUrl, "events");
+    		JSONArray qualityProfileConfigChanges = this.parseAsArray(url, "events");
     		return qualityProfileConfigChanges;
     	} catch (ParseException e) {
     		LOG.error("Could not parse response from: " + url, e);
diff --git a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java
index 40ce82a..0424447 100644
--- a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java
+++ b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java
@@ -17,6 +17,6 @@
     }
 
     public SonarClient getSonarClient(Double version) {
-        return ((version == null) || (version < 6.0)) ? sonarClient : sonar6Client;
+        return ((version == null) || (version < 6.3)) ? sonarClient : sonar6Client;
     }
 }
diff --git a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java
index 40ce82a..0424447 100644
--- a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java
+++ b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java
@@ -17,6 +17,6 @@
     }
 
     public SonarClient getSonarClient(Double version) {
-        return ((version == null) || (version < 6.0)) ? sonarClient : sonar6Client;
+        return ((version == null) || (version < 6.3)) ? sonarClient : sonar6Client;
     }
 }
diff --git a/src/main/java/j2html/tags/ContainerTag.java b/src/main/java/j2html/tags/ContainerTag.java
index 64be8b2..8d13b9a 100644
--- a/src/main/java/j2html/tags/ContainerTag.java
+++ b/src/main/java/j2html/tags/ContainerTag.java
@@ -22,7 +22,7 @@
      */
     public ContainerTag with(DomContent child) {
         if (this == child) {
-            throw new Error("Cannot append a tag to itself.");
+            throw new RuntimeException("Cannot append a tag to itself.");
         }
         children.add(child);
         return this;
diff --git a/src/main/java/j2html/tags/ContainerTag.java b/src/main/java/j2html/tags/ContainerTag.java
index 64be8b2..8d13b9a 100644
--- a/src/main/java/j2html/tags/ContainerTag.java
+++ b/src/main/java/j2html/tags/ContainerTag.java
@@ -22,7 +22,7 @@
      */
     public ContainerTag with(DomContent child) {
         if (this == child) {
-            throw new Error("Cannot append a tag to itself.");
+            throw new RuntimeException("Cannot append a tag to itself.");
         }
         children.add(child);
         return this;
diff --git a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java
index 207aa45..604a0ea 100644
--- a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java
+++ b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java
@@ -291,7 +291,7 @@
         // Events - there can be multiple so check them all
         if(event.contains(Returned) && 
                 ((Returned.getIntId()& eventMask) == Returned.getIntId())) {
-            fireChangeEvent(new EscrowedEvent(evt));
+            fireChangeEvent(new ReturnedEvent(evt));
         }
         if(event.contains(Cheated) && 
                 ((Cheated.getIntId()& eventMask) == Cheated.getIntId())) {
diff --git a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java
index 207aa45..604a0ea 100644
--- a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java
+++ b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java
@@ -291,7 +291,7 @@
         // Events - there can be multiple so check them all
         if(event.contains(Returned) && 
                 ((Returned.getIntId()& eventMask) == Returned.getIntId())) {
-            fireChangeEvent(new EscrowedEvent(evt));
+            fireChangeEvent(new ReturnedEvent(evt));
         }
         if(event.contains(Cheated) && 
                 ((Cheated.getIntId()& eventMask) == Cheated.getIntId())) {
diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java
index a68ef54..05fbe1d 100644
--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java
+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java
@@ -76,7 +76,7 @@
 
         Collection<String[]> data = new ArrayList<String[]>();
         for (File file : files) {
-            if (ArrayUtils.contains(ignoredCases, file.getName().replace(".jade", ""))) {
+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(".jade", ""))) {
                 data.add(new String[]{file.getName()});
             }
 
diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java
index a68ef54..05fbe1d 100644
--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java
+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java
@@ -76,7 +76,7 @@
 
         Collection<String[]> data = new ArrayList<String[]>();
         for (File file : files) {
-            if (ArrayUtils.contains(ignoredCases, file.getName().replace(".jade", ""))) {
+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(".jade", ""))) {
                 data.add(new String[]{file.getName()});
             }
 
diff --git a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java
index c62623c..e1acf68 100644
--- a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java
+++ b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java
@@ -68,7 +68,7 @@
 			executeElseNode(model, writer, template);
 			return;
 		}
-		for (String key : keys) {
+		for (Object key : keys) {
 			model.put(getValue(), result.get(key));
 			model.put(getKey(), key);
 			getBlock().execute(writer, model, template);
diff --git a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java
index c62623c..e1acf68 100644
--- a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java
+++ b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java
@@ -68,7 +68,7 @@
 			executeElseNode(model, writer, template);
 			return;
 		}
-		for (String key : keys) {
+		for (Object key : keys) {
 			model.put(getValue(), result.get(key));
 			model.put(getKey(), key);
 			getBlock().execute(writer, model, template);
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 96b565f..bb8e892 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -163,7 +163,7 @@
       String text;
       if (body instanceof PipelessText) {
         this.advance();
-        text = StringUtils.join("\n",body.getValues());
+        text = StringUtils.join(body.getValues(),"\n");
       } else {
         text = "";
       }
diff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java
index 9530696..b2b20ed 100644
--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java
+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java
@@ -173,7 +173,7 @@
         LinkedHashMap<String,String> finalAttributes = new LinkedHashMap<String,String>();
         finalAttributes.putAll(newAttributes);
         if(!classes.isEmpty()){
-            finalAttributes.put("class",StringUtils.join(" ",classes));
+            finalAttributes.put("class", StringUtils.join(classes," "));
         }
         return finalAttributes;
     }
diff --git a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java
index 9cc2aad..684d520 100644
--- a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java
+++ b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java
@@ -40,7 +40,7 @@
 				values.add(node.getValue());
 		}
 
-		String result = StringUtils.join("\n", values);
+		String result = StringUtils.join(values, "\n");
 		if (filter != null) {
             result = filter.convert(result, attributes, model);
 		}
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 96b565f..bb8e892 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -163,7 +163,7 @@
       String text;
       if (body instanceof PipelessText) {
         this.advance();
-        text = StringUtils.join("\n",body.getValues());
+        text = StringUtils.join(body.getValues(),"\n");
       } else {
         text = "";
       }
diff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java
index 9530696..b2b20ed 100644
--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java
+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java
@@ -173,7 +173,7 @@
         LinkedHashMap<String,String> finalAttributes = new LinkedHashMap<String,String>();
         finalAttributes.putAll(newAttributes);
         if(!classes.isEmpty()){
-            finalAttributes.put("class",StringUtils.join(" ",classes));
+            finalAttributes.put("class", StringUtils.join(classes," "));
         }
         return finalAttributes;
     }
diff --git a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java
index 9cc2aad..684d520 100644
--- a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java
+++ b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java
@@ -40,7 +40,7 @@
 				values.add(node.getValue());
 		}
 
-		String result = StringUtils.join("\n", values);
+		String result = StringUtils.join(values, "\n");
 		if (filter != null) {
             result = filter.convert(result, attributes, model);
 		}
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java
index 7586bf6..356036c 100644
--- a/src/main/java/de/neuland/jade4j/parser/Parser.java
+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java
@@ -629,10 +629,10 @@
     private Node[] parseInlineTagsInText(String str) {
         int line = this.line();
         Matcher matcher = Pattern.compile("(\\\\)?#\\[((?:.|\\n)*)$").matcher(str);
-        if (matcher.matches()) {
+        if (matcher.find(0) && matcher.groupCount()>1) {
             if (matcher.group(1) != null) { // escape
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()) + "#[");//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()) + "#[");//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] rest = this.parseInlineTagsInText(matcher.group(2));
                 if (rest[0] instanceof TextNode) {
@@ -643,7 +643,7 @@
                 return ArrayUtils.addAll(textNodes, rest);
             } else {
                 TextNode text = new TextNode();
-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct
+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct
                 text.setLineNumber(line);
                 Node[] textNodes = {text};
                 Node[] buffer = textNodes;
diff --git a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java
index ce1d66d..2242365 100644
--- a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java
+++ b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java
@@ -445,7 +445,7 @@
             assertEquals(testName, expected.trim(), html.trim());
         } catch (JadeCompilerException e) {
             e.printStackTrace();
-            fail();
+            fail(e.getMessage());
         }
     }
 
diff --git a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java
index ce1d66d..2242365 100644
--- a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java
+++ b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java
@@ -445,7 +445,7 @@
             assertEquals(testName, expected.trim(), html.trim());
         } catch (JadeCompilerException e) {
             e.printStackTrace();
-            fail();
+            fail(e.getMessage());
         }
     }
 
diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java
index d1fd864..d299b92 100644
--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java
+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java
@@ -27,9 +27,9 @@
     return "AppID: " + RegistryUtils.getMicroservice().getAppId()
         + "\n" + "ServiceName: " + RegistryUtils.getMicroservice().getServiceName()
         + "\n" + "Version: " + RegistryUtils.getMicroservice().getVersion()
-        + "\n" + "Environment: " + RegistryUtils.getMicroserviceInstance().getEnvironment()
+        + "\n" + "Environment: " + RegistryUtils.getMicroservice().getEnvironment()
         + "\n" + "ServiceID: " + RegistryUtils.getMicroserviceInstance().getServiceId()
-        + "\n" + "InstanceID; " + RegistryUtils.getMicroserviceInstance().getInstanceId();
+        + "\n" + "Instance ID: " + RegistryUtils.getMicroserviceInstance().getInstanceId();
   }
 
   @Override
diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java
index d1fd864..d299b92 100644
--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java
+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java
@@ -27,9 +27,9 @@
     return "AppID: " + RegistryUtils.getMicroservice().getAppId()
         + "\n" + "ServiceName: " + RegistryUtils.getMicroservice().getServiceName()
         + "\n" + "Version: " + RegistryUtils.getMicroservice().getVersion()
-        + "\n" + "Environment: " + RegistryUtils.getMicroserviceInstance().getEnvironment()
+        + "\n" + "Environment: " + RegistryUtils.getMicroservice().getEnvironment()
         + "\n" + "ServiceID: " + RegistryUtils.getMicroserviceInstance().getServiceId()
-        + "\n" + "InstanceID; " + RegistryUtils.getMicroserviceInstance().getInstanceId();
+        + "\n" + "Instance ID: " + RegistryUtils.getMicroserviceInstance().getInstanceId();
   }
 
   @Override
diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
index e3d08d1..b76d47c 100644
--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
@@ -436,7 +436,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -445,7 +445,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9090", server.getEndpoint().getEndpoint());
@@ -574,7 +574,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -583,7 +583,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7090", server.getEndpoint().getEndpoint());
diff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java
index 0656dad..adbbe7d 100644
--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java
+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java
@@ -49,10 +49,10 @@
 
   // 将一系列body parameter包装成一个class
   public static Class<?> getOrCreateBodyClass(OperationGenerator operationGenerator,
-      List<BodyParameter> bodyParameters, String bodyParamName) {
+      List<BodyParameter> bodyParameters) {
     SwaggerGenerator swaggerGenerator = operationGenerator.getSwaggerGenerator();
     Method method = operationGenerator.getProviderMethod();
-    String clsName = swaggerGenerator.ensureGetPackageName() + "." + bodyParamName;
+    String clsName = swaggerGenerator.ensureGetPackageName() + "." + ParamUtils.generateBodyParameterName(method);
     Class<?> cls = getClassByName(swaggerGenerator.getClassLoader(), clsName);
     if (cls != null) {
       return cls;
diff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java
index 2eadf0c..eb8ecc8 100644
--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java
+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java
@@ -130,7 +130,7 @@
 
     // 将这些body包装为一个class，整体做为一个body参数
     String bodyParamName = ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());
-    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);
+    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);
     BodyParameter bodyParameter =
         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);
     swaggerParameters.add(bodyParameter);
diff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java
index 320466b..a1c0ea2 100644
--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java
+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java
@@ -75,7 +75,7 @@
     SwaggerGenerator generator = UnitTestSwaggerUtils.generateSwagger(Impl.class);
     OperationGenerator operationGenerator = generator.getOperationGeneratorMap().get("getUser");
 
-    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, null, "getUserBody");
+    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, null);
     Assert.assertEquals("gen.swagger.getUserBody", cls.getName());
     Assert.assertEquals("java.util.List<java.lang.String>", cls.getField("p1").getGenericType().getTypeName());
     Assert.assertEquals("java.util.List<org.apache.servicecomb.foundation.test.scaffolding.model.User>",
diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
index e3d08d1..b76d47c 100644
--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
@@ -436,7 +436,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -445,7 +445,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9090", server.getEndpoint().getEndpoint());
@@ -574,7 +574,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -583,7 +583,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7090", server.getEndpoint().getEndpoint());
diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
index e3d08d1..b76d47c 100644
--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
@@ -436,7 +436,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -445,7 +445,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9090", server.getEndpoint().getEndpoint());
@@ -574,7 +574,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -583,7 +583,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7090", server.getEndpoint().getEndpoint());
diff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java
index 0656dad..adbbe7d 100644
--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java
+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java
@@ -49,10 +49,10 @@
 
   // 将一系列body parameter包装成一个class
   public static Class<?> getOrCreateBodyClass(OperationGenerator operationGenerator,
-      List<BodyParameter> bodyParameters, String bodyParamName) {
+      List<BodyParameter> bodyParameters) {
     SwaggerGenerator swaggerGenerator = operationGenerator.getSwaggerGenerator();
     Method method = operationGenerator.getProviderMethod();
-    String clsName = swaggerGenerator.ensureGetPackageName() + "." + bodyParamName;
+    String clsName = swaggerGenerator.ensureGetPackageName() + "." + ParamUtils.generateBodyParameterName(method);
     Class<?> cls = getClassByName(swaggerGenerator.getClassLoader(), clsName);
     if (cls != null) {
       return cls;
diff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java
index 2eadf0c..eb8ecc8 100644
--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java
+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java
@@ -130,7 +130,7 @@
 
     // 将这些body包装为一个class，整体做为一个body参数
     String bodyParamName = ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());
-    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);
+    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);
     BodyParameter bodyParameter =
         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);
     swaggerParameters.add(bodyParameter);
diff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java
index 320466b..a1c0ea2 100644
--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java
+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java
@@ -75,7 +75,7 @@
     SwaggerGenerator generator = UnitTestSwaggerUtils.generateSwagger(Impl.class);
     OperationGenerator operationGenerator = generator.getOperationGeneratorMap().get("getUser");
 
-    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, null, "getUserBody");
+    Class<?> cls = ClassUtils.getOrCreateBodyClass(operationGenerator, null);
     Assert.assertEquals("gen.swagger.getUserBody", cls.getName());
     Assert.assertEquals("java.util.List<java.lang.String>", cls.getField("p1").getGenericType().getTypeName());
     Assert.assertEquals("java.util.List<org.apache.servicecomb.foundation.test.scaffolding.model.User>",
diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
index e3d08d1..b76d47c 100644
--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java
@@ -436,7 +436,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -445,7 +445,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:9090", server.getEndpoint().getEndpoint());
@@ -574,7 +574,7 @@
 
     //if errorThresholdPercentage greater than 0, it will activate.
     ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.errorThresholdPercentage", "20");
-    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "10");
+    ArchaiusUtils.setProperty("servicecomb.loadbalance.isolation.minIsolationTime", "30");
     ServiceCombServer server2 = server;
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
@@ -583,7 +583,7 @@
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7091", server.getEndpoint().getEndpoint());
-    TimeUnit.MILLISECONDS.sleep(20);
+    TimeUnit.MILLISECONDS.sleep(30);
     loadBalancer = handler.getOrCreateLoadBalancer(invocation);
     server = loadBalancer.chooseServer(invocation);
     Assert.assertEquals("rest://localhost:7090", server.getEndpoint().getEndpoint());
diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java
index 0d4e003..10dfed3 100644
--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java
+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java
@@ -121,6 +121,6 @@
     }
     long taken = System.currentTimeMillis() - begin;
     System.out.println("taken " + taken);
-    Assert.assertEquals("actually taken: " + taken, taken < 200 * 2, true); // 5 * times make slow machine happy
+    Assert.assertEquals("actually taken: " + taken, taken < 200 * 5, true); // 5 * times make slow machine happy
   }
 }
diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java
index 0d4e003..10dfed3 100644
--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java
+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java
@@ -121,6 +121,6 @@
     }
     long taken = System.currentTimeMillis() - begin;
     System.out.println("taken " + taken);
-    Assert.assertEquals("actually taken: " + taken, taken < 200 * 2, true); // 5 * times make slow machine happy
+    Assert.assertEquals("actually taken: " + taken, taken < 200 * 5, true); // 5 * times make slow machine happy
   }
 }
diff --git a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java
index b67cd53..7eb6f43 100644
--- a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java
+++ b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java
@@ -68,7 +68,7 @@
 
     assertThat(result, is("Hello Message slow"));
     assertThat(elapsedTime,
-        is(both(greaterThan(5000L)).and(lessThan(6000L))));
+        is(both(greaterThan(4000L)).and(lessThan(7000L))));
   }
 
   @Test
diff --git a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java
index b67cd53..7eb6f43 100644
--- a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java
+++ b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java
@@ -68,7 +68,7 @@
 
     assertThat(result, is("Hello Message slow"));
     assertThat(elapsedTime,
-        is(both(greaterThan(5000L)).and(lessThan(6000L))));
+        is(both(greaterThan(4000L)).and(lessThan(7000L))));
   }
 
   @Test
diff --git a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java
index 4014307..8bc147b 100644
--- a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java
+++ b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java
@@ -31,7 +31,7 @@
   private AtomicLong requestCount = new AtomicLong();
 
   // 本周期之前的请求数
-  private volatile long lastRequestCount = 0;
+  private volatile long lastRequestCount = 1;
 
   private static final int CYCLE_LENGTH = 1000;
 
diff --git a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java
index 4014307..8bc147b 100644
--- a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java
+++ b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java
@@ -31,7 +31,7 @@
   private AtomicLong requestCount = new AtomicLong();
 
   // 本周期之前的请求数
-  private volatile long lastRequestCount = 0;
+  private volatile long lastRequestCount = 1;
 
   private static final int CYCLE_LENGTH = 1000;
 
diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java
index ec9abe6..40a79d1 100644
--- a/core/src/main/java/io/servicecomb/core/Invocation.java
+++ b/core/src/main/java/io/servicecomb/core/Invocation.java
@@ -197,14 +197,14 @@
   public void triggerStartProcessingEvent() {
     this.startProcessingTime = System.nanoTime();
     EventUtils.triggerEvent(new InvocationStartProcessingEvent(
-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));
+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));
   }
 
   public void triggerFinishedEvent() {
     long finishedTime = System.nanoTime();
     EventUtils
         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),
-            this.invocationType, finishedTime, finishedTime - startProcessingTime,
+            this.invocationType, finishedTime - startProcessingTime,
             finishedTime - startTime));
   }
 }
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java
index ec9abe6..40a79d1 100644
--- a/core/src/main/java/io/servicecomb/core/Invocation.java
+++ b/core/src/main/java/io/servicecomb/core/Invocation.java
@@ -197,14 +197,14 @@
   public void triggerStartProcessingEvent() {
     this.startProcessingTime = System.nanoTime();
     EventUtils.triggerEvent(new InvocationStartProcessingEvent(
-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));
+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));
   }
 
   public void triggerFinishedEvent() {
     long finishedTime = System.nanoTime();
     EventUtils
         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),
-            this.invocationType, finishedTime, finishedTime - startProcessingTime,
+            this.invocationType, finishedTime - startProcessingTime,
             finishedTime - startTime));
   }
 }
diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java
index ec9abe6..40a79d1 100644
--- a/core/src/main/java/io/servicecomb/core/Invocation.java
+++ b/core/src/main/java/io/servicecomb/core/Invocation.java
@@ -197,14 +197,14 @@
   public void triggerStartProcessingEvent() {
     this.startProcessingTime = System.nanoTime();
     EventUtils.triggerEvent(new InvocationStartProcessingEvent(
-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));
+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));
   }
 
   public void triggerFinishedEvent() {
     long finishedTime = System.nanoTime();
     EventUtils
         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),
-            this.invocationType, finishedTime, finishedTime - startProcessingTime,
+            this.invocationType, finishedTime - startProcessingTime,
             finishedTime - startTime));
   }
 }
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java
index ec9abe6..40a79d1 100644
--- a/core/src/main/java/io/servicecomb/core/Invocation.java
+++ b/core/src/main/java/io/servicecomb/core/Invocation.java
@@ -197,14 +197,14 @@
   public void triggerStartProcessingEvent() {
     this.startProcessingTime = System.nanoTime();
     EventUtils.triggerEvent(new InvocationStartProcessingEvent(
-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));
+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));
   }
 
   public void triggerFinishedEvent() {
     long finishedTime = System.nanoTime();
     EventUtils
         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),
-            this.invocationType, finishedTime, finishedTime - startProcessingTime,
+            this.invocationType, finishedTime - startProcessingTime,
             finishedTime - startTime));
   }
 }
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
index d9a7e2b..63d2275 100644
--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java
@@ -77,33 +77,33 @@
     //fun1 is a PRODUCER invocation call twice and all is completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     EventUtils.triggerEvent(new InvocationStartedEvent("fun1", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(300)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun1", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));
 
     //fun3 is a PRODUCER invocation call uncompleted
     EventUtils.triggerEvent(new InvocationStartedEvent("fun3", InvocationType.PRODUCER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun3", InvocationType.PRODUCER,
             TimeUnit.MILLISECONDS.toNanos(500)));
 
     //fun2 is a CONSUMER invocation call once and completed
     EventUtils.triggerEvent(new InvocationStartedEvent("fun2", InvocationType.CONSUMER, System.nanoTime()));
     EventUtils.triggerEvent(
-        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        new InvocationStartProcessingEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(100)));
     EventUtils
-        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER, System.nanoTime(),
+        .triggerEvent(new InvocationFinishedEvent("fun2", InvocationType.CONSUMER,
             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));
 
     //fun4 is a invocation call only started and no processing start and finished
diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java
index 86f7844..340fdf6 100644
--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java
+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java
@@ -49,7 +49,7 @@
 
   private static Map<String, String> header = new HashMap<>();
 
-  private static RestClientRequest clientRequest = new RestClientRequestImpl(null, null) {
+  private static RestClientRequest clientRequest = new RestClientRequestImpl(null, null, null) {
     public void putHeader(String name, String value) {
       header.put(name, value);
     }
diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
index 12c9c92..922dffa 100644
--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
@@ -33,7 +33,7 @@
 
   @Test
   public void testForm() throws Exception {
-    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null);
+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);
     restClientRequest.addForm("abc", "Hello");
     restClientRequest.addForm("def", "world");
     restClientRequest.addForm("ghi", null);
@@ -58,7 +58,7 @@
         return map;
       }
     }.getMockInstance();
-    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null);
+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);
     restClientRequest.addCookie("sessionid", "abcdefghijklmnopqrstuvwxyz");
     restClientRequest.addCookie("region", "china-north");
     restClientRequest.write(Buffer.buffer("I love servicecomb"));
diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java
index 86f7844..340fdf6 100644
--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java
+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java
@@ -49,7 +49,7 @@
 
   private static Map<String, String> header = new HashMap<>();
 
-  private static RestClientRequest clientRequest = new RestClientRequestImpl(null, null) {
+  private static RestClientRequest clientRequest = new RestClientRequestImpl(null, null, null) {
     public void putHeader(String name, String value) {
       header.put(name, value);
     }
diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
index 12c9c92..922dffa 100644
--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
@@ -33,7 +33,7 @@
 
   @Test
   public void testForm() throws Exception {
-    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null);
+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);
     restClientRequest.addForm("abc", "Hello");
     restClientRequest.addForm("def", "world");
     restClientRequest.addForm("ghi", null);
@@ -58,7 +58,7 @@
         return map;
       }
     }.getMockInstance();
-    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null);
+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);
     restClientRequest.addCookie("sessionid", "abcdefghijklmnopqrstuvwxyz");
     restClientRequest.addCookie("region", "china-north");
     restClientRequest.write(Buffer.buffer("I love servicecomb"));
diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
index 12c9c92..922dffa 100644
--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java
@@ -33,7 +33,7 @@
 
   @Test
   public void testForm() throws Exception {
-    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null);
+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);
     restClientRequest.addForm("abc", "Hello");
     restClientRequest.addForm("def", "world");
     restClientRequest.addForm("ghi", null);
@@ -58,7 +58,7 @@
         return map;
       }
     }.getMockInstance();
-    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null);
+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);
     restClientRequest.addCookie("sessionid", "abcdefghijklmnopqrstuvwxyz");
     restClientRequest.addCookie("region", "china-north");
     restClientRequest.write(Buffer.buffer("I love servicecomb"));
diff --git a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java
index f2839dc..2e185d5 100644
--- a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java
+++ b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java
@@ -31,7 +31,7 @@
   }
 
   public static boolean isEnable() {
-    return DynamicPropertyFactory.getInstance().getBooleanProperty("cse.metrics.enabled", true).get();
+    return DynamicPropertyFactory.getInstance().getBooleanProperty("cse.metrics.enabled", false).get();
   }
 
   @Override
diff --git a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java
index f2839dc..2e185d5 100644
--- a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java
+++ b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java
@@ -31,7 +31,7 @@
   }
 
   public static boolean isEnable() {
-    return DynamicPropertyFactory.getInstance().getBooleanProperty("cse.metrics.enabled", true).get();
+    return DynamicPropertyFactory.getInstance().getBooleanProperty("cse.metrics.enabled", false).get();
   }
 
   @Override
diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
index 3adf785..2c623ad 100644
--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
@@ -42,7 +42,7 @@
 
 @Configuration
 @ConditionalOnProperty(value = CONFIG_TRACING_ENABLED_KEY, havingValue = "true", matchIfMissing = true)
-class SpringTracingConfiguration {
+public class SpringTracingConfiguration {
 
   @Bean
   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {
diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
index 3adf785..2c623ad 100644
--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
@@ -42,7 +42,7 @@
 
 @Configuration
 @ConditionalOnProperty(value = CONFIG_TRACING_ENABLED_KEY, havingValue = "true", matchIfMissing = true)
-class SpringTracingConfiguration {
+public class SpringTracingConfiguration {
 
   @Bean
   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {
diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
index ba2d79c..7e45194 100644
--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
@@ -176,21 +176,21 @@
     new Expectations() {
       {
         t1.getOrder();
-        result = 1;
+        result = Integer.MAX_VALUE;
         t1.canInit();
-        result = false;
+        result = true;
 
         t2.getOrder();
-        result = 2;
+        result = -1000;
         t2.canInit();
-        result = true;
+        result = false;
       }
     };
 
     TransportManager manager = new TransportManager();
     List<Transport> group = Arrays.asList(t1, t2);
 
-    Assert.assertEquals(t2, manager.chooseOneTransport(group));
+    Assert.assertEquals(t1, manager.chooseOneTransport(group));
   }
 
   @Test
diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
index ba2d79c..7e45194 100644
--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
@@ -176,21 +176,21 @@
     new Expectations() {
       {
         t1.getOrder();
-        result = 1;
+        result = Integer.MAX_VALUE;
         t1.canInit();
-        result = false;
+        result = true;
 
         t2.getOrder();
-        result = 2;
+        result = -1000;
         t2.canInit();
-        result = true;
+        result = false;
       }
     };
 
     TransportManager manager = new TransportManager();
     List<Transport> group = Arrays.asList(t1, t2);
 
-    Assert.assertEquals(t2, manager.chooseOneTransport(group));
+    Assert.assertEquals(t1, manager.chooseOneTransport(group));
   }
 
   @Test
diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
index ba2d79c..7e45194 100644
--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java
@@ -176,21 +176,21 @@
     new Expectations() {
       {
         t1.getOrder();
-        result = 1;
+        result = Integer.MAX_VALUE;
         t1.canInit();
-        result = false;
+        result = true;
 
         t2.getOrder();
-        result = 2;
+        result = -1000;
         t2.canInit();
-        result = true;
+        result = false;
       }
     };
 
     TransportManager manager = new TransportManager();
     List<Transport> group = Arrays.asList(t1, t2);
 
-    Assert.assertEquals(t2, manager.chooseOneTransport(group));
+    Assert.assertEquals(t1, manager.chooseOneTransport(group));
   }
 
   @Test
diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
index e1be958..e5f4c82 100644
--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
@@ -36,7 +36,7 @@
 import org.springframework.core.Ordered;
 
 @Configuration
-class SpringTracingConfiguration {
+public class SpringTracingConfiguration {
 
   @Bean
   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {
diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
index e1be958..e5f4c82 100644
--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java
@@ -36,7 +36,7 @@
 import org.springframework.core.Ordered;
 
 @Configuration
-class SpringTracingConfiguration {
+public class SpringTracingConfiguration {
 
   @Bean
   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java
index 54cb427..c9f1993 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java
@@ -129,7 +129,7 @@
     // in the initialization sequence.
     private Step step;
     private Authenticator authenticator;
-    private ByteBuffer authReponseToken;
+    private ByteBuffer authResponseToken;
 
     InitRequest(ChannelHandlerContext ctx) {
       super(ctx, timeoutMillis);
@@ -151,7 +151,7 @@
         case SET_KEYSPACE:
           return new Query("USE " + options.keyspace.asCql(false));
         case AUTH_RESPONSE:
-          return new AuthResponse(authReponseToken);
+          return new AuthResponse(authResponseToken);
         case REGISTER:
           return new Register(options.eventTypes);
         default:
@@ -184,7 +184,7 @@
                               endPoint, "authenticator threw an exception", error));
                     } else {
                       step = Step.AUTH_RESPONSE;
-                      authReponseToken = token;
+                      authResponseToken = token;
                       send();
                     }
                   },
@@ -202,7 +202,7 @@
                               endPoint, "authenticator threw an exception", error));
                     } else {
                       step = Step.AUTH_RESPONSE;
-                      authReponseToken = token;
+                      authResponseToken = token;
                       send();
                     }
                   },
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java
index 54cb427..c9f1993 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java
@@ -129,7 +129,7 @@
     // in the initialization sequence.
     private Step step;
     private Authenticator authenticator;
-    private ByteBuffer authReponseToken;
+    private ByteBuffer authResponseToken;
 
     InitRequest(ChannelHandlerContext ctx) {
       super(ctx, timeoutMillis);
@@ -151,7 +151,7 @@
         case SET_KEYSPACE:
           return new Query("USE " + options.keyspace.asCql(false));
         case AUTH_RESPONSE:
-          return new AuthResponse(authReponseToken);
+          return new AuthResponse(authResponseToken);
         case REGISTER:
           return new Register(options.eventTypes);
         default:
@@ -184,7 +184,7 @@
                               endPoint, "authenticator threw an exception", error));
                     } else {
                       step = Step.AUTH_RESPONSE;
-                      authReponseToken = token;
+                      authResponseToken = token;
                       send();
                     }
                   },
@@ -202,7 +202,7 @@
                               endPoint, "authenticator threw an exception", error));
                     } else {
                       step = Step.AUTH_RESPONSE;
-                      authReponseToken = token;
+                      authResponseToken = token;
                       send();
                     }
                   },
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java
index b24a12c..a3d529a 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java
@@ -51,7 +51,7 @@
       String artifactId = props.getProperty("driver.artifactId");
       String version = props.getProperty("driver.version");
       if (ByteBuf.class.getPackage().getName().contains("com.datastax.oss.driver.shaded")) {
-        version += "-shaded";
+        artifactId += "-shaded";
       }
       return new DefaultMavenCoordinates(name, groupId, artifactId, Version.parse(version));
     } catch (IOException e) {
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
index 7ee7416..5135d04 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
@@ -61,7 +61,7 @@
     if (removedNode == null) {
       // This should never happen because we already check the event in NodeStateManager, but handle
       // just in case.
-      LOG.debug("[{}] Couldn't find node {} to remove", broadcastRpcAddressToRemove);
+      LOG.debug("[{}] Couldn't find node {} to remove", logPrefix, broadcastRpcAddressToRemove);
       return new Result(oldMetadata);
     } else {
       LOG.debug("[{}] Removing node {}", logPrefix, removedNode);
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
index 7ee7416..5135d04 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
@@ -61,7 +61,7 @@
     if (removedNode == null) {
       // This should never happen because we already check the event in NodeStateManager, but handle
       // just in case.
-      LOG.debug("[{}] Couldn't find node {} to remove", broadcastRpcAddressToRemove);
+      LOG.debug("[{}] Couldn't find node {} to remove", logPrefix, broadcastRpcAddressToRemove);
       return new Result(oldMetadata);
     } else {
       LOG.debug("[{}] Removing node {}", logPrefix, removedNode);
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
index 7ee7416..5135d04 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
@@ -61,7 +61,7 @@
     if (removedNode == null) {
       // This should never happen because we already check the event in NodeStateManager, but handle
       // just in case.
-      LOG.debug("[{}] Couldn't find node {} to remove", broadcastRpcAddressToRemove);
+      LOG.debug("[{}] Couldn't find node {} to remove", logPrefix, broadcastRpcAddressToRemove);
       return new Result(oldMetadata);
     } else {
       LOG.debug("[{}] Removing node {}", logPrefix, removedNode);
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
index 7ee7416..5135d04 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java
@@ -61,7 +61,7 @@
     if (removedNode == null) {
       // This should never happen because we already check the event in NodeStateManager, but handle
       // just in case.
-      LOG.debug("[{}] Couldn't find node {} to remove", broadcastRpcAddressToRemove);
+      LOG.debug("[{}] Couldn't find node {} to remove", logPrefix, broadcastRpcAddressToRemove);
       return new Result(oldMetadata);
     } else {
       LOG.debug("[{}] Removing node {}", logPrefix, removedNode);
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
index 25454a3..3f1a7c1 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java
@@ -54,13 +54,15 @@
     ExponentialReconnectionPolicy policy = new ExponentialReconnectionPolicy(driverContext);
     ReconnectionPolicy.ReconnectionSchedule schedule = policy.newControlConnectionSchedule(false);
     // generate a number of delays and make sure they are all within the base/max values range
-    for (int i = 0; i < 128; ++i) {
-      // compute the min and max delays based on attempt count (i)
+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows
+    // past that
+    for (int i = 0; i < 54; ++i) {
+      // compute the min and max delays based on attempt count (i) and prevent long overflows
       long exponentialDelay = Math.min(baseDelay * (1L << i), maxDelay);
       // min will be 85% of the pure exponential delay (with a floor of baseDelay)
-      long minJitterDelay = Math.min(baseDelay, (exponentialDelay * 85) / 100);
+      long minJitterDelay = Math.max(baseDelay, (exponentialDelay * 85) / 100);
       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)
-      long maxJitterDelay = Math.max(maxDelay, (exponentialDelay * 115) / 100);
+      long maxJitterDelay = Math.min(maxDelay, (exponentialDelay * 115) / 100);
       long delay = schedule.nextDelay().toMillis();
       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);
     }
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java
index d4620c4..dfd616d 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java
@@ -952,7 +952,7 @@
     // This works because the event loop group is single-threaded
     Future<?> f = adminEventLoopGroup.schedule(() -> null, 5, TimeUnit.NANOSECONDS);
     try {
-      Uninterruptibles.getUninterruptibly(f, 100, TimeUnit.MILLISECONDS);
+      Uninterruptibles.getUninterruptibly(f, 250, TimeUnit.MILLISECONDS);
     } catch (ExecutionException e) {
       fail("unexpected error", e.getCause());
     } catch (TimeoutException e) {
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java
index d4620c4..dfd616d 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java
@@ -952,7 +952,7 @@
     // This works because the event loop group is single-threaded
     Future<?> f = adminEventLoopGroup.schedule(() -> null, 5, TimeUnit.NANOSECONDS);
     try {
-      Uninterruptibles.getUninterruptibly(f, 100, TimeUnit.MILLISECONDS);
+      Uninterruptibles.getUninterruptibly(f, 250, TimeUnit.MILLISECONDS);
     } catch (ExecutionException e) {
       fail("unexpected error", e.getCause());
     } catch (TimeoutException e) {
diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java
index 32ffd70..779d35b 100644
--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java
+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java
@@ -102,7 +102,7 @@
     topologyMonitor.init();
 
     // Then
-    Mockito.verify(controlConnection).init(true, false, false);
+    Mockito.verify(controlConnection).init(true, false, true);
   }
 
   @Test
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java
index 6ac1c48..0509730 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java
@@ -195,7 +195,7 @@
       try {
         row.getInt("d");
         fail("expected an error");
-      } catch (ArrayIndexOutOfBoundsException e) {
+      } catch (IllegalArgumentException e) {
         /*expected*/
       }
     }
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java
index 6ac1c48..0509730 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java
@@ -195,7 +195,7 @@
       try {
         row.getInt("d");
         fail("expected an error");
-      } catch (ArrayIndexOutOfBoundsException e) {
+      } catch (IllegalArgumentException e) {
         /*expected*/
       }
     }
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
index 3b5df66..42c754f 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
@@ -115,7 +115,7 @@
         if (!dseRequirement.min().isEmpty()) {
           Version minVersion = Version.parse(dseRequirement.min());
           if (minVersion.compareTo(dseVersion) > 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);
+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);
           }
         }
 
@@ -123,7 +123,7 @@
           Version maxVersion = Version.parse(dseRequirement.max());
 
           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) <= 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);
+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);
           }
         }
       }
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
index 3b5df66..42c754f 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
@@ -115,7 +115,7 @@
         if (!dseRequirement.min().isEmpty()) {
           Version minVersion = Version.parse(dseRequirement.min());
           if (minVersion.compareTo(dseVersion) > 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);
+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);
           }
         }
 
@@ -123,7 +123,7 @@
           Version maxVersion = Version.parse(dseRequirement.max());
 
           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) <= 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);
+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);
           }
         }
       }
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
index 3b5df66..42c754f 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
@@ -115,7 +115,7 @@
         if (!dseRequirement.min().isEmpty()) {
           Version minVersion = Version.parse(dseRequirement.min());
           if (minVersion.compareTo(dseVersion) > 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);
+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);
           }
         }
 
@@ -123,7 +123,7 @@
           Version maxVersion = Version.parse(dseRequirement.max());
 
           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) <= 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);
+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);
           }
         }
       }
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
index 3b5df66..42c754f 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
@@ -115,7 +115,7 @@
         if (!dseRequirement.min().isEmpty()) {
           Version minVersion = Version.parse(dseRequirement.min());
           if (minVersion.compareTo(dseVersion) > 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);
+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);
           }
         }
 
@@ -123,7 +123,7 @@
           Version maxVersion = Version.parse(dseRequirement.max());
 
           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) <= 0) {
-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);
+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);
           }
         }
       }
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
index 809b0c4..54783a3 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
@@ -304,7 +304,7 @@
             new LogOutputStream() {
               @Override
               protected void processLine(String line, int logLevel) {
-                logger.warn("ccmerr> {}", line);
+                logger.error("ccmerr> {}", line);
               }
             }) {
       Executor executor = new DefaultExecutor();
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
index 809b0c4..54783a3 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
@@ -304,7 +304,7 @@
             new LogOutputStream() {
               @Override
               protected void processLine(String line, int logLevel) {
-                logger.warn("ccmerr> {}", line);
+                logger.error("ccmerr> {}", line);
               }
             }) {
       Executor executor = new DefaultExecutor();
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
index 809b0c4..54783a3 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
@@ -304,7 +304,7 @@
             new LogOutputStream() {
               @Override
               protected void processLine(String line, int logLevel) {
-                logger.warn("ccmerr> {}", line);
+                logger.error("ccmerr> {}", line);
               }
             }) {
       Executor executor = new DefaultExecutor();
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
index 809b0c4..54783a3 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
@@ -304,7 +304,7 @@
             new LogOutputStream() {
               @Override
               protected void processLine(String line, int logLevel) {
-                logger.warn("ccmerr> {}", line);
+                logger.error("ccmerr> {}", line);
               }
             }) {
       Executor executor = new DefaultExecutor();
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java
index 3f97bb9..771c220 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java
@@ -96,7 +96,7 @@
 
   @Override
   public boolean isDetached() {
-    return attachmentPoint != AttachmentPoint.NONE;
+    return attachmentPoint == AttachmentPoint.NONE;
   }
 
   @Override
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java
index 3f97bb9..771c220 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java
@@ -96,7 +96,7 @@
 
   @Override
   public boolean isDetached() {
-    return attachmentPoint != AttachmentPoint.NONE;
+    return attachmentPoint == AttachmentPoint.NONE;
   }
 
   @Override
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java
index e360648..30b4d5c 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java
@@ -22,7 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
-interface ReplicationStrategy {
+public interface ReplicationStrategy {
   SetMultimap<Token, Node> computeReplicasByToken(
       Map<Token, Node> tokenToPrimary, List<Token> ring);
 }
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java
index e360648..30b4d5c 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java
@@ -22,7 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
-interface ReplicationStrategy {
+public interface ReplicationStrategy {
   SetMultimap<Token, Node> computeReplicasByToken(
       Map<Token, Node> tokenToPrimary, List<Token> ring);
 }
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java
index 4ca89b9..04fd8d0 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java
@@ -61,11 +61,11 @@
             .withConfigLoader(loader)
             .addContactPoints(simulacron.getContactPoints())
             .build()) {
-      simulacron.cluster().prime(when(query).then(noRows()).delay(2, TimeUnit.SECONDS));
+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));
 
       CqlSession session = configCluster.connect();
 
-      // Expect timeout since default timeout is .5 s
+      // Expect timeout since default timeout is 2s
       try {
         session.execute(query);
         fail("DriverTimeoutException expected");
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java
index 4ca89b9..04fd8d0 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java
@@ -61,11 +61,11 @@
             .withConfigLoader(loader)
             .addContactPoints(simulacron.getContactPoints())
             .build()) {
-      simulacron.cluster().prime(when(query).then(noRows()).delay(2, TimeUnit.SECONDS));
+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));
 
       CqlSession session = configCluster.connect();
 
-      // Expect timeout since default timeout is .5 s
+      // Expect timeout since default timeout is 2s
       try {
         session.execute(query);
         fail("DriverTimeoutException expected");
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java
index 215a4f6..4e30592 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java
@@ -78,11 +78,11 @@
     try (Cluster<CqlSession> profileCluster =
         ClusterUtils.newCluster(simulacron, "profiles.olap.request.timeout = 10s")) {
       String query = "mockquery";
-      // configure query with delay of 2 seconds.
-      simulacron.cluster().prime(when(query).then(noRows()).delay(1, TimeUnit.SECONDS));
+      // configure query with delay of 4 seconds.
+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));
       CqlSession session = profileCluster.connect();
 
-      // Execute query without profile, should timeout with default (0.5s).
+      // Execute query without profile, should timeout with default (2s).
       try {
         session.execute(query);
         fail("Should have timed out");
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java
index 215a4f6..4e30592 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java
@@ -78,11 +78,11 @@
     try (Cluster<CqlSession> profileCluster =
         ClusterUtils.newCluster(simulacron, "profiles.olap.request.timeout = 10s")) {
       String query = "mockquery";
-      // configure query with delay of 2 seconds.
-      simulacron.cluster().prime(when(query).then(noRows()).delay(1, TimeUnit.SECONDS));
+      // configure query with delay of 4 seconds.
+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));
       CqlSession session = profileCluster.connect();
 
-      // Execute query without profile, should timeout with default (0.5s).
+      // Execute query without profile, should timeout with default (2s).
       try {
         session.execute(query);
         fail("Should have timed out");
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java
index 000c33e..952f4ba 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java
@@ -101,7 +101,7 @@
                   + "to have an accessible constructor with arguments (%s, %s)",
               className,
               configPath,
-              DriverConfigProfile.class.getSimpleName(),
+              DriverContext.class.getSimpleName(),
               DriverOption.class.getSimpleName()));
     }
     try {
diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java
index 000c33e..952f4ba 100644
--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java
+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java
@@ -101,7 +101,7 @@
                   + "to have an accessible constructor with arguments (%s, %s)",
               className,
               configPath,
-              DriverConfigProfile.class.getSimpleName(),
+              DriverContext.class.getSimpleName(),
               DriverOption.class.getSimpleName()));
     }
     try {
diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java
index 71b96c8..6cbaa07 100644
--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java
+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java
@@ -128,7 +128,7 @@
                         Integer.MAX_VALUE,
                         (filePath, fileAttr) -> fileAttr.isRegularFile())
                         .forEach(path -> {
-                            getLog().info("Analyze file: " + path);
+                            getLog().debug("Analyze file: " + path);
 
                             try {
                                 analyzeFile(path, defaultDomain, entriesMap);
diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java
index 71b96c8..6cbaa07 100644
--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java
+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java
@@ -128,7 +128,7 @@
                         Integer.MAX_VALUE,
                         (filePath, fileAttr) -> fileAttr.isRegularFile())
                         .forEach(path -> {
-                            getLog().info("Analyze file: " + path);
+                            getLog().debug("Analyze file: " + path);
 
                             try {
                                 analyzeFile(path, defaultDomain, entriesMap);
diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
index 30aeb90..c5c543c 100644
--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
@@ -37,7 +37,7 @@
     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);
 
     // Calculate the answer of the challenge.
-    final String key1 = SEC_WEBSOCKET_KEY.get(request);
+    final String key1 = SEC_WEBSOCKET_KEY1.get(request);
     final String key2 = SEC_WEBSOCKET_KEY2.get(request);
     final byte[] key3 = new byte[8];
 
diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
index 30aeb90..c5c543c 100644
--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
@@ -37,7 +37,7 @@
     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);
 
     // Calculate the answer of the challenge.
-    final String key1 = SEC_WEBSOCKET_KEY.get(request);
+    final String key1 = SEC_WEBSOCKET_KEY1.get(request);
     final String key2 = SEC_WEBSOCKET_KEY2.get(request);
     final byte[] key3 = new byte[8];
 
diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
index 30aeb90..c5c543c 100644
--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
@@ -37,7 +37,7 @@
     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);
 
     // Calculate the answer of the challenge.
-    final String key1 = SEC_WEBSOCKET_KEY.get(request);
+    final String key1 = SEC_WEBSOCKET_KEY1.get(request);
     final String key2 = SEC_WEBSOCKET_KEY2.get(request);
     final byte[] key3 = new byte[8];
 
diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
index 30aeb90..c5c543c 100644
--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java
@@ -37,7 +37,7 @@
     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);
 
     // Calculate the answer of the challenge.
-    final String key1 = SEC_WEBSOCKET_KEY.get(request);
+    final String key1 = SEC_WEBSOCKET_KEY1.get(request);
     final String key2 = SEC_WEBSOCKET_KEY2.get(request);
     final byte[] key3 = new byte[8];
 
diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java
index 1ab5f9a..edb97c7 100644
--- a/src/main/java/jline/console/completer/FileNameCompleter.java
+++ b/src/main/java/jline/console/completer/FileNameCompleter.java
@@ -66,7 +66,7 @@
             translated = homeDir.getParentFile().getAbsolutePath();
         }
         else if (!(translated.startsWith(separator()))) {
-            String cwd = getUserDir().getPath();
+            String cwd = getUserDir().getAbsolutePath();
             translated = cwd + separator() + translated;
         }
 
diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java
index 1ab5f9a..edb97c7 100644
--- a/src/main/java/jline/console/completer/FileNameCompleter.java
+++ b/src/main/java/jline/console/completer/FileNameCompleter.java
@@ -66,7 +66,7 @@
             translated = homeDir.getParentFile().getAbsolutePath();
         }
         else if (!(translated.startsWith(separator()))) {
-            String cwd = getUserDir().getPath();
+            String cwd = getUserDir().getAbsolutePath();
             translated = cwd + separator() + translated;
         }
 
diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java
index 1ab5f9a..edb97c7 100644
--- a/src/main/java/jline/console/completer/FileNameCompleter.java
+++ b/src/main/java/jline/console/completer/FileNameCompleter.java
@@ -66,7 +66,7 @@
             translated = homeDir.getParentFile().getAbsolutePath();
         }
         else if (!(translated.startsWith(separator()))) {
-            String cwd = getUserDir().getPath();
+            String cwd = getUserDir().getAbsolutePath();
             translated = cwd + separator() + translated;
         }
 
diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java
index 1ab5f9a..edb97c7 100644
--- a/src/main/java/jline/console/completer/FileNameCompleter.java
+++ b/src/main/java/jline/console/completer/FileNameCompleter.java
@@ -66,7 +66,7 @@
             translated = homeDir.getParentFile().getAbsolutePath();
         }
         else if (!(translated.startsWith(separator()))) {
-            String cwd = getUserDir().getPath();
+            String cwd = getUserDir().getAbsolutePath();
             translated = cwd + separator() + translated;
         }
 
diff --git a/src/main/java/jline/ConsoleOperations.java b/src/main/java/jline/ConsoleOperations.java
index 709205e..2ee14bf 100644
--- a/src/main/java/jline/ConsoleOperations.java
+++ b/src/main/java/jline/ConsoleOperations.java
@@ -25,7 +25,7 @@
     final char CTRL_D = 4;
     final char CTRL_E = 5;
     final char CTRL_F = 6;
-    final static char DELETE = 127;
+    final static char DELETE = 8;
     final static char CTRL_K = 11;
     final static char CTRL_L = 12;
     final char CTRL_N = 14;
diff --git a/src/main/java/jline/ConsoleOperations.java b/src/main/java/jline/ConsoleOperations.java
index 709205e..2ee14bf 100644
--- a/src/main/java/jline/ConsoleOperations.java
+++ b/src/main/java/jline/ConsoleOperations.java
@@ -25,7 +25,7 @@
     final char CTRL_D = 4;
     final char CTRL_E = 5;
     final char CTRL_F = 6;
-    final static char DELETE = 127;
+    final static char DELETE = 8;
     final static char CTRL_K = 11;
     final static char CTRL_L = 12;
     final char CTRL_N = 14;
diff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java
index e0df36f..2caf8cd 100644
--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java
+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java
@@ -96,7 +96,7 @@
     @Override
     public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
 
-        FreeStyleProject project = Util.getProject(job);
+        AbstractProject project = Util.getProject(job);
         final boolean shouldFail = project == null || project.getLastBuild() == null;
 
         if(shouldFail) {
diff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java
index e0df36f..2caf8cd 100644
--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java
+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java
@@ -96,7 +96,7 @@
     @Override
     public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
 
-        FreeStyleProject project = Util.getProject(job);
+        AbstractProject project = Util.getProject(job);
         final boolean shouldFail = project == null || project.getLastBuild() == null;
 
         if(shouldFail) {
diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
index f890b4b..035e4d4 100644
--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.getEmbeddedInfo(Defs.LIB_JAR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter2.InnerConverter",
 			"com.example.Converter2",
 			"com.example.Converter3",
diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
index 8198ead..d55a5b7 100644
--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter1",
 			"com.example.Converter2",
 			"com.example.Converter2.InnerConverter",
diff --git a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java
index b7097fd..4a1ede5 100644
--- a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java
+++ b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java
@@ -48,7 +48,7 @@
 		return classNameSet;
 	}
 	
-	public static Set<String> getStringList(String...elements) {
+	public static Set<String> getStringSet(String...elements) {
 		Set<String> stringList = new LinkedHashSet<String>();
 		
 		for (String element : elements) {
diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
index f890b4b..035e4d4 100644
--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.getEmbeddedInfo(Defs.LIB_JAR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter2.InnerConverter",
 			"com.example.Converter2",
 			"com.example.Converter3",
diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
index f890b4b..035e4d4 100644
--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.getEmbeddedInfo(Defs.LIB_JAR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter2.InnerConverter",
 			"com.example.Converter2",
 			"com.example.Converter3",
diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
index 8198ead..d55a5b7 100644
--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter1",
 			"com.example.Converter2",
 			"com.example.Converter2.InnerConverter",
diff --git a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java
index b7097fd..4a1ede5 100644
--- a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java
+++ b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java
@@ -48,7 +48,7 @@
 		return classNameSet;
 	}
 	
-	public static Set<String> getStringList(String...elements) {
+	public static Set<String> getStringSet(String...elements) {
 		Set<String> stringList = new LinkedHashSet<String>();
 		
 		for (String element : elements) {
diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
index f890b4b..035e4d4 100644
--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.getEmbeddedInfo(Defs.LIB_JAR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter2.InnerConverter",
 			"com.example.Converter2",
 			"com.example.Converter3",
diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
index 8198ead..d55a5b7 100644
--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter1",
 			"com.example.Converter2",
 			"com.example.Converter2.InnerConverter",
diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
index 8198ead..d55a5b7 100644
--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java
@@ -26,7 +26,7 @@
 	@Test
 	public void test() throws ParsingException {
 		Set<String> scannedInfo = TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);
-		Set<String> expectedInfo = TestUtils.getStringList(
+		Set<String> expectedInfo = TestUtils.getStringSet(
 			"com.example.Converter1",
 			"com.example.Converter2",
 			"com.example.Converter2.InnerConverter",
diff --git a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java
index b04ffd2..cae3e59 100644
--- a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java
+++ b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java
@@ -149,7 +149,7 @@
      * <p>Gives a hint to the shrinking process as to the magnitude of the given
      * value. The shrinking process will prefer trying values of greater
      * magnitude before values of lesser magnitude. If not overridden, this
-     * implementation returns zero.</p>
+     * implementation returns "one".</p>
      *
      * <p><em>Note to generator writers:</em> Do not worry about normalizing
      * a magnitude to a positive value; the shrinking mechanism will take care
@@ -160,7 +160,7 @@
      * @return a measure of the given value's magnitude
      */
     public BigDecimal magnitude(Object value) {
-        return ZERO;
+        return ONE;
     }
 
     /**
diff --git a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java
index b04ffd2..cae3e59 100644
--- a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java
+++ b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java
@@ -149,7 +149,7 @@
      * <p>Gives a hint to the shrinking process as to the magnitude of the given
      * value. The shrinking process will prefer trying values of greater
      * magnitude before values of lesser magnitude. If not overridden, this
-     * implementation returns zero.</p>
+     * implementation returns "one".</p>
      *
      * <p><em>Note to generator writers:</em> Do not worry about normalizing
      * a magnitude to a positive value; the shrinking mechanism will take care
@@ -160,7 +160,7 @@
      * @return a measure of the given value's magnitude
      */
     public BigDecimal magnitude(Object value) {
-        return ZERO;
+        return ONE;
     }
 
     /**
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
index d0d2dbc..6ea2225 100644
--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java
@@ -43,10 +43,10 @@
 import static org.junit.experimental.results.ResultMatchers.*;
 
 public class ShrinkingTest {
-    @Test public void complete() throws Exception {
+    @Test public void complete() {
         assertThat(
             testResult(ShrinkingCompletely.class),
-            hasSingleFailureContaining(String.format("Shrunken args: [%s]", new Foo(1))));
+            hasSingleFailureContaining(String.format("With arguments: [%s]", new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -59,10 +59,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrink() throws Exception {
+    @Test public void shrinkingDoesNotShrink() {
         assertThat(
             testResult(ShrinkingNotReally.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -74,10 +74,10 @@
         }
     }
 
-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {
+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {
         assertThat(
             testResult(ShrinksAreIdentity.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -90,7 +90,7 @@
     @Test public void assumptionFailureWhileShrinking() {
         assertThat(
             testResult(FailedAssumptionDuringShrinking.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -207,7 +207,7 @@
         assertThat(
             testResult(ShrinkingMoreThanOnePropertyParameter.class),
             hasSingleFailureContaining(
-                String.format("Shrunken args: [%s, %s]", new Foo(1), new Foo(1))));
+                String.format("With arguments: [%s, %s]", new Foo(1), new Foo(1))));
     }
 
     @RunWith(JUnitQuickcheck.class)
@@ -221,10 +221,10 @@
         }
     }
 
-    @Test public void timeout() throws Exception {
+    @Test public void timeout() {
         assertThat(
             testResult(ShrinkingTimeout.class),
-            hasSingleFailureContaining("Args: ["));
+            hasSingleFailureContaining("With arguments: ["));
     }
 
     @RunWith(JUnitQuickcheck.class)
diff --git a/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java b/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java
index a2a874c..c0e9e2f 100644
--- a/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java
+++ b/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java
@@ -87,7 +87,7 @@
         JUnitCore.runClasses(ForDefaultNumberOfBooleanWrappers.class);
 
         assertEquals(ForAll.class.getMethod("sampleSize").getDefaultValue(),
-            ForDefaultNumberOfBooleans.iterations);
+            ForDefaultNumberOfBooleanWrappers.iterations);
     }
 
     @RunWith(Theories.class)
@@ -119,9 +119,9 @@
 
     @Test
     public void shouldAllowDifferentNumberOfRandomValuesOnAMarkedParameter() {
-        JUnitCore.runClasses(ForDefaultNumberOfStrings.class);
+        JUnitCore.runClasses(ForSpecifiedNumberOfStrings.class);
 
-        assertEquals(200, ForDefaultNumberOfStrings.iterations);
+        assertEquals(200, ForSpecifiedNumberOfStrings.iterations);
     }
 
     @RunWith(Theories.class)
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java
index c640599..7f92e4c 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java
@@ -154,7 +154,7 @@
         final HMACHashUtilities hmac = new HMACHashUtilities();
 
         // Prepare array for signature binary components.
-        final ArrayList<byte[]> signatureComponents = new ArrayList<byte[]>();
+        final List<byte[]> signatureComponents = new ArrayList<byte[]>();
 
         final CryptoProviderUtil keyConverter = PowerAuthConfiguration.INSTANCE.getKeyConvertor();
 
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java
index c640599..7f92e4c 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java
@@ -154,7 +154,7 @@
         final HMACHashUtilities hmac = new HMACHashUtilities();
 
         // Prepare array for signature binary components.
-        final ArrayList<byte[]> signatureComponents = new ArrayList<byte[]>();
+        final List<byte[]> signatureComponents = new ArrayList<byte[]>();
 
         final CryptoProviderUtil keyConverter = PowerAuthConfiguration.INSTANCE.getKeyConvertor();
 
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
index b97f9ee..dbf21d6 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
@@ -44,33 +44,33 @@
      * @param biometrySignatureKey Biometry factor related signature key.
      * @return List with correct keys
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             signatureKeys.add(possessionSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
@@ -85,48 +85,45 @@
     /**
      * Generate a list with signature keys for given signature type and master
      * secret
-     *
-     * @param signatureType
-     *            Requested signature type
-     * @param masterSecretKey
-     *            Master Key Secret
+     * @param signatureType Requested signature type
+     * @param masterSecretKey Master Key Secret
      * @return List with keys constructed from master secret that are needed to
      *         get requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
index df1b558..01caae2 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
@@ -44,40 +44,40 @@
      * @return List with keys constructed from master secret that are needed to get
      * requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateServerSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateServerSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateServerSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
@@ -100,7 +100,7 @@
      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.
      * @return An instance of signature key KEY_ENCRYPTED_VAULT.
      */
-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {
+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {
         return keyGenerator.deriveSecretKey(
                 masterSecretKey,
                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
index b97f9ee..dbf21d6 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
@@ -44,33 +44,33 @@
      * @param biometrySignatureKey Biometry factor related signature key.
      * @return List with correct keys
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             signatureKeys.add(possessionSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
@@ -85,48 +85,45 @@
     /**
      * Generate a list with signature keys for given signature type and master
      * secret
-     *
-     * @param signatureType
-     *            Requested signature type
-     * @param masterSecretKey
-     *            Master Key Secret
+     * @param signatureType Requested signature type
+     * @param masterSecretKey Master Key Secret
      * @return List with keys constructed from master secret that are needed to
      *         get requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
index b97f9ee..dbf21d6 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
@@ -44,33 +44,33 @@
      * @param biometrySignatureKey Biometry factor related signature key.
      * @return List with correct keys
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             signatureKeys.add(possessionSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
@@ -85,48 +85,45 @@
     /**
      * Generate a list with signature keys for given signature type and master
      * secret
-     *
-     * @param signatureType
-     *            Requested signature type
-     * @param masterSecretKey
-     *            Master Key Secret
+     * @param signatureType Requested signature type
+     * @param masterSecretKey Master Key Secret
      * @return List with keys constructed from master secret that are needed to
      *         get requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
index df1b558..01caae2 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
@@ -44,40 +44,40 @@
      * @return List with keys constructed from master secret that are needed to get
      * requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateServerSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateServerSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateServerSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
@@ -100,7 +100,7 @@
      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.
      * @return An instance of signature key KEY_ENCRYPTED_VAULT.
      */
-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {
+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {
         return keyGenerator.deriveSecretKey(
                 masterSecretKey,
                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
index b97f9ee..dbf21d6 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java
@@ -44,33 +44,33 @@
      * @param biometrySignatureKey Biometry factor related signature key.
      * @return List with correct keys
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             signatureKeys.add(possessionSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(biometrySignatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             signatureKeys.add(possessionSignatureKey);
             signatureKeys.add(knowledgeSignatureKey);
@@ -85,48 +85,45 @@
     /**
      * Generate a list with signature keys for given signature type and master
      * secret
-     *
-     * @param signatureType
-     *            Requested signature type
-     * @param masterSecretKey
-     *            Master Key Secret
+     * @param signatureType Requested signature type
+     * @param masterSecretKey Master Key Secret
      * @return List with keys constructed from master secret that are needed to
      *         get requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateClientSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateClientSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
index df1b558..01caae2 100644
--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java
@@ -44,40 +44,40 @@
      * @return List with keys constructed from master secret that are needed to get
      * requested signature type.
      */
-    public List<SecretKey> keysForSignatureType(String signatureType, SecretKey masterSecretKey) {
+    public List<SecretKey> keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {
 
         List<SecretKey> signatureKeys = new ArrayList<>();
 
-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {
+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {
 
             SecretKey signatureKey = generateServerSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateServerSignatureKnowledgeKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
             signatureKey = generateServerSignatureBiometryKey(masterSecretKey);
             signatureKeys.add(signatureKey);
 
-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {
+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {
 
             SecretKey signatureKey = generateServerSignaturePossessionKey(masterSecretKey);
             signatureKeys.add(signatureKey);
@@ -100,7 +100,7 @@
      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.
      * @return An instance of signature key KEY_ENCRYPTED_VAULT.
      */
-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {
+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {
         return keyGenerator.deriveSecretKey(
                 masterSecretKey,
                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()
diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java
index 27a34bb..6c90655 100644
--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java
+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java
@@ -81,7 +81,7 @@
 	 * @return Master public key.
 	 */
 	public static PublicKey getMasterKey(JSONObject clientConfigObject) {
-		if (clientConfigObject.get("masterPublicKey") != null) {
+		if (clientConfigObject != null && clientConfigObject.get("masterPublicKey") != null) {
 			try {
 				byte[] masterKeyBytes = BaseEncoding.base64().decode((String) clientConfigObject.get("masterPublicKey"));
 				return PowerAuthConfiguration.INSTANCE.getKeyConvertor().convertBytesToPublicKey(masterKeyBytes);
diff --git a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java
index 043efb2..a6d564e 100644
--- a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java
+++ b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java
@@ -73,7 +73,7 @@
 	public static Map<String, String> parsePowerAuthSignatureHTTPHeader(String xPowerAuthSignatureHeader) {
 		xPowerAuthSignatureHeader = xPowerAuthSignatureHeader.trim();
 		if (!xPowerAuthSignatureHeader.startsWith(POWERAUTH_PREFIX)) {
-			return null;
+			return new HashMap<>(); // invalid map with empty values works better than null here 
 		}
 		xPowerAuthSignatureHeader = xPowerAuthSignatureHeader.substring(POWERAUTH_PREFIX.length()).trim();
 		
diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java
index 27a34bb..6c90655 100644
--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java
+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java
@@ -81,7 +81,7 @@
 	 * @return Master public key.
 	 */
 	public static PublicKey getMasterKey(JSONObject clientConfigObject) {
-		if (clientConfigObject.get("masterPublicKey") != null) {
+		if (clientConfigObject != null && clientConfigObject.get("masterPublicKey") != null) {
 			try {
 				byte[] masterKeyBytes = BaseEncoding.base64().decode((String) clientConfigObject.get("masterPublicKey"));
 				return PowerAuthConfiguration.INSTANCE.getKeyConvertor().convertBytesToPublicKey(masterKeyBytes);
diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java
index ea127a9..22611da 100644
--- a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java
+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java
@@ -43,7 +43,7 @@
         super();
         this.code = code;
         this.message = message;
-        this.message = localizedMessage;
+        this.localizedMessage = localizedMessage;
     }
 
     /**
diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java
index ea127a9..22611da 100644
--- a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java
+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java
@@ -43,7 +43,7 @@
         super();
         this.code = code;
         this.message = message;
-        this.message = localizedMessage;
+        this.localizedMessage = localizedMessage;
     }
 
     /**
diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
index 1d695d6..0048c9d 100644
--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
@@ -109,10 +109,10 @@
            	for (int j = 0; j < i; j++) {
            		byte[] signatureKeyInner = keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));
             	byte[] derivedKeyInner = hmac.hash(signatureKeyInner, ctr);
-                derivedKey = hmac.hash(derivedKey, derivedKeyInner);
+                derivedKey = hmac.hash(derivedKeyInner, derivedKey);
             }
             	
-            byte[] signatureLong = hmac.hash(data, derivedKey);
+            byte[] signatureLong = hmac.hash(derivedKey, data);
             	
             if (signatureLong.length < 4) { // assert
                 throw new IndexOutOfBoundsException();
diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
index 1d695d6..0048c9d 100644
--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
@@ -109,10 +109,10 @@
            	for (int j = 0; j < i; j++) {
            		byte[] signatureKeyInner = keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));
             	byte[] derivedKeyInner = hmac.hash(signatureKeyInner, ctr);
-                derivedKey = hmac.hash(derivedKey, derivedKeyInner);
+                derivedKey = hmac.hash(derivedKeyInner, derivedKey);
             }
             	
-            byte[] signatureLong = hmac.hash(data, derivedKey);
+            byte[] signatureLong = hmac.hash(derivedKey, data);
             	
             if (signatureLong.length < 4) { // assert
                 throw new IndexOutOfBoundsException();
diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
index 1d695d6..0048c9d 100644
--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
@@ -109,10 +109,10 @@
            	for (int j = 0; j < i; j++) {
            		byte[] signatureKeyInner = keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));
             	byte[] derivedKeyInner = hmac.hash(signatureKeyInner, ctr);
-                derivedKey = hmac.hash(derivedKey, derivedKeyInner);
+                derivedKey = hmac.hash(derivedKeyInner, derivedKey);
             }
             	
-            byte[] signatureLong = hmac.hash(data, derivedKey);
+            byte[] signatureLong = hmac.hash(derivedKey, data);
             	
             if (signatureLong.length < 4) { // assert
                 throw new IndexOutOfBoundsException();
diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
index 1d695d6..0048c9d 100644
--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java
@@ -109,10 +109,10 @@
            	for (int j = 0; j < i; j++) {
            		byte[] signatureKeyInner = keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));
             	byte[] derivedKeyInner = hmac.hash(signatureKeyInner, ctr);
-                derivedKey = hmac.hash(derivedKey, derivedKeyInner);
+                derivedKey = hmac.hash(derivedKeyInner, derivedKey);
             }
             	
-            byte[] signatureLong = hmac.hash(data, derivedKey);
+            byte[] signatureLong = hmac.hash(derivedKey, data);
             	
             if (signatureLong.length < 4) { // assert
                 throw new IndexOutOfBoundsException();
diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java
index e9aef7c..35b0291 100644
--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java
+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java
@@ -167,7 +167,7 @@
 			// Prepare the server request
 			ActivationCreateRequest requestObject = new ActivationCreateRequest();
 			requestObject.setActivationIdShort(activationIdShort);
-			requestObject.setClientName("PowerAuth 2.0 Reference Client");
+			requestObject.setActivationName("PowerAuth 2.0 Reference Client");
 			requestObject.setActivationNonce(BaseEncoding.base64().encode(nonceDeviceBytes));
 			requestObject.setcDevicePublicKey(BaseEncoding.base64().encode(cDevicePublicKeyBytes));
 			PowerAuthAPIRequest<ActivationCreateRequest> body = new PowerAuthAPIRequest<>();
diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java
index e9aef7c..35b0291 100644
--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java
+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java
@@ -167,7 +167,7 @@
 			// Prepare the server request
 			ActivationCreateRequest requestObject = new ActivationCreateRequest();
 			requestObject.setActivationIdShort(activationIdShort);
-			requestObject.setClientName("PowerAuth 2.0 Reference Client");
+			requestObject.setActivationName("PowerAuth 2.0 Reference Client");
 			requestObject.setActivationNonce(BaseEncoding.base64().encode(nonceDeviceBytes));
 			requestObject.setcDevicePublicKey(BaseEncoding.base64().encode(cDevicePublicKeyBytes));
 			PowerAuthAPIRequest<ActivationCreateRequest> body = new PowerAuthAPIRequest<>();
diff --git a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java
index a59185a..cb06363 100644
--- a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java
+++ b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java
@@ -49,7 +49,7 @@
       Builder parallelStepBuilder = null;
       while ((line = br.readLine()) != null) {
         line = line.trim();
-        if (line.startsWith(KW_COMMENT)) {
+        if (line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)) {
           continue;
         }
 
diff --git a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java
index a59185a..cb06363 100644
--- a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java
+++ b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java
@@ -49,7 +49,7 @@
       Builder parallelStepBuilder = null;
       while ((line = br.readLine()) != null) {
         line = line.trim();
-        if (line.startsWith(KW_COMMENT)) {
+        if (line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)) {
           continue;
         }
 
diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java
index 314ae61..9870f09 100644
--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java
+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java
@@ -147,27 +147,27 @@
   private static final String SYSPROP_PRINT_STEPS = "printSteps";
 
   @Component
-  private ArtifactResolver _resolver;
+  public ArtifactResolver _resolver;
 
   @Parameter(defaultValue = "${settings}", readonly = true, required = true)
-  private Settings _settings;
+  public Settings _settings;
 
   @Parameter(readonly = true, defaultValue = "${repositorySystemSession}")
-  private RepositorySystemSession _repoSystemSession;
+  public RepositorySystemSession _repoSystemSession;
 
   @Parameter(readonly = true, defaultValue = "${project.remotePluginRepositories}")
-  private List<RemoteRepository> _pluginRepos;
+  public List<RemoteRepository> _pluginRepos;
 
   @Parameter(property = "workflow")
-  private File workflowDescriptor;
+  public File workflowDescriptor;
 
   @Parameter(defaultValue = "true", property = "enableLogTimestamps")
   @MojoProduces
   @Named("enableLogTimestamps")
-  private boolean enableLogTimestamps;
+  public boolean enableLogTimestamps;
 
   @MojoProduces
-  private MavenLogWrapper createLogWrapper() {
+  public final MavenLogWrapper createLogWrapper() {
     MavenLogWrapper log = new MavenLogWrapper(getLog());
     if (this.enableLogTimestamps) {
       log.enableLogTimestamps();
diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java
index 314ae61..9870f09 100644
--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java
+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java
@@ -147,27 +147,27 @@
   private static final String SYSPROP_PRINT_STEPS = "printSteps";
 
   @Component
-  private ArtifactResolver _resolver;
+  public ArtifactResolver _resolver;
 
   @Parameter(defaultValue = "${settings}", readonly = true, required = true)
-  private Settings _settings;
+  public Settings _settings;
 
   @Parameter(readonly = true, defaultValue = "${repositorySystemSession}")
-  private RepositorySystemSession _repoSystemSession;
+  public RepositorySystemSession _repoSystemSession;
 
   @Parameter(readonly = true, defaultValue = "${project.remotePluginRepositories}")
-  private List<RemoteRepository> _pluginRepos;
+  public List<RemoteRepository> _pluginRepos;
 
   @Parameter(property = "workflow")
-  private File workflowDescriptor;
+  public File workflowDescriptor;
 
   @Parameter(defaultValue = "true", property = "enableLogTimestamps")
   @MojoProduces
   @Named("enableLogTimestamps")
-  private boolean enableLogTimestamps;
+  public boolean enableLogTimestamps;
 
   @MojoProduces
-  private MavenLogWrapper createLogWrapper() {
+  public final MavenLogWrapper createLogWrapper() {
     MavenLogWrapper log = new MavenLogWrapper(getLog());
     if (this.enableLogTimestamps) {
       log.enableLogTimestamps();
diff --git a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java
index 60f70c9..9aeaf10 100644
--- a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java
+++ b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java
@@ -91,7 +91,7 @@
         final String incrementalSerialSuffix = session.getIncrementalSerialSuffix();
         final String suffix = session.getSuffix();
 
-        final String suff = incrementalSerialSuffix == null ? suffix : incrementalSerialSuffix;
+        final String suff = suffix != null ? suffix : incrementalSerialSuffix;
         final Pattern serialSuffixPattern = Pattern.compile( SERIAL_SUFFIX_PATTERN );
         final Matcher suffixMatcher = serialSuffixPattern.matcher( suff );
 
diff --git a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java
index 60f70c9..9aeaf10 100644
--- a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java
+++ b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java
@@ -91,7 +91,7 @@
         final String incrementalSerialSuffix = session.getIncrementalSerialSuffix();
         final String suffix = session.getSuffix();
 
-        final String suff = incrementalSerialSuffix == null ? suffix : incrementalSerialSuffix;
+        final String suff = suffix != null ? suffix : incrementalSerialSuffix;
         final Pattern serialSuffixPattern = Pattern.compile( SERIAL_SUFFIX_PATTERN );
         final Matcher suffixMatcher = serialSuffixPattern.matcher( suff );
 
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java
index cd3a97d..a0e4baa 100644
--- a/src/mltk/predictor/function/SquareCutter.java
+++ b/src/mltk/predictor/function/SquareCutter.java
@@ -74,9 +74,9 @@
 		}
 		int size2 = 0;
 		Attribute f2 = attributes.get(attIndex2);
-		if (f1.getType() == Attribute.Type.BINNED) {
+		if (f2.getType() == Attribute.Type.BINNED) {
 			size2 = ((BinnedAttribute) f2).getNumBins();
-		} else if (f1.getType() == Attribute.Type.NOMINAL) {
+		} else if (f2.getType() == Attribute.Type.NOMINAL) {
 			size2 = ((NominalAttribute) f2).getCardinality();
 		}
 		if (size1 == 1 || size2 == 1) {
diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java
index fa5674d..8630971 100644
--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java
+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java
@@ -419,7 +419,7 @@
 
                         classes.add(properName);
 
-                        if (name.startsWith(packageName)) {
+                        if (properName.startsWith(packageName) || name.startsWith(packageName)) {
                             list.add(properName);
                         }
                     }
diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java
index fa5674d..8630971 100644
--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java
+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java
@@ -419,7 +419,7 @@
 
                         classes.add(properName);
 
-                        if (name.startsWith(packageName)) {
+                        if (properName.startsWith(packageName) || name.startsWith(packageName)) {
                             list.add(properName);
                         }
                     }
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
index 5548224..7701457 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
@@ -78,9 +78,9 @@
       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);
 
   /**
-   * Represents a conencted peer.
+   * Represents a connected peer.
    */
-  public static interface ZMTPPeer {
+  public interface ZMTPPeer {
 
     /**
      * Get the ZMTP session for this peer.
@@ -96,7 +96,7 @@
   /**
    * Handles incoming messages and connection events.
    */
-  public static interface Handler {
+  public interface Handler {
 
     /**
      * A peer connected.
@@ -114,12 +114,12 @@
     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);
   }
 
-  private static interface Sender {
+  private interface Sender {
 
     ListenableFuture<Void> send(ZMTPMessage message);
   }
 
-  private static interface Receiver {
+  private interface Receiver {
 
     void receive(final ZMTPPeer peer, ZMTPMessage message);
   }
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
index 5548224..7701457 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
@@ -78,9 +78,9 @@
       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);
 
   /**
-   * Represents a conencted peer.
+   * Represents a connected peer.
    */
-  public static interface ZMTPPeer {
+  public interface ZMTPPeer {
 
     /**
      * Get the ZMTP session for this peer.
@@ -96,7 +96,7 @@
   /**
    * Handles incoming messages and connection events.
    */
-  public static interface Handler {
+  public interface Handler {
 
     /**
      * A peer connected.
@@ -114,12 +114,12 @@
     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);
   }
 
-  private static interface Sender {
+  private interface Sender {
 
     ListenableFuture<Void> send(ZMTPMessage message);
   }
 
-  private static interface Receiver {
+  private interface Receiver {
 
     void receive(final ZMTPPeer peer, ZMTPMessage message);
   }
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
index 5548224..7701457 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
@@ -78,9 +78,9 @@
       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);
 
   /**
-   * Represents a conencted peer.
+   * Represents a connected peer.
    */
-  public static interface ZMTPPeer {
+  public interface ZMTPPeer {
 
     /**
      * Get the ZMTP session for this peer.
@@ -96,7 +96,7 @@
   /**
    * Handles incoming messages and connection events.
    */
-  public static interface Handler {
+  public interface Handler {
 
     /**
      * A peer connected.
@@ -114,12 +114,12 @@
     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);
   }
 
-  private static interface Sender {
+  private interface Sender {
 
     ListenableFuture<Void> send(ZMTPMessage message);
   }
 
-  private static interface Receiver {
+  private interface Receiver {
 
     void receive(final ZMTPPeer peer, ZMTPMessage message);
   }
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
index 5548224..7701457 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java
@@ -78,9 +78,9 @@
       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);
 
   /**
-   * Represents a conencted peer.
+   * Represents a connected peer.
    */
-  public static interface ZMTPPeer {
+  public interface ZMTPPeer {
 
     /**
      * Get the ZMTP session for this peer.
@@ -96,7 +96,7 @@
   /**
    * Handles incoming messages and connection events.
    */
-  public static interface Handler {
+  public interface Handler {
 
     /**
      * A peer connected.
@@ -114,12 +114,12 @@
     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);
   }
 
-  private static interface Sender {
+  private interface Sender {
 
     ListenableFuture<Void> send(ZMTPMessage message);
   }
 
-  private static interface Receiver {
+  private interface Receiver {
 
     void receive(final ZMTPPeer peer, ZMTPMessage message);
   }
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
index 85642f0..aab3426 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
@@ -107,7 +107,7 @@
   }
 
   public String endpoint() {
-    return "tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort();
+    return "tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort();
   }
 
   @Override
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
index 85642f0..aab3426 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
@@ -107,7 +107,7 @@
   }
 
   public String endpoint() {
-    return "tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort();
+    return "tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort();
   }
 
   @Override
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
index 85642f0..aab3426 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
@@ -107,7 +107,7 @@
   }
 
   public String endpoint() {
-    return "tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort();
+    return "tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort();
   }
 
   @Override
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
index 85642f0..aab3426 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java
@@ -107,7 +107,7 @@
   }
 
   public String endpoint() {
-    return "tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort();
+    return "tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort();
   }
 
   @Override
diff --git a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java
index 8655523..298e09d 100644
--- a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java
+++ b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java
@@ -80,7 +80,7 @@
     if (frameLength > 0) {
       final ByteBuf frame = data.readSlice(frameLength);
       frame.retain();
-      part.add(new ZMTPFrame(data));
+      part.add(new ZMTPFrame(frame));
     } else if (part == tail) {
       part.add(EMPTY_FRAME);
     } else {
diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java
index 562a4c1..cfdcb6e 100644
--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java
+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java
@@ -76,7 +76,7 @@
   */
 
   public static String printBytes(byte[] buffer, int start, int length) {
-    StringBuilder sb = new StringBuilder(length - start);
+    StringBuilder sb = new StringBuilder(length);
     for (int i = start; i < start + length; i++) {
       sb.append(String.format("%%%02x", buffer[i]));
     }
@@ -84,7 +84,7 @@
   }
 
   public static String printBytes(ByteBuf buffer, int start, int length) {
-    StringBuilder sb = new StringBuilder(length - start);
+    StringBuilder sb = new StringBuilder(length);
     for (int i = start; i < start + length; i++) {
       sb.append(String.format("%%%02x", buffer.getByte(i)));
     }
diff --git a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java
index 8655523..298e09d 100644
--- a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java
+++ b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java
@@ -80,7 +80,7 @@
     if (frameLength > 0) {
       final ByteBuf frame = data.readSlice(frameLength);
       frame.retain();
-      part.add(new ZMTPFrame(data));
+      part.add(new ZMTPFrame(frame));
     } else if (part == tail) {
       part.add(EMPTY_FRAME);
     } else {
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
index 3416295..16af96a 100644
--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java
@@ -117,7 +117,7 @@
   public void testZmqDealer() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.DEALER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
     final ZMsg request = ZMsg.newStringMsg("envelope", "", "hello", "world");
     request.send(socket);
 
@@ -139,7 +139,7 @@
   public void testZmqRouter() throws Exception {
     final ZMQ.Context context = ZMQ.context(1);
     final ZMQ.Socket socket = context.socket(ZMQ.ROUTER);
-    socket.connect("tcp://" + serverAddress.getHostString() + ":" + serverAddress.getPort());
+    socket.connect("tcp://" + serverAddress.getHostName() + ":" + serverAddress.getPort());
 
     final ZMTPMessage request = new ZMTPMessage(
         asList(ZMTPFrame.create("envelope")),
diff --git a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java
index 1ac1a69..cdb6bc4 100644
--- a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java
+++ b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java
@@ -54,7 +54,7 @@
         @NotNull
         @Override
         public Thread newThread(final Runnable r) {
-          final Thread thread = new Thread();
+          final Thread thread = new Thread(r);
           thread.setDaemon(true);
           thread.setName("netty-write-buffer-flusher");
           return thread;
diff --git a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java
index 1ac1a69..cdb6bc4 100644
--- a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java
+++ b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java
@@ -54,7 +54,7 @@
         @NotNull
         @Override
         public Thread newThread(final Runnable r) {
-          final Thread thread = new Thread();
+          final Thread thread = new Thread(r);
           thread.setDaemon(true);
           thread.setName("netty-write-buffer-flusher");
           return thread;
diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
index a800a8a..5850661 100644
--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
@@ -1019,7 +1019,7 @@
                 fin = messageReader.isFinalFrame();
             }
 
-            assert textBufferReadOffset < textBufferReadOffset;
+            assert textBufferReadOffset < textBufferWriteOffset;
 
             int charsRead = Math.min(length, textBufferWriteOffset - textBufferReadOffset);
             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);
diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
index a800a8a..5850661 100644
--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
@@ -1019,7 +1019,7 @@
                 fin = messageReader.isFinalFrame();
             }
 
-            assert textBufferReadOffset < textBufferReadOffset;
+            assert textBufferReadOffset < textBufferWriteOffset;
 
             int charsRead = Math.min(length, textBufferWriteOffset - textBufferReadOffset);
             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);
diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
index a800a8a..5850661 100644
--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
@@ -1019,7 +1019,7 @@
                 fin = messageReader.isFinalFrame();
             }
 
-            assert textBufferReadOffset < textBufferReadOffset;
+            assert textBufferReadOffset < textBufferWriteOffset;
 
             int charsRead = Math.min(length, textBufferWriteOffset - textBufferReadOffset);
             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);
diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
index a800a8a..5850661 100644
--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java
@@ -1019,7 +1019,7 @@
                 fin = messageReader.isFinalFrame();
             }
 
-            assert textBufferReadOffset < textBufferReadOffset;
+            assert textBufferReadOffset < textBufferWriteOffset;
 
             int charsRead = Math.min(length, textBufferWriteOffset - textBufferReadOffset);
             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);
diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
index d59530a..4e61d0d 100644
--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
@@ -76,7 +76,7 @@
                         payloadLength = payloadLength(header);
                     }
                     break;
-                case 6:
+                case 4:
                     switch (header[1] & 0x7f) {
                     case 126:
                         payloadOffset = 0;
diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
index d59530a..4e61d0d 100644
--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
@@ -76,7 +76,7 @@
                         payloadLength = payloadLength(header);
                     }
                     break;
-                case 6:
+                case 4:
                     switch (header[1] & 0x7f) {
                     case 126:
                         payloadOffset = 0;
diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
index d59530a..4e61d0d 100644
--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
@@ -76,7 +76,7 @@
                         payloadLength = payloadLength(header);
                     }
                     break;
-                case 6:
+                case 4:
                     switch (header[1] & 0x7f) {
                     case 126:
                         payloadOffset = 0;
diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
index d59530a..4e61d0d 100644
--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java
@@ -76,7 +76,7 @@
                         payloadLength = payloadLength(header);
                     }
                     break;
-                case 6:
+                case 4:
                     switch (header[1] & 0x7f) {
                     case 126:
                         payloadOffset = 0;
diff --git a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java
index 8ccfb9b..9bc1a0d 100644
--- a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java
+++ b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java
@@ -29,7 +29,7 @@
 import org.junit.Test;
 
 /**
- * Unit test for ExtractConsensus.
+ * Unit test for ExtractExpected.
  */
 
 public final class ExtractExpectedTest {
@@ -37,6 +37,6 @@
 	
 	@Test
 	public void testConstructor() {
-	    assertNotNull(new ExtractConsensus(inputHmlFile));
+	    assertNotNull(new ExtractExpected(inputHmlFile));
 	}
 }
diff --git a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java
index 8ccfb9b..9bc1a0d 100644
--- a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java
+++ b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java
@@ -29,7 +29,7 @@
 import org.junit.Test;
 
 /**
- * Unit test for ExtractConsensus.
+ * Unit test for ExtractExpected.
  */
 
 public final class ExtractExpectedTest {
@@ -37,6 +37,6 @@
 	
 	@Test
 	public void testConstructor() {
-	    assertNotNull(new ExtractConsensus(inputHmlFile));
+	    assertNotNull(new ExtractExpected(inputHmlFile));
 	}
 }
diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
index 93ca254..3bf599c 100644
--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
@@ -275,7 +275,7 @@
         }
 
         bytes += stream.read(buffer);
-        String line = new String(buffer);
+        String line = new String(buffer, "UTF8");
         //System.out.println("bytes = " + bytes + " line = " + line);
 
         while(line.startsWith("#")) {
diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
index 93ca254..3bf599c 100644
--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
@@ -275,7 +275,7 @@
         }
 
         bytes += stream.read(buffer);
-        String line = new String(buffer);
+        String line = new String(buffer, "UTF8");
         //System.out.println("bytes = " + bytes + " line = " + line);
 
         while(line.startsWith("#")) {
diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
index 93ca254..3bf599c 100644
--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
@@ -275,7 +275,7 @@
         }
 
         bytes += stream.read(buffer);
-        String line = new String(buffer);
+        String line = new String(buffer, "UTF8");
         //System.out.println("bytes = " + bytes + " line = " + line);
 
         while(line.startsWith("#")) {
diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
index 93ca254..3bf599c 100644
--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java
@@ -275,7 +275,7 @@
         }
 
         bytes += stream.read(buffer);
-        String line = new String(buffer);
+        String line = new String(buffer, "UTF8");
         //System.out.println("bytes = " + bytes + " line = " + line);
 
         while(line.startsWith("#")) {
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 1efe840..822bd2b 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1005,7 +1005,7 @@
         final ResponseDecoder fetchResponseDecoder;
 
         private final LongSupplier requestFetches;
-        private LongSupplier responseFetches;
+        private final LongSupplier responseFetches;
         private boolean inFetch;
 
         private AbstractFetchConnection(
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 1efe840..822bd2b 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1005,7 +1005,7 @@
         final ResponseDecoder fetchResponseDecoder;
 
         private final LongSupplier requestFetches;
-        private LongSupplier responseFetches;
+        private final LongSupplier responseFetches;
         private boolean inFetch;
 
         private AbstractFetchConnection(
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index af3945e..d99623e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -57,7 +57,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
index 881bb29..360aae4 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
index 17c4af7..b709fc8 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
@@ -53,7 +53,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
index e771193..606cf0c 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
@@ -50,7 +50,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
index 0a63a8a..36df77e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
@@ -56,7 +56,7 @@
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
index 5ec5cf9..9b87ac9 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index af3945e..d99623e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -57,7 +57,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
index 881bb29..360aae4 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
index 17c4af7..b709fc8 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
@@ -53,7 +53,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
index e771193..606cf0c 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
@@ -50,7 +50,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
index 0a63a8a..36df77e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
@@ -56,7 +56,7 @@
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
index 5ec5cf9..9b87ac9 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index af3945e..d99623e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -57,7 +57,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
index 881bb29..360aae4 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
index 17c4af7..b709fc8 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
@@ -53,7 +53,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
index e771193..606cf0c 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
@@ -50,7 +50,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
index 0a63a8a..36df77e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
@@ -56,7 +56,7 @@
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
index 5ec5cf9..9b87ac9 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index af3945e..d99623e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -57,7 +57,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
index 881bb29..360aae4 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
index 17c4af7..b709fc8 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
@@ -53,7 +53,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
index e771193..606cf0c 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
@@ -50,7 +50,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
index 0a63a8a..36df77e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
@@ -56,7 +56,7 @@
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
index 5ec5cf9..9b87ac9 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
index 79ddc9b..3d325b2 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java
@@ -24,7 +24,7 @@
     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;
     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;
     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;
-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;
     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;
     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;
     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;
@@ -38,7 +38,7 @@
         KAFKA_FETCH_MAX_BYTES = config.property("fetch.max.bytes", 50 * 1024 * 1024);
         // maximum record batch size, corresponding to Kafka broker and topic configuration property "max.message.bytes"
         KAFKA_FETCH_PARTITION_MAX_BYTES = config.property("fetch.partition.max.bytes", 1 * 1024 * 1024);
-        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128 * 1024 * 1024);
+        KAFKA_MESSAGE_CACHE_CAPACITY = config.property("message.cache.capacity", 128L * 1024L * 1024L);
         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY = config.property("message.cache.block.capacity", 1024);
         KAFKA_MESSAGE_CACHE_PROACTIVE = config.property("message.cache.proactive", false);
         KAFKA_READ_IDLE_TIMEOUT = config.property("read.idle.timeout", 5000);
@@ -68,7 +68,7 @@
 
     public long messageCacheCapacity()
     {
-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);
+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);
     }
 
     public int messageCacheBlockCapacity()
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index af3945e..d99623e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -57,7 +57,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
index 881bb29..360aae4 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
index 17c4af7..b709fc8 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java
@@ -53,7 +53,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
index e771193..606cf0c 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java
@@ -50,7 +50,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
         .clean();
 
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
index 0a63a8a..36df77e 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java
@@ -56,7 +56,7 @@
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)
         .clean();
 
     private final KafkaCountersRule counters = new KafkaCountersRule(reaktor);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
index 5ec5cf9..9b87ac9 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java
@@ -52,7 +52,7 @@
         .responseBufferCapacity(1024)
         .counterValuesBufferCapacity(4096)
         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)
-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)
+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)
         .clean();
 
     @Rule
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 3fe5065..abdd205 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1325,7 +1325,7 @@
                 Iterator<NetworkTopicPartition> iterator = topic.partitions.iterator();
                 NetworkTopicPartition candidate = iterator.hasNext() ? iterator.next() : null;
                 NetworkTopicPartition next;
-                while (candidate != null)
+                while (candidate != null && nodeIdsByPartition != null)
                 {
                     next = iterator.hasNext() ? iterator.next() : null;
                     boolean isHighestOffset = next == null || next.id != candidate.id;
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 3fe5065..abdd205 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1325,7 +1325,7 @@
                 Iterator<NetworkTopicPartition> iterator = topic.partitions.iterator();
                 NetworkTopicPartition candidate = iterator.hasNext() ? iterator.next() : null;
                 NetworkTopicPartition next;
-                while (candidate != null)
+                while (candidate != null && nodeIdsByPartition != null)
                 {
                     next = iterator.hasNext() ? iterator.next() : null;
                     boolean isHighestOffset = next == null || next.id != candidate.id;
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java
index e49008a..aca8c68 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java
@@ -152,7 +152,7 @@
         long requestOffset,
         long lastOffset)
     {
-        if (requestOffset < validToOffset)
+        if (requestOffset <= validToOffset)
         {
             validToOffset = Math.max(lastOffset,  validToOffset);
         }
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java
index e49008a..aca8c68 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java
@@ -152,7 +152,7 @@
         long requestOffset,
         long lastOffset)
     {
-        if (requestOffset < validToOffset)
+        if (requestOffset <= validToOffset)
         {
             validToOffset = Math.max(lastOffset,  validToOffset);
         }
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index 6314a8a..6b8e2af 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -65,7 +65,7 @@
         k3po.start();
         k3po.awaitBarrier("ROUTED_CLIENT");
         k3po.awaitBarrier("FETCH_REQUEST_RECEIVED");
-        Thread.sleep(500); // ensure bootstrap is complete before client attaches
+        Thread.sleep(1000); // ensure bootstrap is complete before client attaches
         k3po.notifyBarrier("CONNECT_CLIENT_ONE");
         k3po.finish();
     }
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
index 6314a8a..6b8e2af 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java
@@ -65,7 +65,7 @@
         k3po.start();
         k3po.awaitBarrier("ROUTED_CLIENT");
         k3po.awaitBarrier("FETCH_REQUEST_RECEIVED");
-        Thread.sleep(500); // ensure bootstrap is complete before client attaches
+        Thread.sleep(1000); // ensure bootstrap is complete before client attaches
         k3po.notifyBarrier("CONNECT_CLIENT_ONE");
         k3po.finish();
     }
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 9a99b91..e137540 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1073,7 +1073,7 @@
                     final int recordBatchSize = recordSet.recordBatchSize();
                     networkOffset = recordSet.limit() + recordBatchSize;
 
-                    long requestedOffset = getRueqestedOffset(topicName, partitionResponse.partitionId());
+                    long requestedOffset = getRequestedOffset(topicName, partitionResponse.partitionId());
 
                     if (topic != null && requestedOffset != NO_OFFSET)
                         // we still have subscribers
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 9a99b91..e137540 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1073,7 +1073,7 @@
                     final int recordBatchSize = recordSet.recordBatchSize();
                     networkOffset = recordSet.limit() + recordBatchSize;
 
-                    long requestedOffset = getRueqestedOffset(topicName, partitionResponse.partitionId());
+                    long requestedOffset = getRequestedOffset(topicName, partitionResponse.partitionId());
 
                     if (topic != null && requestedOffset != NO_OFFSET)
                         // we still have subscribers
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 9a99b91..e137540 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1073,7 +1073,7 @@
                     final int recordBatchSize = recordSet.recordBatchSize();
                     networkOffset = recordSet.limit() + recordBatchSize;
 
-                    long requestedOffset = getRueqestedOffset(topicName, partitionResponse.partitionId());
+                    long requestedOffset = getRequestedOffset(topicName, partitionResponse.partitionId());
 
                     if (topic != null && requestedOffset != NO_OFFSET)
                         // we still have subscribers
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 9a99b91..e137540 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -1073,7 +1073,7 @@
                     final int recordBatchSize = recordSet.recordBatchSize();
                     networkOffset = recordSet.limit() + recordBatchSize;
 
-                    long requestedOffset = getRueqestedOffset(topicName, partitionResponse.partitionId());
+                    long requestedOffset = getRequestedOffset(topicName, partitionResponse.partitionId());
 
                     if (topic != null && requestedOffset != NO_OFFSET)
                         // we still have subscribers
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
index 70502d0..8ed216d 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
@@ -497,7 +497,7 @@
                 // We didn't skip any messages due to lack of window, advance to highest offset
                 endOffset = lastOffset;
             }
-            if (endOffset > startOffset)
+            if (endOffset > startOffset && requestOffset <= startOffset)
             {
                 this.fetchOffsets.put(partition, endOffset);
                 progressHandler.handle(partition, startOffset, endOffset);
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
index 70502d0..8ed216d 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
@@ -497,7 +497,7 @@
                 // We didn't skip any messages due to lack of window, advance to highest offset
                 endOffset = lastOffset;
             }
-            if (endOffset > startOffset)
+            if (endOffset > startOffset && requestOffset <= startOffset)
             {
                 this.fetchOffsets.put(partition, endOffset);
                 progressHandler.handle(partition, startOffset, endOffset);
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java
index 6ac3bad..5310ed0 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java
@@ -38,7 +38,7 @@
 
 public final class TopicMessageDispatcherTest
 {
-    private TopicMessageDispatcher dispatcher = new TopicMessageDispatcher(2);
+    private TopicMessageDispatcher dispatcher = new TopicMessageDispatcher(2, KeyMessageDispatcher::new);
 
     private final ListFW.Builder<KafkaHeaderFW.Builder, KafkaHeaderFW> headersRW =
             new ListFW.Builder<KafkaHeaderFW.Builder, KafkaHeaderFW>(new KafkaHeaderFW.Builder(), new KafkaHeaderFW());
diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java
index 6ac3bad..5310ed0 100644
--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java
+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java
@@ -38,7 +38,7 @@
 
 public final class TopicMessageDispatcherTest
 {
-    private TopicMessageDispatcher dispatcher = new TopicMessageDispatcher(2);
+    private TopicMessageDispatcher dispatcher = new TopicMessageDispatcher(2, KeyMessageDispatcher::new);
 
     private final ListFW.Builder<KafkaHeaderFW.Builder, KafkaHeaderFW> headersRW =
             new ListFW.Builder<KafkaHeaderFW.Builder, KafkaHeaderFW>(new KafkaHeaderFW.Builder(), new KafkaHeaderFW());
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
index 3fd27fd..70502d0 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
@@ -458,7 +458,7 @@
             flushPreviousMessage(partition, messageOffset - 1);
 
             if (requestOffset <= progressStartOffset // avoid out of order delivery
-                && messageOffset >= progressStartOffset
+                && messageOffset > progressStartOffset
                 && writeableBytesMinimum == 0)
             {
                 final int payloadLength = value == null ? 0 : value.capacity();
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
index 3fd27fd..70502d0 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java
@@ -458,7 +458,7 @@
             flushPreviousMessage(partition, messageOffset - 1);
 
             if (requestOffset <= progressStartOffset // avoid out of order delivery
-                && messageOffset >= progressStartOffset
+                && messageOffset > progressStartOffset
                 && writeableBytesMinimum == 0)
             {
                 final int payloadLength = value == null ? 0 : value.capacity();
diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
index 65e5164..9826bf9 100644
--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java
@@ -236,7 +236,7 @@
         // TODO: If the topic now has no partitions, remove from topicsByName and topicMetadataByName
     }
 
-    abstract class NetworkConnection
+    abstract class AbstractNetworkConnection
     {
         final MessageConsumer networkTarget;
 
@@ -259,7 +259,7 @@
         int nextRequestId;
         int nextResponseId;
 
-        private NetworkConnection()
+        private AbstractNetworkConnection()
         {
             this.networkTarget = NetworkConnectionPool.this.clientStreamFactory.router.supplyTarget(networkName);
         }
@@ -300,7 +300,7 @@
                 final long newNetworkId = NetworkConnectionPool.this.clientStreamFactory.supplyStreamId.getAsLong();
                 final long newCorrelationId = NetworkConnectionPool.this.clientStreamFactory.supplyCorrelationId.getAsLong();
 
-                NetworkConnectionPool.this.clientStreamFactory.correlations.put(newCorrelationId, NetworkConnection.this);
+                NetworkConnectionPool.this.clientStreamFactory.correlations.put(newCorrelationId, AbstractNetworkConnection.this);
 
                 NetworkConnectionPool.this.clientStreamFactory
                     .doBegin(networkTarget, newNetworkId, networkRef, newCorrelationId, extensionVisitor);
@@ -556,7 +556,7 @@
         }
     }
 
-    final class FetchConnection extends NetworkConnection
+    final class FetchConnection extends AbstractNetworkConnection
     {
         private final int brokerId;
         private final String host;
@@ -745,7 +745,7 @@
         }
     }
 
-    private final class MetadataConnection extends NetworkConnection
+    private final class MetadataConnection extends AbstractNetworkConnection
     {
         TopicMetadata pendingTopicMetadata;
 
diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
index 12fcc6b..5a40e8b 100755
--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
@@ -44,7 +44,7 @@
      * Converts a {@link Nullable} reference into a {@link NonNull} reference. Performs a strict <code>null</code> check
      * that fails in case a <code>null</code> reference is given.
      *
-     * @param <T>
+     * @param <TYPE>
      *            The type of the reference
      * @param reference
      *            A possible <code>null</code> reference.
@@ -53,7 +53,7 @@
      * @return Either the reference itself, or an {@link NullPointerException}, in case the reference was
      *         <code>null</code>.
      */
-    public static <T> @NonNull T nonNull(@Nullable final T reference, final String message) {
+    public static <TYPE> @NonNull TYPE nonNull(@Nullable final TYPE reference, final String message) {
         if (reference != null) {
             return reference;
         }
diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
index 12fcc6b..5a40e8b 100755
--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
@@ -44,7 +44,7 @@
      * Converts a {@link Nullable} reference into a {@link NonNull} reference. Performs a strict <code>null</code> check
      * that fails in case a <code>null</code> reference is given.
      *
-     * @param <T>
+     * @param <TYPE>
      *            The type of the reference
      * @param reference
      *            A possible <code>null</code> reference.
@@ -53,7 +53,7 @@
      * @return Either the reference itself, or an {@link NullPointerException}, in case the reference was
      *         <code>null</code>.
      */
-    public static <T> @NonNull T nonNull(@Nullable final T reference, final String message) {
+    public static <TYPE> @NonNull TYPE nonNull(@Nullable final TYPE reference, final String message) {
         if (reference != null) {
             return reference;
         }
diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
index 9e57f68..12fcc6b 100755
--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
@@ -58,7 +58,7 @@
             return reference;
         }
 
-        throw new NullPointerException(message); // NOPMD - we want to throw NPE here
+        throw new IllegalArgumentException(message);
     }
 
     /**
diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
index 9e57f68..12fcc6b 100755
--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java
@@ -58,7 +58,7 @@
             return reference;
         }
 
-        throw new NullPointerException(message); // NOPMD - we want to throw NPE here
+        throw new IllegalArgumentException(message);
     }
 
     /**
diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java
index 2e81f25..2666f75 100644
--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java
+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java
@@ -63,7 +63,7 @@
 	    byte[] rawHmac = mac.doFinal(json);
 
 	    // base64-encode the calculatedSignature
-	    String calculatedSignature = new BigInteger(rawHmac).toString(16);
+	    String calculatedSignature = new BigInteger(1, rawHmac).toString(16);
 	    if (! calculatedSignature.equals(attachedSignature)) {
 		throw new SignatureMismatchException("HMAC mismatch", calculatedSignature, attachedSignature);
 	    }
diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java
index 2e81f25..2666f75 100644
--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java
+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java
@@ -63,7 +63,7 @@
 	    byte[] rawHmac = mac.doFinal(json);
 
 	    // base64-encode the calculatedSignature
-	    String calculatedSignature = new BigInteger(rawHmac).toString(16);
+	    String calculatedSignature = new BigInteger(1, rawHmac).toString(16);
 	    if (! calculatedSignature.equals(attachedSignature)) {
 		throw new SignatureMismatchException("HMAC mismatch", calculatedSignature, attachedSignature);
 	    }
diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java
index edcdac5..9bcc6f5 100644
--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java
+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java
@@ -39,7 +39,7 @@
     public OnfidoHttpClient createClient() {
 	String authToken = getPropEnv("ONFIDO_AUTH_TOKEN");
 	if (authToken == null) {
-	    Logger.getLogger(getClass()).error("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
+	    Logger.getLogger(getClass()).info("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
 	    return new FakeHttpClient();
 	}
 	return createClient(authToken);
diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java
index edcdac5..9bcc6f5 100644
--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java
+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java
@@ -39,7 +39,7 @@
     public OnfidoHttpClient createClient() {
 	String authToken = getPropEnv("ONFIDO_AUTH_TOKEN");
 	if (authToken == null) {
-	    Logger.getLogger(getClass()).error("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
+	    Logger.getLogger(getClass()).info("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
 	    return new FakeHttpClient();
 	}
 	return createClient(authToken);
diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java
index edcdac5..9bcc6f5 100644
--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java
+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java
@@ -39,7 +39,7 @@
     public OnfidoHttpClient createClient() {
 	String authToken = getPropEnv("ONFIDO_AUTH_TOKEN");
 	if (authToken == null) {
-	    Logger.getLogger(getClass()).error("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
+	    Logger.getLogger(getClass()).info("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
 	    return new FakeHttpClient();
 	}
 	return createClient(authToken);
diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java
index edcdac5..9bcc6f5 100644
--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java
+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java
@@ -39,7 +39,7 @@
     public OnfidoHttpClient createClient() {
 	String authToken = getPropEnv("ONFIDO_AUTH_TOKEN");
 	if (authToken == null) {
-	    Logger.getLogger(getClass()).error("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
+	    Logger.getLogger(getClass()).info("Use environment or property 'ONFIDO_AUTH_TOKEN' to set an authToken. Going with fake client.");
 	    return new FakeHttpClient();
 	}
 	return createClient(authToken);
diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java
index 53ca0cd..9a2c8ec 100644
--- a/src/main/java/com/youcruit/onfido/api/report/Report.java
+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java
@@ -38,7 +38,7 @@
     private Map<BreakdownFieldType, BreakdownField> breakdown;
     @Expose
     @SerializedName("properties")
-    private Map<BreakdownFieldType, Object> properties;
+    private Map<PropertyFieldType, Object> properties;
 
     public ReportId getReportId() {
 	return reportId;
@@ -112,11 +112,11 @@
 	this.breakdown = breakdown;
     }
 
-    public Map<BreakdownFieldType, Object> getProperties() {
+    public Map<PropertyFieldType, Object> getProperties() {
 	return properties;
     }
 
-    public void setProperties(Map<BreakdownFieldType, Object> properties) {
+    public void setProperties(Map<PropertyFieldType, Object> properties) {
 	this.properties = properties;
     }
 }
diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java
index 53ca0cd..9a2c8ec 100644
--- a/src/main/java/com/youcruit/onfido/api/report/Report.java
+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java
@@ -38,7 +38,7 @@
     private Map<BreakdownFieldType, BreakdownField> breakdown;
     @Expose
     @SerializedName("properties")
-    private Map<BreakdownFieldType, Object> properties;
+    private Map<PropertyFieldType, Object> properties;
 
     public ReportId getReportId() {
 	return reportId;
@@ -112,11 +112,11 @@
 	this.breakdown = breakdown;
     }
 
-    public Map<BreakdownFieldType, Object> getProperties() {
+    public Map<PropertyFieldType, Object> getProperties() {
 	return properties;
     }
 
-    public void setProperties(Map<BreakdownFieldType, Object> properties) {
+    public void setProperties(Map<PropertyFieldType, Object> properties) {
 	this.properties = properties;
     }
 }
diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java
index 53ca0cd..9a2c8ec 100644
--- a/src/main/java/com/youcruit/onfido/api/report/Report.java
+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java
@@ -38,7 +38,7 @@
     private Map<BreakdownFieldType, BreakdownField> breakdown;
     @Expose
     @SerializedName("properties")
-    private Map<BreakdownFieldType, Object> properties;
+    private Map<PropertyFieldType, Object> properties;
 
     public ReportId getReportId() {
 	return reportId;
@@ -112,11 +112,11 @@
 	this.breakdown = breakdown;
     }
 
-    public Map<BreakdownFieldType, Object> getProperties() {
+    public Map<PropertyFieldType, Object> getProperties() {
 	return properties;
     }
 
-    public void setProperties(Map<BreakdownFieldType, Object> properties) {
+    public void setProperties(Map<PropertyFieldType, Object> properties) {
 	this.properties = properties;
     }
 }
diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java
index 53ca0cd..9a2c8ec 100644
--- a/src/main/java/com/youcruit/onfido/api/report/Report.java
+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java
@@ -38,7 +38,7 @@
     private Map<BreakdownFieldType, BreakdownField> breakdown;
     @Expose
     @SerializedName("properties")
-    private Map<BreakdownFieldType, Object> properties;
+    private Map<PropertyFieldType, Object> properties;
 
     public ReportId getReportId() {
 	return reportId;
@@ -112,11 +112,11 @@
 	this.breakdown = breakdown;
     }
 
-    public Map<BreakdownFieldType, Object> getProperties() {
+    public Map<PropertyFieldType, Object> getProperties() {
 	return properties;
     }
 
-    public void setProperties(Map<BreakdownFieldType, Object> properties) {
+    public void setProperties(Map<PropertyFieldType, Object> properties) {
 	this.properties = properties;
     }
 }
diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java
index 53ca0cd..9a2c8ec 100644
--- a/src/main/java/com/youcruit/onfido/api/report/Report.java
+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java
@@ -38,7 +38,7 @@
     private Map<BreakdownFieldType, BreakdownField> breakdown;
     @Expose
     @SerializedName("properties")
-    private Map<BreakdownFieldType, Object> properties;
+    private Map<PropertyFieldType, Object> properties;
 
     public ReportId getReportId() {
 	return reportId;
@@ -112,11 +112,11 @@
 	this.breakdown = breakdown;
     }
 
-    public Map<BreakdownFieldType, Object> getProperties() {
+    public Map<PropertyFieldType, Object> getProperties() {
 	return properties;
     }
 
-    public void setProperties(Map<BreakdownFieldType, Object> properties) {
+    public void setProperties(Map<PropertyFieldType, Object> properties) {
 	this.properties = properties;
     }
 }
diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java
index 53ca0cd..9a2c8ec 100644
--- a/src/main/java/com/youcruit/onfido/api/report/Report.java
+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java
@@ -38,7 +38,7 @@
     private Map<BreakdownFieldType, BreakdownField> breakdown;
     @Expose
     @SerializedName("properties")
-    private Map<BreakdownFieldType, Object> properties;
+    private Map<PropertyFieldType, Object> properties;
 
     public ReportId getReportId() {
 	return reportId;
@@ -112,11 +112,11 @@
 	this.breakdown = breakdown;
     }
 
-    public Map<BreakdownFieldType, Object> getProperties() {
+    public Map<PropertyFieldType, Object> getProperties() {
 	return properties;
     }
 
-    public void setProperties(Map<BreakdownFieldType, Object> properties) {
+    public void setProperties(Map<PropertyFieldType, Object> properties) {
 	this.properties = properties;
     }
 }
diff --git a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java
index 4385f90..82b954a 100644
--- a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java
+++ b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java
@@ -59,7 +59,7 @@
   }
 
   // Allows sharing tests between guava collections, jdk only collections and whatever other combinations are needed.
-  private <ImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI>
+  private static <ImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI>
   void assertBasicApi(Class<ImmutableClassT> immutableType, Class<AbstractClassT> returnType,
       CopyFunction<ImmutableClassT, AbstractClassT> copyFunction,
       BuilderFunction<AbstractClassT> newBuilder) {
diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
index 2b54cde..ce00a84 100644
--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
@@ -112,7 +112,7 @@
     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));
   }
 
-  private ObjectMapper getMapper(final boolean useFields) {
+  private static ObjectMapper getMapper(final boolean useFields) {
     final ObjectMapper mapper = new ObjectMapper();
     return useFields
         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)
@@ -120,7 +120,7 @@
         : mapper;
   }
 
-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
     final String json = mapper.writeValueAsString(value);
     final Object newValue = mapper.readValue(json, value.getClass());
     check(newValue).is(value);
diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
index 2b54cde..ce00a84 100644
--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
@@ -112,7 +112,7 @@
     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));
   }
 
-  private ObjectMapper getMapper(final boolean useFields) {
+  private static ObjectMapper getMapper(final boolean useFields) {
     final ObjectMapper mapper = new ObjectMapper();
     return useFields
         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)
@@ -120,7 +120,7 @@
         : mapper;
   }
 
-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
     final String json = mapper.writeValueAsString(value);
     final Object newValue = mapper.readValue(json, value.getClass());
     check(newValue).is(value);
diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
index ed8b828..5f58a54 100644
--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
@@ -93,13 +93,13 @@
     check(o1.hashCode()).is(o0.hashCode());
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
index ed8b828..5f58a54 100644
--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
@@ -93,13 +93,13 @@
     check(o1.hashCode()).is(o0.hashCode());
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
index 6d1cfde..e47c589 100644
--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
@@ -129,11 +129,11 @@
     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);
   }
 
-  private <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
+  private static <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().fromJson(json, typeToken.getType());
   }
 
-  private <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
+  private static <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().toJson(list, typeToken.getType());
   }
 }
diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
index 6d1cfde..e47c589 100644
--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
@@ -129,11 +129,11 @@
     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);
   }
 
-  private <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
+  private static <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().fromJson(json, typeToken.getType());
   }
 
-  private <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
+  private static <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().toJson(list, typeToken.getType());
   }
 }
diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
index 34293da..62ced12 100644
--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
@@ -71,13 +71,13 @@
     check(false);
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
index 34293da..62ced12 100644
--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
@@ -71,13 +71,13 @@
     check(false);
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java
index ecb044f..11069ed 100644
--- a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java
+++ b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java
@@ -34,7 +34,7 @@
     check(sortedToStringsFrom(ServiceLoader.load(AutoCloseable.class))).isOf("NestedService.Service");
   }
 
-  private TreeSet<String> sortedToStringsFrom(Iterable<?> iterable) {
+  private static TreeSet<String> sortedToStringsFrom(Iterable<?> iterable) {
     return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction()));
   }
 }
diff --git a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java
index 4385f90..82b954a 100644
--- a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java
+++ b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java
@@ -59,7 +59,7 @@
   }
 
   // Allows sharing tests between guava collections, jdk only collections and whatever other combinations are needed.
-  private <ImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI>
+  private static <ImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI>
   void assertBasicApi(Class<ImmutableClassT> immutableType, Class<AbstractClassT> returnType,
       CopyFunction<ImmutableClassT, AbstractClassT> copyFunction,
       BuilderFunction<AbstractClassT> newBuilder) {
diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
index 2b54cde..ce00a84 100644
--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
@@ -112,7 +112,7 @@
     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));
   }
 
-  private ObjectMapper getMapper(final boolean useFields) {
+  private static ObjectMapper getMapper(final boolean useFields) {
     final ObjectMapper mapper = new ObjectMapper();
     return useFields
         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)
@@ -120,7 +120,7 @@
         : mapper;
   }
 
-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
     final String json = mapper.writeValueAsString(value);
     final Object newValue = mapper.readValue(json, value.getClass());
     check(newValue).is(value);
diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
index 2b54cde..ce00a84 100644
--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java
@@ -112,7 +112,7 @@
     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));
   }
 
-  private ObjectMapper getMapper(final boolean useFields) {
+  private static ObjectMapper getMapper(final boolean useFields) {
     final ObjectMapper mapper = new ObjectMapper();
     return useFields
         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)
@@ -120,7 +120,7 @@
         : mapper;
   }
 
-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {
     final String json = mapper.writeValueAsString(value);
     final Object newValue = mapper.readValue(json, value.getClass());
     check(newValue).is(value);
diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
index ed8b828..5f58a54 100644
--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
@@ -93,13 +93,13 @@
     check(o1.hashCode()).is(o0.hashCode());
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
index ed8b828..5f58a54 100644
--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java
@@ -93,13 +93,13 @@
     check(o1.hashCode()).is(o0.hashCode());
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
index 6d1cfde..e47c589 100644
--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
@@ -129,11 +129,11 @@
     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);
   }
 
-  private <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
+  private static <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().fromJson(json, typeToken.getType());
   }
 
-  private <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
+  private static <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().toJson(list, typeToken.getType());
   }
 }
diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
index 6d1cfde..e47c589 100644
--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java
@@ -129,11 +129,11 @@
     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);
   }
 
-  private <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
+  private static <T> List<T> fromJsonIterable(String json, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().fromJson(json, typeToken.getType());
   }
 
-  private <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
+  private static <T> String toJsonIterable(List<? extends T> list, TypeToken<List<T>> typeToken) {
     return Marshaling.getGson().toJson(list, typeToken.getType());
   }
 }
diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
index 34293da..62ced12 100644
--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
@@ -71,13 +71,13 @@
     check(false);
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
index 34293da..62ced12 100644
--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java
@@ -71,13 +71,13 @@
     check(false);
   }
 
-  private Serializable deserialize(byte[] bytes) throws Exception {
+  private static Serializable deserialize(byte[] bytes) throws Exception {
     ByteArrayInputStream stream = new ByteArrayInputStream(bytes);
     ObjectInputStream objectStream = new ObjectInputStream(stream);
     return (Serializable) objectStream.readObject();
   }
 
-  private byte[] serialize(Serializable instance) throws Exception {
+  private static byte[] serialize(Serializable instance) throws Exception {
     ByteArrayOutputStream stream = new ByteArrayOutputStream();
     ObjectOutputStream objectStream = new ObjectOutputStream(stream);
     objectStream.writeObject(instance);
diff --git a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java
index ecb044f..11069ed 100644
--- a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java
+++ b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java
@@ -34,7 +34,7 @@
     check(sortedToStringsFrom(ServiceLoader.load(AutoCloseable.class))).isOf("NestedService.Service");
   }
 
-  private TreeSet<String> sortedToStringsFrom(Iterable<?> iterable) {
+  private static TreeSet<String> sortedToStringsFrom(Iterable<?> iterable) {
     return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction()));
   }
 }
diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java
index d2f7fda..8774c76 100644
--- a/value-processor/src/org/immutables/value/processor/meta/Round.java
+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java
@@ -113,7 +113,7 @@
   }
 
   private Set<Element> allAnnotatedElements() {
-    Set<Element> elements = Sets.newHashSetWithExpectedSize(100);
+    Set<Element> elements = Sets.newLinkedHashSetWithExpectedSize(100);
     for (TypeElement annotation : annotations()) {
       Set<? extends Element> annotatedElements = round().getElementsAnnotatedWith(annotation);
       checkAnnotation(annotation, annotatedElements);
diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java
index d2f7fda..8774c76 100644
--- a/value-processor/src/org/immutables/value/processor/meta/Round.java
+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java
@@ -113,7 +113,7 @@
   }
 
   private Set<Element> allAnnotatedElements() {
-    Set<Element> elements = Sets.newHashSetWithExpectedSize(100);
+    Set<Element> elements = Sets.newLinkedHashSetWithExpectedSize(100);
     for (TypeElement annotation : annotations()) {
       Set<? extends Element> annotatedElements = round().getElementsAnnotatedWith(annotation);
       checkAnnotation(annotation, annotatedElements);
diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java
index d2f7fda..8774c76 100644
--- a/value-processor/src/org/immutables/value/processor/meta/Round.java
+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java
@@ -113,7 +113,7 @@
   }
 
   private Set<Element> allAnnotatedElements() {
-    Set<Element> elements = Sets.newHashSetWithExpectedSize(100);
+    Set<Element> elements = Sets.newLinkedHashSetWithExpectedSize(100);
     for (TypeElement annotation : annotations()) {
       Set<? extends Element> annotatedElements = round().getElementsAnnotatedWith(annotation);
       checkAnnotation(annotation, annotatedElements);
diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java
index d2f7fda..8774c76 100644
--- a/value-processor/src/org/immutables/value/processor/meta/Round.java
+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java
@@ -113,7 +113,7 @@
   }
 
   private Set<Element> allAnnotatedElements() {
-    Set<Element> elements = Sets.newHashSetWithExpectedSize(100);
+    Set<Element> elements = Sets.newLinkedHashSetWithExpectedSize(100);
     for (TypeElement annotation : annotations()) {
       Set<? extends Element> annotatedElements = round().getElementsAnnotatedWith(annotation);
       checkAnnotation(annotation, annotatedElements);
diff --git a/value/src/org/immutables/value/Value.java b/value/src/org/immutables/value/Value.java
index bc53db2..06159ba 100644
--- a/value/src/org/immutables/value/Value.java
+++ b/value/src/org/immutables/value/Value.java
@@ -714,7 +714,7 @@
      * Exception to throw when an immutable object is in an invalid state. The Throwable must have
      * a constructor that takes a single string
      */
-    Class<? extends Exception> throwForInvalidImmutableState() default IllegalStateException.class;
+    Class<? extends RuntimeException> throwForInvalidImmutableState() default IllegalStateException.class;
 
     /**
      * If implementation visibility is more restrictive than visibility of abstract value type, then
diff --git a/value/src/org/immutables/value/Value.java b/value/src/org/immutables/value/Value.java
index bc53db2..06159ba 100644
--- a/value/src/org/immutables/value/Value.java
+++ b/value/src/org/immutables/value/Value.java
@@ -714,7 +714,7 @@
      * Exception to throw when an immutable object is in an invalid state. The Throwable must have
      * a constructor that takes a single string
      */
-    Class<? extends Exception> throwForInvalidImmutableState() default IllegalStateException.class;
+    Class<? extends RuntimeException> throwForInvalidImmutableState() default IllegalStateException.class;
 
     /**
      * If implementation visibility is more restrictive than visibility of abstract value type, then
diff --git a/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java b/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java
index eb44efe..b575e8a 100644
--- a/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java
+++ b/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java
@@ -9,7 +9,7 @@
 public class AdaptReadWriteTest {
 
   private final Gson gson = new GsonBuilder()
-      .registerTypeAdapterFactory(new AdaptTypeAdapters())
+      .registerTypeAdapterFactory(new GsonAdaptersAdapt())
       .create();
 
   private final Adapt adapt =
diff --git a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java
index 70b3852..90a9059 100644
--- a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java
+++ b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java
@@ -15,13 +15,13 @@
   final Gson gsonWithOptions = new GsonBuilder()
       .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
       .serializeNulls()
-      .registerTypeAdapterFactory(new SimpleTypeAdapters())
-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())
+      .registerTypeAdapterFactory(new GsonAdaptersSimple())
+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())
       .create();
 
   final Gson gsonDefault = new GsonBuilder()
-      .registerTypeAdapterFactory(new SimpleTypeAdapters())
-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())
+      .registerTypeAdapterFactory(new GsonAdaptersSimple())
+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())
       .create();
 
   @Test
diff --git a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java
index 70b3852..90a9059 100644
--- a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java
+++ b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java
@@ -15,13 +15,13 @@
   final Gson gsonWithOptions = new GsonBuilder()
       .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
       .serializeNulls()
-      .registerTypeAdapterFactory(new SimpleTypeAdapters())
-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())
+      .registerTypeAdapterFactory(new GsonAdaptersSimple())
+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())
       .create();
 
   final Gson gsonDefault = new GsonBuilder()
-      .registerTypeAdapterFactory(new SimpleTypeAdapters())
-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())
+      .registerTypeAdapterFactory(new GsonAdaptersSimple())
+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())
       .create();
 
   @Test
diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java
index 46b88ff..338496c 100644
--- a/common/src/org/immutables/common/jdbi/MapperFactory.java
+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java
@@ -72,7 +72,7 @@
       ResultSetMetaData metaData = result.getMetaData();
       for (int j = 0; j < metaData.getColumnCount(); j++) {
         int i = j + 1;
-        String name = toLowerCamel(metaData.getColumnName(i));
+        String name = toLowerCamel(metaData.getColumnLabel(i));
         switch (metaData.getColumnType(i)) {
         case Types.VARCHAR://$FALL-THROUGH$
         case Types.LONGVARCHAR://$FALL-THROUGH$
diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java
index 46b88ff..338496c 100644
--- a/common/src/org/immutables/common/jdbi/MapperFactory.java
+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java
@@ -72,7 +72,7 @@
       ResultSetMetaData metaData = result.getMetaData();
       for (int j = 0; j < metaData.getColumnCount(); j++) {
         int i = j + 1;
-        String name = toLowerCamel(metaData.getColumnName(i));
+        String name = toLowerCamel(metaData.getColumnLabel(i));
         switch (metaData.getColumnType(i)) {
         case Types.VARCHAR://$FALL-THROUGH$
         case Types.LONGVARCHAR://$FALL-THROUGH$
diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java
index 46b88ff..338496c 100644
--- a/common/src/org/immutables/common/jdbi/MapperFactory.java
+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java
@@ -72,7 +72,7 @@
       ResultSetMetaData metaData = result.getMetaData();
       for (int j = 0; j < metaData.getColumnCount(); j++) {
         int i = j + 1;
-        String name = toLowerCamel(metaData.getColumnName(i));
+        String name = toLowerCamel(metaData.getColumnLabel(i));
         switch (metaData.getColumnType(i)) {
         case Types.VARCHAR://$FALL-THROUGH$
         case Types.LONGVARCHAR://$FALL-THROUGH$
diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java
index 46b88ff..338496c 100644
--- a/common/src/org/immutables/common/jdbi/MapperFactory.java
+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java
@@ -72,7 +72,7 @@
       ResultSetMetaData metaData = result.getMetaData();
       for (int j = 0; j < metaData.getColumnCount(); j++) {
         int i = j + 1;
-        String name = toLowerCamel(metaData.getColumnName(i));
+        String name = toLowerCamel(metaData.getColumnLabel(i));
         switch (metaData.getColumnType(i)) {
         case Types.VARCHAR://$FALL-THROUGH$
         case Types.LONGVARCHAR://$FALL-THROUGH$
diff --git a/common/src/org/immutables/common/repository/Repositories.java b/common/src/org/immutables/common/repository/Repositories.java
index 1c539b3..9beb06d 100644
--- a/common/src/org/immutables/common/repository/Repositories.java
+++ b/common/src/org/immutables/common/repository/Repositories.java
@@ -249,7 +249,7 @@
           DBCursor cursor = collection.find(query, keys);
 
           if (!ordering.isNil()) {
-            cursor.sort(extractDbObject(exclusion));
+            cursor.sort(extractDbObject(ordering));
           }
 
           cursor.skip(skip);
diff --git a/common/src/org/immutables/common/repository/Repositories.java b/common/src/org/immutables/common/repository/Repositories.java
index 1c539b3..9beb06d 100644
--- a/common/src/org/immutables/common/repository/Repositories.java
+++ b/common/src/org/immutables/common/repository/Repositories.java
@@ -249,7 +249,7 @@
           DBCursor cursor = collection.find(query, keys);
 
           if (!ordering.isNil()) {
-            cursor.sort(extractDbObject(exclusion));
+            cursor.sort(extractDbObject(ordering));
           }
 
           cursor.skip(skip);
diff --git a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java
index 54a7282..01cedea 100644
--- a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java
+++ b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java
@@ -298,7 +298,7 @@
   public static TimeMeasure unmarshal(
       JsonParser parser,
       @Nullable TimeMeasure instantNull,
-      Class<TimeInstant> expectedClass) throws IOException {
+      Class<TimeMeasure> expectedClass) throws IOException {
     return TimeMeasure.fromString(parser.getText());
   }
 
diff --git a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java
index 54a7282..01cedea 100644
--- a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java
+++ b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java
@@ -298,7 +298,7 @@
   public static TimeMeasure unmarshal(
       JsonParser parser,
       @Nullable TimeMeasure instantNull,
-      Class<TimeInstant> expectedClass) throws IOException {
+      Class<TimeMeasure> expectedClass) throws IOException {
     return TimeMeasure.fromString(parser.getText());
   }
 
diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java
index 89da6fc..6031d3d 100644
--- a/src/main/java/org/jsoftbiz/utils/OS.java
+++ b/src/main/java/org/jsoftbiz/utils/OS.java
@@ -204,7 +204,7 @@
         return filename.endsWith(fileEndingWith);
       }
     });
-    if (fileList.length > 0)
+    if (fileList != null && fileList.length > 0)
       return fileList[0].getAbsolutePath();
     else
       return null;
diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java
index 89da6fc..6031d3d 100644
--- a/src/main/java/org/jsoftbiz/utils/OS.java
+++ b/src/main/java/org/jsoftbiz/utils/OS.java
@@ -204,7 +204,7 @@
         return filename.endsWith(fileEndingWith);
       }
     });
-    if (fileList.length > 0)
+    if (fileList != null && fileList.length > 0)
       return fileList[0].getAbsolutePath();
     else
       return null;
diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java
index 241cdcb..6d4b862 100644
--- a/src/main/java/org/jsoftbiz/utils/OS.java
+++ b/src/main/java/org/jsoftbiz/utils/OS.java
@@ -104,8 +104,8 @@
         return returnDarwinOsInfo(name, version, arch);
       }
 
-      // Try to detect a unix platform, now the fun begins
-      if (name.startsWith("Linux")) {
+      // Try to detect other POSIX compliant platforms, now the fun begins
+      if (name.startsWith("Linux") || name.startsWith("SunOS")) {
         return returnLinuxOsInfo(name, version, arch);
       }
     }
diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java
index 241cdcb..6d4b862 100644
--- a/src/main/java/org/jsoftbiz/utils/OS.java
+++ b/src/main/java/org/jsoftbiz/utils/OS.java
@@ -104,8 +104,8 @@
         return returnDarwinOsInfo(name, version, arch);
       }
 
-      // Try to detect a unix platform, now the fun begins
-      if (name.startsWith("Linux")) {
+      // Try to detect other POSIX compliant platforms, now the fun begins
+      if (name.startsWith("Linux") || name.startsWith("SunOS")) {
         return returnLinuxOsInfo(name, version, arch);
       }
     }
diff --git a/src/test/java/com/redfin/patience/PatientSleepTest.java b/src/test/java/com/redfin/patience/PatientSleepTest.java
index b867a86..487e7a3 100644
--- a/src/test/java/com/redfin/patience/PatientSleepTest.java
+++ b/src/test/java/com/redfin/patience/PatientSleepTest.java
@@ -60,7 +60,7 @@
         Instant start = Instant.now();
         PatientSleep.sleepFor(duration);
         Instant end = Instant.now();
-        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) > 0,
+        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) >= 0,
                               "SleepFor should sleep for the given duration");
     }
 
diff --git a/src/test/java/com/redfin/patience/PatientSleepTest.java b/src/test/java/com/redfin/patience/PatientSleepTest.java
index b867a86..487e7a3 100644
--- a/src/test/java/com/redfin/patience/PatientSleepTest.java
+++ b/src/test/java/com/redfin/patience/PatientSleepTest.java
@@ -60,7 +60,7 @@
         Instant start = Instant.now();
         PatientSleep.sleepFor(duration);
         Instant end = Instant.now();
-        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) > 0,
+        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) >= 0,
                               "SleepFor should sleep for the given duration");
     }
 
diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
index 6317d40..d0f0902 100644
--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
@@ -28,6 +28,6 @@
 	public void testSelectEmpty() throws Exception {
 		List<Statistics> stats = jdbcTemplate.query("select * from STATISTICS where rownum <= 1", new StatisticsMapper());
 		assertNotNull(stats);
-        assertEquals(stats.size(), 1);
+        assertEquals(stats.size(), 0);
 	}
 }
diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
index 6317d40..d0f0902 100644
--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
@@ -28,6 +28,6 @@
 	public void testSelectEmpty() throws Exception {
 		List<Statistics> stats = jdbcTemplate.query("select * from STATISTICS where rownum <= 1", new StatisticsMapper());
 		assertNotNull(stats);
-        assertEquals(stats.size(), 1);
+        assertEquals(stats.size(), 0);
 	}
 }
diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
index d0f0902..6317d40 100644
--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
@@ -28,6 +28,6 @@
 	public void testSelectEmpty() throws Exception {
 		List<Statistics> stats = jdbcTemplate.query("select * from STATISTICS where rownum <= 1", new StatisticsMapper());
 		assertNotNull(stats);
-        assertEquals(stats.size(), 0);
+        assertEquals(stats.size(), 1);
 	}
 }
diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
index d0f0902..6317d40 100644
--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java
@@ -28,6 +28,6 @@
 	public void testSelectEmpty() throws Exception {
 		List<Statistics> stats = jdbcTemplate.query("select * from STATISTICS where rownum <= 1", new StatisticsMapper());
 		assertNotNull(stats);
-        assertEquals(stats.size(), 0);
+        assertEquals(stats.size(), 1);
 	}
 }
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
index 2710d6b..d169842 100644
--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java
@@ -427,14 +427,14 @@
         addPlugInSingleRowFunction("fromJson", "com.ebay.jetstream.epl.EPLUtils", "fromJsonString");
 
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);
+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);
         esperService.getEPAdministrator().getConfiguration().
-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);
+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);
         if (!isMainSessionizer) {
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);
+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);
             esperService.getEPAdministrator().getConfiguration().
-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);
+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);
         }
 
 
diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
index 3121592..6091513 100644
--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
@@ -125,7 +125,7 @@
         boolean configurationAnnotationPresent = method.isAnnotationPresent(ConfigurationItem.class);
 
         if (!configurationAnnotationPresent && !updateAnnotationPresent) {
-            return method.invoke(proxy, args);
+            return method.invoke(this, args);
         }
 
         if (updateAnnotationPresent) {
diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
index 3121592..6091513 100644
--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
@@ -125,7 +125,7 @@
         boolean configurationAnnotationPresent = method.isAnnotationPresent(ConfigurationItem.class);
 
         if (!configurationAnnotationPresent && !updateAnnotationPresent) {
-            return method.invoke(proxy, args);
+            return method.invoke(this, args);
         }
 
         if (updateAnnotationPresent) {
diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
index 3121592..6091513 100644
--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
@@ -125,7 +125,7 @@
         boolean configurationAnnotationPresent = method.isAnnotationPresent(ConfigurationItem.class);
 
         if (!configurationAnnotationPresent && !updateAnnotationPresent) {
-            return method.invoke(proxy, args);
+            return method.invoke(this, args);
         }
 
         if (updateAnnotationPresent) {
diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
index 3121592..6091513 100644
--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java
@@ -125,7 +125,7 @@
         boolean configurationAnnotationPresent = method.isAnnotationPresent(ConfigurationItem.class);
 
         if (!configurationAnnotationPresent && !updateAnnotationPresent) {
-            return method.invoke(proxy, args);
+            return method.invoke(this, args);
         }
 
         if (updateAnnotationPresent) {
diff --git a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java
index a8c1d99..11bd98d 100644
--- a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java
+++ b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java
@@ -167,7 +167,7 @@
             locale = temp;
         }
         if (StringUtils.equalsIgnoreCase("experimental-features", qName)) {
-            experimentalFeatures = Boolean.valueOf(experimentalFeatures);
+            experimentalFeatures = Boolean.valueOf(temp);
         }
         if (StringUtils.equalsIgnoreCase("local-cache", qName)) {
             openLocalCacheSettings = false;
diff --git a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java
index a8c1d99..11bd98d 100644
--- a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java
+++ b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java
@@ -167,7 +167,7 @@
             locale = temp;
         }
         if (StringUtils.equalsIgnoreCase("experimental-features", qName)) {
-            experimentalFeatures = Boolean.valueOf(experimentalFeatures);
+            experimentalFeatures = Boolean.valueOf(temp);
         }
         if (StringUtils.equalsIgnoreCase("local-cache", qName)) {
             openLocalCacheSettings = false;
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
index c81cb40..d0b4197 100644
--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java
@@ -22,7 +22,7 @@
 public class ProxyFactoryTest {
 
     public static void main(String[] args) throws Exception {
-        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);
+        WelcomeConfiguration welcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);
 
         Customization cust = new Customization();
         cust.setComponentPrefix("cp-");
@@ -30,7 +30,7 @@
         cust.setComponentItemPrefix("kp-");
         cust.setComponentItemSuffix("-ks");
 
-        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);
+        WelcomeConfiguration customWelcome = ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);
 
         System.out.println(welcome.getText() + ", " + customWelcome.getText());
         System.out.println(welcome.getMap()  + ", " + customWelcome.getMap());
diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
index 81bd01b..ed082ba 100644
--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
@@ -66,7 +66,7 @@
 	{
 		ResourceBundleKey model = new ResourceBundleKey();
 		assertNotNull(model);
-		model = new ResourceBundleKey("name", "default value",
+		model = new ResourceBundleKey("default value", "name",
 			ArrayFactory.newArray("Martin", "Germany"));
 		assertNotNull(model);
 		assertEquals(model.getKey(), "name");
@@ -91,7 +91,7 @@
 
 		final ResourceBundleKey third = new ResourceBundleKey();
 		third.setKey("foo");
-		final ResourceBundleKey fourth = new ResourceBundleKey("foo", null, null);
+		final ResourceBundleKey fourth = new ResourceBundleKey(null, "foo", null);
 
 		actual = EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,
 			third, fourth);
diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
index 81bd01b..ed082ba 100644
--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
@@ -66,7 +66,7 @@
 	{
 		ResourceBundleKey model = new ResourceBundleKey();
 		assertNotNull(model);
-		model = new ResourceBundleKey("name", "default value",
+		model = new ResourceBundleKey("default value", "name",
 			ArrayFactory.newArray("Martin", "Germany"));
 		assertNotNull(model);
 		assertEquals(model.getKey(), "name");
@@ -91,7 +91,7 @@
 
 		final ResourceBundleKey third = new ResourceBundleKey();
 		third.setKey("foo");
-		final ResourceBundleKey fourth = new ResourceBundleKey("foo", null, null);
+		final ResourceBundleKey fourth = new ResourceBundleKey(null, "foo", null);
 
 		actual = EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,
 			third, fourth);
diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
index 81bd01b..ed082ba 100644
--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
@@ -66,7 +66,7 @@
 	{
 		ResourceBundleKey model = new ResourceBundleKey();
 		assertNotNull(model);
-		model = new ResourceBundleKey("name", "default value",
+		model = new ResourceBundleKey("default value", "name",
 			ArrayFactory.newArray("Martin", "Germany"));
 		assertNotNull(model);
 		assertEquals(model.getKey(), "name");
@@ -91,7 +91,7 @@
 
 		final ResourceBundleKey third = new ResourceBundleKey();
 		third.setKey("foo");
-		final ResourceBundleKey fourth = new ResourceBundleKey("foo", null, null);
+		final ResourceBundleKey fourth = new ResourceBundleKey(null, "foo", null);
 
 		actual = EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,
 			third, fourth);
diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
index 81bd01b..ed082ba 100644
--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java
@@ -66,7 +66,7 @@
 	{
 		ResourceBundleKey model = new ResourceBundleKey();
 		assertNotNull(model);
-		model = new ResourceBundleKey("name", "default value",
+		model = new ResourceBundleKey("default value", "name",
 			ArrayFactory.newArray("Martin", "Germany"));
 		assertNotNull(model);
 		assertEquals(model.getKey(), "name");
@@ -91,7 +91,7 @@
 
 		final ResourceBundleKey third = new ResourceBundleKey();
 		third.setKey("foo");
-		final ResourceBundleKey fourth = new ResourceBundleKey("foo", null, null);
+		final ResourceBundleKey fourth = new ResourceBundleKey(null, "foo", null);
 
 		actual = EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,
 			third, fourth);
diff --git a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java
index 4639253..3d648d2 100644
--- a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java
+++ b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java
@@ -440,7 +440,7 @@
         NamedProperty<QName>[] propertyArray = properties.toArray(new NamedProperty[properties.size()]);
         NamedProperties<QName> namedProperties = Datatree.NamedProperties(propertyArray);
         NamespaceBindings bindings = Datatree.NamespaceBindings(
-                (NamespaceBinding[]) document.getNamespaceBindings().toArray());
+                (NamespaceBinding[]) document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()]));
 
         if (document instanceof TopLevelDocument)
         {
diff --git a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java
index 4639253..3d648d2 100644
--- a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java
+++ b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java
@@ -440,7 +440,7 @@
         NamedProperty<QName>[] propertyArray = properties.toArray(new NamedProperty[properties.size()]);
         NamedProperties<QName> namedProperties = Datatree.NamedProperties(propertyArray);
         NamespaceBindings bindings = Datatree.NamespaceBindings(
-                (NamespaceBinding[]) document.getNamespaceBindings().toArray());
+                (NamespaceBinding[]) document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()]));
 
         if (document instanceof TopLevelDocument)
         {
diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java
index eef7cc6..adf17c6 100644
--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java
+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java
@@ -55,9 +55,8 @@
      * (The FlowVisor code is not yet complete).
      *
      * @param args the command line arguments
-     * @throws java.lang.Exception
      */
-    public static void main(String[] args) throws Exception {
+    public static void main(String[] args){
         SdnWise sw = new SdnWise();
         sw.startExemplaryControlPlane();
     }
diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java
index 8ff0ad1..efa2394 100644
--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java
+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java
@@ -380,7 +380,7 @@
      */
     @Override
     public final void setNodeRssiMin(byte net, NodeAddress dst, byte newRssi) {
-        ConfigPacket cp = new ConfigPacket(net, sinkAddress, dst, PACKET_TTL, new byte[]{newRssi});
+        ConfigPacket cp = new ConfigPacket(net, sinkAddress, dst, RSSI_MIN, new byte[]{newRssi});
         sendNetworkPacket(cp);
     }
 
diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java
index 8c62e77..8deb0bd 100644
--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java
+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java
@@ -490,28 +490,28 @@
             jSpinnerReport.commitEdit();
 
             controller.setNodeBeaconPeriod(
-                    (byte) this.jSpinnerNetID.getValue(),
+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),
                     new NodeAddress(
                             (Integer) this.jSpinnerAddrH.getValue(),
                             (Integer) this.jSpinnerAddrL.getValue()),
                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());
 
             controller.setNodeReportPeriod(
-                    (byte) this.jSpinnerNetID.getValue(),
+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),
                     new NodeAddress(
                             (Integer) this.jSpinnerAddrH.getValue(),
                             (Integer) this.jSpinnerAddrL.getValue()),
                     ((Number) this.jSpinnerReport.getValue()).shortValue());
 
             controller.setNodeRssiMin(
-                    (byte) this.jSpinnerNetID.getValue(),
+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),
                     new NodeAddress(
                             (Integer) this.jSpinnerAddrH.getValue(),
                             (Integer) this.jSpinnerAddrL.getValue()),
                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());
 
             controller.setNodePacketTtl(
-                    (byte) this.jSpinnerNetID.getValue(),
+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),
                     new NodeAddress(
                             (Integer) this.jSpinnerAddrH.getValue(),
                             (Integer) this.jSpinnerAddrL.getValue()),
diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java
index 8ff0ad1..efa2394 100644
--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java
+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java
@@ -380,7 +380,7 @@
      */
     @Override
     public final void setNodeRssiMin(byte net, NodeAddress dst, byte newRssi) {
-        ConfigPacket cp = new ConfigPacket(net, sinkAddress, dst, PACKET_TTL, new byte[]{newRssi});
+        ConfigPacket cp = new ConfigPacket(net, sinkAddress, dst, RSSI_MIN, new byte[]{newRssi});
         sendNetworkPacket(cp);
     }
 
diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java
index e8edfd3..5b3177f 100644
--- a/src/main/java/com/metamx/metrics/SysMonitor.java
+++ b/src/main/java/com/metamx/metrics/SysMonitor.java
@@ -277,7 +277,7 @@
             if (fsu != null) {
               final Map<String, Long> stats = ImmutableMap.<String, Long>builder()
                   .put("sys/fs/max", fsu.getTotal() * 1024)
-                  .put("sys/fs/used", fsu.getTotal() * 1024)
+                  .put("sys/fs/used", fsu.getUsed() * 1024)
                   .put("sys/fs/files/count", fsu.getFiles())
                   .put("sys/fs/files/free", fsu.getFreeFiles())
                 .build();
diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java
index e8edfd3..5b3177f 100644
--- a/src/main/java/com/metamx/metrics/SysMonitor.java
+++ b/src/main/java/com/metamx/metrics/SysMonitor.java
@@ -277,7 +277,7 @@
             if (fsu != null) {
               final Map<String, Long> stats = ImmutableMap.<String, Long>builder()
                   .put("sys/fs/max", fsu.getTotal() * 1024)
-                  .put("sys/fs/used", fsu.getTotal() * 1024)
+                  .put("sys/fs/used", fsu.getUsed() * 1024)
                   .put("sys/fs/files/count", fsu.getFiles())
                   .put("sys/fs/files/free", fsu.getFreeFiles())
                 .build();
diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java
index e8edfd3..5b3177f 100644
--- a/src/main/java/com/metamx/metrics/SysMonitor.java
+++ b/src/main/java/com/metamx/metrics/SysMonitor.java
@@ -277,7 +277,7 @@
             if (fsu != null) {
               final Map<String, Long> stats = ImmutableMap.<String, Long>builder()
                   .put("sys/fs/max", fsu.getTotal() * 1024)
-                  .put("sys/fs/used", fsu.getTotal() * 1024)
+                  .put("sys/fs/used", fsu.getUsed() * 1024)
                   .put("sys/fs/files/count", fsu.getFiles())
                   .put("sys/fs/files/free", fsu.getFreeFiles())
                 .build();
diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java
index e8edfd3..5b3177f 100644
--- a/src/main/java/com/metamx/metrics/SysMonitor.java
+++ b/src/main/java/com/metamx/metrics/SysMonitor.java
@@ -277,7 +277,7 @@
             if (fsu != null) {
               final Map<String, Long> stats = ImmutableMap.<String, Long>builder()
                   .put("sys/fs/max", fsu.getTotal() * 1024)
-                  .put("sys/fs/used", fsu.getTotal() * 1024)
+                  .put("sys/fs/used", fsu.getUsed() * 1024)
                   .put("sys/fs/files/count", fsu.getFiles())
                   .put("sys/fs/files/free", fsu.getFreeFiles())
                 .build();
diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java
index e8edfd3..5b3177f 100644
--- a/src/main/java/com/metamx/metrics/SysMonitor.java
+++ b/src/main/java/com/metamx/metrics/SysMonitor.java
@@ -277,7 +277,7 @@
             if (fsu != null) {
               final Map<String, Long> stats = ImmutableMap.<String, Long>builder()
                   .put("sys/fs/max", fsu.getTotal() * 1024)
-                  .put("sys/fs/used", fsu.getTotal() * 1024)
+                  .put("sys/fs/used", fsu.getUsed() * 1024)
                   .put("sys/fs/files/count", fsu.getFiles())
                   .put("sys/fs/files/free", fsu.getFreeFiles())
                 .build();
diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java
index e8edfd3..5b3177f 100644
--- a/src/main/java/com/metamx/metrics/SysMonitor.java
+++ b/src/main/java/com/metamx/metrics/SysMonitor.java
@@ -277,7 +277,7 @@
             if (fsu != null) {
               final Map<String, Long> stats = ImmutableMap.<String, Long>builder()
                   .put("sys/fs/max", fsu.getTotal() * 1024)
-                  .put("sys/fs/used", fsu.getTotal() * 1024)
+                  .put("sys/fs/used", fsu.getUsed() * 1024)
                   .put("sys/fs/files/count", fsu.getFiles())
                   .put("sys/fs/files/free", fsu.getFreeFiles())
                 .build();
diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
index 28ffed1..bd72e48 100644
--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
@@ -146,8 +146,9 @@
             if ( exceptionMap != null )
             {
                 exceptionComment =
-                    javaDocHelper.parseJavaDoc( sourceType, byteType,
-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );
+                    javaDocHelper.parseJavaDoc( sourceType,
+                                                byteType,
+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );
             }
             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );
         }
diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
index 28ffed1..bd72e48 100644
--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
@@ -146,8 +146,9 @@
             if ( exceptionMap != null )
             {
                 exceptionComment =
-                    javaDocHelper.parseJavaDoc( sourceType, byteType,
-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );
+                    javaDocHelper.parseJavaDoc( sourceType,
+                                                byteType,
+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );
             }
             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );
         }
diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
index 28ffed1..bd72e48 100644
--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
@@ -146,8 +146,9 @@
             if ( exceptionMap != null )
             {
                 exceptionComment =
-                    javaDocHelper.parseJavaDoc( sourceType, byteType,
-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );
+                    javaDocHelper.parseJavaDoc( sourceType,
+                                                byteType,
+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );
             }
             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );
         }
diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
index 28ffed1..bd72e48 100644
--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java
@@ -146,8 +146,9 @@
             if ( exceptionMap != null )
             {
                 exceptionComment =
-                    javaDocHelper.parseJavaDoc( sourceType, byteType,
-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );
+                    javaDocHelper.parseJavaDoc( sourceType,
+                                                byteType,
+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );
             }
             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );
         }
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
index 6adec1c..9d92bcf 100644
--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java
@@ -134,7 +134,7 @@
 
       final WebArchive archive = ShrinkWrap.create(WebArchive.class, NAME_WAR);
       final ArchivePath targetPathWebXml = ArchivePaths.create("web.xml");
-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);
       log.info(archive.toString(true));
 
       // Deploy
diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
index 84be333..b2bc434 100644
--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
@@ -176,8 +176,7 @@
 			break;
 		default:
 			throw new SFException(
-					"Unsupported Geometry code for type retrieval: "
-							+ geometryType);
+					"Unsupported Geometry code for type retrieval: " + code);
 		}
 
 		return geometryType;
diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
index 84be333..b2bc434 100644
--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
@@ -176,8 +176,7 @@
 			break;
 		default:
 			throw new SFException(
-					"Unsupported Geometry code for type retrieval: "
-							+ geometryType);
+					"Unsupported Geometry code for type retrieval: " + code);
 		}
 
 		return geometryType;
diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
index 84be333..b2bc434 100644
--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
@@ -176,8 +176,7 @@
 			break;
 		default:
 			throw new SFException(
-					"Unsupported Geometry code for type retrieval: "
-							+ geometryType);
+					"Unsupported Geometry code for type retrieval: " + code);
 		}
 
 		return geometryType;
diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
index 84be333..b2bc434 100644
--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java
@@ -176,8 +176,7 @@
 			break;
 		default:
 			throw new SFException(
-					"Unsupported Geometry code for type retrieval: "
-							+ geometryType);
+					"Unsupported Geometry code for type retrieval: " + code);
 		}
 
 		return geometryType;
diff --git a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java
index f04bef5..af5b3a9 100644
--- a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java
+++ b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java
@@ -104,7 +104,7 @@
 			if (ringCopyPoints.size() >= 3) {
 				Point first = ringCopyPoints.get(0);
 				Point last = ringCopyPoints.get(ringCopyPoints.size() - 1);
-				if (first.getX() == last.getX() || first.getY() == last.getY()) {
+				if (first.getX() == last.getX() && first.getY() == last.getY()) {
 					ringCopyPoints.remove(ringCopyPoints.size() - 1);
 				}
 			}
diff --git a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java
index 86cbfef..ff9a1f2 100644
--- a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java
+++ b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java
@@ -313,7 +313,7 @@
 			value = -1;
 		} else if (point1.getY() > point2.getY()) {
 			value = 1;
-		} else if (point1.getY() > point2.getY()) {
+		} else if (point1.getY() < point2.getY()) {
 			value = -1;
 		}
 		return value;
diff --git a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java
index f04bef5..af5b3a9 100644
--- a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java
+++ b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java
@@ -104,7 +104,7 @@
 			if (ringCopyPoints.size() >= 3) {
 				Point first = ringCopyPoints.get(0);
 				Point last = ringCopyPoints.get(ringCopyPoints.size() - 1);
-				if (first.getX() == last.getX() || first.getY() == last.getY()) {
+				if (first.getX() == last.getX() && first.getY() == last.getY()) {
 					ringCopyPoints.remove(ringCopyPoints.size() - 1);
 				}
 			}
diff --git a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java
index 86cbfef..ff9a1f2 100644
--- a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java
+++ b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java
@@ -313,7 +313,7 @@
 			value = -1;
 		} else if (point1.getY() > point2.getY()) {
 			value = 1;
-		} else if (point1.getY() > point2.getY()) {
+		} else if (point1.getY() < point2.getY()) {
 			value = -1;
 		}
 		return value;
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
index 59e19ea..a457bc7 100644
--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java
@@ -106,10 +106,10 @@
 				int key = e.getKeyCode();
 				
 				if (key == KeyEvent.VK_LEFT) {
-					vp.showNext();
+					vp.showPrevious();
 					
 				} else if (key == KeyEvent.VK_RIGHT) {
-					vp.showPrevious();
+					vp.showNext();
 				}
 			}
 		});
diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
index ea74c37..20de289 100644
--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
@@ -32,7 +32,7 @@
 	CLOSE_FAILED(4),	// The connection dropped before an orderly close could complete.
 	ERROR(5),			// A GET or POST returned an error, or an internal error occurred.
 	CLOSED_REMOTELY(6),	// Remote end point initiated a close.
-	CLOSED(6);			// Locally initiated close succeeded.
+	CLOSED(7);			// Locally initiated close succeeded.
 
 	private int value;
 	private DisconnectReason(int v) { this.value = v; }
diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
index ea74c37..20de289 100644
--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
@@ -32,7 +32,7 @@
 	CLOSE_FAILED(4),	// The connection dropped before an orderly close could complete.
 	ERROR(5),			// A GET or POST returned an error, or an internal error occurred.
 	CLOSED_REMOTELY(6),	// Remote end point initiated a close.
-	CLOSED(6);			// Locally initiated close succeeded.
+	CLOSED(7);			// Locally initiated close succeeded.
 
 	private int value;
 	private DisconnectReason(int v) { this.value = v; }
diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
index ea74c37..20de289 100644
--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
@@ -32,7 +32,7 @@
 	CLOSE_FAILED(4),	// The connection dropped before an orderly close could complete.
 	ERROR(5),			// A GET or POST returned an error, or an internal error occurred.
 	CLOSED_REMOTELY(6),	// Remote end point initiated a close.
-	CLOSED(6);			// Locally initiated close succeeded.
+	CLOSED(7);			// Locally initiated close succeeded.
 
 	private int value;
 	private DisconnectReason(int v) { this.value = v; }
diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
index ea74c37..20de289 100644
--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java
@@ -32,7 +32,7 @@
 	CLOSE_FAILED(4),	// The connection dropped before an orderly close could complete.
 	ERROR(5),			// A GET or POST returned an error, or an internal error occurred.
 	CLOSED_REMOTELY(6),	// Remote end point initiated a close.
-	CLOSED(6);			// Locally initiated close succeeded.
+	CLOSED(7);			// Locally initiated close succeeded.
 
 	private int value;
 	private DisconnectReason(int v) { this.value = v; }
diff --git a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java
index 1026e57..6021519 100644
--- a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java
+++ b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java
@@ -35,6 +35,6 @@
 
     @Override
     protected DataHandler newDataHandler(SocketIOSession session) {
-        return new JSONPPollingDataHandler(session);
+        return new XHRPollingDataHandler(session);
     }
 }
diff --git a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java
index 1026e57..6021519 100644
--- a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java
+++ b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java
@@ -35,6 +35,6 @@
 
     @Override
     protected DataHandler newDataHandler(SocketIOSession session) {
-        return new JSONPPollingDataHandler(session);
+        return new XHRPollingDataHandler(session);
     }
 }
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java
index 7cbb0f2..4fa2c20 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java
@@ -116,7 +116,7 @@
 
         public RepositoryConnectorThreadFactory( String tgName, String tName )
         {
-            myTG = new ThreadGroup( Thread.currentThread().getThreadGroup().getParent(), tgName );
+            myTG = new ThreadGroup( tgName );
             this.tName = tName;
         }
 
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java
index 7cbb0f2..4fa2c20 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java
@@ -116,7 +116,7 @@
 
         public RepositoryConnectorThreadFactory( String tgName, String tName )
         {
-            myTG = new ThreadGroup( Thread.currentThread().getThreadGroup().getParent(), tgName );
+            myTG = new ThreadGroup( tgName );
             this.tName = tName;
         }
 
diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java
index e35e39e..55c0daa 100644
--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java
+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java
@@ -158,7 +158,7 @@
         // The connection has timed out
         if ( status == null )
         {
-            throw new IllegalStateException( "Connection timed out" );
+            throw new TransferException( "Invalid AHC State. Response will possibly gets corrupted." );
         }
         return onCompleted( httpClient.getProvider().prepareResponse( status, headers,
                                                                       Collections.<HttpResponseBodyPart> emptyList() ) );
diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java
index e35e39e..55c0daa 100644
--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java
+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java
@@ -158,7 +158,7 @@
         // The connection has timed out
         if ( status == null )
         {
-            throw new IllegalStateException( "Connection timed out" );
+            throw new TransferException( "Invalid AHC State. Response will possibly gets corrupted." );
         }
         return onCompleted( httpClient.getProvider().prepareResponse( status, headers,
                                                                       Collections.<HttpResponseBodyPart> emptyList() ) );
diff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java
index 45d8948..79e1c05 100644
--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java
+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java
@@ -83,7 +83,7 @@
         resolver =
             new DefaultArtifactResolver( NullLogger.INSTANCE, TestFileProcessor.INSTANCE,
                                          new StubRepositoryEventDispatcher(), versionResolver, updateCheckManager,
-                                         remoteRepositoryManager, null );
+                                         remoteRepositoryManager );
 
         artifact = new StubArtifact( "gid", "aid", "", "ext", "ver" );
 
diff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java
index 45d8948..79e1c05 100644
--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java
+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java
@@ -83,7 +83,7 @@
         resolver =
             new DefaultArtifactResolver( NullLogger.INSTANCE, TestFileProcessor.INSTANCE,
                                          new StubRepositoryEventDispatcher(), versionResolver, updateCheckManager,
-                                         remoteRepositoryManager, null );
+                                         remoteRepositoryManager );
 
         artifact = new StubArtifact( "gid", "aid", "", "ext", "ver" );
 
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index e7816e5..e6a6bc4 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -320,9 +320,9 @@
         implements TransferListener
     {
 
-        private volatile MessageDigest digest;
+        private MessageDigest digest;
 
-        private void initDigest()
+        private synchronized void initDigest()
             throws NoSuchAlgorithmException
         {
             digest = MessageDigest.getInstance( "SHA-1" );
@@ -349,7 +349,7 @@
         {
         }
 
-        public void transferProgressed( TransferEvent event )
+        public synchronized void transferProgressed( TransferEvent event )
             throws TransferCancelledException
         {
             digest.update( event.getDataBuffer() );
@@ -369,7 +369,7 @@
         {
         }
 
-        public byte[] getHash()
+        public synchronized byte[] getHash()
         {
             return digest.digest();
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index 5c6c614..d1206f5 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -87,7 +87,7 @@
         throws IOException, NoRepositoryConnectorException
     {
 
-        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "jar", "", "1-test" );
+        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "", "jar", "1-test" );
         StubMetadata metadata =
             new StubMetadata( "testGroup", "testArtifact", "1-test", "maven-metadata.xml",
                               Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -168,7 +168,7 @@
 
         for ( int i = 0; i < numTransfers; i++ )
         {
-            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
             StubMetadata meta =
                 new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -202,7 +202,7 @@
                 File artFile = new File( localPath.toString() + "/a" + i );
                 File metaFile = new File( localPath.toString() + "/m" + i );
 
-                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
                 StubMetadata meta =
                     new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index 5c6c614..d1206f5 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -87,7 +87,7 @@
         throws IOException, NoRepositoryConnectorException
     {
 
-        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "jar", "", "1-test" );
+        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "", "jar", "1-test" );
         StubMetadata metadata =
             new StubMetadata( "testGroup", "testArtifact", "1-test", "maven-metadata.xml",
                               Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -168,7 +168,7 @@
 
         for ( int i = 0; i < numTransfers; i++ )
         {
-            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
             StubMetadata meta =
                 new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -202,7 +202,7 @@
                 File artFile = new File( localPath.toString() + "/a" + i );
                 File metaFile = new File( localPath.toString() + "/m" + i );
 
-                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
                 StubMetadata meta =
                     new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index 5c6c614..d1206f5 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -87,7 +87,7 @@
         throws IOException, NoRepositoryConnectorException
     {
 
-        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "jar", "", "1-test" );
+        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "", "jar", "1-test" );
         StubMetadata metadata =
             new StubMetadata( "testGroup", "testArtifact", "1-test", "maven-metadata.xml",
                               Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -168,7 +168,7 @@
 
         for ( int i = 0; i < numTransfers; i++ )
         {
-            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
             StubMetadata meta =
                 new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -202,7 +202,7 @@
                 File artFile = new File( localPath.toString() + "/a" + i );
                 File metaFile = new File( localPath.toString() + "/m" + i );
 
-                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
                 StubMetadata meta =
                     new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index 5c6c614..d1206f5 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -87,7 +87,7 @@
         throws IOException, NoRepositoryConnectorException
     {
 
-        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "jar", "", "1-test" );
+        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "", "jar", "1-test" );
         StubMetadata metadata =
             new StubMetadata( "testGroup", "testArtifact", "1-test", "maven-metadata.xml",
                               Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -168,7 +168,7 @@
 
         for ( int i = 0; i < numTransfers; i++ )
         {
-            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
             StubMetadata meta =
                 new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -202,7 +202,7 @@
                 File artFile = new File( localPath.toString() + "/a" + i );
                 File metaFile = new File( localPath.toString() + "/m" + i );
 
-                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
                 StubMetadata meta =
                     new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index 5c6c614..d1206f5 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -87,7 +87,7 @@
         throws IOException, NoRepositoryConnectorException
     {
 
-        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "jar", "", "1-test" );
+        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "", "jar", "1-test" );
         StubMetadata metadata =
             new StubMetadata( "testGroup", "testArtifact", "1-test", "maven-metadata.xml",
                               Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -168,7 +168,7 @@
 
         for ( int i = 0; i < numTransfers; i++ )
         {
-            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
             StubMetadata meta =
                 new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -202,7 +202,7 @@
                 File artFile = new File( localPath.toString() + "/a" + i );
                 File metaFile = new File( localPath.toString() + "/m" + i );
 
-                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
                 StubMetadata meta =
                     new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
index 5c6c614..d1206f5 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java
@@ -87,7 +87,7 @@
         throws IOException, NoRepositoryConnectorException
     {
 
-        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "jar", "", "1-test" );
+        StubArtifact artifact = new StubArtifact( "testGroup", "testArtifact", "", "jar", "1-test" );
         StubMetadata metadata =
             new StubMetadata( "testGroup", "testArtifact", "1-test", "maven-metadata.xml",
                               Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -168,7 +168,7 @@
 
         for ( int i = 0; i < numTransfers; i++ )
         {
-            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+            StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
             StubMetadata meta =
                 new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );
@@ -202,7 +202,7 @@
                 File artFile = new File( localPath.toString() + "/a" + i );
                 File metaFile = new File( localPath.toString() + "/m" + i );
 
-                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "jar", "", i + "-test" );
+                StubArtifact art = new StubArtifact( "testGroup", "testArtifact", "", "jar", i + "-test" );
                 StubMetadata meta =
                     new StubMetadata( "testGroup", "testArtifact", i + "-test", "maven-metadata.xml",
                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java
index 34bd61e..37dba7b 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java
@@ -226,7 +226,7 @@
     @Override
     public String toString()
     {
-        return String.format( "%s:%s:%s:%s", getGroupId(), getArtifactId(), getVersion(), getExtension() );
+        return String.format( "%s:%s:%s:%s", getGroupId(), getArtifactId(), getExtension(), getVersion() );
     }
 
 }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java
index 34bd61e..37dba7b 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java
@@ -226,7 +226,7 @@
     @Override
     public String toString()
     {
-        return String.format( "%s:%s:%s:%s", getGroupId(), getArtifactId(), getVersion(), getExtension() );
+        return String.format( "%s:%s:%s:%s", getGroupId(), getArtifactId(), getExtension(), getVersion() );
     }
 
 }
diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java
index 364d858..167cbcc 100644
--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java
+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java
@@ -448,8 +448,7 @@
         }
         else if ( RepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )
         {
-            // Get midnight boundary
-            Calendar cal = Calendar.getInstance( TimeZone.getTimeZone( "UTC" ) );
+            Calendar cal = Calendar.getInstance();
             cal.set( Calendar.HOUR_OF_DAY, 0 );
             cal.set( Calendar.MINUTE, 0 );
             cal.set( Calendar.SECOND, 0 );
diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java
index 364d858..167cbcc 100644
--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java
+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java
@@ -448,8 +448,7 @@
         }
         else if ( RepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )
         {
-            // Get midnight boundary
-            Calendar cal = Calendar.getInstance( TimeZone.getTimeZone( "UTC" ) );
+            Calendar cal = Calendar.getInstance();
             cal.set( Calendar.HOUR_OF_DAY, 0 );
             cal.set( Calendar.MINUTE, 0 );
             cal.set( Calendar.SECOND, 0 );
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java
index 9c149ff..ec49f1e 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java
@@ -48,7 +48,8 @@
         throws NoRepositoryConnectorException
     {
         super( session.getConfigProperties() );
-        if ( !"default".equalsIgnoreCase( repository.getContentType() ) )
+
+        if ( !"default".equals( repository.getContentType() ) )
         {
             throw new NoRepositoryConnectorException( repository );
         }
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java
index 9c149ff..ec49f1e 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java
@@ -48,7 +48,8 @@
         throws NoRepositoryConnectorException
     {
         super( session.getConfigProperties() );
-        if ( !"default".equalsIgnoreCase( repository.getContentType() ) )
+
+        if ( !"default".equals( repository.getContentType() ) )
         {
             throw new NoRepositoryConnectorException( repository );
         }
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java
index 92cfa18..1616cef 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java
@@ -150,7 +150,7 @@
 
             assertTrue( "invalid data offset: bigger than data length", event.getDataOffset() < event.getDataLength() );
             assertTrue( "invalid data window: offset+data length > data buffer length",
-                        event.getDataOffset() + event.getDataLength() < event.getDataBuffer().length );
+                        event.getDataOffset() + event.getDataLength() <= event.getDataBuffer().length );
 
             assertTrue( "transferred byte is not set/not positive for type: " + event.getType(),
                         event.getTransferredBytes() > -1 );
diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java
index 92cfa18..1616cef 100644
--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java
+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java
@@ -150,7 +150,7 @@
 
             assertTrue( "invalid data offset: bigger than data length", event.getDataOffset() < event.getDataLength() );
             assertTrue( "invalid data window: offset+data length > data buffer length",
-                        event.getDataOffset() + event.getDataLength() < event.getDataBuffer().length );
+                        event.getDataOffset() + event.getDataLength() <= event.getDataBuffer().length );
 
             assertTrue( "transferred byte is not set/not positive for type: " + event.getType(),
                         event.getTransferredBytes() > -1 );
diff --git a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java
index d669590..1c34a53 100644
--- a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java
+++ b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java
@@ -116,7 +116,7 @@
                 {
                     managedLocalPaths = new HashMap<Object, String>( this.managedLocalPaths );
                 }
-                managedLocalPaths.put( key, scope );
+                managedLocalPaths.put( key, localPath );
             }
 
             Collection<Exclusion> exclusions = managedDependency.getExclusions();
diff --git a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java
index d669590..1c34a53 100644
--- a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java
+++ b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java
@@ -116,7 +116,7 @@
                 {
                     managedLocalPaths = new HashMap<Object, String>( this.managedLocalPaths );
                 }
-                managedLocalPaths.put( key, scope );
+                managedLocalPaths.put( key, localPath );
             }
 
             Collection<Exclusion> exclusions = managedDependency.getExclusions();
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
index 69cc3f0..93b14b8 100644
--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java
@@ -90,7 +90,7 @@
         else if ( artifactTransfer != null )
             return artifactTransfer.getFile();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Artifact getArtifact()
@@ -98,7 +98,7 @@
         if ( artifactTransfer != null )
             return artifactTransfer.getArtifact();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
 
     }
 
@@ -107,7 +107,7 @@
         if ( artifactTransfer != null )
             artifactTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public void setException( MetadataTransferException exception )
@@ -115,7 +115,7 @@
         if ( metadataTransfer != null )
             metadataTransfer.setException( exception );
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Object getException()
@@ -125,7 +125,7 @@
         else if ( metadataTransfer != null )
             return metadataTransfer.getException();
         else
-            throw new RuntimeException( "TransferWrapper holds the wrong type" );
+            throw new IllegalStateException( "TransferWrapper holds the wrong type" );
     }
 
     public Metadata getMetadata()
diff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java
index b3f30bc..8aa3395 100644
--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java
+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java
@@ -1119,7 +1119,7 @@
 					for(OWLObjectPropertyExpression p : candidates) {
 						if(!p.isAnonymous()) {
 							new_binding = binding.clone();
-							new_binding.set(arg0, QueryArgument.newURI(p.getNamedProperty().getIRI()));
+							new_binding.set(arg1, QueryArgument.newURI(p.getNamedProperty().getIRI()));
 							if(eval(query, group.bind(new_binding), result, new_binding)) {
 								ret = true;
 							}
diff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java
index b3f30bc..8aa3395 100644
--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java
+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java
@@ -1119,7 +1119,7 @@
 					for(OWLObjectPropertyExpression p : candidates) {
 						if(!p.isAnonymous()) {
 							new_binding = binding.clone();
-							new_binding.set(arg0, QueryArgument.newURI(p.getNamedProperty().getIRI()));
+							new_binding.set(arg1, QueryArgument.newURI(p.getNamedProperty().getIRI()));
 							if(eval(query, group.bind(new_binding), result, new_binding)) {
 								ret = true;
 							}
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java
index 3a151d6..89dbb8d 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java
@@ -257,7 +257,7 @@
         logger.debug("{} event type received...", symEvent.getType());
 
 
-        if (symEvent.getType() != null)
+        if (symEvent.getType() == null)
             return;
 
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java
index 3260f7b..37fea5b 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java
@@ -107,8 +107,7 @@
             logger.info("Successfully refreshed SymAuth tokens...");
 
             logger.info("Exposing SymAgentHealthCheck as JMX MBean...");
-            AgentSystemClient agentSystemClient = AgentSystemClientFactory.getClient(symClient,
-                    AgentSystemClientFactory.TYPE.DEFAULT);
+            AgentSystemClient agentSystemClient = AgentSystemClientFactory.getClient(symClient);
             SymAgentHealthCheck check = agentSystemClient.getAgentHealthCheck();
             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             ObjectName mBeanName = new ObjectName("org.symphonyoss.client:type=HealthCheck");
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java
index 3260f7b..37fea5b 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java
@@ -107,8 +107,7 @@
             logger.info("Successfully refreshed SymAuth tokens...");
 
             logger.info("Exposing SymAgentHealthCheck as JMX MBean...");
-            AgentSystemClient agentSystemClient = AgentSystemClientFactory.getClient(symClient,
-                    AgentSystemClientFactory.TYPE.DEFAULT);
+            AgentSystemClient agentSystemClient = AgentSystemClientFactory.getClient(symClient);
             SymAgentHealthCheck check = agentSystemClient.getAgentHealthCheck();
             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             ObjectName mBeanName = new ObjectName("org.symphonyoss.client:type=HealthCheck");
diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
index ff10d47..ce1a4d4 100644
--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
@@ -254,7 +254,7 @@
 
 
             SymMessage message = new SymMessage();
-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
 
             sendResponse(message);
 
diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
index ff10d47..ce1a4d4 100644
--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
@@ -254,7 +254,7 @@
 
 
             SymMessage message = new SymMessage();
-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
 
             sendResponse(message);
 
diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
index ff10d47..ce1a4d4 100644
--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
@@ -254,7 +254,7 @@
 
 
             SymMessage message = new SymMessage();
-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
 
             sendResponse(message);
 
diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
index ff10d47..ce1a4d4 100644
--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java
@@ -254,7 +254,7 @@
 
 
             SymMessage message = new SymMessage();
-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + " " + presence.getCategory().toString());
 
             sendResponse(message);
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
index efc0dc0..f63933f 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java
@@ -35,9 +35,9 @@
     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());
         }else{
-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
index c3dcc1c..0387e78 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java
@@ -35,9 +35,9 @@
     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
 
     }
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
index 0b5cbe7..f9f2af5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java
@@ -35,9 +35,9 @@
     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
index 36186d6..b623854 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java
@@ -38,9 +38,9 @@
     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {
 
         if (type.equals(TYPE.HTTPCLIENT)) {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         } else {
-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
index a260006..ab948a6 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java
@@ -36,9 +36,9 @@
 
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
index d18f9b1..682db2c 100644
--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java
@@ -40,9 +40,9 @@
     public static UsersClient getClient(SymphonyClient symClient, TYPE type){
 
         if(type.equals(TYPE.HTTPCLIENT)) {
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());
         }else{
-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());
+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());
         }
     }
     @SuppressWarnings("unused")
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java
index 4dbc227..44903e1 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java
@@ -119,7 +119,7 @@
 
             return symClient;
 
-        } catch (NetworkException ae) {
+        } catch (AuthorizationException ae) {
 
             logger.error(ae.getMessage(), ae);
         } catch (InitException e) {
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java
index 4dbc227..44903e1 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java
@@ -119,7 +119,7 @@
 
             return symClient;
 
-        } catch (NetworkException ae) {
+        } catch (AuthorizationException ae) {
 
             logger.error(ae.getMessage(), ae);
         } catch (InitException e) {
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
index 64e6aba..63df4e5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
@@ -27,7 +27,7 @@
 /**
  * Created by Frank Tarsillo on 5/15/2016.
  */
-interface MessageListener {
+public interface MessageListener {
 
 
     void onMessage(SymMessage message);
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
index 64e6aba..63df4e5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
@@ -27,7 +27,7 @@
 /**
  * Created by Frank Tarsillo on 5/15/2016.
  */
-interface MessageListener {
+public interface MessageListener {
 
 
     void onMessage(SymMessage message);
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
index 64e6aba..63df4e5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
@@ -27,7 +27,7 @@
 /**
  * Created by Frank Tarsillo on 5/15/2016.
  */
-interface MessageListener {
+public interface MessageListener {
 
 
     void onMessage(SymMessage message);
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
index 64e6aba..63df4e5 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java
@@ -27,7 +27,7 @@
 /**
  * Created by Frank Tarsillo on 5/15/2016.
  */
-interface MessageListener {
+public interface MessageListener {
 
 
     void onMessage(SymMessage message);
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java
index 50103f5..01f8252 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java
@@ -85,7 +85,7 @@
 
     public void setStream(Stream stream) {
         this.stream = stream;
-        if(stream==null)
+        if(streamId==null)
             streamId=stream.getId();
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java
index 50103f5..01f8252 100644
--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java
@@ -85,7 +85,7 @@
 
     public void setStream(Stream stream) {
         this.stream = stream;
-        if(stream==null)
+        if(streamId==null)
             streamId=stream.getId();
     }
 
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java
index 647df74..09e1e09 100755
--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java
@@ -105,7 +105,7 @@
 
         final Chat other = (Chat) obj;
 
-        if (!this.stream.equals(other.stream)) {
+        if (this.stream==null || !this.stream.equals(other.stream)) {
             return false;
         }
         return true;
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java
index dab00d5..24ea82e 100755
--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java
@@ -36,7 +36,7 @@
 
 import java.util.List;
 
-class MlMessageParser extends DefaultHandler {
+public class MlMessageParser extends DefaultHandler {
 
     private String messageMl;
     private Element elementMessageML;
@@ -49,15 +49,15 @@
     private final Logger logger = LoggerFactory.getLogger(MlMessageParser.class);
 
 
-    private MlMessageParser(SymphonyClient symClient){
+    public MlMessageParser(SymphonyClient symClient){
         this.symClient = symClient;
 
     }
 
-    private MlMessageParser() {
+    public MlMessageParser() {
     }
 
-    private void parseMessage(String message) throws Exception {
+    public void parseMessage(String message) throws Exception {
 
         Document doc = Jsoup.parse(message);
         originalDoc = doc.clone();
@@ -190,7 +190,7 @@
         return stringBuilder.toString();
     }
 
-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {
+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {
 
 
         StringBuilder stringBuilder = new StringBuilder();
@@ -199,7 +199,7 @@
     }
 
 
-    private void getHtmlStartingFromText(String text, StringBuilder builder, List<Node> nodesList, boolean append) {
+    public void getHtmlStartingFromText(String text, StringBuilder builder, List<Node> nodesList, boolean append) {
 
 
         for (Node node : nodesList) {
diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java
index dab00d5..24ea82e 100755
--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java
+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java
@@ -36,7 +36,7 @@
 
 import java.util.List;
 
-class MlMessageParser extends DefaultHandler {
+public class MlMessageParser extends DefaultHandler {
 
     private String messageMl;
     private Element elementMessageML;
@@ -49,15 +49,15 @@
     private final Logger logger = LoggerFactory.getLogger(MlMessageParser.class);
 
 
-    private MlMessageParser(SymphonyClient symClient){
+    public MlMessageParser(SymphonyClient symClient){
         this.symClient = symClient;
 
     }
 
-    private MlMessageParser() {
+    public MlMessageParser() {
     }
 
-    private void parseMessage(String message) throws Exception {
+    public void parseMessage(String message) throws Exception {
 
         Document doc = Jsoup.parse(message);
         originalDoc = doc.clone();
@@ -190,7 +190,7 @@
         return stringBuilder.toString();
     }
 
-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {
+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {
 
 
         StringBuilder stringBuilder = new StringBuilder();
@@ -199,7 +199,7 @@
     }
 
 
-    private void getHtmlStartingFromText(String text, StringBuilder builder, List<Node> nodesList, boolean append) {
+    public void getHtmlStartingFromText(String text, StringBuilder builder, List<Node> nodesList, boolean append) {
 
 
         for (Node node : nodesList) {
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index aa9ac06..c2d6d83 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha(data);
+    return DigestUtils.sha1(data);
   }
 
   /**
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index aa9ac06..c2d6d83 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha(data);
+    return DigestUtils.sha1(data);
   }
 
   /**
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index aa9ac06..c2d6d83 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha(data);
+    return DigestUtils.sha1(data);
   }
 
   /**
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index aa9ac06..c2d6d83 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha(data);
+    return DigestUtils.sha1(data);
   }
 
   /**
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
index 47b6dd7..597c8a9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java
@@ -345,7 +345,7 @@
         }
       }), 1, TimeUnit.SECONDS);
     } else {
-      logger.debug("Attempting to send a message to non-connected peer {}!", this);
+      logger.trace("Attempting to send a message to non-connected peer {}!", this);
       unbind(true);
     }
   }
@@ -616,7 +616,7 @@
             if (p.isValid()) {
               this.cancelPendingRequests(p);
               this.firePeerReady();
-              logger.debug("Discarding block for already completed " + p);
+              logger.trace("Discarding block for already completed " + p);
               break;
             }
             //TODO add proper catch for IOException
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index 001ea41..14d1889 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha1(data);
+    return DigestUtils.sha(data);
   }
 
   /**
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index 001ea41..14d1889 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha1(data);
+    return DigestUtils.sha(data);
   }
 
   /**
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index 001ea41..14d1889 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha1(data);
+    return DigestUtils.sha(data);
   }
 
   /**
diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
index 001ea41..14d1889 100644
--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java
@@ -14,7 +14,7 @@
    * @return sha 1 hash of specified data
    */
   public static byte[] calculateSha1Hash(byte[] data) {
-    return DigestUtils.sha1(data);
+    return DigestUtils.sha(data);
   }
 
   /**
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
index e891290..df37f83 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
@@ -260,7 +260,7 @@
           unannouncedTorrents.addAll(e.getValue());
         } catch (ConnectException t) {
           LoggerUtils.warnWithMessageAndDebugDetails(logger, "Cannot connect to the tracker {}", e.getKey(), t);
-          logger.info("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
+          logger.debug("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
         }
       } else {
         logger.warn("Tracker client for {} is null. Torrents are not announced on tracker", e.getKey());
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
index e891290..df37f83 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
@@ -260,7 +260,7 @@
           unannouncedTorrents.addAll(e.getValue());
         } catch (ConnectException t) {
           LoggerUtils.warnWithMessageAndDebugDetails(logger, "Cannot connect to the tracker {}", e.getKey(), t);
-          logger.info("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
+          logger.debug("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
         }
       } else {
         logger.warn("Tracker client for {} is null. Torrents are not announced on tracker", e.getKey());
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
index e891290..df37f83 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
@@ -260,7 +260,7 @@
           unannouncedTorrents.addAll(e.getValue());
         } catch (ConnectException t) {
           LoggerUtils.warnWithMessageAndDebugDetails(logger, "Cannot connect to the tracker {}", e.getKey(), t);
-          logger.info("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
+          logger.debug("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
         }
       } else {
         logger.warn("Tracker client for {} is null. Torrents are not announced on tracker", e.getKey());
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
index e891290..df37f83 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java
@@ -260,7 +260,7 @@
           unannouncedTorrents.addAll(e.getValue());
         } catch (ConnectException t) {
           LoggerUtils.warnWithMessageAndDebugDetails(logger, "Cannot connect to the tracker {}", e.getKey(), t);
-          logger.info("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
+          logger.debug("next torrents contain {} in tracker list. {}", e.getKey(), e.getValue());
         }
       } else {
         logger.warn("Tracker client for {} is null. Torrents are not announced on tracker", e.getKey());
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 29b7a3e..6dc84e1 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -1041,7 +1041,7 @@
       }
     };
     th.start();
-    Thread.sleep(200);
+    Thread.sleep(100);
     th.interrupt();
     new WaitFor(10 * 1000) {
       @Override
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 29b7a3e..6dc84e1 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -1041,7 +1041,7 @@
       }
     };
     th.start();
-    Thread.sleep(200);
+    Thread.sleep(100);
     th.interrupt();
     new WaitFor(10 * 1000) {
       @Override
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 883f00c..8e7b9c1 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -712,7 +712,7 @@
     final File torrentFile = tempFiles.createTempFile();
     torrent.save(torrentFile);
     seeder.start(InetAddress.getLocalHost());
-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());
+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);
     final ExecutorService es = Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);
     final Client leecher = new Client(es) {
       @Override
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 883f00c..8e7b9c1 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -712,7 +712,7 @@
     final File torrentFile = tempFiles.createTempFile();
     torrent.save(torrentFile);
     seeder.start(InetAddress.getLocalHost());
-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());
+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);
     final ExecutorService es = Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);
     final Client leecher = new Client(es) {
       @Override
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index e740022..8d98ae6 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -850,7 +850,7 @@
     final File torrentFile = tempFiles.createTempFile();
     torrent.save(torrentFile);
     seeder.start(InetAddress.getLocalHost());
-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());
+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);
     final Client leecher = createClient();
     leecher.start(InetAddress.getLocalHost());
     final AtomicBoolean interrupted = new AtomicBoolean();
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index e740022..8d98ae6 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -850,7 +850,7 @@
     final File torrentFile = tempFiles.createTempFile();
     torrent.save(torrentFile);
     seeder.start(InetAddress.getLocalHost());
-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());
+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);
     final Client leecher = createClient();
     leecher.start(InetAddress.getLocalHost());
     final AtomicBoolean interrupted = new AtomicBoolean();
diff --git a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java
index 957f8ac..28d1cc8 100644
--- a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java
@@ -277,7 +277,7 @@
     c2.start(InetAddress.getLocalHost());
     File torrentFile = new File(TEST_RESOURCES + "/torrents", "file1.jar.torrent");
     File parentFiles = new File(TEST_RESOURCES + "/parentFiles");
-    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath());
+    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath(), true, false);
 
     final TrackedTorrent tt = tracker.getTrackedTorrent(torrent.getHexInfoHash());
     new WaitFor(10 * 1000) {
diff --git a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java
index 957f8ac..28d1cc8 100644
--- a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java
@@ -277,7 +277,7 @@
     c2.start(InetAddress.getLocalHost());
     File torrentFile = new File(TEST_RESOURCES + "/torrents", "file1.jar.torrent");
     File parentFiles = new File(TEST_RESOURCES + "/parentFiles");
-    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath());
+    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath(), true, false);
 
     final TrackedTorrent tt = tracker.getTrackedTorrent(torrent.getHexInfoHash());
     new WaitFor(10 * 1000) {
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 5f20a61..e740022 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -833,7 +833,8 @@
       }
     });
     try {
-      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60);
+      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60,
+              0, new AtomicBoolean(), 10);
     } finally {
       future.cancel(true);
       service.shutdown();
diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 5f20a61..e740022 100644
--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -833,7 +833,8 @@
       }
     });
     try {
-      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60);
+      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60,
+              0, new AtomicBoolean(), 10);
     } finally {
       future.cancel(true);
       service.shutdown();
diff --git a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java
index 1073c39..5d32dfb 100644
--- a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java
+++ b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java
@@ -263,7 +263,7 @@
 
       return new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER, infoHash,
               new Peer(ip, port, ByteBuffer.wrap(peerId)),
-              downloaded, uploaded, left, compact, noPeerId,
+              uploaded, downloaded, left, compact, noPeerId,
               event, numWant);
     } catch (InvalidBEncodingException ibee) {
       throw new MessageValidationException(
diff --git a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java
index 1073c39..5d32dfb 100644
--- a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java
+++ b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java
@@ -263,7 +263,7 @@
 
       return new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER, infoHash,
               new Peer(ip, port, ByteBuffer.wrap(peerId)),
-              downloaded, uploaded, left, compact, noPeerId,
+              uploaded, downloaded, left, compact, noPeerId,
               event, numWant);
     } catch (InvalidBEncodingException ibee) {
       throw new MessageValidationException(
diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java
index d87dfdb..6c29e52 100644
--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -563,7 +563,7 @@
           }
         });
         try {
-          future.get(5, TimeUnit.SECONDS);
+          future.get(10, TimeUnit.SECONDS);
         } catch (ExecutionException e) {
           fail("get execution exception on accept connection", e);
         } catch (TimeoutException e) {
diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java
index d87dfdb..6c29e52 100644
--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -563,7 +563,7 @@
           }
         });
         try {
-          future.get(5, TimeUnit.SECONDS);
+          future.get(10, TimeUnit.SECONDS);
         } catch (ExecutionException e) {
           fail("get execution exception on accept connection", e);
         } catch (TimeoutException e) {
diff --git a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
index 241e469..6ea4ff9 100644
--- a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
+++ b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
@@ -84,7 +84,7 @@
 
     final String hexInfoHash = peer.getHexInfoHash();
     SharedTorrent torrent = myContext.getTorrentsStorage().getTorrent(hexInfoHash);
-    if (torrent == null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
+    if (torrent == null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
       logger.debug("torrent with hash {} for peer {} doesn't found in storage. Maybe somebody deletes it manually", hexInfoHash, peer);
       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);
     }
diff --git a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
index 241e469..6ea4ff9 100644
--- a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
+++ b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
@@ -84,7 +84,7 @@
 
     final String hexInfoHash = peer.getHexInfoHash();
     SharedTorrent torrent = myContext.getTorrentsStorage().getTorrent(hexInfoHash);
-    if (torrent == null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
+    if (torrent == null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
       logger.debug("torrent with hash {} for peer {} doesn't found in storage. Maybe somebody deletes it manually", hexInfoHash, peer);
       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);
     }
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
index 241e469..6ea4ff9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
@@ -84,7 +84,7 @@
 
     final String hexInfoHash = peer.getHexInfoHash();
     SharedTorrent torrent = myContext.getTorrentsStorage().getTorrent(hexInfoHash);
-    if (torrent == null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
+    if (torrent == null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
       logger.debug("torrent with hash {} for peer {} doesn't found in storage. Maybe somebody deletes it manually", hexInfoHash, peer);
       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);
     }
diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
index 241e469..6ea4ff9 100644
--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java
@@ -84,7 +84,7 @@
 
     final String hexInfoHash = peer.getHexInfoHash();
     SharedTorrent torrent = myContext.getTorrentsStorage().getTorrent(hexInfoHash);
-    if (torrent == null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
+    if (torrent == null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {
       logger.debug("torrent with hash {} for peer {} doesn't found in storage. Maybe somebody deletes it manually", hexInfoHash, peer);
       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);
     }
diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
index c67dd65..767c192 100644
--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
@@ -45,7 +45,7 @@
       lockFor(hexInfoHash).lock();
       TrackedTorrent oldTorrent = this.myTorrents.putIfAbsent(hexInfoHash, torrent);
       actualTorrent = oldTorrent == null ? torrent : oldTorrent;
-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
     } finally {
       lockFor(hexInfoHash).unlock();
     }
@@ -53,7 +53,7 @@
   }
 
   private ReentrantLock lockFor(String torrentHash) {
-    return myLocks[torrentHash.hashCode() % myLocks.length];
+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];
   }
 
   public void cleanup(int torrentExpireTimeoutSec) {
diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
index c67dd65..767c192 100644
--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
@@ -45,7 +45,7 @@
       lockFor(hexInfoHash).lock();
       TrackedTorrent oldTorrent = this.myTorrents.putIfAbsent(hexInfoHash, torrent);
       actualTorrent = oldTorrent == null ? torrent : oldTorrent;
-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
     } finally {
       lockFor(hexInfoHash).unlock();
     }
@@ -53,7 +53,7 @@
   }
 
   private ReentrantLock lockFor(String torrentHash) {
-    return myLocks[torrentHash.hashCode() % myLocks.length];
+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];
   }
 
   public void cleanup(int torrentExpireTimeoutSec) {
diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
index c67dd65..767c192 100644
--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
@@ -45,7 +45,7 @@
       lockFor(hexInfoHash).lock();
       TrackedTorrent oldTorrent = this.myTorrents.putIfAbsent(hexInfoHash, torrent);
       actualTorrent = oldTorrent == null ? torrent : oldTorrent;
-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
     } finally {
       lockFor(hexInfoHash).unlock();
     }
@@ -53,7 +53,7 @@
   }
 
   private ReentrantLock lockFor(String torrentHash) {
-    return myLocks[torrentHash.hashCode() % myLocks.length];
+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];
   }
 
   public void cleanup(int torrentExpireTimeoutSec) {
diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
index c67dd65..767c192 100644
--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java
@@ -45,7 +45,7 @@
       lockFor(hexInfoHash).lock();
       TrackedTorrent oldTorrent = this.myTorrents.putIfAbsent(hexInfoHash, torrent);
       actualTorrent = oldTorrent == null ? torrent : oldTorrent;
-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);
     } finally {
       lockFor(hexInfoHash).unlock();
     }
@@ -53,7 +53,7 @@
   }
 
   private ReentrantLock lockFor(String torrentHash) {
-    return myLocks[torrentHash.hashCode() % myLocks.length];
+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];
   }
 
   public void cleanup(int torrentExpireTimeoutSec) {
diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java
index dabf756..c9ddd1e 100644
--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java
+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java
@@ -110,7 +110,7 @@
   }
 
   private boolean needRunCleanup() {
-    return (myTimeService.now() - lastCleanupTime) < myCleanupTimeoutMillis;
+    return (myTimeService.now() - lastCleanupTime) > myCleanupTimeoutMillis;
   }
 
   private void processWriteTasks() {
diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java
index dabf756..c9ddd1e 100644
--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java
+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java
@@ -110,7 +110,7 @@
   }
 
   private boolean needRunCleanup() {
-    return (myTimeService.now() - lastCleanupTime) < myCleanupTimeoutMillis;
+    return (myTimeService.now() - lastCleanupTime) > myCleanupTimeoutMillis;
   }
 
   private void processWriteTasks() {
diff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java
index 898c9f3..eecaa89 100644
--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java
+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java
@@ -73,16 +73,16 @@
     assertEquals(acceptCount.get(), 0);
     assertEquals(readCount.get(), 0);
     int serverPort = ConnectionManager.PORT_RANGE_START;
-    Socket socket = new Socket();
+    Socket socket = null;
     while (serverPort < ConnectionManager.PORT_RANGE_END) {
       try {
-        socket.connect(new InetSocketAddress("127.0.0.1", serverPort));
+        socket = new Socket("127.0.0.1", serverPort);
         if (socket.isConnected()) break;
       } catch (ConnectException ignored) {}
       serverPort++;
     }
 
-    if (!socket.isConnected()) {
+    if (socket == null || !socket.isConnected()) {
       fail("can not connect to server channel of connection manager");
     }
 
diff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java
index 898c9f3..eecaa89 100644
--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java
+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java
@@ -73,16 +73,16 @@
     assertEquals(acceptCount.get(), 0);
     assertEquals(readCount.get(), 0);
     int serverPort = ConnectionManager.PORT_RANGE_START;
-    Socket socket = new Socket();
+    Socket socket = null;
     while (serverPort < ConnectionManager.PORT_RANGE_END) {
       try {
-        socket.connect(new InetSocketAddress("127.0.0.1", serverPort));
+        socket = new Socket("127.0.0.1", serverPort);
         if (socket.isConnected()) break;
       } catch (ConnectException ignored) {}
       serverPort++;
     }
 
-    if (!socket.isConnected()) {
+    if (socket == null || !socket.isConnected()) {
       fail("can not connect to server channel of connection manager");
     }
 
diff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java
index 3a316e2..063d289 100644
--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java
+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java
@@ -67,7 +67,7 @@
    * Announce thread and control.
    */
   private Thread thread;
-  private boolean stop;
+  private volatile boolean stop;
   private boolean forceStop;
 
   /**
@@ -217,10 +217,10 @@
     logger.info("Starting announce loop...");
 
 
-    while (!this.stop && !Thread.interrupted()) {
+    while (!this.stop && !Thread.currentThread().isInterrupted()) {
       logger.debug("Starting announce for {} torrents", torrents.size());
       for (SharedTorrent torrent : this.torrents) {
-        if (this.stop || Thread.interrupted()){
+        if (this.stop || Thread.currentThread().isInterrupted()){
           break;
         }
         try {
diff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java
index 3a316e2..063d289 100644
--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java
+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java
@@ -67,7 +67,7 @@
    * Announce thread and control.
    */
   private Thread thread;
-  private boolean stop;
+  private volatile boolean stop;
   private boolean forceStop;
 
   /**
@@ -217,10 +217,10 @@
     logger.info("Starting announce loop...");
 
 
-    while (!this.stop && !Thread.interrupted()) {
+    while (!this.stop && !Thread.currentThread().isInterrupted()) {
       logger.debug("Starting announce for {} torrents", torrents.size());
       for (SharedTorrent torrent : this.torrents) {
-        if (this.stop || Thread.interrupted()){
+        if (this.stop || Thread.currentThread().isInterrupted()){
           break;
         }
         try {
diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 41d8802..5b2eaf8 100644
--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -640,7 +640,7 @@
 
   public void interrupt_download() throws IOException, InterruptedException, NoSuchAlgorithmException {
     tracker.setAcceptForeignTorrents(true);
-    Client seeder = createClient();
+    final Client seeder = createClient();
     final File dwnlFile = tempFiles.createTempFile(513 * 1024 * 60);
     final Torrent torrent = Torrent.create(dwnlFile, null, tracker.getAnnounceURI(), "Test");
 
diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 41d8802..5b2eaf8 100644
--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -640,7 +640,7 @@
 
   public void interrupt_download() throws IOException, InterruptedException, NoSuchAlgorithmException {
     tracker.setAcceptForeignTorrents(true);
-    Client seeder = createClient();
+    final Client seeder = createClient();
     final File dwnlFile = tempFiles.createTempFile(513 * 1024 * 60);
     final Torrent torrent = Torrent.create(dwnlFile, null, tracker.getAnnounceURI(), "Test");
 
diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 62af5ea..50ac783 100644
--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -508,7 +508,7 @@
         }
       }
     });
-    leecher.downloadUninterruptibly(st, 6000);
+    leecher.downloadUninterruptibly(st, 60);
 
 /*
     seeder.start(InetAddress.getLocalHost());
diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java
index 62af5ea..50ac783 100644
--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java
+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java
@@ -508,7 +508,7 @@
         }
       }
     });
-    leecher.downloadUninterruptibly(st, 6000);
+    leecher.downloadUninterruptibly(st, 60);
 
 /*
     seeder.start(InetAddress.getLocalHost());
diff --git a/src/com/turn/ttorrent/client/Announce.java b/src/com/turn/ttorrent/client/Announce.java
index 429ba1b..2a13bba 100644
--- a/src/com/turn/ttorrent/client/Announce.java
+++ b/src/com/turn/ttorrent/client/Announce.java
@@ -304,7 +304,7 @@
 			this.stop(true);
 		} catch (IOException ioe) {
 			logger.warn("Error reading response from tracker: {}",
-				ioe.getMessage(), ioe);
+				ioe.getMessage());
 		} finally {
 			if (result != null && result.containsKey("failure reason")) {
 				try {
diff --git a/src/com/turn/ttorrent/client/Announce.java b/src/com/turn/ttorrent/client/Announce.java
index 429ba1b..2a13bba 100644
--- a/src/com/turn/ttorrent/client/Announce.java
+++ b/src/com/turn/ttorrent/client/Announce.java
@@ -304,7 +304,7 @@
 			this.stop(true);
 		} catch (IOException ioe) {
 			logger.warn("Error reading response from tracker: {}",
-				ioe.getMessage(), ioe);
+				ioe.getMessage());
 		} finally {
 			if (result != null && result.containsKey("failure reason")) {
 				try {
diff --git a/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java b/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java
index 8546050..31dade4 100644
--- a/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java
+++ b/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java
@@ -1,7 +1,7 @@
 /*
  * $Id$
  *
- * Copyright (c) 2012 Valentyn Kolesnikov
+ * Copyright 2012 Valentyn Kolesnikov
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Valentyn Kolesnikov
  * @version $Revision$ $Date$
  */
-public class UkrainianToLatin {
+public final class UkrainianToLatin {
     private static final int INDEX_0 = 0;
     private static final int INDEX_1 = 1;
     private static final int INDEX_2 = 2;
diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
index d9a74a7..f0c71b0 100755
--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java
+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
@@ -18,7 +18,7 @@
 
         List<Path> paths = stream.collect(Collectors.toList());
 
-        assertThat(paths.get(0).toString()).endsWith("unix-stream");
+        assertThat(paths.get(0).toString()).contains("unix-stream");
     }
 
 }
diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
index d9a74a7..f0c71b0 100755
--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java
+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
@@ -18,7 +18,7 @@
 
         List<Path> paths = stream.collect(Collectors.toList());
 
-        assertThat(paths.get(0).toString()).endsWith("unix-stream");
+        assertThat(paths.get(0).toString()).contains("unix-stream");
     }
 
 }
diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
index d9a74a7..f0c71b0 100755
--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java
+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
@@ -18,7 +18,7 @@
 
         List<Path> paths = stream.collect(Collectors.toList());
 
-        assertThat(paths.get(0).toString()).endsWith("unix-stream");
+        assertThat(paths.get(0).toString()).contains("unix-stream");
     }
 
 }
diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
index d9a74a7..f0c71b0 100755
--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java
+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java
@@ -18,7 +18,7 @@
 
         List<Path> paths = stream.collect(Collectors.toList());
 
-        assertThat(paths.get(0).toString()).endsWith("unix-stream");
+        assertThat(paths.get(0).toString()).contains("unix-stream");
     }
 
 }
diff --git a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java
index f1d5114..dca88d8 100644
--- a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java
+++ b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java
@@ -52,7 +52,8 @@
         Assert.assertFalse(Signed.of("1", Mockito.mock(X509Certificate.class), date).equals(signed));
         Assert.assertFalse(Signed.of("1", Mockito.mock(X509Certificate.class), date).equals(signed));
         Assert.assertTrue(Signed.of("1", certificate, date).equals(Signed.of("1", certificate, date)));
-        Assert.assertFalse(Signed.of("1", certificate, date).equals(Signed.of("1", certificate, new Date())));
+        Assert.assertFalse(Signed.of("1", certificate, date)
+                .equals(Signed.of("1", certificate, new Date(System.currentTimeMillis() + (10 * 1000)))));
 
         Assert.assertNotNull(signed.hashCode());
         Assert.assertNotNull(Signed.of("1", certificate, date).hashCode());
diff --git a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java
index bb6b87e..d2cf783 100644
--- a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java
+++ b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java
@@ -167,7 +167,7 @@
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.eventReason(EventReason.MAILBOX_FULL)));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.issuer("Somebody")));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.evidenceIdentifier(InstanceIdentifier.generateUUID())));
-        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date())));
+        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date(System.currentTimeMillis() + (10 * 1000)))));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.sender(ParticipantIdentifier.of("9908:999999999"))));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.receiver(ParticipantIdentifier.of("9908:111111111"))));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.documentTypeIdentifier(DocumentTypeIdentifier.of("Testing..."))));
diff --git a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java
index f1d5114..dca88d8 100644
--- a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java
+++ b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java
@@ -52,7 +52,8 @@
         Assert.assertFalse(Signed.of("1", Mockito.mock(X509Certificate.class), date).equals(signed));
         Assert.assertFalse(Signed.of("1", Mockito.mock(X509Certificate.class), date).equals(signed));
         Assert.assertTrue(Signed.of("1", certificate, date).equals(Signed.of("1", certificate, date)));
-        Assert.assertFalse(Signed.of("1", certificate, date).equals(Signed.of("1", certificate, new Date())));
+        Assert.assertFalse(Signed.of("1", certificate, date)
+                .equals(Signed.of("1", certificate, new Date(System.currentTimeMillis() + (10 * 1000)))));
 
         Assert.assertNotNull(signed.hashCode());
         Assert.assertNotNull(Signed.of("1", certificate, date).hashCode());
diff --git a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java
index bb6b87e..d2cf783 100644
--- a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java
+++ b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java
@@ -167,7 +167,7 @@
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.eventReason(EventReason.MAILBOX_FULL)));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.issuer("Somebody")));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.evidenceIdentifier(InstanceIdentifier.generateUUID())));
-        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date())));
+        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date(System.currentTimeMillis() + (10 * 1000)))));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.sender(ParticipantIdentifier.of("9908:999999999"))));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.receiver(ParticipantIdentifier.of("9908:111111111"))));
         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.documentTypeIdentifier(DocumentTypeIdentifier.of("Testing..."))));
diff --git a/src/test/java/com/versioneye/utils/HttpUtilsTest.java b/src/test/java/com/versioneye/utils/HttpUtilsTest.java
index 41d8786..770958a 100644
--- a/src/test/java/com/versioneye/utils/HttpUtilsTest.java
+++ b/src/test/java/com/versioneye/utils/HttpUtilsTest.java
@@ -27,7 +27,7 @@
         mapper.writeValue(outstream, input);
 
         String url = "http://localhost:3000/api/v2/projects/1_54d11ffa6c13297974000002?api_key=f511fb2";
-        HttpUtils.post(url, outstream.toByteArray(), "project_file");
+        HttpUtils.post(url, outstream.toByteArray(), "project_file", null, null, null, null);
     }
 
 }
diff --git a/src/test/java/com/versioneye/utils/HttpUtilsTest.java b/src/test/java/com/versioneye/utils/HttpUtilsTest.java
index 41d8786..770958a 100644
--- a/src/test/java/com/versioneye/utils/HttpUtilsTest.java
+++ b/src/test/java/com/versioneye/utils/HttpUtilsTest.java
@@ -27,7 +27,7 @@
         mapper.writeValue(outstream, input);
 
         String url = "http://localhost:3000/api/v2/projects/1_54d11ffa6c13297974000002?api_key=f511fb2";
-        HttpUtils.post(url, outstream.toByteArray(), "project_file");
+        HttpUtils.post(url, outstream.toByteArray(), "project_file", null, null, null, null);
     }
 
 }
diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java
index 1455edd..7c4e6f9 100644
--- a/src/main/java/com/versioneye/SuperMojo.java
+++ b/src/main/java/com/versioneye/SuperMojo.java
@@ -90,7 +90,7 @@
         if (projectId == null || projectId.isEmpty())
             throw new MojoExecutionException("versioneye.properties found but without project_id! " +
                     "Read the instructions at https://github.com/versioneye/versioneye_maven_plugin");
-        return apiKey;
+        return projectId;
     }
 
     protected Properties fetchPropertiesFor( String key ) throws Exception {
diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java
index 1455edd..7c4e6f9 100644
--- a/src/main/java/com/versioneye/SuperMojo.java
+++ b/src/main/java/com/versioneye/SuperMojo.java
@@ -90,7 +90,7 @@
         if (projectId == null || projectId.isEmpty())
             throw new MojoExecutionException("versioneye.properties found but without project_id! " +
                     "Read the instructions at https://github.com/versioneye/versioneye_maven_plugin");
-        return apiKey;
+        return projectId;
     }
 
     protected Properties fetchPropertiesFor( String key ) throws Exception {
diff --git a/src/main/java/org/jboss/windup/plugin/WindupMojo.java b/src/main/java/org/jboss/windup/plugin/WindupMojo.java
index ea5bc31..9b2ddb6 100644
--- a/src/main/java/org/jboss/windup/plugin/WindupMojo.java
+++ b/src/main/java/org/jboss/windup/plugin/WindupMojo.java
@@ -257,7 +257,7 @@
         GraphContextFactory graphContextFactory = addonRegistry.getServices(GraphContextFactory.class).get();
 
         Path graphPath = windupConfiguration.getOutputDirectory().resolve("graph");
-        try (GraphContext graphContext = graphContextFactory.create(graphPath))
+        try (GraphContext graphContext = graphContextFactory.create(graphPath, true))
         {
             windupConfiguration.setGraphContext(graphContext);
             windupProcessor.execute(windupConfiguration);
diff --git a/src/main/java/org/jboss/windup/plugin/WindupMojo.java b/src/main/java/org/jboss/windup/plugin/WindupMojo.java
index ea5bc31..9b2ddb6 100644
--- a/src/main/java/org/jboss/windup/plugin/WindupMojo.java
+++ b/src/main/java/org/jboss/windup/plugin/WindupMojo.java
@@ -257,7 +257,7 @@
         GraphContextFactory graphContextFactory = addonRegistry.getServices(GraphContextFactory.class).get();
 
         Path graphPath = windupConfiguration.getOutputDirectory().resolve("graph");
-        try (GraphContext graphContext = graphContextFactory.create(graphPath))
+        try (GraphContext graphContext = graphContextFactory.create(graphPath, true))
         {
             windupConfiguration.setGraphContext(graphContext);
             windupProcessor.execute(windupConfiguration);
diff --git a/src/main/java/org/freedesktop/DesktopEntryWriter.java b/src/main/java/org/freedesktop/DesktopEntryWriter.java
index e7868e6..baa89b6 100644
--- a/src/main/java/org/freedesktop/DesktopEntryWriter.java
+++ b/src/main/java/org/freedesktop/DesktopEntryWriter.java
@@ -5,16 +5,16 @@
 
 public class DesktopEntryWriter {
 
-    private IniStyleFileWriter delgate;
+    private IniStyleFileWriter delegate;
 
     /**
      * @param writer the writer must be using a utf-8 encoding
      */
     public DesktopEntryWriter(Writer writer) {
-        this.delgate = new IniStyleFileWriter(writer);
+        this.delegate = new IniStyleFileWriter(writer);
     }
 
     public void write(DesktopEntry file) throws IOException {
-        delgate.write(file);
+        delegate.write(file);
     }
 }
diff --git a/src/main/java/org/freedesktop/DesktopEntryWriter.java b/src/main/java/org/freedesktop/DesktopEntryWriter.java
index e7868e6..baa89b6 100644
--- a/src/main/java/org/freedesktop/DesktopEntryWriter.java
+++ b/src/main/java/org/freedesktop/DesktopEntryWriter.java
@@ -5,16 +5,16 @@
 
 public class DesktopEntryWriter {
 
-    private IniStyleFileWriter delgate;
+    private IniStyleFileWriter delegate;
 
     /**
      * @param writer the writer must be using a utf-8 encoding
      */
     public DesktopEntryWriter(Writer writer) {
-        this.delgate = new IniStyleFileWriter(writer);
+        this.delegate = new IniStyleFileWriter(writer);
     }
 
     public void write(DesktopEntry file) throws IOException {
-        delgate.write(file);
+        delegate.write(file);
     }
 }
diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
index 39d2664..623b9e9 100644
--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
@@ -461,7 +461,7 @@
         String namespacePrefix = null;
         String namespace = null;
         String localName = null;
-        String[] tmp = context.functionName().getText().split(":", 2);
+        String[] tmp = context.eqName().getText().split(":", 2);
         if (tmp.length > 1) {
             namespacePrefix = tmp[0];
             localName = tmp[1];
diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
index 39d2664..623b9e9 100644
--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
@@ -461,7 +461,7 @@
         String namespacePrefix = null;
         String namespace = null;
         String localName = null;
-        String[] tmp = context.functionName().getText().split(":", 2);
+        String[] tmp = context.eqName().getText().split(":", 2);
         if (tmp.length > 1) {
             namespacePrefix = tmp[0];
             localName = tmp[1];
diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
index 39d2664..623b9e9 100644
--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
@@ -461,7 +461,7 @@
         String namespacePrefix = null;
         String namespace = null;
         String localName = null;
-        String[] tmp = context.functionName().getText().split(":", 2);
+        String[] tmp = context.eqName().getText().split(":", 2);
         if (tmp.length > 1) {
             namespacePrefix = tmp[0];
             localName = tmp[1];
diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
index 39d2664..623b9e9 100644
--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java
@@ -461,7 +461,7 @@
         String namespacePrefix = null;
         String namespace = null;
         String localName = null;
-        String[] tmp = context.functionName().getText().split(":", 2);
+        String[] tmp = context.eqName().getText().split(":", 2);
         if (tmp.length > 1) {
             namespacePrefix = tmp[0];
             localName = tmp[1];
