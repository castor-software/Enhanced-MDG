[
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "2d6a4c90ec271ae45214dcf905a077abfc2f5733",
    "commitFile": "src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java",
    "patch": "diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex 00f38b3..d8a1475 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -65,7 +65,7 @@\n      * @param baseDirName    查找的文件夹路径\n      * @param targetFileName 需要查找的文件名\n      */\n-    private static List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n+    private  List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n         /**\n          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。\n          */\n@@ -82,7 +82,7 @@\n                 } else {\n                     if (wildcardMatch(targetFileName, file.getName())) {\n                         String fileName \u003d file.getAbsolutePath();\n-                        String open \u003d PathKit.getRootClassPath() + File.separator;\n+                        String open \u003d classpath + File.separator;\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\ndiff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex 00f38b3..d8a1475 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -65,7 +65,7 @@\n      * @param baseDirName    查找的文件夹路径\n      * @param targetFileName 需要查找的文件名\n      */\n-    private static List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n+    private  List\u003cString\u003e findFiles(String baseDirName, String targetFileName) {\n         /**\n          * 算法简述： 从某个给定的需查找的文件夹出发，搜索该文件夹的所有子文件夹及文件， 若为文件，则进行匹配，匹配成功则加入结果集，若为子文件夹，则进队列。 队列不空，重复上述操作，队列为空，程序结束，返回结果。\n          */\n@@ -82,7 +82,7 @@\n                 } else {\n                     if (wildcardMatch(targetFileName, file.getName())) {\n                         String fileName \u003d file.getAbsolutePath();\n-                        String open \u003d PathKit.getRootClassPath() + File.separator;\n+                        String open \u003d classpath + File.separator;\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n",
    "projectName": "JFinal-ext2",
    "lineNum": 64,
    "nodeStartChar": 2083,
    "before": "10",
    "after": "2"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "9d858bf67a03122801b9d6eae68d4fee3bd9c9d5",
    "commitFile": "src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java",
    "patch": "diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex e271805..00f38b3 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -86,7 +86,7 @@\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n-                        String className \u003d fileName.substring(start + open.length(), end).replaceAll(File.separator, \".\");\n+                        String className \u003d fileName.substring(start + open.length(), end).replace(File.separator, \".\");\n                         classFiles.add(className);\n                     }\n                 }\ndiff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex e271805..00f38b3 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -86,7 +86,7 @@\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n-                        String className \u003d fileName.substring(start + open.length(), end).replaceAll(File.separator, \".\");\n+                        String className \u003d fileName.substring(start + open.length(), end).replace(File.separator, \".\");\n                         classFiles.add(className);\n                     }\n                 }\n",
    "projectName": "JFinal-ext2",
    "lineNum": 89,
    "nodeStartChar": 3453,
    "before": "fileName.substring(start + open.length(),end).replaceAll(File.separator,\".\")",
    "after": "fileName.substring(start + open.length(),end).replace(File.separator,\".\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9d858bf67a03122801b9d6eae68d4fee3bd9c9d5",
    "commitFile": "src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java",
    "patch": "diff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex e271805..00f38b3 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -86,7 +86,7 @@\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n-                        String className \u003d fileName.substring(start + open.length(), end).replaceAll(File.separator, \".\");\n+                        String className \u003d fileName.substring(start + open.length(), end).replace(File.separator, \".\");\n                         classFiles.add(className);\n                     }\n                 }\ndiff --git a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\nindex e271805..00f38b3 100644\n--- a/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n+++ b/src/main/ext/java/com/jfinal/ext/kit/ClassSearcher.java\n@@ -86,7 +86,7 @@\n                         String close \u003d \".class\";\n                         int start \u003d fileName.indexOf(open);\n                         int end \u003d fileName.indexOf(close, start + open.length());\n-                        String className \u003d fileName.substring(start + open.length(), end).replaceAll(File.separator, \".\");\n+                        String className \u003d fileName.substring(start + open.length(), end).replace(File.separator, \".\");\n                         classFiles.add(className);\n                     }\n                 }\n",
    "projectName": "JFinal-ext2",
    "lineNum": 89,
    "nodeStartChar": 3453,
    "before": "fileName.substring(start + open.length(),end).replaceAll(File.separator,\".\")",
    "after": "fileName.substring(start + open.length(),end).replace(File.separator,\".\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "de31a5c9102e3cb57f489b3feed5b30df99e01e2",
    "commitFile": "jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java",
    "patch": "diff --git a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\nindex 5a8f85c..511bfd6 100644\n--- a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n+++ b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n@@ -116,7 +116,7 @@\n \t\t\t\t\t\t\t\t.header(\"Content-Type\", \"image/png\")\n \t\t\t\t\t\t\t\t.content(IOUtils.toByteArray(texture.openStream()));\n \n-\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType()));\n+\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType(), headers));\n \t\t\t\t\t}\n \t\t\t\t}\n \ndiff --git a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\nindex 5a8f85c..511bfd6 100644\n--- a/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n+++ b/jmccc-mojang-api/src/main/java/org/to2mbn/jmccc/mojangapi/MojangAPIImpl.java\n@@ -116,7 +116,7 @@\n \t\t\t\t\t\t\t\t.header(\"Content-Type\", \"image/png\")\n \t\t\t\t\t\t\t\t.content(IOUtils.toByteArray(texture.openStream()));\n \n-\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType()));\n+\t\t\t\t\t\trequireEmpty(requester.requestWithPayload(\"PUT\", url, multipart.finish(), multipart.getContentType(), headers));\n \t\t\t\t\t}\n \t\t\t\t}\n \n",
    "projectName": "JMCCC",
    "lineNum": 119,
    "nodeStartChar": 4180,
    "before": "requester.requestWithPayload(\"PUT\",url,multipart.finish(),multipart.getContentType())",
    "after": "requester.requestWithPayload(\"PUT\",url,multipart.finish(),multipart.getContentType(),headers)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "28c0a45e6a56f39875208a0453ec891b47d0b691",
    "commitFile": "jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java",
    "patch": "diff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\nindex 083be28..204c2df 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n@@ -13,7 +13,7 @@\n \t@Override\n \tpublic void execute(final CombinedDownloadContext\u003cVoid\u003e context) throws Exception {\n \t\tfor (CombinedDownloadTask\u003c?\u003e task : tasks) {\n-\t\t\tif (task \u003d\u003d null) {\n+\t\t\tif (task !\u003d null) {\n \t\t\t\tcontext.submit(task, null, true);\n \t\t\t}\n \t\t}\ndiff --git a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\nindex 083be28..204c2df 100644\n--- a/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n+++ b/jmccc-mcdownloader/src/main/java/org/to2mbn/jmccc/mcdownloader/download/combine/MultipleCombinedDownloadTask.java\n@@ -13,7 +13,7 @@\n \t@Override\n \tpublic void execute(final CombinedDownloadContext\u003cVoid\u003e context) throws Exception {\n \t\tfor (CombinedDownloadTask\u003c?\u003e task : tasks) {\n-\t\t\tif (task \u003d\u003d null) {\n+\t\t\tif (task !\u003d null) {\n \t\t\t\tcontext.submit(task, null, true);\n \t\t\t}\n \t\t}\n",
    "projectName": "JMCCC",
    "lineNum": 16,
    "nodeStartChar": 452,
    "before": "\u003d\u003d",
    "after": "!\u003d"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "commitSHA1": "907c183951bfd6b1965515ecb1e90ae6c3af40b9",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\nindex 4c2fe77..b5448e1 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n@@ -18,7 +18,7 @@\n \n \t\t@Override\n \t\tpublic void run() {\n-\t\t\twhile (Thread.interrupted()) {\n+\t\t\twhile (!Thread.interrupted()) {\n \t\t\t\ttry {\n \t\t\t\t\tif (in.read() \u003d\u003d -1) {\n \t\t\t\t\t\tbreak;\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\nindex 4c2fe77..b5448e1 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/exec/DaemonStreamPumpMonitor.java\n@@ -18,7 +18,7 @@\n \n \t\t@Override\n \t\tpublic void run() {\n-\t\t\twhile (Thread.interrupted()) {\n+\t\t\twhile (!Thread.interrupted()) {\n \t\t\t\ttry {\n \t\t\t\t\tif (in.read() \u003d\u003d -1) {\n \t\t\t\t\t\tbreak;\n",
    "projectName": "JMCCC",
    "lineNum": 21,
    "nodeStartChar": 443,
    "before": "Thread.interrupted()",
    "after": "!Thread.interrupted()"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "6753cee6a259255b21df95f5abbf013718c89b84",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\nindex f21f977..b9b7ca3 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n@@ -88,7 +88,7 @@\n             args.add(\"--server\");\n             args.add(launchOption.getServerInfo().getHost());\n \n-            if (launchOption.getServerInfo().getPort() \u003d\u003d 0) {\n+            if (launchOption.getServerInfo().getPort() \u003e 0) {\n                 args.add(\"--port\");\n                 args.add(String.valueOf(launchOption.getServerInfo().getPort()));\n             }\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\nindex f21f977..b9b7ca3 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/launch/LaunchArgument.java\n@@ -88,7 +88,7 @@\n             args.add(\"--server\");\n             args.add(launchOption.getServerInfo().getHost());\n \n-            if (launchOption.getServerInfo().getPort() \u003d\u003d 0) {\n+            if (launchOption.getServerInfo().getPort() \u003e 0) {\n                 args.add(\"--port\");\n                 args.add(String.valueOf(launchOption.getServerInfo().getPort()));\n             }\n",
    "projectName": "JMCCC",
    "lineNum": 91,
    "nodeStartChar": 2829,
    "before": "\u003d\u003d",
    "after": "\u003e"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "dc9d011d4a2d7ba889d50f1c042d7703493aca74",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\nindex fc22d37..d0d4040 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n@@ -49,7 +49,7 @@\n \t\ttry {\n \t\t\treturn new URI(uri);\n \t\t} catch (URISyntaxException e) {\n-\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\");\n+\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\", e);\n \t\t}\n \t}\n \ndiff --git a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\nindex fc22d37..d0d4040 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/mcdownloader/provider/DefaultLayoutProvider.java\n@@ -49,7 +49,7 @@\n \t\ttry {\n \t\t\treturn new URI(uri);\n \t\t} catch (URISyntaxException e) {\n-\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\");\n+\t\t\tthrow new IllegalStateException(\"unable to convert \" + uri + \" to URI\", e);\n \t\t}\n \t}\n \n",
    "projectName": "JMCCC",
    "lineNum": 52,
    "nodeStartChar": 1257,
    "before": "new IllegalStateException(\"unable to convert \" + uri + \" to URI\")",
    "after": "new IllegalStateException(\"unable to convert \" + uri + \" to URI\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "d4a6c7ebed941baeed0358f502c69cdbc319502d",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\nindex 25f3f90..3b73daa 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n@@ -23,7 +23,8 @@\n \n         JSONObject json \u003d readJson(minecraftDir.getVersionJson(name));\n         String version \u003d json.getString(\"id\");\n-        String assets \u003d json.getString(\"assets\");\n+        // see https://github.com/to2mbn/JMCCC/issues/8\n+        String assets \u003d json.optString(\"assets\", \"legacy\");\n         String mainClass \u003d json.getString(\"mainClass\");\n         String launchArgs \u003d json.getString(\"minecraftArguments\");\n         loadDepends(json.getJSONArray(\"libraries\"), libraries);\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\nindex 25f3f90..3b73daa 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/VersionParser.java\n@@ -23,7 +23,8 @@\n \n         JSONObject json \u003d readJson(minecraftDir.getVersionJson(name));\n         String version \u003d json.getString(\"id\");\n-        String assets \u003d json.getString(\"assets\");\n+        // see https://github.com/to2mbn/JMCCC/issues/8\n+        String assets \u003d json.optString(\"assets\", \"legacy\");\n         String mainClass \u003d json.getString(\"mainClass\");\n         String launchArgs \u003d json.getString(\"minecraftArguments\");\n         loadDepends(json.getJSONArray(\"libraries\"), libraries);\n",
    "projectName": "JMCCC",
    "lineNum": 27,
    "nodeStartChar": 892,
    "before": "json.getString(\"assets\")",
    "after": "json.optString(\"assets\",\"legacy\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "03737b683bd1591ce5251dd9675754cd07fae4ab",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\n",
    "projectName": "JMCCC",
    "lineNum": 94,
    "nodeStartChar": 2804,
    "before": "UUIDUtils.toUnsignedUUIDString(selected.getUUID())",
    "after": "UUIDUtils.unsign(selected.getUUID())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "03737b683bd1591ce5251dd9675754cd07fae4ab",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\nindex 965274c..03054bb 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/auth/YggdrasilAuthenticator.java\n@@ -91,14 +91,14 @@\n \t\t\tproperties \u003d new JSONObject(session.getUserProperties()).toString();\n \t\t}\n \n-\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.toUnsignedUUIDString(selected.getUUID()), properties, session.getUserType().getName());\n+\t\treturn new AuthResult(selected.getName(), session.getAccessToken(), UUIDUtils.unsign(selected.getUUID()), properties, session.getUserType().getName());\n \t}\n \n \tabstract protected Session createSession() throws com.github.to2mbn.jyal.AuthenticationException;\n \n \tprotected SessionService getSessionService() {\n \t\tif (sessionService \u003d\u003d null) {\n-\t\t\tsessionService \u003d new YggdrasilSessionService(UUIDUtils.toUnsignedUUIDString(clientToken), Agent.MINECRAFT);\n+\t\t\tsessionService \u003d new YggdrasilSessionService(clientToken, Agent.MINECRAFT);\n \t\t}\n \t\treturn sessionService;\n \t}\n",
    "projectName": "JMCCC",
    "lineNum": 94,
    "nodeStartChar": 2804,
    "before": "UUIDUtils.toUnsignedUUIDString(selected.getUUID())",
    "after": "UUIDUtils.unsign(selected.getUUID())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "36ab00a2889a5d83083c174fd7e313aa6e0605e1",
    "commitFile": "src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\nindex 678e767..a87a0ba 100644\n--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n@@ -9,7 +9,7 @@\n \t}\n \n \tpublic static UUID fromUUIDString(String uuid) {\n-\t\tif (uuid.length() \u003d\u003d 32) {\n+\t\tif (uuid.length() \u003d\u003d 36) {\n \t\t\treturn UUID.fromString(uuid);\n \t\t} else {\n \t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 4) + \"-\" + uuid.substring(12, 4) + \"-\" + uuid.substring(16, 4) + \"-\" + uuid.substring(20, 12));\ndiff --git a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\nindex 678e767..a87a0ba 100644\n--- a/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n+++ b/src/main/java/com/github/to2mbn/jyal/util/UUIDUtils.java\n@@ -9,7 +9,7 @@\n \t}\n \n \tpublic static UUID fromUUIDString(String uuid) {\n-\t\tif (uuid.length() \u003d\u003d 32) {\n+\t\tif (uuid.length() \u003d\u003d 36) {\n \t\t\treturn UUID.fromString(uuid);\n \t\t} else {\n \t\t\treturn UUID.fromString(uuid.substring(0, 8) + \"-\" + uuid.substring(8, 4) + \"-\" + uuid.substring(12, 4) + \"-\" + uuid.substring(16, 4) + \"-\" + uuid.substring(20, 12));\n",
    "projectName": "JMCCC",
    "lineNum": 12,
    "nodeStartChar": 270
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "commitSHA1": "dd3c6ac2f2b9ccc5af15fff12f754c60e90d8951",
    "commitFile": "src/main/java/com/github/to2mbn/jmccc/version/Library.java",
    "patch": "diff --git a/src/main/java/com/github/to2mbn/jmccc/version/Library.java b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\nindex 4fa4fc9..542eba6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n@@ -132,7 +132,7 @@\n      * @return true if the library is missing in the given minecraft directory\n      */\n     public boolean isMissing(MinecraftDirectory minecraftDir) {\n-        return new File(minecraftDir.getLibraries(), path).isFile();\n+        return !new File(minecraftDir.getLibraries(), path).isFile();\n     }\n \n     @Override\ndiff --git a/src/main/java/com/github/to2mbn/jmccc/version/Library.java b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\nindex 4fa4fc9..542eba6 100644\n--- a/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n+++ b/src/main/java/com/github/to2mbn/jmccc/version/Library.java\n@@ -132,7 +132,7 @@\n      * @return true if the library is missing in the given minecraft directory\n      */\n     public boolean isMissing(MinecraftDirectory minecraftDir) {\n-        return new File(minecraftDir.getLibraries(), path).isFile();\n+        return !new File(minecraftDir.getLibraries(), path).isFile();\n     }\n \n     @Override\n",
    "projectName": "JMCCC",
    "lineNum": 135,
    "nodeStartChar": 3919,
    "before": "new File(minecraftDir.getLibraries(),path).isFile()",
    "after": "!new File(minecraftDir.getLibraries(),path).isFile()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "96408175622f4cd3222957c11a92351d4c6c143e",
    "commitFile": "src/main/java/com/darkyoooooo/jmccc/util/Utils.java",
    "patch": "diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\nindex 37a538a..52b8d3a 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n@@ -77,7 +77,7 @@\n                     }\n                 }\n \n-                in.getNextEntry();\n+                in.closeEntry();\n             }\n         }\n     }\ndiff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\nindex 37a538a..52b8d3a 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n@@ -77,7 +77,7 @@\n                     }\n                 }\n \n-                in.getNextEntry();\n+                in.closeEntry();\n             }\n         }\n     }\n",
    "projectName": "JMCCC",
    "lineNum": 80,
    "nodeStartChar": 2513,
    "before": "in.getNextEntry()",
    "after": "in.closeEntry()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "96408175622f4cd3222957c11a92351d4c6c143e",
    "commitFile": "src/main/java/com/darkyoooooo/jmccc/util/Utils.java",
    "patch": "diff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\nindex 37a538a..52b8d3a 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n@@ -77,7 +77,7 @@\n                     }\n                 }\n \n-                in.getNextEntry();\n+                in.closeEntry();\n             }\n         }\n     }\ndiff --git a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\nindex 37a538a..52b8d3a 100644\n--- a/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n+++ b/src/main/java/com/darkyoooooo/jmccc/util/Utils.java\n@@ -77,7 +77,7 @@\n                     }\n                 }\n \n-                in.getNextEntry();\n+                in.closeEntry();\n             }\n         }\n     }\n",
    "projectName": "JMCCC",
    "lineNum": 80,
    "nodeStartChar": 2513,
    "before": "in.getNextEntry()",
    "after": "in.closeEntry()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 99,
    "nodeStartChar": 3318,
    "before": "new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\",e)",
    "after": "new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 108,
    "nodeStartChar": 3695,
    "before": "new AssertionError(\"Java 6 Cleaner not available\",e)",
    "after": "new AssertionError(\"Java 6 Cleaner not available\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 126,
    "nodeStartChar": 4197,
    "before": "new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\",e)",
    "after": "new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "dfc8eb93149d50e1dbd265953d15a5dc9b5cf8dd",
    "commitFile": "mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java",
    "patch": "diff --git a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\nindex d7e8bf0..838c833 100644\n--- a/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n+++ b/mat-file-io/src/main/java/us/hebi/matlab/common/memory/NativeMemory.java\n@@ -96,7 +96,7 @@\n             try {\r\n                 cleanMethod.invoke(getCleanerMethod.invoke(buffer));\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -105,7 +105,7 @@\n                 getCleanerMethod \u003d Class.forName(\"sun.nio.ch.DirectBuffer\").getMethod(\"cleaner\");\r\n                 cleanMethod \u003d Class.forName(\"sun.misc.Cleaner\").getMethod(\"clean\");\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 6 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 6 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n@@ -123,7 +123,7 @@\n             try {\r\n                 INVOKE_CLEANER.invoke(UnsafeAccess.UNSAFE, buffer);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner failed to free DirectBuffer\");\r\n             }\r\n         }\r\n \r\n@@ -131,7 +131,7 @@\n             try {\r\n                 INVOKE_CLEANER \u003d UnsafeAccess.UNSAFE.getClass().getMethod(\"invokeCleaner\", ByteBuffer.class);\r\n             } catch (Exception e) {\r\n-                throw new AssertionError(\"Java 9 Cleaner not available\", e);\r\n+                throw new AssertionError(\"Java 9 Cleaner not available\");\r\n             }\r\n         }\r\n \r\n",
    "projectName": "MFL",
    "lineNum": 134,
    "nodeStartChar": 4502,
    "before": "new AssertionError(\"Java 9 Cleaner not available\",e)",
    "after": "new AssertionError(\"Java 9 Cleaner not available\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "f320a9c8b5df3931ab86e330357c1ded137461ec",
    "commitFile": "src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java",
    "patch": "diff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\nindex cfdd50c..a7132f4 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/mojo/AbstractMessageCatalogMojo.java\n@@ -32,9 +32,9 @@\n \n     public void execute() throws MojoExecutionException, MojoFailureException\n     {\n-        for (String configuration : configurations)\n+        if (this.project \u003d\u003d null)\n         {\n-            this.getLog().info(configuration);\n+            throw new MojoFailureException(\"It\u0027s not a maven project, isn\u0027t it?\");\n         }\n         if (this.project.getPackaging().equalsIgnoreCase(\"pom\"))\n         {\n@@ -90,7 +90,7 @@\n             }\n             catch (MessageCatalogException e)\n             {\n-                throw new MojoFailureException(e.getMessage(), e.getCause());\n+                throw new MojoFailureException(e.getMessage(), e);\n             }\n         }\n         while (!foundConfiguration \u0026\u0026 i \u003c this.configurations.length);\ndiff --git a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\nindex a6da72c..3cf5adf 100644\n--- a/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n+++ b/src/main/java/de/cubeisland/maven/plugins/messagecatalog/MessageCatalogFactory.java\n@@ -83,7 +83,7 @@\n         }\n         catch (IOException e)\n         {\n-            throw new ConfigurationException(\"The configuration file could not be read.\");\n+            throw new ConfigurationException(\"The configuration file could not be read.\", e);\n         }\n \n         MessageExtractor messageExtractor \u003d null;\n@@ -110,7 +110,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \" + messageExtractorClass.getName());\n+                    throw new ConfigurationException(\"Could not create a MessageExtractor instance of \u0027\" + messageExtractorClass.getName() + \"\u0027.\", e);\n                 }\n                 sourceNode \u003d node;\n             }\n@@ -128,7 +128,7 @@\n                 }\n                 catch (Exception e)\n                 {\n-                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \" + catalogFormatClass.getName());\n+                    throw new ConfigurationException(\"Could not create an CatalogFormat instance of \u0027\" + catalogFormatClass.getName() + \"\u0027.\", e);\n                 }\n                 catalogNode \u003d node;\n             }\n",
    "projectName": "Pericopist",
    "lineNum": 86,
    "nodeStartChar": 3328,
    "before": "new ConfigurationException(\"The configuration file could not be read.\")",
    "after": "new ConfigurationException(\"The configuration file could not be read.\",e)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "272fdba4c6e79a679ae24e310f41ba772cb0666e",
    "commitFile": "src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\nindex 8a5212c..3a09d55 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n@@ -41,7 +41,7 @@\n   protected ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n     super(args);\n     tokenSeparator \u003d get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n-    if (tokenSeparator.length() !\u003d 0)\n+    if (tokenSeparator.length() !\u003d 1)\n       throw new IllegalArgumentException(\"tokenSeparator should be 1 char: \"+tokenSeparator);\n     if (!args.isEmpty()) {\n       throw new IllegalArgumentException(\"Unknown parameters: \" + args);\ndiff --git a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\nindex 8a5212c..3a09d55 100644\n--- a/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n+++ b/src/main/java/org/opensextant/solrtexttagger/ConcatenateFilterFactory.java\n@@ -41,7 +41,7 @@\n   protected ConcatenateFilterFactory(Map\u003cString, String\u003e args) {\n     super(args);\n     tokenSeparator \u003d get(args, \"tokenSeparator\", ShingleFilter.TOKEN_SEPARATOR);\n-    if (tokenSeparator.length() !\u003d 0)\n+    if (tokenSeparator.length() !\u003d 1)\n       throw new IllegalArgumentException(\"tokenSeparator should be 1 char: \"+tokenSeparator);\n     if (!args.isEmpty()) {\n       throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n",
    "projectName": "SolrTextTagger",
    "lineNum": 44,
    "nodeStartChar": 1499
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "18de275e42d0d3ab0843e93a94a68c36d30d26c8",
    "commitFile": "src/main/java/com/google/acai/Dependencies.java",
    "patch": "diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex ebe1580..70c4c39 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -138,7 +138,7 @@\n      * Removes the directed edge from {@code tail} to {@code head}.\n      */\n     void removeEdge(T tail, T head) {\n-      checkState(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n+      checkArgument(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n       checkState(predecessors.remove(head, tail), \"Graph state was invalid.\");\n     }\n \ndiff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex ebe1580..70c4c39 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -138,7 +138,7 @@\n      * Removes the directed edge from {@code tail} to {@code head}.\n      */\n     void removeEdge(T tail, T head) {\n-      checkState(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n+      checkArgument(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n       checkState(predecessors.remove(head, tail), \"Graph state was invalid.\");\n     }\n \n",
    "projectName": "acai",
    "lineNum": 141,
    "nodeStartChar": 5171,
    "before": "checkState(successors.remove(tail,head),\"Attempt to remove non-existent edge\")",
    "after": "checkArgument(successors.remove(tail,head),\"Attempt to remove non-existent edge\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "18de275e42d0d3ab0843e93a94a68c36d30d26c8",
    "commitFile": "src/main/java/com/google/acai/Dependencies.java",
    "patch": "diff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex ebe1580..70c4c39 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -138,7 +138,7 @@\n      * Removes the directed edge from {@code tail} to {@code head}.\n      */\n     void removeEdge(T tail, T head) {\n-      checkState(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n+      checkArgument(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n       checkState(predecessors.remove(head, tail), \"Graph state was invalid.\");\n     }\n \ndiff --git a/src/main/java/com/google/acai/Dependencies.java b/src/main/java/com/google/acai/Dependencies.java\nindex ebe1580..70c4c39 100644\n--- a/src/main/java/com/google/acai/Dependencies.java\n+++ b/src/main/java/com/google/acai/Dependencies.java\n@@ -138,7 +138,7 @@\n      * Removes the directed edge from {@code tail} to {@code head}.\n      */\n     void removeEdge(T tail, T head) {\n-      checkState(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n+      checkArgument(successors.remove(tail, head), \"Attempt to remove non-existent edge\");\n       checkState(predecessors.remove(head, tail), \"Graph state was invalid.\");\n     }\n \n",
    "projectName": "acai",
    "lineNum": 141,
    "nodeStartChar": 5171,
    "before": "checkState(successors.remove(tail,head),\"Attempt to remove non-existent edge\")",
    "after": "checkArgument(successors.remove(tail,head),\"Attempt to remove non-existent edge\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "6428e0276d0cc992c70aefad23ceed5bebb96311",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\n",
    "projectName": "admin-persistence",
    "lineNum": 208,
    "nodeStartChar": 6107,
    "before": "Messages.getMessage(\"entity.create-message\")",
    "after": "Messages.getMessage(\"entity.create-message\",entity.getClass().getSimpleName())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "6428e0276d0cc992c70aefad23ceed5bebb96311",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\n",
    "projectName": "admin-persistence",
    "lineNum": 218,
    "nodeStartChar": 6431,
    "before": "Messages.getMessage(\"entity.remove-message\")",
    "after": "Messages.getMessage(\"entity.remove-message\",entity.getClass().getSimpleName())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "6428e0276d0cc992c70aefad23ceed5bebb96311",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\ndiff --git a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\nindex da57093..5f9353d 100644\n--- a/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n+++ b/src/main/java/com/github/adminfaces/persistence/bean/CrudMB.java\n@@ -205,7 +205,7 @@\n \n     public String getCreateMessage() {\n         if (createMessage \u003d\u003d null) {\n-            createMessage \u003d Messages.getMessage(\"entity.create-message\");\n+            createMessage \u003d Messages.getMessage(\"entity.create-message\", entity.getClass().getSimpleName());\n             if (createMessage.startsWith(\"??\")) {\n                 createMessage \u003d \"Record created successfully\";\n             }\n@@ -215,7 +215,7 @@\n \n     public String getRemoveMessage() {\n         if (removeMessage \u003d\u003d null) {\n-            removeMessage \u003d Messages.getMessage(\"entity.remove-message\");\n+            removeMessage \u003d Messages.getMessage(\"entity.remove-message\", entity.getClass().getSimpleName());\n             if (removeMessage.startsWith(\"??\")) {\n                 removeMessage \u003d \"Record removed successfully\";\n             }\n@@ -225,7 +225,7 @@\n \n     public String getUpdateMessage() {\n         if (updateMessage \u003d\u003d null) {\n-            updateMessage \u003d Messages.getMessage(\"entity.update-message\");\n+            updateMessage \u003d Messages.getMessage(\"entity.update-message\", entity.getClass().getSimpleName());\n             if (updateMessage.startsWith(\"??\")) {\n                 updateMessage \u003d \"Record updated successfully\";\n             }\n",
    "projectName": "admin-persistence",
    "lineNum": 228,
    "nodeStartChar": 6755,
    "before": "Messages.getMessage(\"entity.update-message\")",
    "after": "Messages.getMessage(\"entity.update-message\",entity.getClass().getSimpleName())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "208cfa3b4ce75750045b90174267ec3880359924",
    "commitFile": "src/main/java/com/github/adminfaces/persistence/model/Filter.java",
    "patch": "diff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex 3aa63b1..1064263 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -9,7 +9,7 @@\n  * Created by rmpestano on 9/7/14.\n  * class which holds database pagination metadata\n  */\n-public class Filter\u003cT extends Serializable\u003e {\n+public class Filter\u003cT extends PersistenceEntity\u003e {\n     private T entity;\n     private int first;\n     private int pageSize;\ndiff --git a/src/main/java/com/github/adminfaces/persistence/model/Filter.java b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\nindex 3aa63b1..1064263 100644\n--- a/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n+++ b/src/main/java/com/github/adminfaces/persistence/model/Filter.java\n@@ -9,7 +9,7 @@\n  * Created by rmpestano on 9/7/14.\n  * class which holds database pagination metadata\n  */\n-public class Filter\u003cT extends Serializable\u003e {\n+public class Filter\u003cT extends PersistenceEntity\u003e {\n     private T entity;\n     private int first;\n     private int pageSize;\n",
    "projectName": "admin-persistence",
    "lineNum": 12,
    "nodeStartChar": 252,
    "before": "Serializable",
    "after": "PersistenceEntity"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 34,
    "nodeStartChar": 996,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 43,
    "nodeStartChar": 1381,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 52,
    "nodeStartChar": 1685,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 63,
    "nodeStartChar": 2123,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "f537a03d2d25fdfecda7999ec10e1da67dc3b8f3",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 70,
    "nodeStartChar": 2341,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 34,
    "nodeStartChar": 996,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 43,
    "nodeStartChar": 1381,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 52,
    "nodeStartChar": 1685,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 63,
    "nodeStartChar": 2123,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "e72369c0de0f8b48b2679584f0657c583b010abb",
    "commitFile": "PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java",
    "patch": "diff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\ndiff --git a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\nindex f54e02f..2737b36 100644\n--- a/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n+++ b/ProbeSender/src/main/java/ws/argo/probe/ProbeSender.java\n@@ -90,7 +90,7 @@\n   /**\n    * Close the underlying transport if necessary.\n    * \n-   * @throws ProbeSenderException if something goes wrong\n+   * @throws TransportException if something goes wrong\n    */\n   public void close() throws TransportException {\n     probeTransport.close();\ndiff --git a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\nindex 114e706..077bd02 100644\n--- a/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n+++ b/ProbeSender/src/main/java/ws/argo/transport/probe/standard/MulticastTransport.java\n@@ -220,7 +220,7 @@\n    * Actually send the probe out on the wire.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n   @Override\ndiff --git a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\nindex 99b65e5..c07f95b 100755\n--- a/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n+++ b/Responder/ResponderDaemon/src/main/java/ws/argo/responder/Responder.java\n@@ -136,7 +136,7 @@\n   /**\n    * Create a new instance of a Responder.\n    * \n-   * @param cliValues - the list of command line arguments\n+   * @param config  - the list of command line arguments\n    */\n   public Responder(ResponderConfiguration config) {\n     this._config \u003d config;\ndiff --git a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\nindex 4409faf..8b5e722 100644\n--- a/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n+++ b/PluginFramework/src/main/java/ws/argo/plugin/transport/sender/Transport.java\n@@ -38,16 +38,16 @@\n    * @param networkInterface name of the network interface\n    * @throws TransportConfigException if something goes wrong\n    */\n-  public void initialize(Properties p, String networkInterface) throws TransportConfigException;\n+  void initialize(Properties p, String networkInterface) throws TransportConfigException;\n \n   /**\n    * Actually send the probe out on transport mechanism.\n    * \n    * @param probe the Probe instance that has been pre-configured\n-   * @throws ProbeSenderException if something bad happened when sending the\n+   * @throws TransportException if something bad happened when sending the\n    *           probe\n    */\n-  public void sendProbe(Probe probe) throws TransportException;\n+  void sendProbe(Probe probe) throws TransportException;\n \n   /**\n    * Return the maximum payload size that this transport can handle. For\n@@ -58,20 +58,20 @@\n    * \n    * @return max payload size in bytes\n    */\n-  public int maxPayloadSize();\n+  int maxPayloadSize();\n \n   /**\n    * Return the name of the network interface associated with this transport.\n    * \n    * @return the name of the network interface associated with this transport\n    */\n-  public String getNetworkInterfaceName();\n+  String getNetworkInterfaceName();\n \n   /**\n    * Close the transport.\n    * \n-   * @throws ProbeSenderException if something bad happened\n+   * @throws TransportException if something bad happened\n    */\n-  public void close() throws TransportException;\n+  void close() throws TransportException;\n \n }\n",
    "projectName": "argo",
    "lineNum": 70,
    "nodeStartChar": 2341,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\n",
    "projectName": "bowman",
    "lineNum": 87,
    "nodeStartChar": 2450,
    "before": "Void",
    "after": "Object"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\n",
    "projectName": "bowman",
    "lineNum": 262,
    "nodeStartChar": 9540,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "f91f054457c44d95c5825abda99307d22f51893e",
    "commitFile": "components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java",
    "patch": "diff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\nindex 6a0ce87..3bf899b 100644\n--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n@@ -112,10 +112,10 @@\n         Map\u003cString, String\u003e queryParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.QUERY_PARAMETERS);\n         Map\u003cString, String\u003e bodyParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.BODY_PARAMETERS);\n \n-        if (bodyParams.get(paramName) !\u003d null) {\n+        if (bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null) {\n             return bodyParams.get(paramName);\n         } else {\n-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {\n+            if (queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))) {\n                 try {\n                     decode \u003d URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());\n                 } catch (UnsupportedEncodingException e) {\ndiff --git a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\nindex 6a0ce87..3bf899b 100644\n--- a/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n+++ b/components/org.wso2.carbon.identity.gateway.api/src/main/java/org/wso2/carbon/identity/gateway/api/request/GatewayRequest.java\n@@ -112,10 +112,10 @@\n         Map\u003cString, String\u003e queryParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.QUERY_PARAMETERS);\n         Map\u003cString, String\u003e bodyParams \u003d (Map\u003cString, String\u003e) parameters.get(Constants.BODY_PARAMETERS);\n \n-        if (bodyParams.get(paramName) !\u003d null) {\n+        if (bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null) {\n             return bodyParams.get(paramName);\n         } else {\n-            if (StringUtils.isNotBlank(queryParams.get(paramName))) {\n+            if (queryParams !\u003d null \u0026\u0026 StringUtils.isNotBlank(queryParams.get(paramName))) {\n                 try {\n                     decode \u003d URLDecoder.decode(queryParams.get(paramName), StandardCharsets.UTF_8.name());\n                 } catch (UnsupportedEncodingException e) {\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 115,
    "nodeStartChar": 4021,
    "before": "bodyParams.get(paramName) !\u003d null",
    "after": "bodyParams !\u003d null \u0026\u0026 bodyParams.get(paramName) !\u003d null"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "02b05082427c75c8ed4578e236b7348f3fe6d646",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 66,
    "nodeStartChar": 2618,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "02b05082427c75c8ed4578e236b7348f3fe6d646",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 66,
    "nodeStartChar": 2618,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "e49693b98ee6fd6cafe2103477449a593d231bd6",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 66,
    "nodeStartChar": 2618,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "e49693b98ee6fd6cafe2103477449a593d231bd6",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 115b630..a834bf5 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -63,7 +63,7 @@\n      * @return the number of roles matching the filter by each domain\n      */\n     public PairDTO[] countRoles(String filter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         //add 3 more for the counts of Internal, Application domains\n         PairDTO[] roleCounts \u003d new PairDTO[userStoreDomains.size() + 2];\n         int i \u003d 0;\n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 66,
    "nodeStartChar": 2618,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "4f352bfe87ba198b2ea437cace6e7412ba74d3b8",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 100,
    "nodeStartChar": 4106,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "4f352bfe87ba198b2ea437cace6e7412ba74d3b8",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 100,
    "nodeStartChar": 4106,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "da53fe4781ac061ba5810eb1159d4c35f362d837",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 100,
    "nodeStartChar": 4106,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "da53fe4781ac061ba5810eb1159d4c35f362d837",
    "commitFile": "components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java",
    "patch": "diff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\nindex b952d53..63a6ed1 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/util/UserStoreCountUtils.java\n@@ -93,7 +93,7 @@\n             realmConfiguration \u003d CarbonContext.getThreadLocalCarbonContext().getUserRealm().getRealmConfiguration();\n \n             while (realmConfiguration !\u003d null) {\n-                if (realmConfiguration.getUserStoreProperty(countRetrieverClass) !\u003d null) {\n+                if (StringUtils.isNotEmpty(realmConfiguration.getUserStoreProperty(countRetrieverClass))) {\n                     userStoreList.add(realmConfiguration.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n                 }\n                 realmConfiguration \u003d realmConfiguration.getSecondaryRealmConfig();\ndiff --git a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\nindex 00c941f..115b630 100644\n--- a/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n+++ b/components/user-store/org.wso2.carbon.identity.user.store.count/src/main/java/org/wso2/carbon/identity/user/store/count/UserStoreCountService.java\n@@ -97,7 +97,7 @@\n      * @return the number of users matching the given claim and filter by each domain\n      */\n     public PairDTO[] countClaim(String claimURI, String valueFilter) throws UserStoreCounterException {\n-        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getUserStoreDomains();\n+        Set\u003cString\u003e userStoreDomains \u003d UserStoreCountUtils.getCountEnabledUserStores();\n         PairDTO[] claimCounts \u003d new PairDTO[userStoreDomains.size()];\n         int i \u003d 0;\n \n",
    "projectName": "carbon-identity-gateway",
    "lineNum": 100,
    "nodeStartChar": 4106,
    "before": "UserStoreCountUtils.getUserStoreDomains()",
    "after": "UserStoreCountUtils.getCountEnabledUserStores()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "6767ccaf63878d7e86c3a3b53bf270119d5bf268",
    "commitFile": "rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java",
    "patch": "diff --git a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\nindex 1743200..062ea25 100644\n--- a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n+++ b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n@@ -40,7 +40,7 @@\n \t}\n \n \t@RdfProperty(Rr.objectMap)\n-\t@RdfTypeDecider(String.class)\n+\t@RdfTypeDecider(ObjectMapTypeDecider.class)\n \t@Override\n \tpublic Set\u003cBaseObjectMap\u003e getObjectMaps() {\n \t\treturn objectMaps;\ndiff --git a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\nindex 1743200..062ea25 100644\n--- a/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n+++ b/rml-model/src/main/java/com/taxonic/rml/model/impl/PredicateObjectMapImpl.java\n@@ -40,7 +40,7 @@\n \t}\n \n \t@RdfProperty(Rr.objectMap)\n-\t@RdfTypeDecider(String.class)\n+\t@RdfTypeDecider(ObjectMapTypeDecider.class)\n \t@Override\n \tpublic Set\u003cBaseObjectMap\u003e getObjectMaps() {\n \t\treturn objectMaps;\n",
    "projectName": "carml",
    "lineNum": 43,
    "nodeStartChar": 1230,
    "before": "String",
    "after": "ObjectMapTypeDecider"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "679ed872df0a3df691340aff91bfd00e7435e697",
    "commitFile": "src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java",
    "patch": "diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\ndiff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\n",
    "projectName": "chaos-http-proxy",
    "lineNum": 171,
    "nodeStartChar": 6966,
    "before": "Long.valueOf(headerValue)",
    "after": "Long.parseLong(headerValue)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "679ed872df0a3df691340aff91bfd00e7435e697",
    "commitFile": "src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java",
    "patch": "diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\ndiff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\n",
    "projectName": "chaos-http-proxy",
    "lineNum": 171,
    "nodeStartChar": 6966,
    "before": "Long.valueOf(headerValue)",
    "after": "Long.parseLong(headerValue)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "679ed872df0a3df691340aff91bfd00e7435e697",
    "commitFile": "src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java",
    "patch": "diff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\ndiff --git a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\nindex f3df6b0..9c02caf 100644\n--- a/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n+++ b/src/main/java/com/bouncestorage/chaoshttpproxy/ChaosHttpProxyHandler.java\n@@ -168,7 +168,7 @@\n                     headerValue \u003d headerValue.toUpperCase();\n                 }\n                 if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)) {\n-                    userContentLength \u003d Long.valueOf(headerValue);\n+                    userContentLength \u003d Long.parseLong(headerValue);\n                 }\n                 clientRequest.header(headerName, headerValue);\n             }\n@@ -176,7 +176,7 @@\n             // Work around Jetty bug that strips Content-Length\n             // https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d475613.\n             final long length \u003d userContentLength;\n-            clientRequest.content(new InputStreamContentProvider(is) {\n+            clientRequest.content(new InputStreamContentProvider(iss) {\n                     @Override\n                     public long getLength() {\n                         return length !\u003d -1 ? length : super.getLength();\n",
    "projectName": "chaos-http-proxy",
    "lineNum": 179,
    "nodeStartChar": 7307,
    "before": "new InputStreamContentProvider(is){   @Override public long getLength(){     return length !\u003d -1 ? length : super.getLength();   } } ",
    "after": "new InputStreamContentProvider(iss){   @Override public long getLength(){     return length !\u003d -1 ? length : super.getLength();   } } "
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "927a9102068a10389864de8c5e48e25302b5a52a",
    "commitFile": "src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\nindex 2ccf6c2..ab7686d 100644\n--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n@@ -125,7 +125,7 @@\n \t\t\tint combinationsLength, boolean isOrderImportant,\r\n \t\t\tboolean excludeEmptySet) {\r\n \r\n-\t\tif (combinationsLength \u003e originalVector.getSize())\r\n+\t\tif (excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize())\r\n \t\t\tthrow new RuntimeException(\r\n \t\t\t\t\t\"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: \"\r\n \t\t\t\t\t\t\t+ combinationsLength\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 128,
    "nodeStartChar": 4776,
    "before": "combinationsLength \u003e originalVector.getSize()",
    "after": "excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize()"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "e3f9c81586ca754ba0ab521cf78d13a127559cef",
    "commitFile": "src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java",
    "patch": "diff --git a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\nindex 2ccf6c2..ab7686d 100644\n--- a/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n+++ b/src/main/java/org/paukov/combinatorics/util/ComplexCombinationGenerator.java\n@@ -125,7 +125,7 @@\n \t\t\tint combinationsLength, boolean isOrderImportant,\r\n \t\t\tboolean excludeEmptySet) {\r\n \r\n-\t\tif (combinationsLength \u003e originalVector.getSize())\r\n+\t\tif (excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize())\r\n \t\t\tthrow new RuntimeException(\r\n \t\t\t\t\t\"Unable to generate complex combinations, the requested combination length is more then the size of the original vector, length: \"\r\n \t\t\t\t\t\t\t+ combinationsLength\r\n",
    "projectName": "combinatoricslib",
    "lineNum": 128,
    "nodeStartChar": 4776,
    "before": "combinationsLength \u003e originalVector.getSize()",
    "after": "excludeEmptySet \u0026\u0026 combinationsLength \u003e originalVector.getSize()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "b471b1d07e22b99b642402e2e56df03afe791e35",
    "commitFile": "src/main/java/com/contentful/java/cda/AbsQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex 3ff2cc8..34e3098 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -17,7 +17,7 @@\n  * @param \u003cResource\u003e The type of the resource to be returned by this query.\n  * @param \u003cQuery\u003e    The query type to be returned on chaining to avoid casting on client side.\n  */\n-abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n+public abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n   private static final String PARAMETER_CONTENT_TYPE \u003d \"content_type\";\n   private static final String PARAMETER_SELECT \u003d \"select\";\n   private static final String PARAMETER_ORDER \u003d \"order\";\n@@ -153,6 +153,7 @@\n    * \u003cp\u003e\n    * Use this for a more controlled and versatile way of doing specialized search requests.\n    *\n+   * @param \u003cT\u003e            value type the operation uses.\n    * @param name           which attribute should be checked?\n    * @param queryOperation specify the queryOperation here.\n    * @param values         a list of values to be checked.\ndiff --git a/src/main/java/com/contentful/java/cda/QueryOperation.java b/src/main/java/com/contentful/java/cda/QueryOperation.java\nindex 0c14b66..8c1b50d 100644\n--- a/src/main/java/com/contentful/java/cda/QueryOperation.java\n+++ b/src/main/java/com/contentful/java/cda/QueryOperation.java\n@@ -3,7 +3,7 @@\n /**\n  * This enumeration will be used to formulate more complex search queries.\n  *\n- * @see FetchQuery\u003cT\u003e.#where(String, QueryOperation, T...)\n+ * @see AbsQuery#where(String, QueryOperation, Object...)\n  */\n public class QueryOperation\u003cT\u003e {\n \ndiff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex 3ff2cc8..34e3098 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -17,7 +17,7 @@\n  * @param \u003cResource\u003e The type of the resource to be returned by this query.\n  * @param \u003cQuery\u003e    The query type to be returned on chaining to avoid casting on client side.\n  */\n-abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n+public abstract class AbsQuery\u003cResource extends CDAResource, Query extends AbsQuery\u003cResource, Query\u003e\u003e {\n   private static final String PARAMETER_CONTENT_TYPE \u003d \"content_type\";\n   private static final String PARAMETER_SELECT \u003d \"select\";\n   private static final String PARAMETER_ORDER \u003d \"order\";\n@@ -153,6 +153,7 @@\n    * \u003cp\u003e\n    * Use this for a more controlled and versatile way of doing specialized search requests.\n    *\n+   * @param \u003cT\u003e            value type the operation uses.\n    * @param name           which attribute should be checked?\n    * @param queryOperation specify the queryOperation here.\n    * @param values         a list of values to be checked.\n",
    "projectName": "contentful.java",
    "lineNum": 11,
    "nodeStartChar": 295,
    "before": "1024",
    "after": "1025"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "2f6c60f55b7eeab24aeb69dc5fc0cb71e037f749",
    "commitFile": "src/main/java/com/contentful/java/cda/Util.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex f5389a9..7338d98 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -77,7 +77,7 @@\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, String... keys) {\n+  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, Object... keys) {\n     Map\u003c?, ?\u003e curr \u003d source;\n     for (int i \u003d 0; i \u003c keys.length; i++) {\n       if (i \u003d\u003d keys.length - 1) {\n",
    "projectName": "contentful.java",
    "lineNum": 80,
    "nodeStartChar": 2744,
    "before": "String",
    "after": "Object"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9add0e665d658fe999939275451f7284b8d5ca7d",
    "commitFile": "src/main/java/com/contentful/java/cda/Util.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/Util.java b/src/main/java/com/contentful/java/cda/Util.java\nindex f5389a9..7338d98 100644\n--- a/src/main/java/com/contentful/java/cda/Util.java\n+++ b/src/main/java/com/contentful/java/cda/Util.java\n@@ -77,7 +77,7 @@\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, String... keys) {\n+  static \u003cT\u003e T extractNested(Map\u003c?, ?\u003e source, Object... keys) {\n     Map\u003c?, ?\u003e curr \u003d source;\n     for (int i \u003d 0; i \u003c keys.length; i++) {\n       if (i \u003d\u003d keys.length - 1) {\n",
    "projectName": "contentful.java",
    "lineNum": 80,
    "nodeStartChar": 2744,
    "before": "String",
    "after": "Object"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "d613713c60af3e90dcef39721b0ed282c63bc407",
    "commitFile": "src/main/java/com/contentful/java/cda/AbsQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\ndiff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\ndiff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\n",
    "projectName": "contentful.java",
    "lineNum": 8,
    "nodeStartChar": 141,
    "before": "1025",
    "after": "1024"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "d613713c60af3e90dcef39721b0ed282c63bc407",
    "commitFile": "src/main/java/com/contentful/java/cda/FetchQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\n",
    "projectName": "contentful.java",
    "lineNum": 3,
    "nodeStartChar": 107,
    "before": "ObserveQuery",
    "after": "FetchQuery"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "b7f9b344236ecfb8de2fbbd921e219d0564ac345",
    "commitFile": "src/main/java/com/contentful/java/cda/AbsQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\ndiff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\ndiff --git a/src/main/java/com/contentful/java/cda/AbsQuery.java b/src/main/java/com/contentful/java/cda/AbsQuery.java\nindex de48b08..0759bb2 100644\n--- a/src/main/java/com/contentful/java/cda/AbsQuery.java\n+++ b/src/main/java/com/contentful/java/cda/AbsQuery.java\n@@ -5,7 +5,7 @@\n \n import static com.contentful.java.cda.Util.resourcePath;\n \n-public abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n+abstract class AbsQuery\u003cT extends CDAResource, E extends AbsQuery\u003cT, E\u003e\u003e {\n   final Class\u003cT\u003e type;\n \n   final CDAClient client;\n",
    "projectName": "contentful.java",
    "lineNum": 8,
    "nodeStartChar": 141,
    "before": "1025",
    "after": "1024"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "b7f9b344236ecfb8de2fbbd921e219d0564ac345",
    "commitFile": "src/main/java/com/contentful/java/cda/FetchQuery.java",
    "patch": "diff --git a/src/main/java/com/contentful/java/cda/FetchQuery.java b/src/main/java/com/contentful/java/cda/FetchQuery.java\nindex fc29f97..829db60 100644\n--- a/src/main/java/com/contentful/java/cda/FetchQuery.java\n+++ b/src/main/java/com/contentful/java/cda/FetchQuery.java\n@@ -1,6 +1,6 @@\n package com.contentful.java.cda;\n \n-public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, ObserveQuery\u003cT\u003e\u003e {\n+public final class FetchQuery\u003cT extends CDAResource\u003e extends AbsQuery\u003cT, FetchQuery\u003cT\u003e\u003e {\n   public FetchQuery(Class\u003cT\u003e type, CDAClient client) {\n     super(type, client);\n   }\n",
    "projectName": "contentful.java",
    "lineNum": 3,
    "nodeStartChar": 107,
    "before": "ObserveQuery",
    "after": "FetchQuery"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "6edad535768ffc7b6cb8f62341eab9dbaeeced97",
    "commitFile": "src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java",
    "patch": "diff --git a/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java b/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java\nindex 53bec76..ac327ed 100644\n--- a/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java\n+++ b/src/main/java/io/dropwizard/redis/AbstractRedisClientFactory.java\n@@ -87,7 +87,7 @@\n     public abstract StatefulConnection\u003cK, V\u003e build(final HealthCheckRegistry healthChecks, final LifecycleEnvironment lifecycle,\n                                                    final MetricRegistry metrics, @Nullable final Tracing tracing);\n \n-    List\u003cEventVisitor\u003e buildEventVisitors(final MetricRegistry metrics) {\n+    protected List\u003cEventVisitor\u003e buildEventVisitors(final MetricRegistry metrics) {\n         // Extract this, and the event wrapper builders, to Dropwizard factories, if more event types are added frequently enough?\n         return ImmutableList.of(\n                 new ClusterTopologyChangedEventVisitor(name, metrics),\n",
    "projectName": "dropwizard-redis",
    "lineNum": 90,
    "nodeStartChar": 3340,
    "before": "0",
    "after": "4"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "882e8d62a63322217d95970a148f41159ad8eff8",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/TypeUtilities.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\nindex 25cccd0..ee329fb 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n@@ -241,7 +241,7 @@\n         }\n         if(sourceType.isPrimitive()) {\n             if(sourceType \u003d\u003d void.class) {\n-                return true; // Void can be losslessly represented by any type\n+                return false; // Void can\u0027t be losslessly represented by any type\n             }\n             if(targetType.isPrimitive()) {\n                 return isProperPrimitiveLosslessSubtype(sourceType, targetType);\ndiff --git a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\nindex 25cccd0..ee329fb 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeUtilities.java\n@@ -241,7 +241,7 @@\n         }\n         if(sourceType.isPrimitive()) {\n             if(sourceType \u003d\u003d void.class) {\n-                return true; // Void can be losslessly represented by any type\n+                return false; // Void can\u0027t be losslessly represented by any type\n             }\n             if(targetType.isPrimitive()) {\n                 return isProperPrimitiveLosslessSubtype(sourceType, targetType);\n",
    "projectName": "dynalink",
    "lineNum": 244,
    "nodeStartChar": 10927,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "c3d59f2c534e0fc14134281baccb838c88f291cb",
    "commitFile": "src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\nindex 5909ab2..c8a3b7b 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n@@ -54,7 +54,7 @@\n             if(name.startsWith(\"get\") \u0026\u0026 name.length() \u003e 3 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n                 addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n             } else if(name.startsWith(\"is\") \u0026\u0026 name.length() \u003e 2 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n-                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n+                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(2)));\n             }\n         }\n         return descs.values();\ndiff --git a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\nindex 5909ab2..c8a3b7b 100644\n--- a/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n+++ b/src/main/java/org/dynalang/dynalink/beans/StaticClassIntrospector.java\n@@ -54,7 +54,7 @@\n             if(name.startsWith(\"get\") \u0026\u0026 name.length() \u003e 3 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n                 addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n             } else if(name.startsWith(\"is\") \u0026\u0026 name.length() \u003e 2 \u0026\u0026 method.getParameterTypes().length \u003d\u003d 0) {\n-                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(3)));\n+                addPropertyDescriptor(descs, method, Introspector.decapitalize(name.substring(2)));\n             }\n         }\n         return descs.values();\n",
    "projectName": "dynalink",
    "lineNum": 57,
    "nodeStartChar": 2411
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "21e82f2c943873a1618ba48773de9cdcdd7ff143",
    "commitFile": "src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java",
    "patch": "diff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex 545f200..1b9799e 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -157,7 +157,7 @@\n             if(!TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n                 return Comparison.TYPE_1_BETTER;\r\n             }\r\n-        } else if(TypeUtilities.isMethodInvocationConvertible(targetType2, sourceType)) {\r\n+        } else if(TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n             return Comparison.TYPE_2_BETTER;\r\n         }\r\n         for(ConversionComparator comparator: comparators) {\r\ndiff --git a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\nindex 545f200..1b9799e 100644\n--- a/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n+++ b/src/main/java/org/dynalang/dynalink/support/TypeConverterFactory.java\n@@ -157,7 +157,7 @@\n             if(!TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n                 return Comparison.TYPE_1_BETTER;\r\n             }\r\n-        } else if(TypeUtilities.isMethodInvocationConvertible(targetType2, sourceType)) {\r\n+        } else if(TypeUtilities.isMethodInvocationConvertible(sourceType, targetType2)) {\r\n             return Comparison.TYPE_2_BETTER;\r\n         }\r\n         for(ConversionComparator comparator: comparators) {\r\n",
    "projectName": "dynalink",
    "lineNum": 160,
    "nodeStartChar": 7703,
    "before": "TypeUtilities.isMethodInvocationConvertible(targetType2,sourceType)",
    "after": "TypeUtilities.isMethodInvocationConvertible(sourceType,targetType2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "d1f8422b027651ab6af4c092fa22d83af6baae16",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\nindex 233d3af..11b58c0 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n@@ -47,7 +47,7 @@\n  */\n public final class DefaultRulesEngine implements RulesEngine {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngine.class);\n \n     private RulesEngineParameters parameters;\n     private List\u003cRuleListener\u003e ruleListeners;\ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\nindex 233d3af..11b58c0 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngine.java\n@@ -47,7 +47,7 @@\n  */\n public final class DefaultRulesEngine implements RulesEngine {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngine.class);\n \n     private RulesEngineParameters parameters;\n     private List\u003cRuleListener\u003e ruleListeners;\n",
    "projectName": "easy-rules",
    "lineNum": 50,
    "nodeStartChar": 2016,
    "before": "DefaultRuleListener",
    "after": "DefaultRulesEngine"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "abad973745bce4abe0ad426079a5bcd214c2f8c6",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\nindex 7434eb2..46bc48b 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n@@ -34,7 +34,7 @@\n \n class DefaultRulesEngineListener implements RulesEngineListener {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngineListener.class);\n \n     private RulesEngineParameters parameters;\n \ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\nindex 7434eb2..46bc48b 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/DefaultRulesEngineListener.java\n@@ -34,7 +34,7 @@\n \n class DefaultRulesEngineListener implements RulesEngineListener {\n \n-    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRuleListener.class);\n+    private static final Logger LOGGER \u003d LoggerFactory.getLogger(DefaultRulesEngineListener.class);\n \n     private RulesEngineParameters parameters;\n \n",
    "projectName": "easy-rules",
    "lineNum": 37,
    "nodeStartChar": 1589,
    "before": "DefaultRuleListener",
    "after": "DefaultRulesEngineListener"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "c2f8c4643b33d631be5883dea322dcc77308b915",
    "commitFile": "easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java",
    "patch": "diff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\nindex ee0a04e..2a63168 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n@@ -146,7 +146,7 @@\n             if (annotations.length \u003d\u003d 1) {\n                 String factName \u003d ((Fact) (annotations[0])).value(); //validated upfront.\n                 Object fact \u003d facts.get(factName);\n-                if (fact \u003d\u003d null) {\n+                if (fact \u003d\u003d null \u0026\u0026 !facts.asMap().containsKey(factName)) {\n                     throw new NoSuchFactException(format(\"No fact named \u0027%s\u0027 found in known facts: \\n%s\", factName, facts), factName);\n                 }\n                 actualParameters.add(fact);\ndiff --git a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\nindex ee0a04e..2a63168 100644\n--- a/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n+++ b/easy-rules-core/src/main/java/org/jeasy/rules/core/RuleProxy.java\n@@ -146,7 +146,7 @@\n             if (annotations.length \u003d\u003d 1) {\n                 String factName \u003d ((Fact) (annotations[0])).value(); //validated upfront.\n                 Object fact \u003d facts.get(factName);\n-                if (fact \u003d\u003d null) {\n+                if (fact \u003d\u003d null \u0026\u0026 !facts.asMap().containsKey(factName)) {\n                     throw new NoSuchFactException(format(\"No fact named \u0027%s\u0027 found in known facts: \\n%s\", factName, facts), factName);\n                 }\n                 actualParameters.add(fact);\n",
    "projectName": "easy-rules",
    "lineNum": 149,
    "nodeStartChar": 6129,
    "before": "fact \u003d\u003d null",
    "after": "fact \u003d\u003d null \u0026\u0026 !facts.asMap().containsKey(factName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "12aa7383de941dc6b89febc7b672f577d530bffc",
    "commitFile": "src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\nindex fed18f5..ce85902 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n@@ -100,7 +100,7 @@\n     }\n \n     if (vowelHarmonyExceptions \u003d\u003d null) {\n-      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultLastConsonantSet();\n+      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultVowelHarmonySet();\n     }\n \n     return vowelHarmonyExceptions;\ndiff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\nindex fed18f5..ce85902 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n@@ -100,7 +100,7 @@\n     }\n \n     if (vowelHarmonyExceptions \u003d\u003d null) {\n-      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultLastConsonantSet();\n+      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultVowelHarmonySet();\n     }\n \n     return vowelHarmonyExceptions;\n",
    "projectName": "elasticsearch-analysis-turkishstemmer",
    "lineNum": 103,
    "nodeStartChar": 3696,
    "before": "TurkishStemmer.getDefaultLastConsonantSet()",
    "after": "TurkishStemmer.getDefaultVowelHarmonySet()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "12aa7383de941dc6b89febc7b672f577d530bffc",
    "commitFile": "src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\nindex fed18f5..ce85902 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n@@ -100,7 +100,7 @@\n     }\n \n     if (vowelHarmonyExceptions \u003d\u003d null) {\n-      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultLastConsonantSet();\n+      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultVowelHarmonySet();\n     }\n \n     return vowelHarmonyExceptions;\ndiff --git a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\nindex fed18f5..ce85902 100644\n--- a/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n+++ b/src/main/java/org/elasticsearch/index/analysis/TurkishStemmerTokenFilterFactory.java\n@@ -100,7 +100,7 @@\n     }\n \n     if (vowelHarmonyExceptions \u003d\u003d null) {\n-      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultLastConsonantSet();\n+      vowelHarmonyExceptions \u003d TurkishStemmer.getDefaultVowelHarmonySet();\n     }\n \n     return vowelHarmonyExceptions;\n",
    "projectName": "elasticsearch-analysis-turkishstemmer",
    "lineNum": 103,
    "nodeStartChar": 3696,
    "before": "TurkishStemmer.getDefaultLastConsonantSet()",
    "after": "TurkishStemmer.getDefaultVowelHarmonySet()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "69d2014924208ce91a634b17b43fe4dc5076d089",
    "commitFile": "src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex be6770b..e0fe00e 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -86,7 +86,7 @@\n \n     @Override\n     public TokenStream create(TokenStream tokenStream) {\n-\t\treturn new WordDelimiterFilter(version, tokenStream,\n+\t\treturn new WordDelimiterFilter(tokenStream,\n \t\t\t\tcharTypeTable,\n \t\t\t\tflags,\n \t\t\t\tprotoWords);\ndiff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex be6770b..e0fe00e 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -86,7 +86,7 @@\n \n     @Override\n     public TokenStream create(TokenStream tokenStream) {\n-\t\treturn new WordDelimiterFilter(version, tokenStream,\n+\t\treturn new WordDelimiterFilter(tokenStream,\n \t\t\t\tcharTypeTable,\n \t\t\t\tflags,\n \t\t\t\tprotoWords);\n",
    "projectName": "elasticsearch-dynamic-word-delimiter",
    "lineNum": 89,
    "nodeStartChar": 4404,
    "before": "new WordDelimiterFilter(version,tokenStream,charTypeTable,flags,protoWords)",
    "after": "new WordDelimiterFilter(tokenStream,charTypeTable,flags,protoWords)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "a31b20196f626f4fcfa6f27e803e45747cbcd8b9",
    "commitFile": "src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java",
    "patch": "diff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex 231c85a..be6770b 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -80,7 +80,7 @@\n         flags |\u003d getFlag(STEM_ENGLISH_POSSESSIVE, settings, \"stem_english_possessive\", true);\n         // If not null is the set of tokens to protect from being delimited\n         Set\u003c?\u003e protectedWords \u003d Analysis.getWordSet(env, settings, \"protected_words\", version);\n-        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(Lucene.VERSION, protectedWords);\n+        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(protectedWords);\n         this.flags \u003d flags;\n     }\n \ndiff --git a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\nindex 231c85a..be6770b 100644\n--- a/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n+++ b/src/main/java/org/skroutz/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java\n@@ -80,7 +80,7 @@\n         flags |\u003d getFlag(STEM_ENGLISH_POSSESSIVE, settings, \"stem_english_possessive\", true);\n         // If not null is the set of tokens to protect from being delimited\n         Set\u003c?\u003e protectedWords \u003d Analysis.getWordSet(env, settings, \"protected_words\", version);\n-        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(Lucene.VERSION, protectedWords);\n+        this.protoWords \u003d protectedWords \u003d\u003d null ? null : CharArraySet.copy(protectedWords);\n         this.flags \u003d flags;\n     }\n \n",
    "projectName": "elasticsearch-dynamic-word-delimiter",
    "lineNum": 83,
    "nodeStartChar": 4254,
    "before": "CharArraySet.copy(Lucene.VERSION,protectedWords)",
    "after": "CharArraySet.copy(protectedWords)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9717c1c89d6d5a302c73ecb75c6cc03f72c2bd89",
    "commitFile": "src/main/java/org/opengis/cite/cat30/TestNGController.java",
    "patch": "diff --git a/src/main/java/org/opengis/cite/cat30/TestNGController.java b/src/main/java/org/opengis/cite/cat30/TestNGController.java\nindex 4670aca..b773781 100644\n--- a/src/main/java/org/opengis/cite/cat30/TestNGController.java\n+++ b/src/main/java/org/opengis/cite/cat30/TestNGController.java\n@@ -34,13 +34,11 @@\n     /**\n      * A convenience method to facilitate test development.\n      *\n-     * @param args\n-     *            Test run arguments (optional). The first argument must refer\n-     *            to an XML properties file containing the expected set of test\n-     *            run arguments. If no argument is supplied, the file located at\n+     * @param args Test run arguments (optional). The first argument must refer\n+     * to an XML properties file containing the expected set of test run\n+     * arguments. If no argument is supplied, the file located at\n      *            ${user.home}/test-run-props.xml will be used.\n-     * @throws Exception\n-     *             If the test run cannot be executed (usually due to\n+     * @throws Exception If the test run cannot be executed (usually due to\n      *             unsatisfied pre-conditions).\n      */\n     public static void main(String[] args) throws Exception {\n@@ -75,9 +73,8 @@\n     /**\n      * Construct a controller that writes results to the given output directory.\n      * \n-     * @param outputDirUri\n-     *            A file URI that specifies the location of the directory in\n-     *            which test results will be written. It will be created if it\n+     * @param outputDirUri A file URI that specifies the location of the\n+     * directory in which test results will be written. It will be created if it\n      *            does not exist.\n      */\n     public TestNGController(String outputDirUri) {\n@@ -120,16 +117,15 @@\n     }\n \n     /**\n-     * Validates the test run arguments. The test run is aborted if any of \n-     * these checks fail.\n+     * Validates the test run arguments. The test run is aborted if any of these\n+     * checks fail.\n      *\n-     * @param testRunArgs\n-     *            A DOM Document containing a set of XML properties (key-value\n-     *            pairs).\n-     * @throws IllegalArgumentException\n-     *             If any arguments are missing or invalid for some reason.\n+     * @param testRunArgs A DOM Document containing a set of XML properties\n+     * (key-value pairs).\n+     * @throws IllegalArgumentException If any test run arguments are missing or\n+     * invalid.\n      */\n-    void validateTestRunArgs(Document testRunArgs) throws Exception {\n+    void validateTestRunArgs(Document testRunArgs) throws IllegalArgumentException {\n         if (null \u003d\u003d testRunArgs\n                 || !testRunArgs.getDocumentElement().getNodeName()\n                         .equals(\"properties\")) {\n@@ -141,7 +137,7 @@\n         if (entries.getLength() \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"No test run arguments found.\");\n         }\n-        Map\u003cString, String\u003e args \u003d new HashMap\u003cString, String\u003e();\n+        Map\u003cString, String\u003e args \u003d new HashMap\u003c\u003e();\n         for (int i \u003d 0; i \u003c entries.getLength(); i++) {\n             Element entry \u003d (Element) entries.item(i);\n             args.put(entry.getAttribute(\"key\"), entry.getTextContent());\n",
    "projectName": "ets-cat30",
    "lineNum": 132,
    "nodeStartChar": 4817,
    "before": "Exception",
    "after": "IllegalArgumentException"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "4f68c27b2df3bd87ff05d5e3671545d41e094547",
    "commitFile": "brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java",
    "patch": "diff --git a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\nindex 1cf8cd9..0d30df3 100644\n--- a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n+++ b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n@@ -244,7 +244,7 @@\n \n     private String valueToAcronym(final String value) {\n         // index only short, name-like values, avoiding free-form text if possible\n-        if (value.length() \u003c\u003d 100) {\n+        if (null !\u003d value \u0026\u0026 value.length() \u003c\u003d 100) {\n             String clean \u003d cleanForAcronym(value);\n             StringBuilder acronym \u003d new StringBuilder();\n             boolean isInside \u003d false;\ndiff --git a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\nindex 1cf8cd9..0d30df3 100644\n--- a/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n+++ b/brain/src/main/java/net/fortytwo/smsn/brain/model/pg/PGAtomGraph.java\n@@ -244,7 +244,7 @@\n \n     private String valueToAcronym(final String value) {\n         // index only short, name-like values, avoiding free-form text if possible\n-        if (value.length() \u003c\u003d 100) {\n+        if (null !\u003d value \u0026\u0026 value.length() \u003c\u003d 100) {\n             String clean \u003d cleanForAcronym(value);\n             StringBuilder acronym \u003d new StringBuilder();\n             boolean isInside \u003d false;\n",
    "projectName": "extendo",
    "lineNum": 247,
    "nodeStartChar": 7055,
    "before": "value.length() \u003c\u003d 100",
    "after": "null !\u003d value \u0026\u0026 value.length() \u003c\u003d 100"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "c28166f54d11022c32c1e9fab386993c52adb437",
    "commitFile": "src/main/java/gate/merger/AnnotationMergingMain.java",
    "patch": "diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java\nindex f79fc05..b93cc8d 100644\n--- a/src/main/java/gate/merger/AnnotationMergingMain.java\n+++ b/src/main/java/gate/merger/AnnotationMergingMain.java\n@@ -182,7 +182,7 @@\n         StringBuffer annNames \u003d new StringBuffer();\r\n         for(int i \u003d 0; i \u003c annIndex.length; ++i) {\r\n           if(i \u003e 0) annNames.append(\"/\");\r\n-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);\r\n+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);\r\n         }\r\n         featM.put(\"annotators\", annNames.toString());\r\n         try {\r\ndiff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java\nindex f79fc05..b93cc8d 100644\n--- a/src/main/java/gate/merger/AnnotationMergingMain.java\n+++ b/src/main/java/gate/merger/AnnotationMergingMain.java\n@@ -182,7 +182,7 @@\n         StringBuffer annNames \u003d new StringBuffer();\r\n         for(int i \u003d 0; i \u003c annIndex.length; ++i) {\r\n           if(i \u003e 0) annNames.append(\"/\");\r\n-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);\r\n+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);\r\n         }\r\n         featM.put(\"annotators\", annNames.toString());\r\n         try {\r\n",
    "projectName": "gateplugin-Annotation_Merging",
    "lineNum": 185,
    "nodeStartChar": 7311,
    "before": "Integer.valueOf(annIndex[i])",
    "after": "Integer.parseInt(annIndex[i])"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c28166f54d11022c32c1e9fab386993c52adb437",
    "commitFile": "src/main/java/gate/merger/AnnotationMergingMain.java",
    "patch": "diff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java\nindex f79fc05..b93cc8d 100644\n--- a/src/main/java/gate/merger/AnnotationMergingMain.java\n+++ b/src/main/java/gate/merger/AnnotationMergingMain.java\n@@ -182,7 +182,7 @@\n         StringBuffer annNames \u003d new StringBuffer();\r\n         for(int i \u003d 0; i \u003c annIndex.length; ++i) {\r\n           if(i \u003e 0) annNames.append(\"/\");\r\n-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);\r\n+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);\r\n         }\r\n         featM.put(\"annotators\", annNames.toString());\r\n         try {\r\ndiff --git a/src/main/java/gate/merger/AnnotationMergingMain.java b/src/main/java/gate/merger/AnnotationMergingMain.java\nindex f79fc05..b93cc8d 100644\n--- a/src/main/java/gate/merger/AnnotationMergingMain.java\n+++ b/src/main/java/gate/merger/AnnotationMergingMain.java\n@@ -182,7 +182,7 @@\n         StringBuffer annNames \u003d new StringBuffer();\r\n         for(int i \u003d 0; i \u003c annIndex.length; ++i) {\r\n           if(i \u003e 0) annNames.append(\"/\");\r\n-          annNames.append(annsArray[Integer.valueOf(annIndex[i])]);\r\n+          annNames.append(annsArray[Integer.parseInt(annIndex[i])]);\r\n         }\r\n         featM.put(\"annotators\", annNames.toString());\r\n         try {\r\n",
    "projectName": "gateplugin-Annotation_Merging",
    "lineNum": 185,
    "nodeStartChar": 7311,
    "before": "Integer.valueOf(annIndex[i])",
    "after": "Integer.parseInt(annIndex[i])"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 95,
    "nodeStartChar": 4459,
    "before": "createNamespace.execute(tableStore)",
    "after": "createNamespace.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 103,
    "nodeStartChar": 4942,
    "before": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,CHANGELOG_TABLE)",
    "after": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,CHANGELOG_TABLE,\"Contains the changelog of Genesis.\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 113,
    "nodeStartChar": 5594,
    "before": "table.execute(tableStore)",
    "after": "table.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 118,
    "nodeStartChar": 5901,
    "before": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,MIGRATIONLOG_TABLE)",
    "after": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,MIGRATIONLOG_TABLE,\"Contains the migration log of Genesis which is a collection of the logs of the steps.\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 128,
    "nodeStartChar": 6591,
    "before": "table.execute(tableStore)",
    "after": "table.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 133,
    "nodeStartChar": 6916,
    "before": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,LAST_TRANSFORMATIONS_TABLE)",
    "after": "dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,LAST_TRANSFORMATIONS_TABLE,\"Contains the last transformation of Genesis.\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 146,
    "nodeStartChar": 7764,
    "before": "table.execute(tableStore)",
    "after": "table.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 254,
    "nodeStartChar": 14229,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 261,
    "nodeStartChar": 14759,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 278,
    "nodeStartChar": 15413,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 294,
    "nodeStartChar": 16088,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 296,
    "nodeStartChar": 16243,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 313,
    "nodeStartChar": 16917,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 318,
    "nodeStartChar": 17193,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9bab27113d3e0bba3162ef6a89c4e17afd98dec5",
    "commitFile": "tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java",
    "patch": "diff --git a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\nindex 38b1e21..50a21a1 100644\n--- a/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n+++ b/tracker/ductiledb/src/main/java/com/puresoltechnologies/genesis/tracker/ductiledb/DuctileDBTransformationTracker.java\n@@ -92,7 +92,7 @@\n \t    if (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\tlogger.info(\"Keyspace for Cassandra migration is missing. Needs to be created...\");\n \t\tCreateNamespace createNamespace \u003d dataDefinitionLanguage.createCreateNamespace(NAMESPACE_NAME);\n-\t\tcreateNamespace.execute(tableStore);\n+\t\tcreateNamespace.execute();\n \t\tif (dataDefinitionLanguage.getNamespace(NAMESPACE_NAME) \u003d\u003d null) {\n \t\t    throw new TransformationException(\"Could not create namespace \u0027\" + NAMESPACE_NAME + \"\u0027.\");\n \t\t}\n@@ -100,7 +100,8 @@\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, CHANGELOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"ChangeLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, CHANGELOG_TABLE,\n+\t\t\t\"Contains the changelog of Genesis.\");\n \t\ttable.addColumn(\"changelog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"changelog\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"machine\", ColumnType.VARCHAR);\n@@ -110,12 +111,13 @@\n \t\ttable.addColumn(\"changelog\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"changelog\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\", \"version\", \"command\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"ChangeLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"MigrationLog table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, MIGRATIONLOG_TABLE,\n+\t\t\t\"Contains the migration log of Genesis which is a collection of the logs of the steps.\");\n \t\ttable.addColumn(\"migrationlog\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"migrationlog\", \"severity\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"machine\", ColumnType.VARCHAR);\n@@ -125,13 +127,13 @@\n \t\ttable.addColumn(\"migrationlog\", \"exception_message\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"migrationlog\", \"stacktrace\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"time\", \"machine\", \"thread\", \"message\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"MigrationLog table for Cassandra migration created.\");\n \t    }\n \t    if (dataDefinitionLanguage.getTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE) \u003d\u003d null) {\n \t\tlogger.info(\"LastTransformations table for Cassandra migration is missing. Needs to be created...\");\n-\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME,\n-\t\t\tLAST_TRANSFORMATIONS_TABLE);\n+\t\tCreateTable table \u003d dataDefinitionLanguage.createCreateTable(NAMESPACE_NAME, LAST_TRANSFORMATIONS_TABLE,\n+\t\t\t\"Contains the last transformation of Genesis.\");\n \t\ttable.addColumn(\"transformations\", \"time\", ColumnType.TIMESTAMP);\n \t\ttable.addColumn(\"transformations\", \"component\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"machine\", ColumnType.VARCHAR);\n@@ -143,7 +145,7 @@\n \t\ttable.addColumn(\"transformations\", \"comment\", ColumnType.VARCHAR);\n \t\ttable.addColumn(\"transformations\", \"hashid\", ColumnType.VARCHAR);\n \t\ttable.setPrimaryKey(\"component\", \"machine\");\n-\t\ttable.execute(tableStore);\n+\t\ttable.execute();\n \t\tlogger.info(\"LastTransformations table for Cassandra migration created.\");\n \t    }\n \t} catch (ExecutionException e) {\n@@ -251,14 +253,14 @@\n \t    BoundStatement boundStatement \u003d preparedInsertStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getTargetVersion().toString(), metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    // Last Transformations...\n \t    String nextVersionString \u003d metadata.getNextVersion() !\u003d null ? metadata.getNextVersion().toString() : \"\";\n \t    boundStatement \u003d preparedInsertLastTransformationStatement.bind(Instant.now(), metadata.getComponentName(),\n \t\t    machine.getHostAddress(), metadata.getStartVersion().toString(),\n \t\t    metadata.getTargetVersion().toString(), nextVersionString, metadata.getCommand(),\n \t\t    metadata.getDeveloper(), metadata.getComment(), hashId.toString());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (IOException | ExecutionException e) {\n \t    throw new TransformationException(\"Could not track migration step.\", e);\n \t}\n@@ -275,7 +277,7 @@\n \t    BoundStatement boundStatement \u003d preparedSelectStatement.bind(component, machine.getHostAddress(),\n \t\t    version.toString(), command);\n \t    TableRowIterable result;\n-\t    result \u003d boundStatement.execute(tableStore);\n+\t    result \u003d boundStatement.execute();\n \t    return result.iterator().hasNext();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not check whether a migration took place.\", e);\n@@ -291,9 +293,9 @@\n \t    }\n \t    TableStore tableStore \u003d ductileDB.getTableStore();\n \t    BoundStatement boundStatement \u003d preparedDropComponentStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t    boundStatement \u003d preparedDropComponentLastTransformtaionStatement.bind(component, machine.getHostAddress());\n-\t    boundStatement.execute(tableStore);\n+\t    boundStatement.execute();\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not drop component history.\", e);\n \t}\n@@ -310,12 +312,12 @@\n \t    if (cause \u003d\u003d null) {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, \"\", \"\", \"\");\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    } else {\n \t\tBoundStatement boundStatement \u003d preparedLoggingStatement.bind(time, severity.name(),\n \t\t\tmachine.getHostAddress().toString(), thread.getName(), message, cause.getClass().getName(),\n \t\t\tcause.getMessage(), cause.toString());\n-\t\tboundStatement.execute(tableStore);\n+\t\tboundStatement.execute();\n \t    }\n \t} catch (ExecutionException e) {\n \t    throw new TransformationException(\"Could not log migration.\", e);\n@@ -331,7 +333,7 @@\n \tTableStore tableStore \u003d ductileDB.getTableStore();\n \tBoundStatement boundStatement \u003d preparedSelectLastTransformationStatement.bind(component,\n \t\tmachine.getHostAddress());\n-\ttry (TableRowIterable resultSet \u003d boundStatement.execute(tableStore)) {\n+\ttry (TableRowIterable resultSet \u003d boundStatement.execute()) {\n \t    TableRow next \u003d resultSet.iterator().next();\n \t    if (next \u003d\u003d null) {\n \t\treturn null;\n",
    "projectName": "genesis",
    "lineNum": 334,
    "nodeStartChar": 17807,
    "before": "boundStatement.execute(tableStore)",
    "after": "boundStatement.execute()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "e3cd8ba2d02fcf0935f8e2eb37b6051c94b8998b",
    "commitFile": "src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java",
    "patch": "diff --git a/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java b/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java\nindex 726fee2..5aeb616 100644\n--- a/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java\n+++ b/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesCoreExtension.java\n@@ -580,7 +580,7 @@\n \t\t\t\t\tthrow new GeoPackageException(\n \t\t\t\t\t\t\t\"The related table must be a \"\n \t\t\t\t\t\t\t\t\t+ relationType.getName()\n-\t\t\t\t\t\t\t\t\t+ \" table. Related Table: \" + baseTableName\n+\t\t\t\t\t\t\t\t\t+ \" table. Related Table: \" + relatedTableName\n \t\t\t\t\t\t\t\t\t+ \", Type: \"\n \t\t\t\t\t\t\t\t\t+ geoPackage.getTableType(relatedTableName));\n \t\t\t\t}\n",
    "projectName": "geopackage-core-java",
    "lineNum": 581,
    "nodeStartChar": 17588,
    "before": "\"The related table must be a \" + relationType.getName() + \" table. Related Table: \"+ baseTableName+ \", Type: \"+ geoPackage.getTableType(relatedTableName)",
    "after": "\"The related table must be a \" + relationType.getName() + \" table. Related Table: \"+ relatedTableName+ \", Type: \"+ geoPackage.getTableType(relatedTableName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "cb04c924cf95ac9ef56dadf64269f6911b57b561",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex e717a7e..b58560a 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -234,7 +234,7 @@\n             mergeTranslation(bundle, language, bf.getType(), bf.getFile(), outputFile);\n             break;\n \n-        case REVIEWD_WITH_FALLBACK:\n+        case REVIEWED_WITH_FALLBACK:\n             bundle \u003d getBundle(client, bf.getBundleId(), language, true, true);\n             exportTranslation(bundle, language, bf.getType(), outputFile);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 237,
    "nodeStartChar": 9630,
    "before": "case REVIEWD_WITH_FALLBACK: ",
    "after": "case REVIEWED_WITH_FALLBACK: "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "cb04c924cf95ac9ef56dadf64269f6911b57b561",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java\nindex 7f83442..da35288 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/OutputContentOption.java\n@@ -52,7 +52,7 @@\n      * is not available or, not marked as reviewed, the value from the\n      * source bundle is used.\n      */\n-    REVIEWD_WITH_FALLBACK,\n+    REVIEWED_WITH_FALLBACK,\n \n     /**\n      * Exports only translated resources marked as reviewed.\n",
    "projectName": "gp-java-tools",
    "lineNum": 50,
    "nodeStartChar": 1504,
    "before": "/**   * Exports translated resources marked as reviewed. If translation is not available or, not marked as reviewed, the value from the source bundle is used.  */ REVIEWD_WITH_FALLBACK",
    "after": "/**   * Exports translated resources marked as reviewed. If translation is not available or, not marked as reviewed, the value from the source bundle is used.  */ REVIEWED_WITH_FALLBACK"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "dcd9a57f4a1f7710926ab9487cf00701a31e668e",
    "commitFile": "gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java",
    "patch": "diff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\nindex 4cd0d50..4ef8f10 100644\n--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n@@ -1,5 +1,5 @@\n /*  \n- * Copyright IBM Corp. 2015\n+ * Copyright IBM Corp. 2015, 2016\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,7 @@\n  * \n  * @author Yoshito Umaoka\n  */\n-class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n+public class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n \n     @Override\n     public ResourceType convert(String type) {\ndiff --git a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\nindex 4cd0d50..4ef8f10 100644\n--- a/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n+++ b/gp-cli/src/main/java/com/ibm/g11n/pipeline/tools/cli/ResourceTypeConverter.java\n@@ -1,5 +1,5 @@\n /*  \n- * Copyright IBM Corp. 2015\n+ * Copyright IBM Corp. 2015, 2016\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,7 @@\n  * \n  * @author Yoshito Umaoka\n  */\n-class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n+public class ResourceTypeConverter implements IStringConverter\u003cResourceType\u003e{\n \n     @Override\n     public ResourceType convert(String type) {\n",
    "projectName": "gp-java-tools",
    "lineNum": 24,
    "nodeStartChar": 807,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "5ef4817275c6146a2486f0920862c3752f73c77b",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 156,
    "nodeStartChar": 6366,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "5ef4817275c6146a2486f0920862c3752f73c77b",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 169,
    "nodeStartChar": 6949,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "5ef4817275c6146a2486f0920862c3752f73c77b",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 175,
    "nodeStartChar": 7228,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "3ec277cd511746df9a5d1e0342294fa8b472a673",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 156,
    "nodeStartChar": 6366,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "3ec277cd511746df9a5d1e0342294fa8b472a673",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 169,
    "nodeStartChar": 6949,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "3ec277cd511746df9a5d1e0342294fa8b472a673",
    "commitFile": "gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java",
    "patch": "diff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\ndiff --git a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\nindex ef321d0..040ee85 100644\n--- a/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n+++ b/gp-maven-plugin/src/main/java/com/ibm/g11n/pipeline/maven/GPDownloadMojo.java\n@@ -153,7 +153,7 @@\n \n         switch (bundleLayout) {\n         case LANGUAGE_SUFFIX: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             int idx \u003d srcFileName.lastIndexOf(\u0027.\u0027);\n             String tgtName \u003d null;\n             if (idx \u003c 0) {\n@@ -166,13 +166,13 @@\n             break;\n         }\n         case LANGUAGE_SUBDIR: {\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile();\n             File langSubDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langSubDir, srcFileName);\n             break;\n         }\n         case LANGUAGE_DIR:\n-            File dir \u003d (new File(outputDir, relPath)).getParentFile().getParentFile();\n+            File dir \u003d (new File(outBaseDir, relPath)).getParentFile().getParentFile();\n             File langDir \u003d new File(dir, getLanguageId(language, langIdStyle, langMap));\n             outputFile \u003d new File(langDir, srcFileName);\n             break;\n",
    "projectName": "gp-java-tools",
    "lineNum": 175,
    "nodeStartChar": 7228,
    "before": "new File(outputDir,relPath)",
    "after": "new File(outBaseDir,relPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "7460ca65eb1db7a5a2ded9eca8ef53b6cf58b909",
    "commitFile": "src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java",
    "patch": "diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\ndiff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\n",
    "projectName": "grison",
    "lineNum": 21,
    "nodeStartChar": 687,
    "before": "VerifyReqDtoParser",
    "after": "VerifyReqTextDtoParser"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "7460ca65eb1db7a5a2ded9eca8ef53b6cf58b909",
    "commitFile": "src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java",
    "patch": "diff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\ndiff --git a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\nindex c5e769a..47b1196 100644\n--- a/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n+++ b/src/main/java/com/sibilantsolutions/grison/net/netty/codec/NettyFoscamTextParser.java\n@@ -18,10 +18,10 @@\n                 return new LoginRespTextDtoParser().apply(buf);\n \n             case Verify_Req:\n-                return new VerifyReqDtoParser().apply(buf);\n+                return new VerifyReqTextDtoParser().apply(buf);\n \n             case Verify_Resp:\n-                return new VerifyRespDtoParser().apply(buf);\n+                return new VerifyRespTextDtoParser().apply(buf);\n \n             case UNK02:\n                 return new Unk02TextDtoParser().apply(buf);\n",
    "projectName": "grison",
    "lineNum": 24,
    "nodeStartChar": 778,
    "before": "VerifyRespDtoParser",
    "after": "VerifyRespTextDtoParser"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\ndiff --git a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\nindex e022f04..c48c317 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/ResourceDeserializerTest.java\n@@ -84,7 +84,7 @@\n \t\tmapper.registerModule(new TestModule());\n \t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \t\t\n-\t\tdoReturn(Void.class).when(typeResolver).resolveType(any(), any(), any());\n+\t\tdoReturn(Object.class).when(typeResolver).resolveType(any(), any(), any());\n \t}\n \t\n \t@Test\n",
    "projectName": "hal-client",
    "lineNum": 87,
    "nodeStartChar": 2450,
    "before": "Void",
    "after": "Object"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "72c419e7882174a63a0e5312ac50c7cecbad8685",
    "commitFile": "client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java",
    "patch": "diff --git a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\nindex 7216c3a..2604073 100644\n--- a/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n+++ b/client/src/test/java/uk/co/blackpepper/bowman/RestOperationsFactoryTest.java\n@@ -259,7 +259,7 @@\n \t\t\n \t\tprivate BiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod;\n \t\t\n-\t\tpublic HandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n+\t\tHandlerInstantiatorTestParams(Class\u003c?\u003e clazz,\n \t\t\tBiFunction\u003cHandlerInstantiator, Class\u003c?\u003e, Object\u003e instantiationMethod) {\n \t\t\t\n \t\t\tthis.clazz \u003d clazz;\n",
    "projectName": "hal-client",
    "lineNum": 262,
    "nodeStartChar": 9540,
    "before": "1",
    "after": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "53f4e89d4eb69c06fb7282682b87e08ab08210f4",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex 4638afb..7f65b44 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -28,7 +28,7 @@\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\n \n-    StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n+    public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n         statProcessor \u003d processorFactory.forClass(Statistic.class);\n     }\n \ndiff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex 4638afb..7f65b44 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -28,7 +28,7 @@\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\n \n-    StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n+    public StatisticProcessor(final IdolAnnotationsProcessorFactory processorFactory) {\n         statProcessor \u003d processorFactory.forClass(Statistic.class);\n     }\n \n",
    "projectName": "haven-search-components",
    "lineNum": 31,
    "nodeStartChar": 1175,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "525ec67618f76ad839e7cbabd09eb3fc32263284",
    "commitFile": "idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java",
    "patch": "diff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex d5d9f72..4638afb 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -22,7 +22,8 @@\n  * Implementation of {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of\n  * {@link Statistic}.\n  */\n-class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n+@SuppressWarnings(\"WeakerAccess\")\n+public class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n     private static final long serialVersionUID \u003d -5289889557164139830L;\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\ndiff --git a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\nindex d5d9f72..4638afb 100644\n--- a/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n+++ b/idol/src/main/java/com/hp/autonomy/searchcomponents/idol/statsserver/StatisticProcessor.java\n@@ -22,7 +22,8 @@\n  * Implementation of {@link AbstractStAXProcessor} to process the output of StatsServer GetStatus into an {@link Set} of\n  * {@link Statistic}.\n  */\n-class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n+@SuppressWarnings(\"WeakerAccess\")\n+public class StatisticProcessor extends AbstractStAXProcessor\u003cSet\u003cStatistic\u003e\u003e {\n     private static final long serialVersionUID \u003d -5289889557164139830L;\n \n     private final StAXProcessor\u003cStatistic\u003e statProcessor;\n",
    "projectName": "haven-search-components",
    "lineNum": 21,
    "nodeStartChar": 774,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "04ac92ab6a89120993023328199f80232547fa1a",
    "commitFile": "hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java",
    "patch": "diff --git a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\nindex 095ab94..18b0c04 100644\n--- a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n+++ b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n@@ -92,7 +92,7 @@\n         final List\u003cHodSearchResult\u003e documentList \u003d new LinkedList\u003c\u003e();\n         addDomainToSearchResults(documentList, suggestRequest.getQueryRestrictions().getDatabases(), results.getDocuments());\n \n-        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection());\n+        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection(), results.getWarnings());\n     }\n \n     @Cacheable(CacheNames.GET_DOCUMENT_CONTENT)\ndiff --git a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\nindex 095ab94..18b0c04 100644\n--- a/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n+++ b/hod/src/main/java/com/hp/autonomy/searchcomponents/hod/search/HodDocumentsService.java\n@@ -92,7 +92,7 @@\n         final List\u003cHodSearchResult\u003e documentList \u003d new LinkedList\u003c\u003e();\n         addDomainToSearchResults(documentList, suggestRequest.getQueryRestrictions().getDatabases(), results.getDocuments());\n \n-        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection());\n+        return new Documents\u003c\u003e(documentList, results.getTotalResults(), results.getExpandedQuery(), results.getSuggestion(), results.getAutoCorrection(), results.getWarnings());\n     }\n \n     @Cacheable(CacheNames.GET_DOCUMENT_CONTENT)\n",
    "projectName": "haven-search-components",
    "lineNum": 95,
    "nodeStartChar": 5442,
    "before": "new Documents\u003c\u003e(documentList,results.getTotalResults(),results.getExpandedQuery(),results.getSuggestion(),results.getAutoCorrection())",
    "after": "new Documents\u003c\u003e(documentList,results.getTotalResults(),results.getExpandedQuery(),results.getSuggestion(),results.getAutoCorrection(),results.getWarnings())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "6f46e49e9510bb8e15f124d905f7516419417fad",
    "commitFile": "src/main/java/org/holmes/HolmesEngine.java",
    "patch": "diff --git a/src/main/java/org/holmes/HolmesEngine.java b/src/main/java/org/holmes/HolmesEngine.java\nindex dd883a1..3e89fb0 100644\n--- a/src/main/java/org/holmes/HolmesEngine.java\n+++ b/src/main/java/org/holmes/HolmesEngine.java\n@@ -126,15 +126,15 @@\n \t}\n \n \t/**\n-\t * Creates a new {@link Rule} for a {@link Object} target type.\n+\t * Creates a new {@link Rule} for a generic {@link Object} target type.\n \t * \n \t * @param object\n \t *            the target\n \t * @return an appropriated {@link Evaluator} for the given target type.\n \t */\n-\tpublic ObjectEvaluator\u003cObject\u003e ensureThat(final Object object) {\n+\tpublic \u003cT\u003e ObjectEvaluator\u003cT\u003e ensureThat(final T object) {\n \n-\t\treturn configure(new ObjectEvaluator\u003cObject\u003e(object));\n+\t\treturn configure(new ObjectEvaluator\u003cT\u003e(object));\n \t}\n \n \t/**\ndiff --git a/src/main/java/org/holmes/HolmesEngine.java b/src/main/java/org/holmes/HolmesEngine.java\nindex dd883a1..3e89fb0 100644\n--- a/src/main/java/org/holmes/HolmesEngine.java\n+++ b/src/main/java/org/holmes/HolmesEngine.java\n@@ -126,15 +126,15 @@\n \t}\n \n \t/**\n-\t * Creates a new {@link Rule} for a {@link Object} target type.\n+\t * Creates a new {@link Rule} for a generic {@link Object} target type.\n \t * \n \t * @param object\n \t *            the target\n \t * @return an appropriated {@link Evaluator} for the given target type.\n \t */\n-\tpublic ObjectEvaluator\u003cObject\u003e ensureThat(final Object object) {\n+\tpublic \u003cT\u003e ObjectEvaluator\u003cT\u003e ensureThat(final T object) {\n \n-\t\treturn configure(new ObjectEvaluator\u003cObject\u003e(object));\n+\t\treturn configure(new ObjectEvaluator\u003cT\u003e(object));\n \t}\n \n \t/**\n",
    "projectName": "holmes-validation",
    "lineNum": 137,
    "nodeStartChar": 3455,
    "before": "Object",
    "after": "T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "6e75a4eb53446fbe9d0a582f56b3ca1c158560b6",
    "commitFile": "src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java",
    "patch": "diff --git a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\nindex b720c9c..482f636 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n@@ -201,7 +201,7 @@\n     public JSONArray getQualityProfileConfigurationChanges(String instanceUrl,String qualityProfile) throws ParseException{\n     \tString url \u003d instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;\n     \ttry {\n-    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(instanceUrl, \"events\");\n+    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(url, \"events\");\n     \t\treturn qualityProfileConfigChanges;\n     \t} catch (ParseException e) {\n     \t\tLOG.error(\"Could not parse response from: \" + url, e);\ndiff --git a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\nindex b720c9c..482f636 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java\n@@ -201,7 +201,7 @@\n     public JSONArray getQualityProfileConfigurationChanges(String instanceUrl,String qualityProfile) throws ParseException{\n     \tString url \u003d instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;\n     \ttry {\n-    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(instanceUrl, \"events\");\n+    \t\tJSONArray qualityProfileConfigChanges \u003d this.parseAsArray(url, \"events\");\n     \t\treturn qualityProfileConfigChanges;\n     \t} catch (ParseException e) {\n     \t\tLOG.error(\"Could not parse response from: \" + url, e);\n",
    "projectName": "hygieia-codequality-sonar-collector",
    "lineNum": 204,
    "nodeStartChar": 8764,
    "before": "this.parseAsArray(instanceUrl,\"events\")",
    "after": "this.parseAsArray(url,\"events\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "fa54c2d5f8922245e50103d0ca9b5c003e9d9ef4",
    "commitFile": "src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java",
    "patch": "diff --git a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\nindex 40ce82a..0424447 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n@@ -17,6 +17,6 @@\n     }\n \n     public SonarClient getSonarClient(Double version) {\n-        return ((version \u003d\u003d null) || (version \u003c 6.0)) ? sonarClient : sonar6Client;\n+        return ((version \u003d\u003d null) || (version \u003c 6.3)) ? sonarClient : sonar6Client;\n     }\n }\ndiff --git a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\nindex 40ce82a..0424447 100644\n--- a/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n+++ b/src/main/java/com/capitalone/dashboard/collector/SonarClientSelector.java\n@@ -17,6 +17,6 @@\n     }\n \n     public SonarClient getSonarClient(Double version) {\n-        return ((version \u003d\u003d null) || (version \u003c 6.0)) ? sonarClient : sonar6Client;\n+        return ((version \u003d\u003d null) || (version \u003c 6.3)) ? sonarClient : sonar6Client;\n     }\n }\n",
    "projectName": "hygieia-codequality-sonar-collector",
    "lineNum": 20,
    "nodeStartChar": 616
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "d1613b0570bfdff0968c235959f7ca1df0a50cc4",
    "commitFile": "src/main/java/j2html/tags/ContainerTag.java",
    "patch": "diff --git a/src/main/java/j2html/tags/ContainerTag.java b/src/main/java/j2html/tags/ContainerTag.java\nindex 64be8b2..8d13b9a 100644\n--- a/src/main/java/j2html/tags/ContainerTag.java\n+++ b/src/main/java/j2html/tags/ContainerTag.java\n@@ -22,7 +22,7 @@\n      */\n     public ContainerTag with(DomContent child) {\n         if (this \u003d\u003d child) {\n-            throw new Error(\"Cannot append a tag to itself.\");\n+            throw new RuntimeException(\"Cannot append a tag to itself.\");\n         }\n         children.add(child);\n         return this;\ndiff --git a/src/main/java/j2html/tags/ContainerTag.java b/src/main/java/j2html/tags/ContainerTag.java\nindex 64be8b2..8d13b9a 100644\n--- a/src/main/java/j2html/tags/ContainerTag.java\n+++ b/src/main/java/j2html/tags/ContainerTag.java\n@@ -22,7 +22,7 @@\n      */\n     public ContainerTag with(DomContent child) {\n         if (this \u003d\u003d child) {\n-            throw new Error(\"Cannot append a tag to itself.\");\n+            throw new RuntimeException(\"Cannot append a tag to itself.\");\n         }\n         children.add(child);\n         return this;\n",
    "projectName": "j2html",
    "lineNum": 25,
    "nodeStartChar": 592,
    "before": "Error",
    "after": "RuntimeException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "7372ca7978bf63825315bd3b38e04bc2375c7039",
    "commitFile": "src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java",
    "patch": "diff --git a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\nindex 207aa45..604a0ea 100644\n--- a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n+++ b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n@@ -291,7 +291,7 @@\n         // Events - there can be multiple so check them all\n         if(event.contains(Returned) \u0026\u0026 \n                 ((Returned.getIntId()\u0026 eventMask) \u003d\u003d Returned.getIntId())) {\n-            fireChangeEvent(new EscrowedEvent(evt));\n+            fireChangeEvent(new ReturnedEvent(evt));\n         }\n         if(event.contains(Cheated) \u0026\u0026 \n                 ((Cheated.getIntId()\u0026 eventMask) \u003d\u003d Cheated.getIntId())) {\ndiff --git a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\nindex 207aa45..604a0ea 100644\n--- a/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n+++ b/src/main/java/com/pyramidacceptors/ptalk/api/PyramidAcceptor.java\n@@ -291,7 +291,7 @@\n         // Events - there can be multiple so check them all\n         if(event.contains(Returned) \u0026\u0026 \n                 ((Returned.getIntId()\u0026 eventMask) \u003d\u003d Returned.getIntId())) {\n-            fireChangeEvent(new EscrowedEvent(evt));\n+            fireChangeEvent(new ReturnedEvent(evt));\n         }\n         if(event.contains(Cheated) \u0026\u0026 \n                 ((Cheated.getIntId()\u0026 eventMask) \u003d\u003d Cheated.getIntId())) {\n",
    "projectName": "jPyramid-RS-232",
    "lineNum": 294,
    "nodeStartChar": 10608,
    "before": "EscrowedEvent",
    "after": "ReturnedEvent"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "commitSHA1": "600b8d5b1242a4f392fcd597b0a06c867e78937d",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex a68ef54..05fbe1d 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -76,7 +76,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n                 data.add(new String[]{file.getName()});\n             }\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\nindex a68ef54..05fbe1d 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/OriginalJade20150515Test.java\n@@ -76,7 +76,7 @@\n \n         Collection\u003cString[]\u003e data \u003d new ArrayList\u003cString[]\u003e();\n         for (File file : files) {\n-            if (ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n+            if (!ArrayUtils.contains(ignoredCases, file.getName().replace(\".jade\", \"\"))) {\n                 data.add(new String[]{file.getName()});\n             }\n \n",
    "projectName": "jade4j",
    "lineNum": 79,
    "nodeStartChar": 3339,
    "before": "ArrayUtils.contains(ignoredCases,file.getName().replace(\".jade\",\"\"))",
    "after": "!ArrayUtils.contains(ignoredCases,file.getName().replace(\".jade\",\"\"))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "dd4739704e204253b3d3fe94c1fedd74847e7769",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/EachNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\nindex c62623c..e1acf68 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n@@ -68,7 +68,7 @@\n \t\t\texecuteElseNode(model, writer, template);\n \t\t\treturn;\n \t\t}\n-\t\tfor (String key : keys) {\n+\t\tfor (Object key : keys) {\n \t\t\tmodel.put(getValue(), result.get(key));\n \t\t\tmodel.put(getKey(), key);\n \t\t\tgetBlock().execute(writer, model, template);\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\nindex c62623c..e1acf68 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/EachNode.java\n@@ -68,7 +68,7 @@\n \t\t\texecuteElseNode(model, writer, template);\n \t\t\treturn;\n \t\t}\n-\t\tfor (String key : keys) {\n+\t\tfor (Object key : keys) {\n \t\t\tmodel.put(getValue(), result.get(key));\n \t\t\tmodel.put(getKey(), key);\n \t\t\tgetBlock().execute(writer, model, template);\n",
    "projectName": "jade4j",
    "lineNum": 71,
    "nodeStartChar": 2256,
    "before": "String",
    "after": "Object"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "7ec711596bcce2a0b5297b3d78253a5912055f4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 96b565f..bb8e892 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -163,7 +163,7 @@\n       String text;\n       if (body instanceof PipelessText) {\n         this.advance();\n-        text \u003d StringUtils.join(\"\\n\",body.getValues());\n+        text \u003d StringUtils.join(body.getValues(),\"\\n\");\n       } else {\n         text \u003d \"\";\n       }\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\nindex 9530696..b2b20ed 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n@@ -173,7 +173,7 @@\n         LinkedHashMap\u003cString,String\u003e finalAttributes \u003d new LinkedHashMap\u003cString,String\u003e();\n         finalAttributes.putAll(newAttributes);\n         if(!classes.isEmpty()){\n-            finalAttributes.put(\"class\",StringUtils.join(\" \",classes));\n+            finalAttributes.put(\"class\", StringUtils.join(classes,\" \"));\n         }\n         return finalAttributes;\n     }\ndiff --git a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\nindex 9cc2aad..684d520 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n@@ -40,7 +40,7 @@\n \t\t\t\tvalues.add(node.getValue());\n \t\t}\n \n-\t\tString result \u003d StringUtils.join(\"\\n\", values);\n+\t\tString result \u003d StringUtils.join(values, \"\\n\");\n \t\tif (filter !\u003d null) {\n             result \u003d filter.convert(result, attributes, model);\n \t\t}\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 96b565f..bb8e892 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -163,7 +163,7 @@\n       String text;\n       if (body instanceof PipelessText) {\n         this.advance();\n-        text \u003d StringUtils.join(\"\\n\",body.getValues());\n+        text \u003d StringUtils.join(body.getValues(),\"\\n\");\n       } else {\n         text \u003d \"\";\n       }\n",
    "projectName": "jade4j",
    "lineNum": 166,
    "nodeStartChar": 5384,
    "before": "StringUtils.join(\"\\n\",body.getValues())",
    "after": "StringUtils.join(body.getValues(),\"\\n\")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "7ec711596bcce2a0b5297b3d78253a5912055f4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\nindex 9530696..b2b20ed 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/AttrsNode.java\n@@ -173,7 +173,7 @@\n         LinkedHashMap\u003cString,String\u003e finalAttributes \u003d new LinkedHashMap\u003cString,String\u003e();\n         finalAttributes.putAll(newAttributes);\n         if(!classes.isEmpty()){\n-            finalAttributes.put(\"class\",StringUtils.join(\" \",classes));\n+            finalAttributes.put(\"class\", StringUtils.join(classes,\" \"));\n         }\n         return finalAttributes;\n     }\n",
    "projectName": "jade4j",
    "lineNum": 176,
    "nodeStartChar": 6121,
    "before": "StringUtils.join(\" \",classes)",
    "after": "StringUtils.join(classes,\" \")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "7ec711596bcce2a0b5297b3d78253a5912055f4a",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/node/FilterNode.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\nindex 9cc2aad..684d520 100644\n--- a/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n+++ b/src/main/java/de/neuland/jade4j/parser/node/FilterNode.java\n@@ -40,7 +40,7 @@\n \t\t\t\tvalues.add(node.getValue());\n \t\t}\n \n-\t\tString result \u003d StringUtils.join(\"\\n\", values);\n+\t\tString result \u003d StringUtils.join(values, \"\\n\");\n \t\tif (filter !\u003d null) {\n             result \u003d filter.convert(result, attributes, model);\n \t\t}\n",
    "projectName": "jade4j",
    "lineNum": 43,
    "nodeStartChar": 1221,
    "before": "StringUtils.join(\"\\n\",values)",
    "after": "StringUtils.join(values,\"\\n\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 635,
    "nodeStartChar": 21758,
    "before": "matcher.end()",
    "after": "matcher.start()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 635,
    "nodeStartChar": 21758,
    "before": "matcher.end()",
    "after": "matcher.start()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 646,
    "nodeStartChar": 22352,
    "before": "matcher.end()",
    "after": "matcher.start()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c78362a057c2045702220b8432666136a3409923",
    "commitFile": "src/main/java/de/neuland/jade4j/parser/Parser.java",
    "patch": "diff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\ndiff --git a/src/main/java/de/neuland/jade4j/parser/Parser.java b/src/main/java/de/neuland/jade4j/parser/Parser.java\nindex 7586bf6..356036c 100644\n--- a/src/main/java/de/neuland/jade4j/parser/Parser.java\n+++ b/src/main/java/de/neuland/jade4j/parser/Parser.java\n@@ -629,10 +629,10 @@\n     private Node[] parseInlineTagsInText(String str) {\n         int line \u003d this.line();\n         Matcher matcher \u003d Pattern.compile(\"(\\\\\\\\)?#\\\\[((?:.|\\\\n)*)$\").matcher(str);\n-        if (matcher.matches()) {\n+        if (matcher.find(0) \u0026\u0026 matcher.groupCount()\u003e1) {\n             if (matcher.group(1) !\u003d null) { // escape\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()) + \"#[\");//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()) + \"#[\");//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] rest \u003d this.parseInlineTagsInText(matcher.group(2));\n                 if (rest[0] instanceof TextNode) {\n@@ -643,7 +643,7 @@\n                 return ArrayUtils.addAll(textNodes, rest);\n             } else {\n                 TextNode text \u003d new TextNode();\n-                text.setValue(str.substring(0, matcher.end()));//Not sure if Matcher.end() is correct\n+                text.setValue(str.substring(0, matcher.start()));//Not sure if Matcher.end() is correct\n                 text.setLineNumber(line);\n                 Node[] textNodes \u003d {text};\n                 Node[] buffer \u003d textNodes;\n",
    "projectName": "jade4j",
    "lineNum": 646,
    "nodeStartChar": 22352,
    "before": "matcher.end()",
    "after": "matcher.start()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "68c68f0e855ecf7c8a744c24b81d4ec6c59bab61",
    "commitFile": "src/test/java/de/neuland/jade4j/compiler/CompilerTest.java",
    "patch": "diff --git a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\nindex ce1d66d..2242365 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n@@ -445,7 +445,7 @@\n             assertEquals(testName, expected.trim(), html.trim());\n         } catch (JadeCompilerException e) {\n             e.printStackTrace();\n-            fail();\n+            fail(e.getMessage());\n         }\n     }\n \ndiff --git a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\nindex ce1d66d..2242365 100644\n--- a/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n+++ b/src/test/java/de/neuland/jade4j/compiler/CompilerTest.java\n@@ -445,7 +445,7 @@\n             assertEquals(testName, expected.trim(), html.trim());\n         } catch (JadeCompilerException e) {\n             e.printStackTrace();\n-            fail();\n+            fail(e.getMessage());\n         }\n     }\n \n",
    "projectName": "jade4j",
    "lineNum": 448,
    "nodeStartChar": 9689,
    "before": "fail()",
    "after": "fail(e.getMessage())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "9c3bc94bcf295d41ada6a4cb18c585313a56b6b8",
    "commitFile": "core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java",
    "patch": "diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\nindex d1fd864..d299b92 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n@@ -27,9 +27,9 @@\n     return \"AppID: \" + RegistryUtils.getMicroservice().getAppId()\n         + \"\\n\" + \"ServiceName: \" + RegistryUtils.getMicroservice().getServiceName()\n         + \"\\n\" + \"Version: \" + RegistryUtils.getMicroservice().getVersion()\n-        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroserviceInstance().getEnvironment()\n+        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroservice().getEnvironment()\n         + \"\\n\" + \"ServiceID: \" + RegistryUtils.getMicroserviceInstance().getServiceId()\n-        + \"\\n\" + \"InstanceID; \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n+        + \"\\n\" + \"Instance ID: \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 30,
    "nodeStartChar": 1294,
    "before": "RegistryUtils.getMicroserviceInstance()",
    "after": "RegistryUtils.getMicroservice()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9c3bc94bcf295d41ada6a4cb18c585313a56b6b8",
    "commitFile": "core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java",
    "patch": "diff --git a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\nindex d1fd864..d299b92 100644\n--- a/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n+++ b/core/src/main/java/org/apache/servicecomb/core/bootup/ServiceInformationCollector.java\n@@ -27,9 +27,9 @@\n     return \"AppID: \" + RegistryUtils.getMicroservice().getAppId()\n         + \"\\n\" + \"ServiceName: \" + RegistryUtils.getMicroservice().getServiceName()\n         + \"\\n\" + \"Version: \" + RegistryUtils.getMicroservice().getVersion()\n-        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroserviceInstance().getEnvironment()\n+        + \"\\n\" + \"Environment: \" + RegistryUtils.getMicroservice().getEnvironment()\n         + \"\\n\" + \"ServiceID: \" + RegistryUtils.getMicroserviceInstance().getServiceId()\n-        + \"\\n\" + \"InstanceID; \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n+        + \"\\n\" + \"Instance ID: \" + RegistryUtils.getMicroserviceInstance().getInstanceId();\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 30,
    "nodeStartChar": 1294,
    "before": "RegistryUtils.getMicroserviceInstance()",
    "after": "RegistryUtils.getMicroservice()"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\nindex 2eadf0c..eb8ecc8 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n@@ -130,7 +130,7 @@\n \n     // 将这些body包装为一个class，整体做为一个body参数\n     String bodyParamName \u003d ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());\n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);\n     BodyParameter bodyParameter \u003d\n         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);\n     swaggerParameters.add(bodyParameter);\ndiff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\nindex 320466b..a1c0ea2 100644\n--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n@@ -75,7 +75,7 @@\n     SwaggerGenerator generator \u003d UnitTestSwaggerUtils.generateSwagger(Impl.class);\n     OperationGenerator operationGenerator \u003d generator.getOperationGeneratorMap().get(\"getUser\");\n \n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null, \"getUserBody\");\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null);\n     Assert.assertEquals(\"gen.swagger.getUserBody\", cls.getName());\n     Assert.assertEquals(\"java.util.List\u003cjava.lang.String\u003e\", cls.getField(\"p1\").getGenericType().getTypeName());\n     Assert.assertEquals(\"java.util.List\u003corg.apache.servicecomb.foundation.test.scaffolding.model.User\u003e\",\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\n",
    "projectName": "java-chassis",
    "lineNum": 448,
    "nodeStartChar": 21513
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "2d02767a2dfdf0762573eb2fee0896fa0528316d",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\nindex 0656dad..adbbe7d 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/core/utils/ClassUtils.java\n@@ -49,10 +49,10 @@\n \n   // 将一系列body parameter包装成一个class\n   public static Class\u003c?\u003e getOrCreateBodyClass(OperationGenerator operationGenerator,\n-      List\u003cBodyParameter\u003e bodyParameters, String bodyParamName) {\n+      List\u003cBodyParameter\u003e bodyParameters) {\n     SwaggerGenerator swaggerGenerator \u003d operationGenerator.getSwaggerGenerator();\n     Method method \u003d operationGenerator.getProviderMethod();\n-    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + bodyParamName;\n+    String clsName \u003d swaggerGenerator.ensureGetPackageName() + \".\" + ParamUtils.generateBodyParameterName(method);\n     Class\u003c?\u003e cls \u003d getClassByName(swaggerGenerator.getClassLoader(), clsName);\n     if (cls !\u003d null) {\n       return cls;\ndiff --git a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\nindex 2eadf0c..eb8ecc8 100644\n--- a/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n+++ b/swagger/swagger-generator/generator-core/src/main/java/org/apache/servicecomb/swagger/generator/pojo/PojoSwaggerGeneratorContext.java\n@@ -130,7 +130,7 @@\n \n     // 将这些body包装为一个class，整体做为一个body参数\n     String bodyParamName \u003d ParamUtils.generateBodyParameterName(operationGenerator.getProviderMethod());\n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters, bodyParamName);\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, bodyParameters);\n     BodyParameter bodyParameter \u003d\n         ParamUtils.createBodyParameter(operationGenerator.getSwagger(), bodyParamName, cls);\n     swaggerParameters.add(bodyParameter);\ndiff --git a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\nindex 320466b..a1c0ea2 100644\n--- a/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n+++ b/swagger/swagger-generator/generator-core/src/test/java/org/apache/servicecomb/swagger/generator/core/TestClassUtils.java\n@@ -75,7 +75,7 @@\n     SwaggerGenerator generator \u003d UnitTestSwaggerUtils.generateSwagger(Impl.class);\n     OperationGenerator operationGenerator \u003d generator.getOperationGeneratorMap().get(\"getUser\");\n \n-    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null, \"getUserBody\");\n+    Class\u003c?\u003e cls \u003d ClassUtils.getOrCreateBodyClass(operationGenerator, null);\n     Assert.assertEquals(\"gen.swagger.getUserBody\", cls.getName());\n     Assert.assertEquals(\"java.util.List\u003cjava.lang.String\u003e\", cls.getField(\"p1\").getGenericType().getTypeName());\n     Assert.assertEquals(\"java.util.List\u003corg.apache.servicecomb.foundation.test.scaffolding.model.User\u003e\",\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\nindex e3d08d1..b76d47c 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestLoadBalanceHandler2.java\n@@ -436,7 +436,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -445,7 +445,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:9090\", server.getEndpoint().getEndpoint());\n@@ -574,7 +574,7 @@\n \n     //if errorThresholdPercentage greater than 0, it will activate.\n     ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.errorThresholdPercentage\", \"20\");\n-    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"10\");\n+    ArchaiusUtils.setProperty(\"servicecomb.loadbalance.isolation.minIsolationTime\", \"30\");\n     ServiceCombServer server2 \u003d server;\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n@@ -583,7 +583,7 @@\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7091\", server.getEndpoint().getEndpoint());\n-    TimeUnit.MILLISECONDS.sleep(20);\n+    TimeUnit.MILLISECONDS.sleep(30);\n     loadBalancer \u003d handler.getOrCreateLoadBalancer(invocation);\n     server \u003d loadBalancer.chooseServer(invocation);\n     Assert.assertEquals(\"rest://localhost:7090\", server.getEndpoint().getEndpoint());\n",
    "projectName": "java-chassis",
    "lineNum": 586,
    "nodeStartChar": 28287
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "b5160b401356a4aa7e70a74c67e7f98f0415c896",
    "commitFile": "handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java",
    "patch": "diff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\nindex 0d4e003..10dfed3 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n@@ -121,6 +121,6 @@\n     }\n     long taken \u003d System.currentTimeMillis() - begin;\n     System.out.println(\"taken \" + taken);\n-    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 2, true); // 5 * times make slow machine happy\n+    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 5, true); // 5 * times make slow machine happy\n   }\n }\ndiff --git a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\nindex 0d4e003..10dfed3 100644\n--- a/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n+++ b/handlers/handler-loadbalance/src/test/java/org/apache/servicecomb/loadbalance/TestWeightedResponseTimeRuleExt.java\n@@ -121,6 +121,6 @@\n     }\n     long taken \u003d System.currentTimeMillis() - begin;\n     System.out.println(\"taken \" + taken);\n-    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 2, true); // 5 * times make slow machine happy\n+    Assert.assertEquals(\"actually taken: \" + taken, taken \u003c 200 * 5, true); // 5 * times make slow machine happy\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 124,
    "nodeStartChar": 5257
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1a4a1dd1ba982827fb3d29db96faecf4fcab9cd8",
    "commitFile": "integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java",
    "patch": "diff --git a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\nindex b67cd53..7eb6f43 100644\n--- a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n+++ b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n@@ -68,7 +68,7 @@\n \n     assertThat(result, is(\"Hello Message slow\"));\n     assertThat(elapsedTime,\n-        is(both(greaterThan(5000L)).and(lessThan(6000L))));\n+        is(both(greaterThan(4000L)).and(lessThan(7000L))));\n   }\n \n   @Test\ndiff --git a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\nindex b67cd53..7eb6f43 100644\n--- a/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n+++ b/integration-tests/pojo-test/src/test/java/org/apache/servicecomb/demo/pojo/test/PojoIntegrationTestBase.java\n@@ -68,7 +68,7 @@\n \n     assertThat(result, is(\"Hello Message slow\"));\n     assertThat(elapsedTime,\n-        is(both(greaterThan(5000L)).and(lessThan(6000L))));\n+        is(both(greaterThan(4000L)).and(lessThan(7000L))));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 71,
    "nodeStartChar": 2744
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "42845706fba8d282332cda6bfd61007e675fdaa9",
    "commitFile": "handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java",
    "patch": "diff --git a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\nindex 4014307..8bc147b 100644\n--- a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n+++ b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n@@ -31,7 +31,7 @@\n   private AtomicLong requestCount \u003d new AtomicLong();\n \n   // 本周期之前的请求数\n-  private volatile long lastRequestCount \u003d 0;\n+  private volatile long lastRequestCount \u003d 1;\n \n   private static final int CYCLE_LENGTH \u003d 1000;\n \ndiff --git a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\nindex 4014307..8bc147b 100644\n--- a/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n+++ b/handlers/handler-flowcontrol-qps/src/main/java/org/apache/servicecomb/qps/QpsController.java\n@@ -31,7 +31,7 @@\n   private AtomicLong requestCount \u003d new AtomicLong();\n \n   // 本周期之前的请求数\n-  private volatile long lastRequestCount \u003d 0;\n+  private volatile long lastRequestCount \u003d 1;\n \n   private static final int CYCLE_LENGTH \u003d 1000;\n \n",
    "projectName": "java-chassis",
    "lineNum": 34,
    "nodeStartChar": 1150
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "core/src/main/java/io/servicecomb/core/Invocation.java",
    "patch": "diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\ndiff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 199,
    "nodeStartChar": 5792,
    "before": "new InvocationStartProcessingEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,startProcessingTime,startProcessingTime - startTime)",
    "after": "new InvocationStartProcessingEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,startProcessingTime - startTime)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "core/src/main/java/io/servicecomb/core/Invocation.java",
    "patch": "diff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\ndiff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\ndiff --git a/core/src/main/java/io/servicecomb/core/Invocation.java b/core/src/main/java/io/servicecomb/core/Invocation.java\nindex ec9abe6..40a79d1 100644\n--- a/core/src/main/java/io/servicecomb/core/Invocation.java\n+++ b/core/src/main/java/io/servicecomb/core/Invocation.java\n@@ -197,14 +197,14 @@\n   public void triggerStartProcessingEvent() {\n     this.startProcessingTime \u003d System.nanoTime();\n     EventUtils.triggerEvent(new InvocationStartProcessingEvent(\n-        operationMeta.getMicroserviceQualifiedName(),this.invocationType, startProcessingTime, startProcessingTime - startTime));\n+        operationMeta.getMicroserviceQualifiedName(), this.invocationType, startProcessingTime - startTime));\n   }\n \n   public void triggerFinishedEvent() {\n     long finishedTime \u003d System.nanoTime();\n     EventUtils\n         .triggerEvent(new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),\n-            this.invocationType, finishedTime, finishedTime - startProcessingTime,\n+            this.invocationType, finishedTime - startProcessingTime,\n             finishedTime - startTime));\n   }\n }\n",
    "projectName": "java-chassis",
    "lineNum": 206,
    "nodeStartChar": 6082,
    "before": "new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,finishedTime,finishedTime - startProcessingTime,finishedTime - startTime)",
    "after": "new InvocationFinishedEvent(operationMeta.getMicroserviceQualifiedName(),this.invocationType,finishedTime - startProcessingTime,finishedTime - startTime)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 80,
    "nodeStartChar": 3555,
    "before": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(100))",
    "after": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(100))"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 83,
    "nodeStartChar": 3729,
    "before": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))",
    "after": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 88,
    "nodeStartChar": 4042,
    "before": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(300))",
    "after": "new InvocationStartProcessingEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(300))"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 91,
    "nodeStartChar": 4216,
    "before": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(400),TimeUnit.MILLISECONDS.toNanos(700))",
    "after": "new InvocationFinishedEvent(\"fun1\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(400),TimeUnit.MILLISECONDS.toNanos(700))"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 97,
    "nodeStartChar": 4582,
    "before": "new InvocationStartProcessingEvent(\"fun3\",InvocationType.PRODUCER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(500))",
    "after": "new InvocationStartProcessingEvent(\"fun3\",InvocationType.PRODUCER,TimeUnit.MILLISECONDS.toNanos(500))"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 103,
    "nodeStartChar": 4926,
    "before": "new InvocationStartProcessingEvent(\"fun2\",InvocationType.CONSUMER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(100))",
    "after": "new InvocationStartProcessingEvent(\"fun2\",InvocationType.CONSUMER,TimeUnit.MILLISECONDS.toNanos(100))"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "72399e9c39bbb1774a6fd9f286670992db4c224a",
    "commitFile": "metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java",
    "patch": "diff --git a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\nindex d9a7e2b..63d2275 100644\n--- a/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n+++ b/metrics/metrics-core/src/test/java/io/servicecomb/metrics/core/TestEventAndRunner.java\n@@ -77,33 +77,33 @@\n     //fun1 is a PRODUCER invocation call twice and all is completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(300)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun1\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(400), TimeUnit.MILLISECONDS.toNanos(700)));\n \n     //fun3 is a PRODUCER invocation call uncompleted\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun3\", InvocationType.PRODUCER,\n             TimeUnit.MILLISECONDS.toNanos(500)));\n \n     //fun2 is a CONSUMER invocation call once and completed\n     EventUtils.triggerEvent(new InvocationStartedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime()));\n     EventUtils.triggerEvent(\n-        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        new InvocationStartProcessingEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(100)));\n     EventUtils\n-        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER, System.nanoTime(),\n+        .triggerEvent(new InvocationFinishedEvent(\"fun2\", InvocationType.CONSUMER,\n             TimeUnit.MILLISECONDS.toNanos(200), TimeUnit.MILLISECONDS.toNanos(300)));\n \n     //fun4 is a invocation call only started and no processing start and finished\n",
    "projectName": "java-chassis",
    "lineNum": 106,
    "nodeStartChar": 5100,
    "before": "new InvocationFinishedEvent(\"fun2\",InvocationType.CONSUMER,System.nanoTime(),TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))",
    "after": "new InvocationFinishedEvent(\"fun2\",InvocationType.CONSUMER,TimeUnit.MILLISECONDS.toNanos(200),TimeUnit.MILLISECONDS.toNanos(300))"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "00d0998cf592239c850ae3bef8515c8fa5a5aea5",
    "commitFile": "common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java",
    "patch": "diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\nindex 86f7844..340fdf6 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n@@ -49,7 +49,7 @@\n \n   private static Map\u003cString, String\u003e header \u003d new HashMap\u003c\u003e();\n \n-  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null) {\n+  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null, null) {\n     public void putHeader(String name, String value) {\n       header.put(name, value);\n     }\ndiff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\nindex 12c9c92..922dffa 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n@@ -33,7 +33,7 @@\n \n   @Test\n   public void testForm() throws Exception {\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addForm(\"abc\", \"Hello\");\n     restClientRequest.addForm(\"def\", \"world\");\n     restClientRequest.addForm(\"ghi\", null);\n@@ -58,7 +58,7 @@\n         return map;\n       }\n     }.getMockInstance();\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addCookie(\"sessionid\", \"abcdefghijklmnopqrstuvwxyz\");\n     restClientRequest.addCookie(\"region\", \"china-north\");\n     restClientRequest.write(Buffer.buffer(\"I love servicecomb\"));\ndiff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\nindex 86f7844..340fdf6 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/TestRestCodec.java\n@@ -49,7 +49,7 @@\n \n   private static Map\u003cString, String\u003e header \u003d new HashMap\u003c\u003e();\n \n-  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null) {\n+  private static RestClientRequest clientRequest \u003d new RestClientRequestImpl(null, null, null) {\n     public void putHeader(String name, String value) {\n       header.put(name, value);\n     }\n",
    "projectName": "java-chassis",
    "lineNum": 52,
    "nodeStartChar": 1767,
    "before": "new RestClientRequestImpl(null,null){   public void putHeader(  String name,  String value){     header.put(name,value);   } } ",
    "after": "new RestClientRequestImpl(null,null,null){   public void putHeader(  String name,  String value){     header.put(name,value);   } } "
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "00d0998cf592239c850ae3bef8515c8fa5a5aea5",
    "commitFile": "common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
    "patch": "diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\nindex 12c9c92..922dffa 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n@@ -33,7 +33,7 @@\n \n   @Test\n   public void testForm() throws Exception {\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addForm(\"abc\", \"Hello\");\n     restClientRequest.addForm(\"def\", \"world\");\n     restClientRequest.addForm(\"ghi\", null);\n@@ -58,7 +58,7 @@\n         return map;\n       }\n     }.getMockInstance();\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addCookie(\"sessionid\", \"abcdefghijklmnopqrstuvwxyz\");\n     restClientRequest.addCookie(\"region\", \"china-north\");\n     restClientRequest.write(Buffer.buffer(\"I love servicecomb\"));\n",
    "projectName": "java-chassis",
    "lineNum": 36,
    "nodeStartChar": 1164,
    "before": "new RestClientRequestImpl(request,null)",
    "after": "new RestClientRequestImpl(request,null,null)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "00d0998cf592239c850ae3bef8515c8fa5a5aea5",
    "commitFile": "common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
    "patch": "diff --git a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\nindex 12c9c92..922dffa 100644\n--- a/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n+++ b/common/common-rest/src/test/java/io/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java\n@@ -33,7 +33,7 @@\n \n   @Test\n   public void testForm() throws Exception {\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addForm(\"abc\", \"Hello\");\n     restClientRequest.addForm(\"def\", \"world\");\n     restClientRequest.addForm(\"ghi\", null);\n@@ -58,7 +58,7 @@\n         return map;\n       }\n     }.getMockInstance();\n-    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null);\n+    RestClientRequestImpl restClientRequest \u003d new RestClientRequestImpl(request, null, null);\n     restClientRequest.addCookie(\"sessionid\", \"abcdefghijklmnopqrstuvwxyz\");\n     restClientRequest.addCookie(\"region\", \"china-north\");\n     restClientRequest.write(Buffer.buffer(\"I love servicecomb\"));\n",
    "projectName": "java-chassis",
    "lineNum": 61,
    "nodeStartChar": 1938,
    "before": "new RestClientRequestImpl(request,null)",
    "after": "new RestClientRequestImpl(request,null,null)"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "92c296b29f14b8ab20e35e0e5875b8f1eae8b325",
    "commitFile": "foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java",
    "patch": "diff --git a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\nindex f2839dc..2e185d5 100644\n--- a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n+++ b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n@@ -31,7 +31,7 @@\n   }\n \n   public static boolean isEnable() {\n-    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", true).get();\n+    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", false).get();\n   }\n \n   @Override\ndiff --git a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\nindex f2839dc..2e185d5 100644\n--- a/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n+++ b/foundations/foundation-metrics/src/main/java/io/servicecomb/foundation/metrics/MetricsConfig.java\n@@ -31,7 +31,7 @@\n   }\n \n   public static boolean isEnable() {\n-    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", true).get();\n+    return DynamicPropertyFactory.getInstance().getBooleanProperty(\"cse.metrics.enabled\", false).get();\n   }\n \n   @Override\n",
    "projectName": "java-chassis",
    "lineNum": 34,
    "nodeStartChar": 1186,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "321abb7da4b0d53fdedc2b26c8cadaea7bc2b859",
    "commitFile": "spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java",
    "patch": "diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex 3adf785..2c623ad 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -42,7 +42,7 @@\n \n @Configuration\n @ConditionalOnProperty(value \u003d CONFIG_TRACING_ENABLED_KEY, havingValue \u003d \"true\", matchIfMissing \u003d true)\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\ndiff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex 3adf785..2c623ad 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -42,7 +42,7 @@\n \n @Configuration\n @ConditionalOnProperty(value \u003d CONFIG_TRACING_ENABLED_KEY, havingValue \u003d \"true\", matchIfMissing \u003d true)\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\n",
    "projectName": "java-chassis",
    "lineNum": 43,
    "nodeStartChar": 1629,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 181,
    "nodeStartChar": 5064,
    "before": "false",
    "after": "true"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 186,
    "nodeStartChar": 5154,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8f019086e10258a3c19fbe03ccdf1edc0a1f27f1",
    "commitFile": "core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java",
    "patch": "diff --git a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\nindex ba2d79c..7e45194 100644\n--- a/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n+++ b/core/src/test/java/io/servicecomb/core/transport/TestTransportManager.java\n@@ -176,21 +176,21 @@\n     new Expectations() {\n       {\n         t1.getOrder();\n-        result \u003d 1;\n+        result \u003d Integer.MAX_VALUE;\n         t1.canInit();\n-        result \u003d false;\n+        result \u003d true;\n \n         t2.getOrder();\n-        result \u003d 2;\n+        result \u003d -1000;\n         t2.canInit();\n-        result \u003d true;\n+        result \u003d false;\n       }\n     };\n \n     TransportManager manager \u003d new TransportManager();\n     List\u003cTransport\u003e group \u003d Arrays.asList(t1, t2);\n \n-    Assert.assertEquals(t2, manager.chooseOneTransport(group));\n+    Assert.assertEquals(t1, manager.chooseOneTransport(group));\n   }\n \n   @Test\n",
    "projectName": "java-chassis",
    "lineNum": 193,
    "nodeStartChar": 5287,
    "before": "Assert.assertEquals(t2,manager.chooseOneTransport(group))",
    "after": "Assert.assertEquals(t1,manager.chooseOneTransport(group))"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bca6eb28e52d622941974181b1887c889482b951",
    "commitFile": "spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java",
    "patch": "diff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex e1be958..e5f4c82 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -36,7 +36,7 @@\n import org.springframework.core.Ordered;\n \n @Configuration\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\ndiff --git a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\nindex e1be958..e5f4c82 100644\n--- a/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n+++ b/spring-boot-starter/spring-cloud-zuul-zipkin/src/main/java/io/servicecomb/spring/cloud/zuul/tracing/SpringTracingConfiguration.java\n@@ -36,7 +36,7 @@\n import org.springframework.core.Ordered;\n \n @Configuration\n-class SpringTracingConfiguration {\n+public class SpringTracingConfiguration {\n \n   @Bean\n   FilterRegistrationBean traceWebFilter(HttpTracing httpTracing) {\n",
    "projectName": "java-chassis",
    "lineNum": 38,
    "nodeStartChar": 1446,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "b5919b6318956b13b46adff0d4cafec91795f85c",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\nindex 54cb427..c9f1993 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n@@ -129,7 +129,7 @@\n     // in the initialization sequence.\n     private Step step;\n     private Authenticator authenticator;\n-    private ByteBuffer authReponseToken;\n+    private ByteBuffer authResponseToken;\n \n     InitRequest(ChannelHandlerContext ctx) {\n       super(ctx, timeoutMillis);\n@@ -151,7 +151,7 @@\n         case SET_KEYSPACE:\n           return new Query(\"USE \" + options.keyspace.asCql(false));\n         case AUTH_RESPONSE:\n-          return new AuthResponse(authReponseToken);\n+          return new AuthResponse(authResponseToken);\n         case REGISTER:\n           return new Register(options.eventTypes);\n         default:\n@@ -184,7 +184,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\n@@ -202,7 +202,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\nindex 54cb427..c9f1993 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/channel/ProtocolInitHandler.java\n@@ -129,7 +129,7 @@\n     // in the initialization sequence.\n     private Step step;\n     private Authenticator authenticator;\n-    private ByteBuffer authReponseToken;\n+    private ByteBuffer authResponseToken;\n \n     InitRequest(ChannelHandlerContext ctx) {\n       super(ctx, timeoutMillis);\n@@ -151,7 +151,7 @@\n         case SET_KEYSPACE:\n           return new Query(\"USE \" + options.keyspace.asCql(false));\n         case AUTH_RESPONSE:\n-          return new AuthResponse(authReponseToken);\n+          return new AuthResponse(authResponseToken);\n         case REGISTER:\n           return new Register(options.eventTypes);\n         default:\n@@ -184,7 +184,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\n@@ -202,7 +202,7 @@\n                               endPoint, \"authenticator threw an exception\", error));\n                     } else {\n                       step \u003d Step.AUTH_RESPONSE;\n-                      authReponseToken \u003d token;\n+                      authResponseToken \u003d token;\n                       send();\n                     }\n                   },\n",
    "projectName": "java-driver",
    "lineNum": 154,
    "nodeStartChar": 5927,
    "before": "new AuthResponse(authReponseToken)",
    "after": "new AuthResponse(authResponseToken)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "6b4ebea645f7ffb90f4a79d18b07c93d7e6a99d7",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java\nindex b24a12c..a3d529a 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/DefaultMavenCoordinates.java\n@@ -51,7 +51,7 @@\n       String artifactId \u003d props.getProperty(\"driver.artifactId\");\n       String version \u003d props.getProperty(\"driver.version\");\n       if (ByteBuf.class.getPackage().getName().contains(\"com.datastax.oss.driver.shaded\")) {\n-        version +\u003d \"-shaded\";\n+        artifactId +\u003d \"-shaded\";\n       }\n       return new DefaultMavenCoordinates(name, groupId, artifactId, Version.parse(version));\n     } catch (IOException e) {\n",
    "projectName": "java-driver",
    "lineNum": 54,
    "nodeStartChar": 2215,
    "before": "version+\u003d\"-shaded\"",
    "after": "artifactId+\u003d\"-shaded\""
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "f2a17753394086216265a56f2e8a247a6aff313c",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\nindex 7ee7416..5135d04 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n@@ -61,7 +61,7 @@\n     if (removedNode \u003d\u003d null) {\n       // This should never happen because we already check the event in NodeStateManager, but handle\n       // just in case.\n-      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", broadcastRpcAddressToRemove);\n+      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", logPrefix, broadcastRpcAddressToRemove);\n       return new Result(oldMetadata);\n     } else {\n       LOG.debug(\"[{}] Removing node {}\", logPrefix, removedNode);\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\nindex 7ee7416..5135d04 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n@@ -61,7 +61,7 @@\n     if (removedNode \u003d\u003d null) {\n       // This should never happen because we already check the event in NodeStateManager, but handle\n       // just in case.\n-      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", broadcastRpcAddressToRemove);\n+      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", logPrefix, broadcastRpcAddressToRemove);\n       return new Result(oldMetadata);\n     } else {\n       LOG.debug(\"[{}] Removing node {}\", logPrefix, removedNode);\n",
    "projectName": "java-driver",
    "lineNum": 64,
    "nodeStartChar": 2452,
    "before": "LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\",broadcastRpcAddressToRemove)",
    "after": "LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\",logPrefix,broadcastRpcAddressToRemove)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f2a17753394086216265a56f2e8a247a6aff313c",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\nindex 7ee7416..5135d04 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n@@ -61,7 +61,7 @@\n     if (removedNode \u003d\u003d null) {\n       // This should never happen because we already check the event in NodeStateManager, but handle\n       // just in case.\n-      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", broadcastRpcAddressToRemove);\n+      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", logPrefix, broadcastRpcAddressToRemove);\n       return new Result(oldMetadata);\n     } else {\n       LOG.debug(\"[{}] Removing node {}\", logPrefix, removedNode);\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\nindex 7ee7416..5135d04 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/RemoveNodeRefresh.java\n@@ -61,7 +61,7 @@\n     if (removedNode \u003d\u003d null) {\n       // This should never happen because we already check the event in NodeStateManager, but handle\n       // just in case.\n-      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", broadcastRpcAddressToRemove);\n+      LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\", logPrefix, broadcastRpcAddressToRemove);\n       return new Result(oldMetadata);\n     } else {\n       LOG.debug(\"[{}] Removing node {}\", logPrefix, removedNode);\n",
    "projectName": "java-driver",
    "lineNum": 64,
    "nodeStartChar": 2452,
    "before": "LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\",broadcastRpcAddressToRemove)",
    "after": "LOG.debug(\"[{}] Couldn\u0027t find node {} to remove\",logPrefix,broadcastRpcAddressToRemove)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 59,
    "nodeStartChar": 2520
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 61,
    "nodeStartChar": 2670,
    "before": "Math.min(baseDelay,(exponentialDelay * 85) / 100)",
    "after": "Math.max(baseDelay,(exponentialDelay * 85) / 100)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 61,
    "nodeStartChar": 2670,
    "before": "Math.min(baseDelay,(exponentialDelay * 85) / 100)",
    "after": "Math.max(baseDelay,(exponentialDelay * 85) / 100)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 63,
    "nodeStartChar": 2835,
    "before": "Math.max(maxDelay,(exponentialDelay * 115) / 100)",
    "after": "Math.min(maxDelay,(exponentialDelay * 115) / 100)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "e016ab0a72463768e7da4f7933eec06cb5cc8170",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\nindex 25454a3..3f1a7c1 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/connection/ExponentialReconnectionPolicyTest.java\n@@ -54,13 +54,15 @@\n     ExponentialReconnectionPolicy policy \u003d new ExponentialReconnectionPolicy(driverContext);\n     ReconnectionPolicy.ReconnectionSchedule schedule \u003d policy.newControlConnectionSchedule(false);\n     // generate a number of delays and make sure they are all within the base/max values range\n-    for (int i \u003d 0; i \u003c 128; ++i) {\n-      // compute the min and max delays based on attempt count (i)\n+    // limit the loop to 53 as the bit shift and min/max calculations will cause long overflows\n+    // past that\n+    for (int i \u003d 0; i \u003c 54; ++i) {\n+      // compute the min and max delays based on attempt count (i) and prevent long overflows\n       long exponentialDelay \u003d Math.min(baseDelay * (1L \u003c\u003c i), maxDelay);\n       // min will be 85% of the pure exponential delay (with a floor of baseDelay)\n-      long minJitterDelay \u003d Math.min(baseDelay, (exponentialDelay * 85) / 100);\n+      long minJitterDelay \u003d Math.max(baseDelay, (exponentialDelay * 85) / 100);\n       // max will be 115% of the pure exponential delay (with a ceiling of maxDelay)\n-      long maxJitterDelay \u003d Math.max(maxDelay, (exponentialDelay * 115) / 100);\n+      long maxJitterDelay \u003d Math.min(maxDelay, (exponentialDelay * 115) / 100);\n       long delay \u003d schedule.nextDelay().toMillis();\n       assertThat(delay).isBetween(minJitterDelay, maxJitterDelay);\n     }\n",
    "projectName": "java-driver",
    "lineNum": 63,
    "nodeStartChar": 2835,
    "before": "Math.max(maxDelay,(exponentialDelay * 115) / 100)",
    "after": "Math.min(maxDelay,(exponentialDelay * 115) / 100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "09fa40e0bf7797f41ba9970e55922f1dc10ab3f1",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\nindex d4620c4..dfd616d 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n@@ -952,7 +952,7 @@\n     // This works because the event loop group is single-threaded\n     Future\u003c?\u003e f \u003d adminEventLoopGroup.schedule(() -\u003e null, 5, TimeUnit.NANOSECONDS);\n     try {\n-      Uninterruptibles.getUninterruptibly(f, 100, TimeUnit.MILLISECONDS);\n+      Uninterruptibles.getUninterruptibly(f, 250, TimeUnit.MILLISECONDS);\n     } catch (ExecutionException e) {\n       fail(\"unexpected error\", e.getCause());\n     } catch (TimeoutException e) {\ndiff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\nindex d4620c4..dfd616d 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/session/DefaultSessionPoolsTest.java\n@@ -952,7 +952,7 @@\n     // This works because the event loop group is single-threaded\n     Future\u003c?\u003e f \u003d adminEventLoopGroup.schedule(() -\u003e null, 5, TimeUnit.NANOSECONDS);\n     try {\n-      Uninterruptibles.getUninterruptibly(f, 100, TimeUnit.MILLISECONDS);\n+      Uninterruptibles.getUninterruptibly(f, 250, TimeUnit.MILLISECONDS);\n     } catch (ExecutionException e) {\n       fail(\"unexpected error\", e.getCause());\n     } catch (TimeoutException e) {\n",
    "projectName": "java-driver",
    "lineNum": 955,
    "nodeStartChar": 40481
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "1262240711ffdb654d4ef8d077e2ebc0c08a4c3f",
    "commitFile": "core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java",
    "patch": "diff --git a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\nindex 32ffd70..779d35b 100644\n--- a/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n+++ b/core/src/test/java/com/datastax/oss/driver/internal/core/metadata/DefaultTopologyMonitorTest.java\n@@ -102,7 +102,7 @@\n     topologyMonitor.init();\n \n     // Then\n-    Mockito.verify(controlConnection).init(true, false, false);\n+    Mockito.verify(controlConnection).init(true, false, true);\n   }\n \n   @Test\n",
    "projectName": "java-driver",
    "lineNum": 105,
    "nodeStartChar": 4266,
    "before": "false",
    "after": "true"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "b6abed591d321645eb5dea760a139610e5acd63d",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\nindex 6ac1c48..0509730 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n@@ -195,7 +195,7 @@\n       try {\n         row.getInt(\"d\");\n         fail(\"expected an error\");\n-      } catch (ArrayIndexOutOfBoundsException e) {\n+      } catch (IllegalArgumentException e) {\n         /*expected*/\n       }\n     }\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\nindex 6ac1c48..0509730 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/cql/PreparedStatementIT.java\n@@ -195,7 +195,7 @@\n       try {\n         row.getInt(\"d\");\n         fail(\"expected an error\");\n-      } catch (ArrayIndexOutOfBoundsException e) {\n+      } catch (IllegalArgumentException e) {\n         /*expected*/\n       }\n     }\n",
    "projectName": "java-driver",
    "lineNum": 198,
    "nodeStartChar": 8490,
    "before": "ArrayIndexOutOfBoundsException",
    "after": "IllegalArgumentException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a559b4ec04220d70b9ab9234c8d604a0866cab3e",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\n",
    "projectName": "java-driver",
    "lineNum": 118,
    "nodeStartChar": 4315,
    "before": "buildErrorStatement(dseVersion,dseRequirement.description(),false,true)",
    "after": "buildErrorStatement(minVersion,dseRequirement.description(),false,true)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a559b4ec04220d70b9ab9234c8d604a0866cab3e",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\nindex 3b5df66..42c754f 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java\n@@ -115,7 +115,7 @@\n         if (!dseRequirement.min().isEmpty()) {\n           Version minVersion \u003d Version.parse(dseRequirement.min());\n           if (minVersion.compareTo(dseVersion) \u003e 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), false, true);\n+            return buildErrorStatement(minVersion, dseRequirement.description(), false, true);\n           }\n         }\n \n@@ -123,7 +123,7 @@\n           Version maxVersion \u003d Version.parse(dseRequirement.max());\n \n           if (maxVersion.compareTo(ccmBridge.getCassandraVersion()) \u003c\u003d 0) {\n-            return buildErrorStatement(dseVersion, dseRequirement.description(), true, true);\n+            return buildErrorStatement(maxVersion, dseRequirement.description(), true, true);\n           }\n         }\n       }\n",
    "projectName": "java-driver",
    "lineNum": 126,
    "nodeStartChar": 4625,
    "before": "buildErrorStatement(dseVersion,dseRequirement.description(),true,true)",
    "after": "buildErrorStatement(maxVersion,dseRequirement.description(),true,true)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "75df423c74d83b08a4a450dda44be7ce84855411",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\nindex 809b0c4..54783a3 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n@@ -304,7 +304,7 @@\n             new LogOutputStream() {\n               @Override\n               protected void processLine(String line, int logLevel) {\n-                logger.warn(\"ccmerr\u003e {}\", line);\n+                logger.error(\"ccmerr\u003e {}\", line);\n               }\n             }) {\n       Executor executor \u003d new DefaultExecutor();\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\nindex 809b0c4..54783a3 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n@@ -304,7 +304,7 @@\n             new LogOutputStream() {\n               @Override\n               protected void processLine(String line, int logLevel) {\n-                logger.warn(\"ccmerr\u003e {}\", line);\n+                logger.error(\"ccmerr\u003e {}\", line);\n               }\n             }) {\n       Executor executor \u003d new DefaultExecutor();\n",
    "projectName": "java-driver",
    "lineNum": 307,
    "nodeStartChar": 10588,
    "before": "logger.warn(\"ccmerr\u003e {}\",line)",
    "after": "logger.error(\"ccmerr\u003e {}\",line)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "75df423c74d83b08a4a450dda44be7ce84855411",
    "commitFile": "test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java",
    "patch": "diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\nindex 809b0c4..54783a3 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n@@ -304,7 +304,7 @@\n             new LogOutputStream() {\n               @Override\n               protected void processLine(String line, int logLevel) {\n-                logger.warn(\"ccmerr\u003e {}\", line);\n+                logger.error(\"ccmerr\u003e {}\", line);\n               }\n             }) {\n       Executor executor \u003d new DefaultExecutor();\ndiff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\nindex 809b0c4..54783a3 100644\n--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java\n@@ -304,7 +304,7 @@\n             new LogOutputStream() {\n               @Override\n               protected void processLine(String line, int logLevel) {\n-                logger.warn(\"ccmerr\u003e {}\", line);\n+                logger.error(\"ccmerr\u003e {}\", line);\n               }\n             }) {\n       Executor executor \u003d new DefaultExecutor();\n",
    "projectName": "java-driver",
    "lineNum": 307,
    "nodeStartChar": 10588,
    "before": "logger.warn(\"ccmerr\u003e {}\",line)",
    "after": "logger.error(\"ccmerr\u003e {}\",line)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "b92b80bca81c0c302795f9d7686d91d892ad3b43",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\nindex 3f97bb9..771c220 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n@@ -96,7 +96,7 @@\n \n   @Override\n   public boolean isDetached() {\n-    return attachmentPoint !\u003d AttachmentPoint.NONE;\n+    return attachmentPoint \u003d\u003d AttachmentPoint.NONE;\n   }\n \n   @Override\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\nindex 3f97bb9..771c220 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/cql/DefaultRow.java\n@@ -96,7 +96,7 @@\n \n   @Override\n   public boolean isDetached() {\n-    return attachmentPoint !\u003d AttachmentPoint.NONE;\n+    return attachmentPoint \u003d\u003d AttachmentPoint.NONE;\n   }\n \n   @Override\n",
    "projectName": "java-driver",
    "lineNum": 99,
    "nodeStartChar": 2852,
    "before": "!\u003d",
    "after": "\u003d\u003d"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "8a6b736a9f295aa5888e07b59965ccdaff86e76b",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\nindex e360648..30b4d5c 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n \n-interface ReplicationStrategy {\n+public interface ReplicationStrategy {\n   SetMultimap\u003cToken, Node\u003e computeReplicasByToken(\n       Map\u003cToken, Node\u003e tokenToPrimary, List\u003cToken\u003e ring);\n }\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\nindex e360648..30b4d5c 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/metadata/token/ReplicationStrategy.java\n@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n \n-interface ReplicationStrategy {\n+public interface ReplicationStrategy {\n   SetMultimap\u003cToken, Node\u003e computeReplicasByToken(\n       Map\u003cToken, Node\u003e tokenToPrimary, List\u003cToken\u003e ring);\n }\n",
    "projectName": "java-driver",
    "lineNum": 25,
    "nodeStartChar": 906,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "54bca91de43f73c0a45ef6db31b7546e9c01eda7",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\nindex 4ca89b9..04fd8d0 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n@@ -61,11 +61,11 @@\n             .withConfigLoader(loader)\n             .addContactPoints(simulacron.getContactPoints())\n             .build()) {\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(2, TimeUnit.SECONDS));\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n \n       CqlSession session \u003d configCluster.connect();\n \n-      // Expect timeout since default timeout is .5 s\n+      // Expect timeout since default timeout is 2s\n       try {\n         session.execute(query);\n         fail(\"DriverTimeoutException expected\");\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\nindex 4ca89b9..04fd8d0 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileReloadIT.java\n@@ -61,11 +61,11 @@\n             .withConfigLoader(loader)\n             .addContactPoints(simulacron.getContactPoints())\n             .build()) {\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(2, TimeUnit.SECONDS));\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n \n       CqlSession session \u003d configCluster.connect();\n \n-      // Expect timeout since default timeout is .5 s\n+      // Expect timeout since default timeout is 2s\n       try {\n         session.execute(query);\n         fail(\"DriverTimeoutException expected\");\n",
    "projectName": "java-driver",
    "lineNum": 64,
    "nodeStartChar": 2999
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "6319d727f99589ecb300002c6524b1a73c8418d2",
    "commitFile": "integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java",
    "patch": "diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\nindex 215a4f6..4e30592 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n@@ -78,11 +78,11 @@\n     try (Cluster\u003cCqlSession\u003e profileCluster \u003d\n         ClusterUtils.newCluster(simulacron, \"profiles.olap.request.timeout \u003d 10s\")) {\n       String query \u003d \"mockquery\";\n-      // configure query with delay of 2 seconds.\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(1, TimeUnit.SECONDS));\n+      // configure query with delay of 4 seconds.\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n       CqlSession session \u003d profileCluster.connect();\n \n-      // Execute query without profile, should timeout with default (0.5s).\n+      // Execute query without profile, should timeout with default (2s).\n       try {\n         session.execute(query);\n         fail(\"Should have timed out\");\ndiff --git a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\nindex 215a4f6..4e30592 100644\n--- a/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n+++ b/integration-tests/src/test/java/com/datastax/oss/driver/api/core/config/DriverConfigProfileIT.java\n@@ -78,11 +78,11 @@\n     try (Cluster\u003cCqlSession\u003e profileCluster \u003d\n         ClusterUtils.newCluster(simulacron, \"profiles.olap.request.timeout \u003d 10s\")) {\n       String query \u003d \"mockquery\";\n-      // configure query with delay of 2 seconds.\n-      simulacron.cluster().prime(when(query).then(noRows()).delay(1, TimeUnit.SECONDS));\n+      // configure query with delay of 4 seconds.\n+      simulacron.cluster().prime(when(query).then(noRows()).delay(4, TimeUnit.SECONDS));\n       CqlSession session \u003d profileCluster.connect();\n \n-      // Execute query without profile, should timeout with default (0.5s).\n+      // Execute query without profile, should timeout with default (2s).\n       try {\n         session.execute(query);\n         fail(\"Should have timed out\");\n",
    "projectName": "java-driver",
    "lineNum": 82,
    "nodeStartChar": 3550
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "33e9952d71622bf34d43303fcbac94236d6b8e10",
    "commitFile": "core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java",
    "patch": "diff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\nindex 000c33e..952f4ba 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n@@ -101,7 +101,7 @@\n                   + \"to have an accessible constructor with arguments (%s, %s)\",\n               className,\n               configPath,\n-              DriverConfigProfile.class.getSimpleName(),\n+              DriverContext.class.getSimpleName(),\n               DriverOption.class.getSimpleName()));\n     }\n     try {\ndiff --git a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\nindex 000c33e..952f4ba 100644\n--- a/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n+++ b/core/src/main/java/com/datastax/oss/driver/internal/core/util/Reflection.java\n@@ -101,7 +101,7 @@\n                   + \"to have an accessible constructor with arguments (%s, %s)\",\n               className,\n               configPath,\n-              DriverConfigProfile.class.getSimpleName(),\n+              DriverContext.class.getSimpleName(),\n               DriverOption.class.getSimpleName()));\n     }\n     try {\n",
    "projectName": "java-driver",
    "lineNum": 104,
    "nodeStartChar": 4212,
    "before": "DriverConfigProfile",
    "after": "DriverContext"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "fdc5eb708034a10c1596740a301bb1fe4382b801",
    "commitFile": "gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java",
    "patch": "diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\nindex 71b96c8..6cbaa07 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n@@ -128,7 +128,7 @@\n                         Integer.MAX_VALUE,\n                         (filePath, fileAttr) -\u003e fileAttr.isRegularFile())\n                         .forEach(path -\u003e {\n-                            getLog().info(\"Analyze file: \" + path);\n+                            getLog().debug(\"Analyze file: \" + path);\n \n                             try {\n                                 analyzeFile(path, defaultDomain, entriesMap);\n",
    "projectName": "java-i18n-gettext",
    "lineNum": 131,
    "nodeStartChar": 4541,
    "before": "getLog().info(\"Analyze file: \" + path)",
    "after": "getLog().debug(\"Analyze file: \" + path)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "fdc5eb708034a10c1596740a301bb1fe4382b801",
    "commitFile": "gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java",
    "patch": "diff --git a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\nindex 71b96c8..6cbaa07 100644\n--- a/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n+++ b/gettext-maven-plugin/src/main/java/com/jukusoft/i18n/GeneratePotMojo.java\n@@ -128,7 +128,7 @@\n                         Integer.MAX_VALUE,\n                         (filePath, fileAttr) -\u003e fileAttr.isRegularFile())\n                         .forEach(path -\u003e {\n-                            getLog().info(\"Analyze file: \" + path);\n+                            getLog().debug(\"Analyze file: \" + path);\n \n                             try {\n                                 analyzeFile(path, defaultDomain, entriesMap);\n",
    "projectName": "java-i18n-gettext",
    "lineNum": 131,
    "nodeStartChar": 4541,
    "before": "getLog().info(\"Analyze file: \" + path)",
    "after": "getLog().debug(\"Analyze file: \" + path)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "commitSHA1": "08b2b035ae66a689bf485a0a0fe1c3334138c340",
    "commitFile": "src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java",
    "patch": "diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\nindex 30aeb90..c5c543c 100644\n--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n@@ -37,7 +37,7 @@\n     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);\n \n     // Calculate the answer of the challenge.\n-    final String key1 \u003d SEC_WEBSOCKET_KEY.get(request);\n+    final String key1 \u003d SEC_WEBSOCKET_KEY1.get(request);\n     final String key2 \u003d SEC_WEBSOCKET_KEY2.get(request);\n     final byte[] key3 \u003d new byte[8];\n \ndiff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\nindex 30aeb90..c5c543c 100644\n--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n@@ -37,7 +37,7 @@\n     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);\n \n     // Calculate the answer of the challenge.\n-    final String key1 \u003d SEC_WEBSOCKET_KEY.get(request);\n+    final String key1 \u003d SEC_WEBSOCKET_KEY1.get(request);\n     final String key2 \u003d SEC_WEBSOCKET_KEY2.get(request);\n     final byte[] key3 \u003d new byte[8];\n \n",
    "projectName": "jboss-websockets",
    "lineNum": 40,
    "nodeStartChar": 1327,
    "before": "SEC_WEBSOCKET_KEY.get(request)",
    "after": "SEC_WEBSOCKET_KEY1.get(request)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "08b2b035ae66a689bf485a0a0fe1c3334138c340",
    "commitFile": "src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java",
    "patch": "diff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\nindex 30aeb90..c5c543c 100644\n--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n@@ -37,7 +37,7 @@\n     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);\n \n     // Calculate the answer of the challenge.\n-    final String key1 \u003d SEC_WEBSOCKET_KEY.get(request);\n+    final String key1 \u003d SEC_WEBSOCKET_KEY1.get(request);\n     final String key2 \u003d SEC_WEBSOCKET_KEY2.get(request);\n     final byte[] key3 \u003d new byte[8];\n \ndiff --git a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\nindex 30aeb90..c5c543c 100644\n--- a/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n+++ b/src/main/java/org/jboss/as/websockets/protocol/ietf00/Ietf00Handshake.java\n@@ -37,7 +37,7 @@\n     WebSocketHeaders.SEC_WEBSOCKET_ORIGIN.copy(request, response);\n \n     // Calculate the answer of the challenge.\n-    final String key1 \u003d SEC_WEBSOCKET_KEY.get(request);\n+    final String key1 \u003d SEC_WEBSOCKET_KEY1.get(request);\n     final String key2 \u003d SEC_WEBSOCKET_KEY2.get(request);\n     final byte[] key3 \u003d new byte[8];\n \n",
    "projectName": "jboss-websockets",
    "lineNum": 40,
    "nodeStartChar": 1327,
    "before": "SEC_WEBSOCKET_KEY.get(request)",
    "after": "SEC_WEBSOCKET_KEY1.get(request)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "fdb666756b32c9a09ad014d0c3c3442232e94ff1",
    "commitFile": "src/main/java/jline/console/completer/FileNameCompleter.java",
    "patch": "diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java\nindex 1ab5f9a..edb97c7 100644\n--- a/src/main/java/jline/console/completer/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completer/FileNameCompleter.java\n@@ -66,7 +66,7 @@\n             translated \u003d homeDir.getParentFile().getAbsolutePath();\n         }\n         else if (!(translated.startsWith(separator()))) {\n-            String cwd \u003d getUserDir().getPath();\n+            String cwd \u003d getUserDir().getAbsolutePath();\n             translated \u003d cwd + separator() + translated;\n         }\n \ndiff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java\nindex 1ab5f9a..edb97c7 100644\n--- a/src/main/java/jline/console/completer/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completer/FileNameCompleter.java\n@@ -66,7 +66,7 @@\n             translated \u003d homeDir.getParentFile().getAbsolutePath();\n         }\n         else if (!(translated.startsWith(separator()))) {\n-            String cwd \u003d getUserDir().getPath();\n+            String cwd \u003d getUserDir().getAbsolutePath();\n             translated \u003d cwd + separator() + translated;\n         }\n \n",
    "projectName": "jline2",
    "lineNum": 69,
    "nodeStartChar": 2143,
    "before": "getUserDir().getPath()",
    "after": "getUserDir().getAbsolutePath()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "fdb666756b32c9a09ad014d0c3c3442232e94ff1",
    "commitFile": "src/main/java/jline/console/completer/FileNameCompleter.java",
    "patch": "diff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java\nindex 1ab5f9a..edb97c7 100644\n--- a/src/main/java/jline/console/completer/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completer/FileNameCompleter.java\n@@ -66,7 +66,7 @@\n             translated \u003d homeDir.getParentFile().getAbsolutePath();\n         }\n         else if (!(translated.startsWith(separator()))) {\n-            String cwd \u003d getUserDir().getPath();\n+            String cwd \u003d getUserDir().getAbsolutePath();\n             translated \u003d cwd + separator() + translated;\n         }\n \ndiff --git a/src/main/java/jline/console/completer/FileNameCompleter.java b/src/main/java/jline/console/completer/FileNameCompleter.java\nindex 1ab5f9a..edb97c7 100644\n--- a/src/main/java/jline/console/completer/FileNameCompleter.java\n+++ b/src/main/java/jline/console/completer/FileNameCompleter.java\n@@ -66,7 +66,7 @@\n             translated \u003d homeDir.getParentFile().getAbsolutePath();\n         }\n         else if (!(translated.startsWith(separator()))) {\n-            String cwd \u003d getUserDir().getPath();\n+            String cwd \u003d getUserDir().getAbsolutePath();\n             translated \u003d cwd + separator() + translated;\n         }\n \n",
    "projectName": "jline2",
    "lineNum": 69,
    "nodeStartChar": 2143,
    "before": "getUserDir().getPath()",
    "after": "getUserDir().getAbsolutePath()"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "3a64fa122dff363e5807a8bbd264b3137daa74c4",
    "commitFile": "src/main/java/jline/ConsoleOperations.java",
    "patch": "diff --git a/src/main/java/jline/ConsoleOperations.java b/src/main/java/jline/ConsoleOperations.java\nindex 709205e..2ee14bf 100644\n--- a/src/main/java/jline/ConsoleOperations.java\n+++ b/src/main/java/jline/ConsoleOperations.java\n@@ -25,7 +25,7 @@\n     final char CTRL_D \u003d 4;\n     final char CTRL_E \u003d 5;\n     final char CTRL_F \u003d 6;\n-    final static char DELETE \u003d 127;\n+    final static char DELETE \u003d 8;\n     final static char CTRL_K \u003d 11;\n     final static char CTRL_L \u003d 12;\n     final char CTRL_N \u003d 14;\ndiff --git a/src/main/java/jline/ConsoleOperations.java b/src/main/java/jline/ConsoleOperations.java\nindex 709205e..2ee14bf 100644\n--- a/src/main/java/jline/ConsoleOperations.java\n+++ b/src/main/java/jline/ConsoleOperations.java\n@@ -25,7 +25,7 @@\n     final char CTRL_D \u003d 4;\n     final char CTRL_E \u003d 5;\n     final char CTRL_F \u003d 6;\n-    final static char DELETE \u003d 127;\n+    final static char DELETE \u003d 8;\n     final static char CTRL_K \u003d 11;\n     final static char CTRL_L \u003d 12;\n     final char CTRL_N \u003d 14;\n",
    "projectName": "jline2",
    "lineNum": 28,
    "nodeStartChar": 837
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "1bab6e44fb51ab9f95596654160766fb2123a0ae",
    "commitFile": "src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java",
    "patch": "diff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\nindex e0df36f..2caf8cd 100644\n--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n@@ -96,7 +96,7 @@\n     @Override\n     public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {\n \n-        FreeStyleProject project \u003d Util.getProject(job);\n+        AbstractProject project \u003d Util.getProject(job);\n         final boolean shouldFail \u003d project \u003d\u003d null || project.getLastBuild() \u003d\u003d null;\n \n         if(shouldFail) {\ndiff --git a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\nindex e0df36f..2caf8cd 100644\n--- a/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n+++ b/src/main/java/com/datalex/jenkins/plugins/nodestalker/wrapper/NodeStalkerBuildWrapper.java\n@@ -96,7 +96,7 @@\n     @Override\n     public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {\n \n-        FreeStyleProject project \u003d Util.getProject(job);\n+        AbstractProject project \u003d Util.getProject(job);\n         final boolean shouldFail \u003d project \u003d\u003d null || project.getLastBuild() \u003d\u003d null;\n \n         if(shouldFail) {\n",
    "projectName": "job-node-stalker-plugin",
    "lineNum": 99,
    "nodeStartChar": 3407,
    "before": "FreeStyleProject",
    "after": "AbstractProject"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8e82cd4c6f0b7ef1bfede1128839edfb1cb6b959",
    "commitFile": "src/test/java/com/agapsys/jpa/scanner/JarFileTest.java",
    "patch": "diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\nindex f890b4b..035e4d4 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.getEmbeddedInfo(Defs.LIB_JAR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter2.InnerConverter\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter3\",\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\nindex 8198ead..d55a5b7 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter1\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter2.InnerConverter\",\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\nindex b7097fd..4a1ede5 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\n@@ -48,7 +48,7 @@\n \t\treturn classNameSet;\n \t}\n \t\n-\tpublic static Set\u003cString\u003e getStringList(String...elements) {\n+\tpublic static Set\u003cString\u003e getStringSet(String...elements) {\n \t\tSet\u003cString\u003e stringList \u003d new LinkedHashSet\u003cString\u003e();\n \t\t\n \t\tfor (String element : elements) {\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\nindex f890b4b..035e4d4 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.getEmbeddedInfo(Defs.LIB_JAR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter2.InnerConverter\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter3\",\n",
    "projectName": "jpa-scanner-maven-plugin",
    "lineNum": 29,
    "nodeStartChar": 954,
    "before": "TestUtils.getStringList(\"com.example.Converter2.InnerConverter\",\"com.example.Converter2\",\"com.example.Converter3\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\",\"com.example.Converter1\",\"com.example.Entity1\")",
    "after": "TestUtils.getStringSet(\"com.example.Converter2.InnerConverter\",\"com.example.Converter2\",\"com.example.Converter3\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\",\"com.example.Converter1\",\"com.example.Entity1\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8e82cd4c6f0b7ef1bfede1128839edfb1cb6b959",
    "commitFile": "src/test/java/com/agapsys/jpa/scanner/JarFileTest.java",
    "patch": "diff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\nindex f890b4b..035e4d4 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.getEmbeddedInfo(Defs.LIB_JAR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter2.InnerConverter\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter3\",\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\nindex 8198ead..d55a5b7 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter1\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter2.InnerConverter\",\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\nindex b7097fd..4a1ede5 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/TestUtils.java\n@@ -48,7 +48,7 @@\n \t\treturn classNameSet;\n \t}\n \t\n-\tpublic static Set\u003cString\u003e getStringList(String...elements) {\n+\tpublic static Set\u003cString\u003e getStringSet(String...elements) {\n \t\tSet\u003cString\u003e stringList \u003d new LinkedHashSet\u003cString\u003e();\n \t\t\n \t\tfor (String element : elements) {\ndiff --git a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\nindex f890b4b..035e4d4 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/JarFileTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.getEmbeddedInfo(Defs.LIB_JAR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter2.InnerConverter\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter3\",\n",
    "projectName": "jpa-scanner-maven-plugin",
    "lineNum": 29,
    "nodeStartChar": 954,
    "before": "TestUtils.getStringList(\"com.example.Converter2.InnerConverter\",\"com.example.Converter2\",\"com.example.Converter3\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\",\"com.example.Converter1\",\"com.example.Entity1\")",
    "after": "TestUtils.getStringSet(\"com.example.Converter2.InnerConverter\",\"com.example.Converter2\",\"com.example.Converter3\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\",\"com.example.Converter1\",\"com.example.Entity1\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8e82cd4c6f0b7ef1bfede1128839edfb1cb6b959",
    "commitFile": "src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java",
    "patch": "diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\nindex 8198ead..d55a5b7 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter1\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter2.InnerConverter\",\n",
    "projectName": "jpa-scanner-maven-plugin",
    "lineNum": 29,
    "nodeStartChar": 965,
    "before": "TestUtils.getStringList(\"com.example.Converter1\",\"com.example.Converter2\",\"com.example.Converter2.InnerConverter\",\"com.example.Converter3\",\"com.example.Entity1\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\")",
    "after": "TestUtils.getStringSet(\"com.example.Converter1\",\"com.example.Converter2\",\"com.example.Converter2.InnerConverter\",\"com.example.Converter3\",\"com.example.Entity1\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8e82cd4c6f0b7ef1bfede1128839edfb1cb6b959",
    "commitFile": "src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java",
    "patch": "diff --git a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\nindex 8198ead..d55a5b7 100644\n--- a/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n+++ b/src/test/java/com/agapsys/jpa/scanner/SourceDirectoryTest.java\n@@ -26,7 +26,7 @@\n \t@Test\n \tpublic void test() throws ParsingException {\n \t\tSet\u003cString\u003e scannedInfo \u003d TestUtils.scanJpaClasses(Defs.LIB_SRC_DIR);\n-\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringList(\n+\t\tSet\u003cString\u003e expectedInfo \u003d TestUtils.getStringSet(\n \t\t\t\"com.example.Converter1\",\n \t\t\t\"com.example.Converter2\",\n \t\t\t\"com.example.Converter2.InnerConverter\",\n",
    "projectName": "jpa-scanner-maven-plugin",
    "lineNum": 29,
    "nodeStartChar": 965,
    "before": "TestUtils.getStringList(\"com.example.Converter1\",\"com.example.Converter2\",\"com.example.Converter2.InnerConverter\",\"com.example.Converter3\",\"com.example.Entity1\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\")",
    "after": "TestUtils.getStringSet(\"com.example.Converter1\",\"com.example.Converter2\",\"com.example.Converter2.InnerConverter\",\"com.example.Converter3\",\"com.example.Entity1\",\"com.example.Entity2\",\"com.example.Entity3\",\"com.example.SimpleEnum.InnerConverter\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a9df80647dd48cd62d469517f40dd2850238e677",
    "commitFile": "core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java",
    "patch": "diff --git a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\nindex b04ffd2..cae3e59 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n@@ -149,7 +149,7 @@\n      * \u003cp\u003eGives a hint to the shrinking process as to the magnitude of the given\n      * value. The shrinking process will prefer trying values of greater\n      * magnitude before values of lesser magnitude. If not overridden, this\n-     * implementation returns zero.\u003c/p\u003e\n+     * implementation returns \"one\".\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003cem\u003eNote to generator writers:\u003c/em\u003e Do not worry about normalizing\n      * a magnitude to a positive value; the shrinking mechanism will take care\n@@ -160,7 +160,7 @@\n      * @return a measure of the given value\u0027s magnitude\n      */\n     public BigDecimal magnitude(Object value) {\n-        return ZERO;\n+        return ONE;\n     }\n \n     /**\ndiff --git a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\nindex b04ffd2..cae3e59 100644\n--- a/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n+++ b/core/src/main/java/com/pholser/junit/quickcheck/generator/Generator.java\n@@ -149,7 +149,7 @@\n      * \u003cp\u003eGives a hint to the shrinking process as to the magnitude of the given\n      * value. The shrinking process will prefer trying values of greater\n      * magnitude before values of lesser magnitude. If not overridden, this\n-     * implementation returns zero.\u003c/p\u003e\n+     * implementation returns \"one\".\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003cem\u003eNote to generator writers:\u003c/em\u003e Do not worry about normalizing\n      * a magnitude to a positive value; the shrinking mechanism will take care\n@@ -160,7 +160,7 @@\n      * @return a measure of the given value\u0027s magnitude\n      */\n     public BigDecimal magnitude(Object value) {\n-        return ZERO;\n+        return ONE;\n     }\n \n     /**\n",
    "projectName": "junit-quickcheck",
    "lineNum": 163,
    "nodeStartChar": 5815,
    "before": "return ZERO; ",
    "after": "return ONE; "
  },
  {
    "bugType": "DELETE_THROWS_EXCEPTION",
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 46,
    "nodeStartChar": 1821,
    "before": "1",
    "after": "1"
  },
  {
    "bugType": "DELETE_THROWS_EXCEPTION",
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 62,
    "nodeStartChar": 2359,
    "before": "1",
    "after": "1"
  },
  {
    "bugType": "DELETE_THROWS_EXCEPTION",
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 77,
    "nodeStartChar": 2834,
    "before": "1",
    "after": "1"
  },
  {
    "bugType": "DELETE_THROWS_EXCEPTION",
    "commitSHA1": "9eddaf26e7aca58cde5fe62cba28132781ed8993",
    "commitFile": "core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java",
    "patch": "diff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\ndiff --git a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\nindex d0d2dbc..6ea2225 100644\n--- a/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n+++ b/core/src/test/java/com/pholser/junit/quickcheck/ShrinkingTest.java\n@@ -43,10 +43,10 @@\n import static org.junit.experimental.results.ResultMatchers.*;\n \n public class ShrinkingTest {\n-    @Test public void complete() throws Exception {\n+    @Test public void complete() {\n         assertThat(\n             testResult(ShrinkingCompletely.class),\n-            hasSingleFailureContaining(String.format(\"Shrunken args: [%s]\", new Foo(1))));\n+            hasSingleFailureContaining(String.format(\"With arguments: [%s]\", new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -59,10 +59,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrink() throws Exception {\n+    @Test public void shrinkingDoesNotShrink() {\n         assertThat(\n             testResult(ShrinkingNotReally.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -74,10 +74,10 @@\n         }\n     }\n \n-    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() throws Exception {\n+    @Test public void shrinkingDoesNotShrinkWhenLargerEqualsSmaller() {\n         assertThat(\n             testResult(ShrinksAreIdentity.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -90,7 +90,7 @@\n     @Test public void assumptionFailureWhileShrinking() {\n         assertThat(\n             testResult(FailedAssumptionDuringShrinking.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -207,7 +207,7 @@\n         assertThat(\n             testResult(ShrinkingMoreThanOnePropertyParameter.class),\n             hasSingleFailureContaining(\n-                String.format(\"Shrunken args: [%s, %s]\", new Foo(1), new Foo(1))));\n+                String.format(\"With arguments: [%s, %s]\", new Foo(1), new Foo(1))));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n@@ -221,10 +221,10 @@\n         }\n     }\n \n-    @Test public void timeout() throws Exception {\n+    @Test public void timeout() {\n         assertThat(\n             testResult(ShrinkingTimeout.class),\n-            hasSingleFailureContaining(\"Args: [\"));\n+            hasSingleFailureContaining(\"With arguments: [\"));\n     }\n \n     @RunWith(JUnitQuickcheck.class)\n",
    "projectName": "junit-quickcheck",
    "lineNum": 224,
    "nodeStartChar": 7371,
    "before": "1",
    "after": "1"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "962f7bac5ff4a6ff04facc5c1b71aab5b34e6710",
    "commitFile": "src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java",
    "patch": "diff --git a/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java b/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java\nindex a2a874c..c0e9e2f 100644\n--- a/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java\n+++ b/src/test/java/com/pholser/junit/parameters/MarkingTheoryParametersAsForAllTest.java\n@@ -87,7 +87,7 @@\n         JUnitCore.runClasses(ForDefaultNumberOfBooleanWrappers.class);\r\n \r\n         assertEquals(ForAll.class.getMethod(\"sampleSize\").getDefaultValue(),\r\n-            ForDefaultNumberOfBooleans.iterations);\r\n+            ForDefaultNumberOfBooleanWrappers.iterations);\r\n     }\r\n \r\n     @RunWith(Theories.class)\r\n@@ -119,9 +119,9 @@\n \r\n     @Test\r\n     public void shouldAllowDifferentNumberOfRandomValuesOnAMarkedParameter() {\r\n-        JUnitCore.runClasses(ForDefaultNumberOfStrings.class);\r\n+        JUnitCore.runClasses(ForSpecifiedNumberOfStrings.class);\r\n \r\n-        assertEquals(200, ForDefaultNumberOfStrings.iterations);\r\n+        assertEquals(200, ForSpecifiedNumberOfStrings.iterations);\r\n     }\r\n \r\n     @RunWith(Theories.class)\r\n",
    "projectName": "junit-quickcheck",
    "lineNum": 122,
    "nodeStartChar": 3629,
    "before": "ForDefaultNumberOfStrings",
    "after": "ForSpecifiedNumberOfStrings"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "fb9526f6685fc1fc9f22eba6fafba8ef8425c059",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\nindex c640599..7f92e4c 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n@@ -154,7 +154,7 @@\n         final HMACHashUtilities hmac \u003d new HMACHashUtilities();\n \n         // Prepare array for signature binary components.\n-        final ArrayList\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n+        final List\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n \n         final CryptoProviderUtil keyConverter \u003d PowerAuthConfiguration.INSTANCE.getKeyConvertor();\n \ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\nindex c640599..7f92e4c 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/lib/util/SignatureUtils.java\n@@ -154,7 +154,7 @@\n         final HMACHashUtilities hmac \u003d new HMACHashUtilities();\n \n         // Prepare array for signature binary components.\n-        final ArrayList\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n+        final List\u003cbyte[]\u003e signatureComponents \u003d new ArrayList\u003cbyte[]\u003e();\n \n         final CryptoProviderUtil keyConverter \u003d PowerAuthConfiguration.INSTANCE.getKeyConvertor();\n \n",
    "projectName": "lime-security-powerauth",
    "lineNum": 157,
    "nodeStartChar": 8455,
    "before": "ArrayList",
    "after": "List"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 47,
    "nodeStartChar": 1773,
    "before": "String",
    "after": "PowerAuthSignatureTypes"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\ndiff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\nindex b97f9ee..dbf21d6 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/client/keyfactory/PowerAuthClientKeyFactory.java\n@@ -44,33 +44,33 @@\n      * @param biometrySignatureKey Biometry factor related signature key.\n      * @return List with correct keys\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey possessionSignatureKey, SecretKey knowledgeSignatureKey, SecretKey biometrySignatureKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             signatureKeys.add(possessionSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(biometrySignatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             signatureKeys.add(possessionSignatureKey);\n             signatureKeys.add(knowledgeSignatureKey);\n@@ -85,48 +85,45 @@\n     /**\n      * Generate a list with signature keys for given signature type and master\n      * secret\n-     *\n-     * @param signatureType\n-     *            Requested signature type\n-     * @param masterSecretKey\n-     *            Master Key Secret\n+     * @param signatureType Requested signature type\n+     * @param masterSecretKey Master Key Secret\n      * @return List with keys constructed from master secret that are needed to\n      *         get requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateClientSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateClientSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 96,
    "nodeStartChar": 3553,
    "before": "String",
    "after": "PowerAuthSignatureTypes"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "eadf7e371ddf7154cfcc57511007c68d7c47cc2a",
    "commitFile": "powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java",
    "patch": "diff --git a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\nindex df1b558..01caae2 100644\n--- a/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n+++ b/powerauth-java-crypto/src/main/java/io/getlime/security/powerauth/crypto/server/keyfactory/PowerAuthServerKeyFactory.java\n@@ -44,40 +44,40 @@\n      * @return List with keys constructed from master secret that are needed to get\n      * requested signature type.\n      */\n-    public List\u003cSecretKey\u003e keysForSignatureType(String signatureType, SecretKey masterSecretKey) {\n+    public List\u003cSecretKey\u003e keysForSignatureType(PowerAuthSignatureTypes signatureType, SecretKey masterSecretKey) {\n \n         List\u003cSecretKey\u003e signatureKeys \u003d new ArrayList\u003c\u003e();\n \n-        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION.toString())) {\n+        if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureKnowledgeKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n             signatureKey \u003d generateServerSignatureBiometryKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n \n-        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY.toString())) {\n+        } else if (signatureType.equals(PowerAuthSignatureTypes.POSSESSION_KNOWLEDGE_BIOMETRY)) {\n \n             SecretKey signatureKey \u003d generateServerSignaturePossessionKey(masterSecretKey);\n             signatureKeys.add(signatureKey);\n@@ -100,7 +100,7 @@\n      * @param masterSecretKey Master secret key KEY_MASTER_SECRET.\n      * @return An instance of signature key KEY_ENCRYPTED_VAULT.\n      */\n-    public SecretKey generateServerEndryptedVaultKey(SecretKey masterSecretKey) {\n+    public SecretKey generateServerEncryptedVaultKey(SecretKey masterSecretKey) {\n         return keyGenerator.deriveSecretKey(\n                 masterSecretKey,\n                 PowerAuthDerivedKey.ENCRYPTED_VAULT.getIndex()\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 47,
    "nodeStartChar": 1674,
    "before": "String",
    "after": "PowerAuthSignatureTypes"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "5614dfabd5f7e18ab91780fb6a13d68f785863dc",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\nindex 27a34bb..6c90655 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n@@ -81,7 +81,7 @@\n \t * @return Master public key.\n \t */\n \tpublic static PublicKey getMasterKey(JSONObject clientConfigObject) {\n-\t\tif (clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n+\t\tif (clientConfigObject !\u003d null \u0026\u0026 clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n \t\t\ttry {\n \t\t\t\tbyte[] masterKeyBytes \u003d BaseEncoding.base64().decode((String) clientConfigObject.get(\"masterPublicKey\"));\n \t\t\t\treturn PowerAuthConfiguration.INSTANCE.getKeyConvertor().convertBytesToPublicKey(masterKeyBytes);\ndiff --git a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\nindex 043efb2..a6d564e 100644\n--- a/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\n+++ b/powerauth-java-http/src/main/java/io/getlime/security/powerauth/lib/util/http/PowerAuthHttpHeader.java\n@@ -73,7 +73,7 @@\n \tpublic static Map\u003cString, String\u003e parsePowerAuthSignatureHTTPHeader(String xPowerAuthSignatureHeader) {\n \t\txPowerAuthSignatureHeader \u003d xPowerAuthSignatureHeader.trim();\n \t\tif (!xPowerAuthSignatureHeader.startsWith(POWERAUTH_PREFIX)) {\n-\t\t\treturn null;\n+\t\t\treturn new HashMap\u003c\u003e(); // invalid map with empty values works better than null here \n \t\t}\n \t\txPowerAuthSignatureHeader \u003d xPowerAuthSignatureHeader.substring(POWERAUTH_PREFIX.length()).trim();\n \t\t\ndiff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\nindex 27a34bb..6c90655 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/util/ConfigurationUtils.java\n@@ -81,7 +81,7 @@\n \t * @return Master public key.\n \t */\n \tpublic static PublicKey getMasterKey(JSONObject clientConfigObject) {\n-\t\tif (clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n+\t\tif (clientConfigObject !\u003d null \u0026\u0026 clientConfigObject.get(\"masterPublicKey\") !\u003d null) {\n \t\t\ttry {\n \t\t\t\tbyte[] masterKeyBytes \u003d BaseEncoding.base64().decode((String) clientConfigObject.get(\"masterPublicKey\"));\n \t\t\t\treturn PowerAuthConfiguration.INSTANCE.getKeyConvertor().convertBytesToPublicKey(masterKeyBytes);\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 84,
    "nodeStartChar": 2758,
    "before": "clientConfigObject.get(\"masterPublicKey\") !\u003d null",
    "after": "clientConfigObject !\u003d null \u0026\u0026 clientConfigObject.get(\"masterPublicKey\") !\u003d null"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "1ce020e7f4d3fa48416802b712525006ea59978d",
    "commitFile": "powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java",
    "patch": "diff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\nindex ea127a9..22611da 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n@@ -43,7 +43,7 @@\n         super();\n         this.code \u003d code;\n         this.message \u003d message;\n-        this.message \u003d localizedMessage;\n+        this.localizedMessage \u003d localizedMessage;\n     }\n \n     /**\ndiff --git a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\nindex ea127a9..22611da 100644\n--- a/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n+++ b/powerauth-java-server/src/main/java/io/getlime/security/service/exceptions/GenericServiceException.java\n@@ -43,7 +43,7 @@\n         super();\n         this.code \u003d code;\n         this.message \u003d message;\n-        this.message \u003d localizedMessage;\n+        this.localizedMessage \u003d localizedMessage;\n     }\n \n     /**\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 46,
    "nodeStartChar": 1519,
    "before": "this.message",
    "after": "this.localizedMessage"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "e2692b9da56827a2440a35e5da218d6e199a540a",
    "commitFile": "powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java",
    "patch": "diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\ndiff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 112,
    "nodeStartChar": 4628,
    "before": "hmac.hash(derivedKey,derivedKeyInner)",
    "after": "hmac.hash(derivedKeyInner,derivedKey)"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "e2692b9da56827a2440a35e5da218d6e199a540a",
    "commitFile": "powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java",
    "patch": "diff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\ndiff --git a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\nindex 1d695d6..0048c9d 100644\n--- a/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n+++ b/powerauth-java/src/main/java/io/getlime/security/powerauth/lib/util/SignatureUtils.java\n@@ -109,10 +109,10 @@\n            \tfor (int j \u003d 0; j \u003c i; j++) {\n            \t\tbyte[] signatureKeyInner \u003d keyConvertor.convertSharedSecretKeyToBytes(signatureKeys.get(j + 1));\n             \tbyte[] derivedKeyInner \u003d hmac.hash(signatureKeyInner, ctr);\n-                derivedKey \u003d hmac.hash(derivedKey, derivedKeyInner);\n+                derivedKey \u003d hmac.hash(derivedKeyInner, derivedKey);\n             }\n             \t\n-            byte[] signatureLong \u003d hmac.hash(data, derivedKey);\n+            byte[] signatureLong \u003d hmac.hash(derivedKey, data);\n             \t\n             if (signatureLong.length \u003c 4) { // assert\n                 throw new IndexOutOfBoundsException();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 115,
    "nodeStartChar": 4731,
    "before": "hmac.hash(data,derivedKey)",
    "after": "hmac.hash(derivedKey,data)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "bb1738b625919a19e5454a7922a1294a6c4950d0",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\nindex e9aef7c..35b0291 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\n@@ -167,7 +167,7 @@\n \t\t\t// Prepare the server request\n \t\t\tActivationCreateRequest requestObject \u003d new ActivationCreateRequest();\n \t\t\trequestObject.setActivationIdShort(activationIdShort);\n-\t\t\trequestObject.setClientName(\"PowerAuth 2.0 Reference Client\");\n+\t\t\trequestObject.setActivationName(\"PowerAuth 2.0 Reference Client\");\n \t\t\trequestObject.setActivationNonce(BaseEncoding.base64().encode(nonceDeviceBytes));\n \t\t\trequestObject.setcDevicePublicKey(BaseEncoding.base64().encode(cDevicePublicKeyBytes));\n \t\t\tPowerAuthAPIRequest\u003cActivationCreateRequest\u003e body \u003d new PowerAuthAPIRequest\u003c\u003e();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 170,
    "nodeStartChar": 8228,
    "before": "requestObject.setClientName(\"PowerAuth 2.0 Reference Client\")",
    "after": "requestObject.setActivationName(\"PowerAuth 2.0 Reference Client\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "bb1738b625919a19e5454a7922a1294a6c4950d0",
    "commitFile": "powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java",
    "patch": "diff --git a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\nindex e9aef7c..35b0291 100644\n--- a/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\n+++ b/powerauth-java-cmd/src/main/java/io/getlime/security/client/app/Application.java\n@@ -167,7 +167,7 @@\n \t\t\t// Prepare the server request\n \t\t\tActivationCreateRequest requestObject \u003d new ActivationCreateRequest();\n \t\t\trequestObject.setActivationIdShort(activationIdShort);\n-\t\t\trequestObject.setClientName(\"PowerAuth 2.0 Reference Client\");\n+\t\t\trequestObject.setActivationName(\"PowerAuth 2.0 Reference Client\");\n \t\t\trequestObject.setActivationNonce(BaseEncoding.base64().encode(nonceDeviceBytes));\n \t\t\trequestObject.setcDevicePublicKey(BaseEncoding.base64().encode(cDevicePublicKeyBytes));\n \t\t\tPowerAuthAPIRequest\u003cActivationCreateRequest\u003e body \u003d new PowerAuthAPIRequest\u003c\u003e();\n",
    "projectName": "lime-security-powerauth",
    "lineNum": 170,
    "nodeStartChar": 8228,
    "before": "requestObject.setClientName(\"PowerAuth 2.0 Reference Client\")",
    "after": "requestObject.setActivationName(\"PowerAuth 2.0 Reference Client\")"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "commitSHA1": "b2ea43dd7d203b5c35a658d9113a2aff10a6aa87",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\nindex a59185a..cb06363 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n@@ -49,7 +49,7 @@\n       Builder parallelStepBuilder \u003d null;\n       while ((line \u003d br.readLine()) !\u003d null) {\n         line \u003d line.trim();\n-        if (line.startsWith(KW_COMMENT)) {\n+        if (line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)) {\n           continue;\n         }\n \ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\nindex a59185a..cb06363 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/internal/util/workflow/WorkflowUtil.java\n@@ -49,7 +49,7 @@\n       Builder parallelStepBuilder \u003d null;\n       while ((line \u003d br.readLine()) !\u003d null) {\n         line \u003d line.trim();\n-        if (line.startsWith(KW_COMMENT)) {\n+        if (line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)) {\n           continue;\n         }\n \n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 52,
    "nodeStartChar": 2017,
    "before": "line.startsWith(KW_COMMENT)",
    "after": "line.startsWith(KW_COMMENT) || Strings.isNullOrEmpty(line)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "b7e769d5764b00effb6e3dd0b5209e6fd64dde8d",
    "commitFile": "src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java",
    "patch": "diff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\ndiff --git a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\nindex 314ae61..9870f09 100644\n--- a/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n+++ b/src/main/java/com/itemis/maven/plugins/cdi/AbstractCDIMojo.java\n@@ -147,27 +147,27 @@\n   private static final String SYSPROP_PRINT_STEPS \u003d \"printSteps\";\n \n   @Component\n-  private ArtifactResolver _resolver;\n+  public ArtifactResolver _resolver;\n \n   @Parameter(defaultValue \u003d \"${settings}\", readonly \u003d true, required \u003d true)\n-  private Settings _settings;\n+  public Settings _settings;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${repositorySystemSession}\")\n-  private RepositorySystemSession _repoSystemSession;\n+  public RepositorySystemSession _repoSystemSession;\n \n   @Parameter(readonly \u003d true, defaultValue \u003d \"${project.remotePluginRepositories}\")\n-  private List\u003cRemoteRepository\u003e _pluginRepos;\n+  public List\u003cRemoteRepository\u003e _pluginRepos;\n \n   @Parameter(property \u003d \"workflow\")\n-  private File workflowDescriptor;\n+  public File workflowDescriptor;\n \n   @Parameter(defaultValue \u003d \"true\", property \u003d \"enableLogTimestamps\")\n   @MojoProduces\n   @Named(\"enableLogTimestamps\")\n-  private boolean enableLogTimestamps;\n+  public boolean enableLogTimestamps;\n \n   @MojoProduces\n-  private MavenLogWrapper createLogWrapper() {\n+  public final MavenLogWrapper createLogWrapper() {\n     MavenLogWrapper log \u003d new MavenLogWrapper(getLog());\n     if (this.enableLogTimestamps) {\n       log.enableLogTimestamps();\n",
    "projectName": "maven-cdi-plugin-utils",
    "lineNum": 169,
    "nodeStartChar": 6745,
    "before": "2",
    "after": "17"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9c69f3b41c8e362a3b306e71af6085d43ec91d8d",
    "commitFile": "src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java",
    "patch": "diff --git a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\nindex 60f70c9..9aeaf10 100644\n--- a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n+++ b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n@@ -91,7 +91,7 @@\n         final String incrementalSerialSuffix \u003d session.getIncrementalSerialSuffix();\n         final String suffix \u003d session.getSuffix();\n \n-        final String suff \u003d incrementalSerialSuffix \u003d\u003d null ? suffix : incrementalSerialSuffix;\n+        final String suff \u003d suffix !\u003d null ? suffix : incrementalSerialSuffix;\n         final Pattern serialSuffixPattern \u003d Pattern.compile( SERIAL_SUFFIX_PATTERN );\n         final Matcher suffixMatcher \u003d serialSuffixPattern.matcher( suff );\n \ndiff --git a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\nindex 60f70c9..9aeaf10 100644\n--- a/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n+++ b/src/main/java/org/commonjava/maven/ext/versioning/VersionCalculator.java\n@@ -91,7 +91,7 @@\n         final String incrementalSerialSuffix \u003d session.getIncrementalSerialSuffix();\n         final String suffix \u003d session.getSuffix();\n \n-        final String suff \u003d incrementalSerialSuffix \u003d\u003d null ? suffix : incrementalSerialSuffix;\n+        final String suff \u003d suffix !\u003d null ? suffix : incrementalSerialSuffix;\n         final Pattern serialSuffixPattern \u003d Pattern.compile( SERIAL_SUFFIX_PATTERN );\n         final Matcher suffixMatcher \u003d serialSuffixPattern.matcher( suff );\n \n",
    "projectName": "maven-versioning-extension",
    "lineNum": 94,
    "nodeStartChar": 3249,
    "before": "incrementalSerialSuffix \u003d\u003d null",
    "after": "suffix !\u003d null"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "commitSHA1": "43266ccae179852828d371276a4013b85b82fc80",
    "commitFile": "src/mltk/predictor/function/SquareCutter.java",
    "patch": "diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\ndiff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\n",
    "projectName": "mltk",
    "lineNum": 77,
    "nodeStartChar": 1712,
    "before": "f1.getType()",
    "after": "f2.getType()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "43266ccae179852828d371276a4013b85b82fc80",
    "commitFile": "src/mltk/predictor/function/SquareCutter.java",
    "patch": "diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\ndiff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\n",
    "projectName": "mltk",
    "lineNum": 77,
    "nodeStartChar": 1712,
    "before": "f1.getType()",
    "after": "f2.getType()"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "commitSHA1": "43266ccae179852828d371276a4013b85b82fc80",
    "commitFile": "src/mltk/predictor/function/SquareCutter.java",
    "patch": "diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\ndiff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\n",
    "projectName": "mltk",
    "lineNum": 79,
    "nodeStartChar": 1814,
    "before": "f1.getType()",
    "after": "f2.getType()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "43266ccae179852828d371276a4013b85b82fc80",
    "commitFile": "src/mltk/predictor/function/SquareCutter.java",
    "patch": "diff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\ndiff --git a/src/mltk/predictor/function/SquareCutter.java b/src/mltk/predictor/function/SquareCutter.java\nindex cd3a97d..a0e4baa 100644\n--- a/src/mltk/predictor/function/SquareCutter.java\n+++ b/src/mltk/predictor/function/SquareCutter.java\n@@ -74,9 +74,9 @@\n \t\t}\r\n \t\tint size2 \u003d 0;\r\n \t\tAttribute f2 \u003d attributes.get(attIndex2);\r\n-\t\tif (f1.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n+\t\tif (f2.getType() \u003d\u003d Attribute.Type.BINNED) {\r\n \t\t\tsize2 \u003d ((BinnedAttribute) f2).getNumBins();\r\n-\t\t} else if (f1.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n+\t\t} else if (f2.getType() \u003d\u003d Attribute.Type.NOMINAL) {\r\n \t\t\tsize2 \u003d ((NominalAttribute) f2).getCardinality();\r\n \t\t}\r\n \t\tif (size1 \u003d\u003d 1 || size2 \u003d\u003d 1) {\r\n",
    "projectName": "mltk",
    "lineNum": 79,
    "nodeStartChar": 1814,
    "before": "f1.getType()",
    "after": "f2.getType()"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "commitSHA1": "4bf87e0a75714bee32320bb9c7fdbbbc77a3517a",
    "commitFile": "src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java",
    "patch": "diff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex fa5674d..8630971 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -419,7 +419,7 @@\n \n                         classes.add(properName);\n \n-                        if (name.startsWith(packageName)) {\n+                        if (properName.startsWith(packageName) || name.startsWith(packageName)) {\n                             list.add(properName);\n                         }\n                     }\ndiff --git a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\nindex fa5674d..8630971 100644\n--- a/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n+++ b/src/main/java/net/mountainblade/modular/impl/BaseModuleManager.java\n@@ -419,7 +419,7 @@\n \n                         classes.add(properName);\n \n-                        if (name.startsWith(packageName)) {\n+                        if (properName.startsWith(packageName) || name.startsWith(packageName)) {\n                             list.add(properName);\n                         }\n                     }\n",
    "projectName": "modular",
    "lineNum": 422,
    "nodeStartChar": 15890,
    "before": "name.startsWith(packageName)",
    "after": "properName.startsWith(packageName) || name.startsWith(packageName)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 80,
    "nodeStartChar": 3037,
    "before": "9",
    "after": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 96,
    "nodeStartChar": 3319,
    "before": "9",
    "after": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 117,
    "nodeStartChar": 3757,
    "before": "10",
    "after": "2"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "4cb13c38cd594b30f361c4a2a94ba9fd62c796aa",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\nindex 5548224..7701457 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPSocket.java\n@@ -78,9 +78,9 @@\n       MoreExecutors.listeningDecorator(GlobalEventExecutor.INSTANCE);\n \n   /**\n-   * Represents a conencted peer.\n+   * Represents a connected peer.\n    */\n-  public static interface ZMTPPeer {\n+  public interface ZMTPPeer {\n \n     /**\n      * Get the ZMTP session for this peer.\n@@ -96,7 +96,7 @@\n   /**\n    * Handles incoming messages and connection events.\n    */\n-  public static interface Handler {\n+  public interface Handler {\n \n     /**\n      * A peer connected.\n@@ -114,12 +114,12 @@\n     void message(ZMTPSocket socket, ZMTPPeer peer, ZMTPMessage message);\n   }\n \n-  private static interface Sender {\n+  private interface Sender {\n \n     ListenableFuture\u003cVoid\u003e send(ZMTPMessage message);\n   }\n \n-  private static interface Receiver {\n+  private interface Receiver {\n \n     void receive(final ZMTPPeer peer, ZMTPMessage message);\n   }\n",
    "projectName": "netty-zmtp",
    "lineNum": 122,
    "nodeStartChar": 3853,
    "before": "10",
    "after": "2"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "2a2b7679d6eb986e738d398f1e21194f05880cc9",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\nindex 85642f0..aab3426 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n@@ -107,7 +107,7 @@\n   }\n \n   public String endpoint() {\n-    return \"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort();\n+    return \"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort();\n   }\n \n   @Override\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\nindex 85642f0..aab3426 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n@@ -107,7 +107,7 @@\n   }\n \n   public String endpoint() {\n-    return \"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort();\n+    return \"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort();\n   }\n \n   @Override\n",
    "projectName": "netty-zmtp",
    "lineNum": 110,
    "nodeStartChar": 3517,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "2a2b7679d6eb986e738d398f1e21194f05880cc9",
    "commitFile": "src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\nindex 85642f0..aab3426 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n@@ -107,7 +107,7 @@\n   }\n \n   public String endpoint() {\n-    return \"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort();\n+    return \"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort();\n   }\n \n   @Override\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\nindex 85642f0..aab3426 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/ZMTPServer.java\n@@ -107,7 +107,7 @@\n   }\n \n   public String endpoint() {\n-    return \"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort();\n+    return \"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort();\n   }\n \n   @Override\n",
    "projectName": "netty-zmtp",
    "lineNum": 110,
    "nodeStartChar": 3517,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "40333dad056846492ab90623bc3061266cb23740",
    "commitFile": "src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java",
    "patch": "diff --git a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\nindex 8655523..298e09d 100644\n--- a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n+++ b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n@@ -80,7 +80,7 @@\n     if (frameLength \u003e 0) {\n       final ByteBuf frame \u003d data.readSlice(frameLength);\n       frame.retain();\n-      part.add(new ZMTPFrame(data));\n+      part.add(new ZMTPFrame(frame));\n     } else if (part \u003d\u003d tail) {\n       part.add(EMPTY_FRAME);\n     } else {\ndiff --git a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\nindex 562a4c1..cfdcb6e 100644\n--- a/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n+++ b/src/test/java/com/spotify/netty4/handler/codec/zmtp/TestUtil.java\n@@ -76,7 +76,7 @@\n   */\n \n   public static String printBytes(byte[] buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer[i]));\n     }\n@@ -84,7 +84,7 @@\n   }\n \n   public static String printBytes(ByteBuf buffer, int start, int length) {\n-    StringBuilder sb \u003d new StringBuilder(length - start);\n+    StringBuilder sb \u003d new StringBuilder(length);\n     for (int i \u003d start; i \u003c start + length; i++) {\n       sb.append(String.format(\"%%%02x\", buffer.getByte(i)));\n     }\ndiff --git a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\nindex 8655523..298e09d 100644\n--- a/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n+++ b/src/main/java/com/spotify/netty4/handler/codec/zmtp/ZMTPIncomingMessageDecoder2.java\n@@ -80,7 +80,7 @@\n     if (frameLength \u003e 0) {\n       final ByteBuf frame \u003d data.readSlice(frameLength);\n       frame.retain();\n-      part.add(new ZMTPFrame(data));\n+      part.add(new ZMTPFrame(frame));\n     } else if (part \u003d\u003d tail) {\n       part.add(EMPTY_FRAME);\n     } else {\n",
    "projectName": "netty-zmtp",
    "lineNum": 83,
    "nodeStartChar": 2206,
    "before": "new ZMTPFrame(data)",
    "after": "new ZMTPFrame(frame)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "b7c3cec84ff5352f0ddc588b726874c72a5acc53",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 120,
    "nodeStartChar": 4238,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "b7c3cec84ff5352f0ddc588b726874c72a5acc53",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 120,
    "nodeStartChar": 4238,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "b7c3cec84ff5352f0ddc588b726874c72a5acc53",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 142,
    "nodeStartChar": 5290,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "b7c3cec84ff5352f0ddc588b726874c72a5acc53",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 142,
    "nodeStartChar": 5290,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "13c310b28fb59d0ab2fee0554c23e9072b58e657",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 120,
    "nodeStartChar": 4238,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "13c310b28fb59d0ab2fee0554c23e9072b58e657",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 120,
    "nodeStartChar": 4238,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "13c310b28fb59d0ab2fee0554c23e9072b58e657",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 142,
    "nodeStartChar": 5290,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "13c310b28fb59d0ab2fee0554c23e9072b58e657",
    "commitFile": "src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java",
    "patch": "diff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\ndiff --git a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\nindex 3416295..16af96a 100644\n--- a/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n+++ b/src/test/java/com/spotify/netty/handler/codec/zmtp/ZMQIntegrationTest.java\n@@ -117,7 +117,7 @@\n   public void testZmqDealer() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.DEALER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n     final ZMsg request \u003d ZMsg.newStringMsg(\"envelope\", \"\", \"hello\", \"world\");\n     request.send(socket);\n \n@@ -139,7 +139,7 @@\n   public void testZmqRouter() throws Exception {\n     final ZMQ.Context context \u003d ZMQ.context(1);\n     final ZMQ.Socket socket \u003d context.socket(ZMQ.ROUTER);\n-    socket.connect(\"tcp://\" + serverAddress.getHostString() + \":\" + serverAddress.getPort());\n+    socket.connect(\"tcp://\" + serverAddress.getHostName() + \":\" + serverAddress.getPort());\n \n     final ZMTPMessage request \u003d new ZMTPMessage(\n         asList(ZMTPFrame.create(\"envelope\")),\n",
    "projectName": "netty-zmtp",
    "lineNum": 142,
    "nodeStartChar": 5290,
    "before": "serverAddress.getHostString()",
    "after": "serverAddress.getHostName()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "1dcff9d4a879fe894d7ca6fc1e323033dd95a5d9",
    "commitFile": "src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java",
    "patch": "diff --git a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\nindex 1ac1a69..cdb6bc4 100644\n--- a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n+++ b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n@@ -54,7 +54,7 @@\n         @NotNull\n         @Override\n         public Thread newThread(final Runnable r) {\n-          final Thread thread \u003d new Thread();\n+          final Thread thread \u003d new Thread(r);\n           thread.setDaemon(true);\n           thread.setName(\"netty-write-buffer-flusher\");\n           return thread;\ndiff --git a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\nindex 1ac1a69..cdb6bc4 100644\n--- a/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n+++ b/src/main/java/com/spotify/netty/handler/queue/AutoFlushingWriteBatcher.java\n@@ -54,7 +54,7 @@\n         @NotNull\n         @Override\n         public Thread newThread(final Runnable r) {\n-          final Thread thread \u003d new Thread();\n+          final Thread thread \u003d new Thread(r);\n           thread.setDaemon(true);\n           thread.setName(\"netty-write-buffer-flusher\");\n           return thread;\n",
    "projectName": "netty-zmtp",
    "lineNum": 57,
    "nodeStartChar": 2354,
    "before": "new Thread()",
    "after": "new Thread(r)"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "commitSHA1": "ebb90905658cae1cc5fa2b856bb9951b598efb36",
    "commitFile": "ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java",
    "patch": "diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\nindex a800a8a..5850661 100644\n--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n@@ -1019,7 +1019,7 @@\n                 fin \u003d messageReader.isFinalFrame();\n             }\n \n-            assert textBufferReadOffset \u003c textBufferReadOffset;\n+            assert textBufferReadOffset \u003c textBufferWriteOffset;\n \n             int charsRead \u003d Math.min(length, textBufferWriteOffset - textBufferReadOffset);\n             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);\ndiff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\nindex a800a8a..5850661 100644\n--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n@@ -1019,7 +1019,7 @@\n                 fin \u003d messageReader.isFinalFrame();\n             }\n \n-            assert textBufferReadOffset \u003c textBufferReadOffset;\n+            assert textBufferReadOffset \u003c textBufferWriteOffset;\n \n             int charsRead \u003d Math.min(length, textBufferWriteOffset - textBufferReadOffset);\n             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);\n",
    "projectName": "netx",
    "lineNum": 1022,
    "nodeStartChar": 38274,
    "before": "textBufferReadOffset \u003c textBufferReadOffset",
    "after": "textBufferReadOffset \u003c textBufferWriteOffset"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "ebb90905658cae1cc5fa2b856bb9951b598efb36",
    "commitFile": "ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java",
    "patch": "diff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\nindex a800a8a..5850661 100644\n--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n@@ -1019,7 +1019,7 @@\n                 fin \u003d messageReader.isFinalFrame();\n             }\n \n-            assert textBufferReadOffset \u003c textBufferReadOffset;\n+            assert textBufferReadOffset \u003c textBufferWriteOffset;\n \n             int charsRead \u003d Math.min(length, textBufferWriteOffset - textBufferReadOffset);\n             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);\ndiff --git a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\nindex a800a8a..5850661 100644\n--- a/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n+++ b/ws/src/main/java/org/kaazing/netx/ws/internal/io/WsMessageReader.java\n@@ -1019,7 +1019,7 @@\n                 fin \u003d messageReader.isFinalFrame();\n             }\n \n-            assert textBufferReadOffset \u003c textBufferReadOffset;\n+            assert textBufferReadOffset \u003c textBufferWriteOffset;\n \n             int charsRead \u003d Math.min(length, textBufferWriteOffset - textBufferReadOffset);\n             System.arraycopy(textBuffer, textBufferReadOffset, cbuf, offset, charsRead);\n",
    "projectName": "netx",
    "lineNum": 1022,
    "nodeStartChar": 38274,
    "before": "textBufferReadOffset \u003c textBufferReadOffset",
    "after": "textBufferReadOffset \u003c textBufferWriteOffset"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "f6aa12be0199e93fc077eb049a9e1ef54ed0f3a9",
    "commitFile": "src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java",
    "patch": "diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\ndiff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\n",
    "projectName": "netx",
    "lineNum": 79,
    "nodeStartChar": 2534
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "7304601d8cb177db37cd464c85ace47ffc56e7be",
    "commitFile": "src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java",
    "patch": "diff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\ndiff --git a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\nindex d59530a..4e61d0d 100644\n--- a/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n+++ b/src/main/java/org/kaazing/netx/ws/internal/io/WsInputStreamImpl.java\n@@ -76,7 +76,7 @@\n                         payloadLength \u003d payloadLength(header);\n                     }\n                     break;\n-                case 6:\n+                case 4:\n                     switch (header[1] \u0026 0x7f) {\n                     case 126:\n                         payloadOffset \u003d 0;\n",
    "projectName": "netx",
    "lineNum": 79,
    "nodeStartChar": 2534
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "33f51b16e646f8a843730b92f720171fdf13a9f7",
    "commitFile": "tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java",
    "patch": "diff --git a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\nindex 8ccfb9b..9bc1a0d 100644\n--- a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n+++ b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n@@ -29,7 +29,7 @@\n import org.junit.Test;\n \n /**\n- * Unit test for ExtractConsensus.\n+ * Unit test for ExtractExpected.\n  */\n \n public final class ExtractExpectedTest {\n@@ -37,6 +37,6 @@\n \t\n \t@Test\n \tpublic void testConstructor() {\n-\t    assertNotNull(new ExtractConsensus(inputHmlFile));\n+\t    assertNotNull(new ExtractExpected(inputHmlFile));\n \t}\n }\ndiff --git a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\nindex 8ccfb9b..9bc1a0d 100644\n--- a/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n+++ b/tools/src/test/java/org/nmdp/ngs/tools/ExtractExpectedTest.java\n@@ -29,7 +29,7 @@\n import org.junit.Test;\n \n /**\n- * Unit test for ExtractConsensus.\n+ * Unit test for ExtractExpected.\n  */\n \n public final class ExtractExpectedTest {\n@@ -37,6 +37,6 @@\n \t\n \t@Test\n \tpublic void testConstructor() {\n-\t    assertNotNull(new ExtractConsensus(inputHmlFile));\n+\t    assertNotNull(new ExtractExpected(inputHmlFile));\n \t}\n }\n",
    "projectName": "ngs",
    "lineNum": 40,
    "nodeStartChar": 1234,
    "before": "ExtractConsensus",
    "after": "ExtractExpected"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "aaaaf58332869527074aa008fd490fb05bd30014",
    "commitFile": "feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java",
    "patch": "diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\ndiff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\n",
    "projectName": "ngs",
    "lineNum": 278,
    "nodeStartChar": 8407,
    "before": "new String(buffer)",
    "after": "new String(buffer,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "91ff50ccfd69c061f319ac7a978878eca858a2b7",
    "commitFile": "feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java",
    "patch": "diff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\ndiff --git a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\nindex 93ca254..3bf599c 100644\n--- a/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n+++ b/feature/src/main/java/org/nmdp/ngs/feature/VcfFile.java\n@@ -275,7 +275,7 @@\n         }\n \n         bytes +\u003d stream.read(buffer);\n-        String line \u003d new String(buffer);\n+        String line \u003d new String(buffer, \"UTF8\");\n         //System.out.println(\"bytes \u003d \" + bytes + \" line \u003d \" + line);\n \n         while(line.startsWith(\"#\")) {\n",
    "projectName": "ngs",
    "lineNum": 278,
    "nodeStartChar": 8407,
    "before": "new String(buffer)",
    "after": "new String(buffer,\"UTF8\")"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "de86881aad07a00991f93edbd1f52adcff00cf48",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 1efe840..822bd2b 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1005,7 +1005,7 @@\n         final ResponseDecoder fetchResponseDecoder;\n \n         private final LongSupplier requestFetches;\n-        private LongSupplier responseFetches;\n+        private final LongSupplier responseFetches;\n         private boolean inFetch;\n \n         private AbstractFetchConnection(\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 1efe840..822bd2b 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1005,7 +1005,7 @@\n         final ResponseDecoder fetchResponseDecoder;\n \n         private final LongSupplier requestFetches;\n-        private LongSupplier responseFetches;\n+        private final LongSupplier responseFetches;\n         private boolean inFetch;\n \n         private AbstractFetchConnection(\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1008,
    "nodeStartChar": 37764,
    "before": "2",
    "after": "18"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 27,
    "nodeStartChar": 1117,
    "before": "IntPropertyDef",
    "after": "LongPropertyDef"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 41,
    "nodeStartChar": 2012
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 71,
    "nodeStartChar": 2839,
    "before": "KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this)",
    "after": "KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\nindex 79ddc9b..3d325b2 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/KafkaConfiguration.java\n@@ -24,7 +24,7 @@\n     public static final BooleanPropertyDef KAFKA_TOPIC_BOOTSTRAP_ENABLED;\n     public static final IntPropertyDef KAFKA_FETCH_MAX_BYTES;\n     public static final IntPropertyDef KAFKA_FETCH_PARTITION_MAX_BYTES;\n-    public static final IntPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n+    public static final LongPropertyDef KAFKA_MESSAGE_CACHE_CAPACITY;\n     public static final IntPropertyDef KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY;\n     public static final BooleanPropertyDef KAFKA_MESSAGE_CACHE_PROACTIVE;\n     public static final IntPropertyDef KAFKA_READ_IDLE_TIMEOUT;\n@@ -38,7 +38,7 @@\n         KAFKA_FETCH_MAX_BYTES \u003d config.property(\"fetch.max.bytes\", 50 * 1024 * 1024);\n         // maximum record batch size, corresponding to Kafka broker and topic configuration property \"max.message.bytes\"\n         KAFKA_FETCH_PARTITION_MAX_BYTES \u003d config.property(\"fetch.partition.max.bytes\", 1 * 1024 * 1024);\n-        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128 * 1024 * 1024);\n+        KAFKA_MESSAGE_CACHE_CAPACITY \u003d config.property(\"message.cache.capacity\", 128L * 1024L * 1024L);\n         KAFKA_MESSAGE_CACHE_BLOCK_CAPACITY \u003d config.property(\"message.cache.block.capacity\", 1024);\n         KAFKA_MESSAGE_CACHE_PROACTIVE \u003d config.property(\"message.cache.proactive\", false);\n         KAFKA_READ_IDLE_TIMEOUT \u003d config.property(\"read.idle.timeout\", 5000);\n@@ -68,7 +68,7 @@\n \n     public long messageCacheCapacity()\n     {\n-        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this);\n+        return KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this);\n     }\n \n     public int messageCacheBlockCapacity()\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 71,
    "nodeStartChar": 2839,
    "before": "KAFKA_MESSAGE_CACHE_CAPACITY.getAsInt(this)",
    "after": "KAFKA_MESSAGE_CACHE_CAPACITY.getAsLong(this)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex af3945e..d99623e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -57,7 +57,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 60,
    "nodeStartChar": 3080
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\nindex 881bb29..360aae4 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_FETCH_PARTITION_MAX_BYTES, 123000)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 55,
    "nodeStartChar": 2548
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\nindex 17c4af7..b709fc8 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchIT.java\n@@ -53,7 +53,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 56,
    "nodeStartChar": 2639
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\nindex e771193..606cf0c 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingFetchLimitsIT.java\n@@ -50,7 +50,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 2)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 2L)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n         .clean();\n \n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 53,
    "nodeStartChar": 2571
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\nindex 0a63a8a..36df77e 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/CachingProactiveFetchIT.java\n@@ -56,7 +56,7 @@\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n         .configure(KAFKA_MESSAGE_CACHE_PROACTIVE, true)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024 * 1024)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 1024L * 1024L)\n         .clean();\n \n     private final KafkaCountersRule counters \u003d new KafkaCountersRule(reaktor);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 59,
    "nodeStartChar": 2943
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1148631cd71c2f7f68e102471d08d4a04540e1c2",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\nindex 5ec5cf9..9b87ac9 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/FetchIT.java\n@@ -52,7 +52,7 @@\n         .responseBufferCapacity(1024)\n         .counterValuesBufferCapacity(4096)\n         .configure(KAFKA_TOPIC_BOOTSTRAP_ENABLED, false)\n-        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0)\n+        .configure(KAFKA_MESSAGE_CACHE_CAPACITY, 0L)\n         .clean();\n \n     @Rule\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 55,
    "nodeStartChar": 2643
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "a35ba177265ef781d4def6d2f9d73cfa404a1033",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 3fe5065..abdd205 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1325,7 +1325,7 @@\n                 Iterator\u003cNetworkTopicPartition\u003e iterator \u003d topic.partitions.iterator();\n                 NetworkTopicPartition candidate \u003d iterator.hasNext() ? iterator.next() : null;\n                 NetworkTopicPartition next;\n-                while (candidate !\u003d null)\n+                while (candidate !\u003d null \u0026\u0026 nodeIdsByPartition !\u003d null)\n                 {\n                     next \u003d iterator.hasNext() ? iterator.next() : null;\n                     boolean isHighestOffset \u003d next \u003d\u003d null || next.id !\u003d candidate.id;\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 3fe5065..abdd205 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1325,7 +1325,7 @@\n                 Iterator\u003cNetworkTopicPartition\u003e iterator \u003d topic.partitions.iterator();\n                 NetworkTopicPartition candidate \u003d iterator.hasNext() ? iterator.next() : null;\n                 NetworkTopicPartition next;\n-                while (candidate !\u003d null)\n+                while (candidate !\u003d null \u0026\u0026 nodeIdsByPartition !\u003d null)\n                 {\n                     next \u003d iterator.hasNext() ? iterator.next() : null;\n                     boolean isHighestOffset \u003d next \u003d\u003d null || next.id !\u003d candidate.id;\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1328,
    "nodeStartChar": 52671,
    "before": "candidate !\u003d null",
    "after": "candidate !\u003d null \u0026\u0026 nodeIdsByPartition !\u003d null"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "2058a9bc1193f38a76e84996e84e307c0eb0d2ec",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\nindex e49008a..aca8c68 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n@@ -152,7 +152,7 @@\n         long requestOffset,\n         long lastOffset)\n     {\n-        if (requestOffset \u003c validToOffset)\n+        if (requestOffset \u003c\u003d validToOffset)\n         {\n             validToOffset \u003d Math.max(lastOffset,  validToOffset);\n         }\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\nindex e49008a..aca8c68 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/cache/CompactedPartitionIndex.java\n@@ -152,7 +152,7 @@\n         long requestOffset,\n         long lastOffset)\n     {\n-        if (requestOffset \u003c validToOffset)\n+        if (requestOffset \u003c\u003d validToOffset)\n         {\n             validToOffset \u003d Math.max(lastOffset,  validToOffset);\n         }\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 155,
    "nodeStartChar": 5829,
    "before": "\u003c",
    "after": "\u003c\u003d"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "df1aa1f75502ee2b3051bcc2f7e1e3fc98e093de",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex 6314a8a..6b8e2af 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -65,7 +65,7 @@\n         k3po.start();\n         k3po.awaitBarrier(\"ROUTED_CLIENT\");\n         k3po.awaitBarrier(\"FETCH_REQUEST_RECEIVED\");\n-        Thread.sleep(500); // ensure bootstrap is complete before client attaches\n+        Thread.sleep(1000); // ensure bootstrap is complete before client attaches\n         k3po.notifyBarrier(\"CONNECT_CLIENT_ONE\");\n         k3po.finish();\n     }\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\nindex 6314a8a..6b8e2af 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/BootstrapCachingIT.java\n@@ -65,7 +65,7 @@\n         k3po.start();\n         k3po.awaitBarrier(\"ROUTED_CLIENT\");\n         k3po.awaitBarrier(\"FETCH_REQUEST_RECEIVED\");\n-        Thread.sleep(500); // ensure bootstrap is complete before client attaches\n+        Thread.sleep(1000); // ensure bootstrap is complete before client attaches\n         k3po.notifyBarrier(\"CONNECT_CLIENT_ONE\");\n         k3po.finish();\n     }\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 68,
    "nodeStartChar": 3067
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "4075d775c630a99f6e311f707b9ebb5df8302e33",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 9a99b91..e137540 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1073,7 +1073,7 @@\n                     final int recordBatchSize \u003d recordSet.recordBatchSize();\n                     networkOffset \u003d recordSet.limit() + recordBatchSize;\n \n-                    long requestedOffset \u003d getRueqestedOffset(topicName, partitionResponse.partitionId());\n+                    long requestedOffset \u003d getRequestedOffset(topicName, partitionResponse.partitionId());\n \n                     if (topic !\u003d null \u0026\u0026 requestedOffset !\u003d NO_OFFSET)\n                         // we still have subscribers\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 9a99b91..e137540 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1073,7 +1073,7 @@\n                     final int recordBatchSize \u003d recordSet.recordBatchSize();\n                     networkOffset \u003d recordSet.limit() + recordBatchSize;\n \n-                    long requestedOffset \u003d getRueqestedOffset(topicName, partitionResponse.partitionId());\n+                    long requestedOffset \u003d getRequestedOffset(topicName, partitionResponse.partitionId());\n \n                     if (topic !\u003d null \u0026\u0026 requestedOffset !\u003d NO_OFFSET)\n                         // we still have subscribers\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1076,
    "nodeStartChar": 44718,
    "before": "getRueqestedOffset(topicName,partitionResponse.partitionId())",
    "after": "getRequestedOffset(topicName,partitionResponse.partitionId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "4075d775c630a99f6e311f707b9ebb5df8302e33",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 9a99b91..e137540 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1073,7 +1073,7 @@\n                     final int recordBatchSize \u003d recordSet.recordBatchSize();\n                     networkOffset \u003d recordSet.limit() + recordBatchSize;\n \n-                    long requestedOffset \u003d getRueqestedOffset(topicName, partitionResponse.partitionId());\n+                    long requestedOffset \u003d getRequestedOffset(topicName, partitionResponse.partitionId());\n \n                     if (topic !\u003d null \u0026\u0026 requestedOffset !\u003d NO_OFFSET)\n                         // we still have subscribers\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 9a99b91..e137540 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -1073,7 +1073,7 @@\n                     final int recordBatchSize \u003d recordSet.recordBatchSize();\n                     networkOffset \u003d recordSet.limit() + recordBatchSize;\n \n-                    long requestedOffset \u003d getRueqestedOffset(topicName, partitionResponse.partitionId());\n+                    long requestedOffset \u003d getRequestedOffset(topicName, partitionResponse.partitionId());\n \n                     if (topic !\u003d null \u0026\u0026 requestedOffset !\u003d NO_OFFSET)\n                         // we still have subscribers\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 1076,
    "nodeStartChar": 44718,
    "before": "getRueqestedOffset(topicName,partitionResponse.partitionId())",
    "after": "getRequestedOffset(topicName,partitionResponse.partitionId())"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "aaca82071bb475bce8032acefee39dc6693a5ddc",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 70502d0..8ed216d 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -497,7 +497,7 @@\n                 // We didn\u0027t skip any messages due to lack of window, advance to highest offset\n                 endOffset \u003d lastOffset;\n             }\n-            if (endOffset \u003e startOffset)\n+            if (endOffset \u003e startOffset \u0026\u0026 requestOffset \u003c\u003d startOffset)\n             {\n                 this.fetchOffsets.put(partition, endOffset);\n                 progressHandler.handle(partition, startOffset, endOffset);\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 70502d0..8ed216d 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -497,7 +497,7 @@\n                 // We didn\u0027t skip any messages due to lack of window, advance to highest offset\n                 endOffset \u003d lastOffset;\n             }\n-            if (endOffset \u003e startOffset)\n+            if (endOffset \u003e startOffset \u0026\u0026 requestOffset \u003c\u003d startOffset)\n             {\n                 this.fetchOffsets.put(partition, endOffset);\n                 progressHandler.handle(partition, startOffset, endOffset);\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 500,
    "nodeStartChar": 18642,
    "before": "endOffset \u003e startOffset",
    "after": "endOffset \u003e startOffset \u0026\u0026 requestOffset \u003c\u003d startOffset"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "5d4a033dbc4ba7a4b926c17a4273a66ef03f3383",
    "commitFile": "src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java",
    "patch": "diff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\nindex 6ac3bad..5310ed0 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n@@ -38,7 +38,7 @@\n \n public final class TopicMessageDispatcherTest\n {\n-    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2);\n+    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2, KeyMessageDispatcher::new);\n \n     private final ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e headersRW \u003d\n             new ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e(new KafkaHeaderFW.Builder(), new KafkaHeaderFW());\ndiff --git a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\nindex 6ac3bad..5310ed0 100644\n--- a/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n+++ b/src/test/java/org/reaktivity/nukleus/kafka/internal/stream/TopicMessageDispatcherTest.java\n@@ -38,7 +38,7 @@\n \n public final class TopicMessageDispatcherTest\n {\n-    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2);\n+    private TopicMessageDispatcher dispatcher \u003d new TopicMessageDispatcher(2, KeyMessageDispatcher::new);\n \n     private final ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e headersRW \u003d\n             new ListFW.Builder\u003cKafkaHeaderFW.Builder, KafkaHeaderFW\u003e(new KafkaHeaderFW.Builder(), new KafkaHeaderFW());\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 41,
    "nodeStartChar": 1561,
    "before": "new TopicMessageDispatcher(2)",
    "after": "new TopicMessageDispatcher(2,KeyMessageDispatcher::new)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "d15cef579b6f5b8a5670e993cdc2c401446351ad",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 3fd27fd..70502d0 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -458,7 +458,7 @@\n             flushPreviousMessage(partition, messageOffset - 1);\n \n             if (requestOffset \u003c\u003d progressStartOffset // avoid out of order delivery\n-                \u0026\u0026 messageOffset \u003e\u003d progressStartOffset\n+                \u0026\u0026 messageOffset \u003e progressStartOffset\n                 \u0026\u0026 writeableBytesMinimum \u003d\u003d 0)\n             {\n                 final int payloadLength \u003d value \u003d\u003d null ? 0 : value.capacity();\ndiff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\nindex 3fd27fd..70502d0 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/ClientStreamFactory.java\n@@ -458,7 +458,7 @@\n             flushPreviousMessage(partition, messageOffset - 1);\n \n             if (requestOffset \u003c\u003d progressStartOffset // avoid out of order delivery\n-                \u0026\u0026 messageOffset \u003e\u003d progressStartOffset\n+                \u0026\u0026 messageOffset \u003e progressStartOffset\n                 \u0026\u0026 writeableBytesMinimum \u003d\u003d 0)\n             {\n                 final int payloadLength \u003d value \u003d\u003d null ? 0 : value.capacity();\n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 461,
    "nodeStartChar": 17096,
    "before": "\u003e\u003d",
    "after": "\u003e"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8e4afedb80a74883880c59e5d190c77a3cf5347b",
    "commitFile": "src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java",
    "patch": "diff --git a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\nindex 65e5164..9826bf9 100644\n--- a/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n+++ b/src/main/java/org/reaktivity/nukleus/kafka/internal/stream/NetworkConnectionPool.java\n@@ -236,7 +236,7 @@\n         // TODO: If the topic now has no partitions, remove from topicsByName and topicMetadataByName\n     }\n \n-    abstract class NetworkConnection\n+    abstract class AbstractNetworkConnection\n     {\n         final MessageConsumer networkTarget;\n \n@@ -259,7 +259,7 @@\n         int nextRequestId;\n         int nextResponseId;\n \n-        private NetworkConnection()\n+        private AbstractNetworkConnection()\n         {\n             this.networkTarget \u003d NetworkConnectionPool.this.clientStreamFactory.router.supplyTarget(networkName);\n         }\n@@ -300,7 +300,7 @@\n                 final long newNetworkId \u003d NetworkConnectionPool.this.clientStreamFactory.supplyStreamId.getAsLong();\n                 final long newCorrelationId \u003d NetworkConnectionPool.this.clientStreamFactory.supplyCorrelationId.getAsLong();\n \n-                NetworkConnectionPool.this.clientStreamFactory.correlations.put(newCorrelationId, NetworkConnection.this);\n+                NetworkConnectionPool.this.clientStreamFactory.correlations.put(newCorrelationId, AbstractNetworkConnection.this);\n \n                 NetworkConnectionPool.this.clientStreamFactory\n                     .doBegin(networkTarget, newNetworkId, networkRef, newCorrelationId, extensionVisitor);\n@@ -556,7 +556,7 @@\n         }\n     }\n \n-    final class FetchConnection extends NetworkConnection\n+    final class FetchConnection extends AbstractNetworkConnection\n     {\n         private final int brokerId;\n         private final String host;\n@@ -745,7 +745,7 @@\n         }\n     }\n \n-    private final class MetadataConnection extends NetworkConnection\n+    private final class MetadataConnection extends AbstractNetworkConnection\n     {\n         TopicMetadata pendingTopicMetadata;\n \n",
    "projectName": "nukleus-kafka.java",
    "lineNum": 303,
    "nodeStartChar": 12330,
    "before": "NetworkConnection.this",
    "after": "AbstractNetworkConnection.this"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "188f2aa4daa066e01bd4dd9312d1430aca65cbac",
    "commitFile": "src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java",
    "patch": "diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 12fcc6b..5a40e8b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -44,7 +44,7 @@\n      * Converts a {@link Nullable} reference into a {@link NonNull} reference. Performs a strict \u003ccode\u003enull\u003c/code\u003e check\n      * that fails in case a \u003ccode\u003enull\u003c/code\u003e reference is given.\n      *\n-     * @param \u003cT\u003e\n+     * @param \u003cTYPE\u003e\n      *            The type of the reference\n      * @param reference\n      *            A possible \u003ccode\u003enull\u003c/code\u003e reference.\n@@ -53,7 +53,7 @@\n      * @return Either the reference itself, or an {@link NullPointerException}, in case the reference was\n      *         \u003ccode\u003enull\u003c/code\u003e.\n      */\n-    public static \u003cT\u003e @NonNull T nonNull(@Nullable final T reference, final String message) {\n+    public static \u003cTYPE\u003e @NonNull TYPE nonNull(@Nullable final TYPE reference, final String message) {\n         if (reference !\u003d null) {\n             return reference;\n         }\ndiff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 12fcc6b..5a40e8b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -44,7 +44,7 @@\n      * Converts a {@link Nullable} reference into a {@link NonNull} reference. Performs a strict \u003ccode\u003enull\u003c/code\u003e check\n      * that fails in case a \u003ccode\u003enull\u003c/code\u003e reference is given.\n      *\n-     * @param \u003cT\u003e\n+     * @param \u003cTYPE\u003e\n      *            The type of the reference\n      * @param reference\n      *            A possible \u003ccode\u003enull\u003c/code\u003e reference.\n@@ -53,7 +53,7 @@\n      * @return Either the reference itself, or an {@link NullPointerException}, in case the reference was\n      *         \u003ccode\u003enull\u003c/code\u003e.\n      */\n-    public static \u003cT\u003e @NonNull T nonNull(@Nullable final T reference, final String message) {\n+    public static \u003cTYPE\u003e @NonNull TYPE nonNull(@Nullable final TYPE reference, final String message) {\n         if (reference !\u003d null) {\n             return reference;\n         }\n",
    "projectName": "null-analysis",
    "lineNum": 56,
    "nodeStartChar": 2083,
    "before": "T",
    "after": "TYPE"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "d9be0c9c59ad303771632643be0e8699f2b621ac",
    "commitFile": "src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java",
    "patch": "diff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 9e57f68..12fcc6b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -58,7 +58,7 @@\n             return reference;\n         }\n \n-        throw new NullPointerException(message); // NOPMD - we want to throw NPE here\n+        throw new IllegalArgumentException(message);\n     }\n \n     /**\ndiff --git a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\nindex 9e57f68..12fcc6b 100755\n--- a/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n+++ b/src/main/java/de/xn__ho_hia/null_analysis/Nullsafe.java\n@@ -58,7 +58,7 @@\n             return reference;\n         }\n \n-        throw new NullPointerException(message); // NOPMD - we want to throw NPE here\n+        throw new IllegalArgumentException(message);\n     }\n \n     /**\n",
    "projectName": "null-analysis",
    "lineNum": 61,
    "nodeStartChar": 2250,
    "before": "NullPointerException",
    "after": "IllegalArgumentException"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "50b84c43ca865cfcedd6dbb2114b5f8e20ad9d53",
    "commitFile": "onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java",
    "patch": "diff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\nindex 2e81f25..2666f75 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n@@ -63,7 +63,7 @@\n \t    byte[] rawHmac \u003d mac.doFinal(json);\n \n \t    // base64-encode the calculatedSignature\n-\t    String calculatedSignature \u003d new BigInteger(rawHmac).toString(16);\n+\t    String calculatedSignature \u003d new BigInteger(1, rawHmac).toString(16);\n \t    if (! calculatedSignature.equals(attachedSignature)) {\n \t\tthrow new SignatureMismatchException(\"HMAC mismatch\", calculatedSignature, attachedSignature);\n \t    }\ndiff --git a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\nindex 2e81f25..2666f75 100644\n--- a/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n+++ b/onfido/src/main/java/com/youcruit/onfido/api/webhook/WebhookClient.java\n@@ -63,7 +63,7 @@\n \t    byte[] rawHmac \u003d mac.doFinal(json);\n \n \t    // base64-encode the calculatedSignature\n-\t    String calculatedSignature \u003d new BigInteger(rawHmac).toString(16);\n+\t    String calculatedSignature \u003d new BigInteger(1, rawHmac).toString(16);\n \t    if (! calculatedSignature.equals(attachedSignature)) {\n \t\tthrow new SignatureMismatchException(\"HMAC mismatch\", calculatedSignature, attachedSignature);\n \t    }\n",
    "projectName": "onfido-api",
    "lineNum": 66,
    "nodeStartChar": 2460,
    "before": "new BigInteger(rawHmac)",
    "after": "new BigInteger(1,rawHmac)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "5d1511b064a344c5cd2ee8ec63d97620ad3d465a",
    "commitFile": "src/test/java/com/youcruit/onfido/api/HttpIT.java",
    "patch": "diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java\nindex edcdac5..9bcc6f5 100644\n--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java\n+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java\n@@ -39,7 +39,7 @@\n     public OnfidoHttpClient createClient() {\n \tString authToken \u003d getPropEnv(\"ONFIDO_AUTH_TOKEN\");\n \tif (authToken \u003d\u003d null) {\n-\t    Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n+\t    Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n \t    return new FakeHttpClient();\n \t}\n \treturn createClient(authToken);\ndiff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java\nindex edcdac5..9bcc6f5 100644\n--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java\n+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java\n@@ -39,7 +39,7 @@\n     public OnfidoHttpClient createClient() {\n \tString authToken \u003d getPropEnv(\"ONFIDO_AUTH_TOKEN\");\n \tif (authToken \u003d\u003d null) {\n-\t    Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n+\t    Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n \t    return new FakeHttpClient();\n \t}\n \treturn createClient(authToken);\n",
    "projectName": "onfido-api",
    "lineNum": 42,
    "nodeStartChar": 1249,
    "before": "Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\")",
    "after": "Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "5d1511b064a344c5cd2ee8ec63d97620ad3d465a",
    "commitFile": "src/test/java/com/youcruit/onfido/api/HttpIT.java",
    "patch": "diff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java\nindex edcdac5..9bcc6f5 100644\n--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java\n+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java\n@@ -39,7 +39,7 @@\n     public OnfidoHttpClient createClient() {\n \tString authToken \u003d getPropEnv(\"ONFIDO_AUTH_TOKEN\");\n \tif (authToken \u003d\u003d null) {\n-\t    Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n+\t    Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n \t    return new FakeHttpClient();\n \t}\n \treturn createClient(authToken);\ndiff --git a/src/test/java/com/youcruit/onfido/api/HttpIT.java b/src/test/java/com/youcruit/onfido/api/HttpIT.java\nindex edcdac5..9bcc6f5 100644\n--- a/src/test/java/com/youcruit/onfido/api/HttpIT.java\n+++ b/src/test/java/com/youcruit/onfido/api/HttpIT.java\n@@ -39,7 +39,7 @@\n     public OnfidoHttpClient createClient() {\n \tString authToken \u003d getPropEnv(\"ONFIDO_AUTH_TOKEN\");\n \tif (authToken \u003d\u003d null) {\n-\t    Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n+\t    Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\");\n \t    return new FakeHttpClient();\n \t}\n \treturn createClient(authToken);\n",
    "projectName": "onfido-api",
    "lineNum": 42,
    "nodeStartChar": 1249,
    "before": "Logger.getLogger(getClass()).error(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\")",
    "after": "Logger.getLogger(getClass()).info(\"Use environment or property \u0027ONFIDO_AUTH_TOKEN\u0027 to set an authToken. Going with fake client.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c4599d14f905e48ea448e96a769cbb48c5fa016f",
    "commitFile": "src/main/java/com/youcruit/onfido/api/report/Report.java",
    "patch": "diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\ndiff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\n",
    "projectName": "onfido-api",
    "lineNum": 41,
    "nodeStartChar": 1030,
    "before": "BreakdownFieldType",
    "after": "PropertyFieldType"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c4599d14f905e48ea448e96a769cbb48c5fa016f",
    "commitFile": "src/main/java/com/youcruit/onfido/api/report/Report.java",
    "patch": "diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\ndiff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\n",
    "projectName": "onfido-api",
    "lineNum": 115,
    "nodeStartChar": 2456,
    "before": "BreakdownFieldType",
    "after": "PropertyFieldType"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c4599d14f905e48ea448e96a769cbb48c5fa016f",
    "commitFile": "src/main/java/com/youcruit/onfido/api/report/Report.java",
    "patch": "diff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\ndiff --git a/src/main/java/com/youcruit/onfido/api/report/Report.java b/src/main/java/com/youcruit/onfido/api/report/Report.java\nindex 53ca0cd..9a2c8ec 100644\n--- a/src/main/java/com/youcruit/onfido/api/report/Report.java\n+++ b/src/main/java/com/youcruit/onfido/api/report/Report.java\n@@ -38,7 +38,7 @@\n     private Map\u003cBreakdownFieldType, BreakdownField\u003e breakdown;\n     @Expose\n     @SerializedName(\"properties\")\n-    private Map\u003cBreakdownFieldType, Object\u003e properties;\n+    private Map\u003cPropertyFieldType, Object\u003e properties;\n \n     public ReportId getReportId() {\n \treturn reportId;\n@@ -112,11 +112,11 @@\n \tthis.breakdown \u003d breakdown;\n     }\n \n-    public Map\u003cBreakdownFieldType, Object\u003e getProperties() {\n+    public Map\u003cPropertyFieldType, Object\u003e getProperties() {\n \treturn properties;\n     }\n \n-    public void setProperties(Map\u003cBreakdownFieldType, Object\u003e properties) {\n+    public void setProperties(Map\u003cPropertyFieldType, Object\u003e properties) {\n \tthis.properties \u003d properties;\n     }\n }\n",
    "projectName": "onfido-api",
    "lineNum": 119,
    "nodeStartChar": 2563,
    "before": "BreakdownFieldType",
    "after": "PropertyFieldType"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\nindex 4385f90..82b954a 100644\n--- a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n+++ b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n@@ -59,7 +59,7 @@\n   }\n \n   // Allows sharing tests between guava collections, jdk only collections and whatever other combinations are needed.\n-  private \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n+  private static \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n   void assertBasicApi(Class\u003cImmutableClassT\u003e immutableType, Class\u003cAbstractClassT\u003e returnType,\n       CopyFunction\u003cImmutableClassT, AbstractClassT\u003e copyFunction,\n       BuilderFunction\u003cAbstractClassT\u003e newBuilder) {\n",
    "projectName": "org.immutables",
    "lineNum": 62,
    "nodeStartChar": 3343,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 115,
    "nodeStartChar": 3766,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 123,
    "nodeStartChar": 4089,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 96,
    "nodeStartChar": 2823,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 102,
    "nodeStartChar": 3084,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 132,
    "nodeStartChar": 5393,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 136,
    "nodeStartChar": 5551,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 74,
    "nodeStartChar": 2469,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 80,
    "nodeStartChar": 2730,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "bf7e771c0dd92a9ef6e3f428f18730f1ff0dc11d",
    "commitFile": "value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\nindex ecb044f..11069ed 100644\n--- a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n+++ b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n@@ -34,7 +34,7 @@\n     check(sortedToStringsFrom(ServiceLoader.load(AutoCloseable.class))).isOf(\"NestedService.Service\");\n   }\n \n-  private TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n+  private static TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n     return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction()));\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 37,
    "nodeStartChar": 1303,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\nindex 4385f90..82b954a 100644\n--- a/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n+++ b/value-fixture/test/org/immutables/fixture/builder/AttributeBuilderTest.java\n@@ -59,7 +59,7 @@\n   }\n \n   // Allows sharing tests between guava collections, jdk only collections and whatever other combinations are needed.\n-  private \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n+  private static \u003cImmutableClassT extends AttributeBuilderValueI, AbstractClassT extends AttributeBuilderValueI\u003e\n   void assertBasicApi(Class\u003cImmutableClassT\u003e immutableType, Class\u003cAbstractClassT\u003e returnType,\n       CopyFunction\u003cImmutableClassT, AbstractClassT\u003e copyFunction,\n       BuilderFunction\u003cAbstractClassT\u003e newBuilder) {\n",
    "projectName": "org.immutables",
    "lineNum": 62,
    "nodeStartChar": 3343,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 115,
    "nodeStartChar": 3766,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\nindex 2b54cde..ce00a84 100644\n--- a/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jackson/FieldConflictTest.java\n@@ -112,7 +112,7 @@\n     verifyRoundTrip(getMapper(true), ImmutableCustomDummyWithMetaAnnotation.of(true));\n   }\n \n-  private ObjectMapper getMapper(final boolean useFields) {\n+  private static ObjectMapper getMapper(final boolean useFields) {\n     final ObjectMapper mapper \u003d new ObjectMapper();\n     return useFields\n         ? mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n@@ -120,7 +120,7 @@\n         : mapper;\n   }\n \n-  private void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n+  private static void verifyRoundTrip(final ObjectMapper mapper, final Object value) throws IOException {\n     final String json \u003d mapper.writeValueAsString(value);\n     final Object newValue \u003d mapper.readValue(json, value.getClass());\n     check(newValue).is(value);\n",
    "projectName": "org.immutables",
    "lineNum": 123,
    "nodeStartChar": 4089,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 96,
    "nodeStartChar": 2823,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\nindex ed8b828..5f58a54 100644\n--- a/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n+++ b/value-fixture/test/org/immutables/fixture/jdkonly/JdkOptionalTest.java\n@@ -93,13 +93,13 @@\n     check(o1.hashCode()).is(o0.hashCode());\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 102,
    "nodeStartChar": 3084,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 132,
    "nodeStartChar": 5393,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\nindex 6d1cfde..e47c589 100644\n--- a/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n+++ b/value-fixture/test/org/immutables/fixture/marshal/MarshallingTest.java\n@@ -129,11 +129,11 @@\n     check(Marshaling.fromJson(Marshaling.toJson(structure), SillyStructure.class)).is(structure);\n   }\n \n-  private \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e List\u003cT\u003e fromJsonIterable(String json, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().fromJson(json, typeToken.getType());\n   }\n \n-  private \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n+  private static \u003cT\u003e String toJsonIterable(List\u003c? extends T\u003e list, TypeToken\u003cList\u003cT\u003e\u003e typeToken) {\n     return Marshaling.getGson().toJson(list, typeToken.getType());\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 136,
    "nodeStartChar": 5551,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 74,
    "nodeStartChar": 2469,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/fixture/serial/SerialTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\nindex 34293da..62ced12 100644\n--- a/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n+++ b/value-fixture/test/org/immutables/fixture/serial/SerialTest.java\n@@ -71,13 +71,13 @@\n     check(false);\n   }\n \n-  private Serializable deserialize(byte[] bytes) throws Exception {\n+  private static Serializable deserialize(byte[] bytes) throws Exception {\n     ByteArrayInputStream stream \u003d new ByteArrayInputStream(bytes);\n     ObjectInputStream objectStream \u003d new ObjectInputStream(stream);\n     return (Serializable) objectStream.readObject();\n   }\n \n-  private byte[] serialize(Serializable instance) throws Exception {\n+  private static byte[] serialize(Serializable instance) throws Exception {\n     ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();\n     ObjectOutputStream objectStream \u003d new ObjectOutputStream(stream);\n     objectStream.writeObject(instance);\n",
    "projectName": "org.immutables",
    "lineNum": 80,
    "nodeStartChar": 2730,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ca27316003644cbdadd79071f83c4acd5361f1bf",
    "commitFile": "value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java",
    "patch": "diff --git a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\nindex ecb044f..11069ed 100644\n--- a/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n+++ b/value-fixture/test/org/immutables/metainf/fixture/ServiceTest.java\n@@ -34,7 +34,7 @@\n     check(sortedToStringsFrom(ServiceLoader.load(AutoCloseable.class))).isOf(\"NestedService.Service\");\n   }\n \n-  private TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n+  private static TreeSet\u003cString\u003e sortedToStringsFrom(Iterable\u003c?\u003e iterable) {\n     return Sets.newTreeSet(FluentIterable.from(iterable).transform(Functions.toStringFunction()));\n   }\n }\n",
    "projectName": "org.immutables",
    "lineNum": 37,
    "nodeStartChar": 1303,
    "before": "2",
    "after": "10"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "3a768ad0320a13a6a85d285482a5847398851db9",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/Round.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java\nindex d2f7fda..8774c76 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/Round.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java\n@@ -113,7 +113,7 @@\n   }\n \n   private Set\u003cElement\u003e allAnnotatedElements() {\n-    Set\u003cElement\u003e elements \u003d Sets.newHashSetWithExpectedSize(100);\n+    Set\u003cElement\u003e elements \u003d Sets.newLinkedHashSetWithExpectedSize(100);\n     for (TypeElement annotation : annotations()) {\n       Set\u003c? extends Element\u003e annotatedElements \u003d round().getElementsAnnotatedWith(annotation);\n       checkAnnotation(annotation, annotatedElements);\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java\nindex d2f7fda..8774c76 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/Round.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java\n@@ -113,7 +113,7 @@\n   }\n \n   private Set\u003cElement\u003e allAnnotatedElements() {\n-    Set\u003cElement\u003e elements \u003d Sets.newHashSetWithExpectedSize(100);\n+    Set\u003cElement\u003e elements \u003d Sets.newLinkedHashSetWithExpectedSize(100);\n     for (TypeElement annotation : annotations()) {\n       Set\u003c? extends Element\u003e annotatedElements \u003d round().getElementsAnnotatedWith(annotation);\n       checkAnnotation(annotation, annotatedElements);\n",
    "projectName": "org.immutables",
    "lineNum": 116,
    "nodeStartChar": 4272,
    "before": "Sets.newHashSetWithExpectedSize(100)",
    "after": "Sets.newLinkedHashSetWithExpectedSize(100)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "3a768ad0320a13a6a85d285482a5847398851db9",
    "commitFile": "value-processor/src/org/immutables/value/processor/meta/Round.java",
    "patch": "diff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java\nindex d2f7fda..8774c76 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/Round.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java\n@@ -113,7 +113,7 @@\n   }\n \n   private Set\u003cElement\u003e allAnnotatedElements() {\n-    Set\u003cElement\u003e elements \u003d Sets.newHashSetWithExpectedSize(100);\n+    Set\u003cElement\u003e elements \u003d Sets.newLinkedHashSetWithExpectedSize(100);\n     for (TypeElement annotation : annotations()) {\n       Set\u003c? extends Element\u003e annotatedElements \u003d round().getElementsAnnotatedWith(annotation);\n       checkAnnotation(annotation, annotatedElements);\ndiff --git a/value-processor/src/org/immutables/value/processor/meta/Round.java b/value-processor/src/org/immutables/value/processor/meta/Round.java\nindex d2f7fda..8774c76 100644\n--- a/value-processor/src/org/immutables/value/processor/meta/Round.java\n+++ b/value-processor/src/org/immutables/value/processor/meta/Round.java\n@@ -113,7 +113,7 @@\n   }\n \n   private Set\u003cElement\u003e allAnnotatedElements() {\n-    Set\u003cElement\u003e elements \u003d Sets.newHashSetWithExpectedSize(100);\n+    Set\u003cElement\u003e elements \u003d Sets.newLinkedHashSetWithExpectedSize(100);\n     for (TypeElement annotation : annotations()) {\n       Set\u003c? extends Element\u003e annotatedElements \u003d round().getElementsAnnotatedWith(annotation);\n       checkAnnotation(annotation, annotatedElements);\n",
    "projectName": "org.immutables",
    "lineNum": 116,
    "nodeStartChar": 4272,
    "before": "Sets.newHashSetWithExpectedSize(100)",
    "after": "Sets.newLinkedHashSetWithExpectedSize(100)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "3ddf1b88dba642a9d0339f84b7fd040c507dc222",
    "commitFile": "value/src/org/immutables/value/Value.java",
    "patch": "diff --git a/value/src/org/immutables/value/Value.java b/value/src/org/immutables/value/Value.java\nindex bc53db2..06159ba 100644\n--- a/value/src/org/immutables/value/Value.java\n+++ b/value/src/org/immutables/value/Value.java\n@@ -714,7 +714,7 @@\n      * Exception to throw when an immutable object is in an invalid state. The Throwable must have\n      * a constructor that takes a single string\n      */\n-    Class\u003c? extends Exception\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n+    Class\u003c? extends RuntimeException\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n \n     /**\n      * If implementation visibility is more restrictive than visibility of abstract value type, then\ndiff --git a/value/src/org/immutables/value/Value.java b/value/src/org/immutables/value/Value.java\nindex bc53db2..06159ba 100644\n--- a/value/src/org/immutables/value/Value.java\n+++ b/value/src/org/immutables/value/Value.java\n@@ -714,7 +714,7 @@\n      * Exception to throw when an immutable object is in an invalid state. The Throwable must have\n      * a constructor that takes a single string\n      */\n-    Class\u003c? extends Exception\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n+    Class\u003c? extends RuntimeException\u003e throwForInvalidImmutableState() default IllegalStateException.class;\n \n     /**\n      * If implementation visibility is more restrictive than visibility of abstract value type, then\n",
    "projectName": "org.immutables",
    "lineNum": 717,
    "nodeStartChar": 29384,
    "before": "Exception",
    "after": "RuntimeException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "df2088410fe07bad00eeda450dc3f068d47ad806",
    "commitFile": "gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java",
    "patch": "diff --git a/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java b/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java\nindex eb44efe..b575e8a 100644\n--- a/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java\n+++ b/gson/test/org/immutables/gson/adapter/AdaptReadWriteTest.java\n@@ -9,7 +9,7 @@\n public class AdaptReadWriteTest {\n \n   private final Gson gson \u003d new GsonBuilder()\n-      .registerTypeAdapterFactory(new AdaptTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersAdapt())\n       .create();\n \n   private final Adapt adapt \u003d\n",
    "projectName": "org.immutables",
    "lineNum": 12,
    "nodeStartChar": 341,
    "before": "AdaptTypeAdapters",
    "after": "GsonAdaptersAdapt"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "df2088410fe07bad00eeda450dc3f068d47ad806",
    "commitFile": "gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java",
    "patch": "diff --git a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\nindex 70b3852..90a9059 100644\n--- a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n+++ b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n@@ -15,13 +15,13 @@\n   final Gson gsonWithOptions \u003d new GsonBuilder()\n       .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n       .serializeNulls()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   final Gson gsonDefault \u003d new GsonBuilder()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   @Test\n",
    "projectName": "org.immutables",
    "lineNum": 18,
    "nodeStartChar": 596,
    "before": "SimpleTypeAdapters",
    "after": "GsonAdaptersSimple"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "df2088410fe07bad00eeda450dc3f068d47ad806",
    "commitFile": "gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java",
    "patch": "diff --git a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\nindex 70b3852..90a9059 100644\n--- a/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n+++ b/gson/test/org/immutables/gson/adapter/GsonFeaturesTest.java\n@@ -15,13 +15,13 @@\n   final Gson gsonWithOptions \u003d new GsonBuilder()\n       .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n       .serializeNulls()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   final Gson gsonDefault \u003d new GsonBuilder()\n-      .registerTypeAdapterFactory(new SimpleTypeAdapters())\n-      .registerTypeAdapterFactory(new UnsimpleTypeAdapters())\n+      .registerTypeAdapterFactory(new GsonAdaptersSimple())\n+      .registerTypeAdapterFactory(new GsonAdaptersUnsimple())\n       .create();\n \n   @Test\n",
    "projectName": "org.immutables",
    "lineNum": 23,
    "nodeStartChar": 781,
    "before": "SimpleTypeAdapters",
    "after": "GsonAdaptersSimple"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "bbef3441b9c0993b09e30f5000b5c19c172f11fb",
    "commitFile": "common/src/org/immutables/common/jdbi/MapperFactory.java",
    "patch": "diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java\nindex 46b88ff..338496c 100644\n--- a/common/src/org/immutables/common/jdbi/MapperFactory.java\n+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java\n@@ -72,7 +72,7 @@\n       ResultSetMetaData metaData \u003d result.getMetaData();\n       for (int j \u003d 0; j \u003c metaData.getColumnCount(); j++) {\n         int i \u003d j + 1;\n-        String name \u003d toLowerCamel(metaData.getColumnName(i));\n+        String name \u003d toLowerCamel(metaData.getColumnLabel(i));\n         switch (metaData.getColumnType(i)) {\n         case Types.VARCHAR://$FALL-THROUGH$\n         case Types.LONGVARCHAR://$FALL-THROUGH$\ndiff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java\nindex 46b88ff..338496c 100644\n--- a/common/src/org/immutables/common/jdbi/MapperFactory.java\n+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java\n@@ -72,7 +72,7 @@\n       ResultSetMetaData metaData \u003d result.getMetaData();\n       for (int j \u003d 0; j \u003c metaData.getColumnCount(); j++) {\n         int i \u003d j + 1;\n-        String name \u003d toLowerCamel(metaData.getColumnName(i));\n+        String name \u003d toLowerCamel(metaData.getColumnLabel(i));\n         switch (metaData.getColumnType(i)) {\n         case Types.VARCHAR://$FALL-THROUGH$\n         case Types.LONGVARCHAR://$FALL-THROUGH$\n",
    "projectName": "org.immutables",
    "lineNum": 75,
    "nodeStartChar": 2712,
    "before": "metaData.getColumnName(i)",
    "after": "metaData.getColumnLabel(i)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "bbef3441b9c0993b09e30f5000b5c19c172f11fb",
    "commitFile": "common/src/org/immutables/common/jdbi/MapperFactory.java",
    "patch": "diff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java\nindex 46b88ff..338496c 100644\n--- a/common/src/org/immutables/common/jdbi/MapperFactory.java\n+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java\n@@ -72,7 +72,7 @@\n       ResultSetMetaData metaData \u003d result.getMetaData();\n       for (int j \u003d 0; j \u003c metaData.getColumnCount(); j++) {\n         int i \u003d j + 1;\n-        String name \u003d toLowerCamel(metaData.getColumnName(i));\n+        String name \u003d toLowerCamel(metaData.getColumnLabel(i));\n         switch (metaData.getColumnType(i)) {\n         case Types.VARCHAR://$FALL-THROUGH$\n         case Types.LONGVARCHAR://$FALL-THROUGH$\ndiff --git a/common/src/org/immutables/common/jdbi/MapperFactory.java b/common/src/org/immutables/common/jdbi/MapperFactory.java\nindex 46b88ff..338496c 100644\n--- a/common/src/org/immutables/common/jdbi/MapperFactory.java\n+++ b/common/src/org/immutables/common/jdbi/MapperFactory.java\n@@ -72,7 +72,7 @@\n       ResultSetMetaData metaData \u003d result.getMetaData();\n       for (int j \u003d 0; j \u003c metaData.getColumnCount(); j++) {\n         int i \u003d j + 1;\n-        String name \u003d toLowerCamel(metaData.getColumnName(i));\n+        String name \u003d toLowerCamel(metaData.getColumnLabel(i));\n         switch (metaData.getColumnType(i)) {\n         case Types.VARCHAR://$FALL-THROUGH$\n         case Types.LONGVARCHAR://$FALL-THROUGH$\n",
    "projectName": "org.immutables",
    "lineNum": 75,
    "nodeStartChar": 2712,
    "before": "metaData.getColumnName(i)",
    "after": "metaData.getColumnLabel(i)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "cc714f97df8c59db401c6d68362aa4076584218a",
    "commitFile": "common/src/org/immutables/common/repository/Repositories.java",
    "patch": "diff --git a/common/src/org/immutables/common/repository/Repositories.java b/common/src/org/immutables/common/repository/Repositories.java\nindex 1c539b3..9beb06d 100644\n--- a/common/src/org/immutables/common/repository/Repositories.java\n+++ b/common/src/org/immutables/common/repository/Repositories.java\n@@ -249,7 +249,7 @@\n           DBCursor cursor \u003d collection.find(query, keys);\n \n           if (!ordering.isNil()) {\n-            cursor.sort(extractDbObject(exclusion));\n+            cursor.sort(extractDbObject(ordering));\n           }\n \n           cursor.skip(skip);\ndiff --git a/common/src/org/immutables/common/repository/Repositories.java b/common/src/org/immutables/common/repository/Repositories.java\nindex 1c539b3..9beb06d 100644\n--- a/common/src/org/immutables/common/repository/Repositories.java\n+++ b/common/src/org/immutables/common/repository/Repositories.java\n@@ -249,7 +249,7 @@\n           DBCursor cursor \u003d collection.find(query, keys);\n \n           if (!ordering.isNil()) {\n-            cursor.sort(extractDbObject(exclusion));\n+            cursor.sort(extractDbObject(ordering));\n           }\n \n           cursor.skip(skip);\n",
    "projectName": "org.immutables",
    "lineNum": 252,
    "nodeStartChar": 9031,
    "before": "extractDbObject(exclusion)",
    "after": "extractDbObject(ordering)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "722efbe5376c40e4d0c660a799f24cc1c24a43c1",
    "commitFile": "common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java",
    "patch": "diff --git a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\nindex 54a7282..01cedea 100644\n--- a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n+++ b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n@@ -298,7 +298,7 @@\n   public static TimeMeasure unmarshal(\n       JsonParser parser,\n       @Nullable TimeMeasure instantNull,\n-      Class\u003cTimeInstant\u003e expectedClass) throws IOException {\n+      Class\u003cTimeMeasure\u003e expectedClass) throws IOException {\n     return TimeMeasure.fromString(parser.getText());\n   }\n \ndiff --git a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\nindex 54a7282..01cedea 100644\n--- a/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n+++ b/common/src/org/immutables/common/marshal/internal/BuiltinMarshalingRoutines.java\n@@ -298,7 +298,7 @@\n   public static TimeMeasure unmarshal(\n       JsonParser parser,\n       @Nullable TimeMeasure instantNull,\n-      Class\u003cTimeInstant\u003e expectedClass) throws IOException {\n+      Class\u003cTimeMeasure\u003e expectedClass) throws IOException {\n     return TimeMeasure.fromString(parser.getText());\n   }\n \n",
    "projectName": "org.immutables",
    "lineNum": 301,
    "nodeStartChar": 8833,
    "before": "TimeInstant",
    "after": "TimeMeasure"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "commitSHA1": "1d92b4cc047848dabc029b06303554f11336dc5e",
    "commitFile": "src/main/java/org/jsoftbiz/utils/OS.java",
    "patch": "diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 89da6fc..6031d3d 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -204,7 +204,7 @@\n         return filename.endsWith(fileEndingWith);\n       }\n     });\n-    if (fileList.length \u003e 0)\n+    if (fileList !\u003d null \u0026\u0026 fileList.length \u003e 0)\n       return fileList[0].getAbsolutePath();\n     else\n       return null;\ndiff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 89da6fc..6031d3d 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -204,7 +204,7 @@\n         return filename.endsWith(fileEndingWith);\n       }\n     });\n-    if (fileList.length \u003e 0)\n+    if (fileList !\u003d null \u0026\u0026 fileList.length \u003e 0)\n       return fileList[0].getAbsolutePath();\n     else\n       return null;\n",
    "projectName": "os-platform-finder",
    "lineNum": 207,
    "nodeStartChar": 6675,
    "before": "fileList.length \u003e 0",
    "after": "fileList !\u003d null \u0026\u0026 fileList.length \u003e 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "commitSHA1": "bd0f8559c45640530bd5f339c6fffc43214a8688",
    "commitFile": "src/main/java/org/jsoftbiz/utils/OS.java",
    "patch": "diff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 241cdcb..6d4b862 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -104,8 +104,8 @@\n         return returnDarwinOsInfo(name, version, arch);\n       }\n \n-      // Try to detect a unix platform, now the fun begins\n-      if (name.startsWith(\"Linux\")) {\n+      // Try to detect other POSIX compliant platforms, now the fun begins\n+      if (name.startsWith(\"Linux\") || name.startsWith(\"SunOS\")) {\n         return returnLinuxOsInfo(name, version, arch);\n       }\n     }\ndiff --git a/src/main/java/org/jsoftbiz/utils/OS.java b/src/main/java/org/jsoftbiz/utils/OS.java\nindex 241cdcb..6d4b862 100644\n--- a/src/main/java/org/jsoftbiz/utils/OS.java\n+++ b/src/main/java/org/jsoftbiz/utils/OS.java\n@@ -104,8 +104,8 @@\n         return returnDarwinOsInfo(name, version, arch);\n       }\n \n-      // Try to detect a unix platform, now the fun begins\n-      if (name.startsWith(\"Linux\")) {\n+      // Try to detect other POSIX compliant platforms, now the fun begins\n+      if (name.startsWith(\"Linux\") || name.startsWith(\"SunOS\")) {\n         return returnLinuxOsInfo(name, version, arch);\n       }\n     }\n",
    "projectName": "os-platform-finder",
    "lineNum": 108,
    "nodeStartChar": 2652,
    "before": "name.startsWith(\"Linux\")",
    "after": "name.startsWith(\"Linux\") || name.startsWith(\"SunOS\")"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "a821225728f1fda14adae221aef7fdba44e2c781",
    "commitFile": "src/test/java/com/redfin/patience/PatientSleepTest.java",
    "patch": "diff --git a/src/test/java/com/redfin/patience/PatientSleepTest.java b/src/test/java/com/redfin/patience/PatientSleepTest.java\nindex b867a86..487e7a3 100644\n--- a/src/test/java/com/redfin/patience/PatientSleepTest.java\n+++ b/src/test/java/com/redfin/patience/PatientSleepTest.java\n@@ -60,7 +60,7 @@\n         Instant start \u003d Instant.now();\n         PatientSleep.sleepFor(duration);\n         Instant end \u003d Instant.now();\n-        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e 0,\n+        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e\u003d 0,\n                               \"SleepFor should sleep for the given duration\");\n     }\n \ndiff --git a/src/test/java/com/redfin/patience/PatientSleepTest.java b/src/test/java/com/redfin/patience/PatientSleepTest.java\nindex b867a86..487e7a3 100644\n--- a/src/test/java/com/redfin/patience/PatientSleepTest.java\n+++ b/src/test/java/com/redfin/patience/PatientSleepTest.java\n@@ -60,7 +60,7 @@\n         Instant start \u003d Instant.now();\n         PatientSleep.sleepFor(duration);\n         Instant end \u003d Instant.now();\n-        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e 0,\n+        Assertions.assertTrue(Duration.between(start, end).compareTo(duration) \u003e\u003d 0,\n                               \"SleepFor should sleep for the given duration\");\n     }\n \n",
    "projectName": "patience",
    "lineNum": 63,
    "nodeStartChar": 2207,
    "before": "\u003e",
    "after": "\u003e\u003d"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "cc7e645b0ff60f5a93c2bcfadbb579f3c04edd74",
    "commitFile": "perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java",
    "patch": "diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex 6317d40..d0f0902 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 1);\n+        assertEquals(stats.size(), 0);\n \t}\n }\ndiff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex 6317d40..d0f0902 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 1);\n+        assertEquals(stats.size(), 0);\n \t}\n }\n",
    "projectName": "perfmon",
    "lineNum": 31,
    "nodeStartChar": 1032
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "c2196e2cd8bab5c781063d5de0fc3427eb78a4b8",
    "commitFile": "perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java",
    "patch": "diff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex d0f0902..6317d40 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 0);\n+        assertEquals(stats.size(), 1);\n \t}\n }\ndiff --git a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\nindex d0f0902..6317d40 100644\n--- a/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n+++ b/perfmon-db/src/test/java/eu/kratochj/perfmon/db/TestDbConnection.java\n@@ -28,6 +28,6 @@\n \tpublic void testSelectEmpty() throws Exception {\n \t\tList\u003cStatistics\u003e stats \u003d jdbcTemplate.query(\"select * from STATISTICS where rownum \u003c\u003d 1\", new StatisticsMapper());\n \t\tassertNotNull(stats);\n-        assertEquals(stats.size(), 0);\n+        assertEquals(stats.size(), 1);\n \t}\n }\n",
    "projectName": "perfmon",
    "lineNum": 31,
    "nodeStartChar": 1032
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 430,
    "nodeStartChar": 18203,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 432,
    "nodeStartChar": 18367,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 435,
    "nodeStartChar": 18579,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "commitSHA1": "5bf4a7746a769a6810f7c56b8b9e5c8c33ecac27",
    "commitFile": "sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java",
    "patch": "diff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \ndiff --git a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\nindex 2710d6b..d169842 100644\n--- a/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n+++ b/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/esper/impl/EsperSessionizer.java\n@@ -427,14 +427,14 @@\n         addPlugInSingleRowFunction(\"fromJson\", \"com.ebay.jetstream.epl.EPLUtils\", \"fromJsonString\");\n \n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, true);\n+        addVariable(VAR_SESSION_NAME, SessionVariable.class.getName(), sessionVariable, false);\n         esperService.getEPAdministrator().getConfiguration().\n-        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, true);\n+        addVariable(VAR_METADATA_NAME, AttributeMapVariable.class.getName(), metadataVariable, false);\n         if (!isMainSessionizer) {\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, true);\n+            addVariable(VAR_PARENT_SESSION_NAME, SessionVariable.class.getName(), parentSessionVariable, false);\n             esperService.getEPAdministrator().getConfiguration().\n-            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, true);\n+            addVariable(VAR_PARENT_METADATA_NAME, AttributeMapVariable.class.getName(), parentMetadataVariable, false);\n         }\n \n \n",
    "projectName": "realtime-analytics",
    "lineNum": 437,
    "nodeStartChar": 18764,
    "before": "true",
    "after": "false"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f09614f23b8d763c06494d5ded93fe4785ed39a4",
    "commitFile": "reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\ndiff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\n",
    "projectName": "reconf-jvm",
    "lineNum": 128,
    "nodeStartChar": 5444,
    "before": "proxy",
    "after": "this"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "11dc7e5a41e5e0358e3605f0ceff77011722b3f6",
    "commitFile": "reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\ndiff --git a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\nindex 3121592..6091513 100644\n--- a/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n+++ b/reconf-client/src/main/java/reconf/client/proxy/ConfigurationRepositoryFactory.java\n@@ -125,7 +125,7 @@\n         boolean configurationAnnotationPresent \u003d method.isAnnotationPresent(ConfigurationItem.class);\n \n         if (!configurationAnnotationPresent \u0026\u0026 !updateAnnotationPresent) {\n-            return method.invoke(proxy, args);\n+            return method.invoke(this, args);\n         }\n \n         if (updateAnnotationPresent) {\n",
    "projectName": "reconf-jvm",
    "lineNum": 128,
    "nodeStartChar": 5444,
    "before": "proxy",
    "after": "this"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "ce2c3ceb91b583081282bf580381d848c0c17e81",
    "commitFile": "reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java",
    "patch": "diff --git a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\nindex a8c1d99..11bd98d 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n@@ -167,7 +167,7 @@\n             locale \u003d temp;\n         }\n         if (StringUtils.equalsIgnoreCase(\"experimental-features\", qName)) {\n-            experimentalFeatures \u003d Boolean.valueOf(experimentalFeatures);\n+            experimentalFeatures \u003d Boolean.valueOf(temp);\n         }\n         if (StringUtils.equalsIgnoreCase(\"local-cache\", qName)) {\n             openLocalCacheSettings \u003d false;\ndiff --git a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\nindex a8c1d99..11bd98d 100644\n--- a/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n+++ b/reconf-client/src/main/java/reconf/client/setup/XmlConfigurationParser.java\n@@ -167,7 +167,7 @@\n             locale \u003d temp;\n         }\n         if (StringUtils.equalsIgnoreCase(\"experimental-features\", qName)) {\n-            experimentalFeatures \u003d Boolean.valueOf(experimentalFeatures);\n+            experimentalFeatures \u003d Boolean.valueOf(temp);\n         }\n         if (StringUtils.equalsIgnoreCase(\"local-cache\", qName)) {\n             openLocalCacheSettings \u003d false;\n",
    "projectName": "reconf-jvm",
    "lineNum": 170,
    "nodeStartChar": 5856,
    "before": "Boolean.valueOf(experimentalFeatures)",
    "after": "Boolean.valueOf(temp)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "c403972c4499646c78af4d42c0c212c7bebeab89",
    "commitFile": "reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\ndiff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\n",
    "projectName": "reconf-jvm",
    "lineNum": 25,
    "nodeStartChar": 839,
    "before": "ConfigurationRepositoryFactory.create(WelcomeConfiguration.class)",
    "after": "ConfigurationRepositoryFactory.get(WelcomeConfiguration.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c403972c4499646c78af4d42c0c212c7bebeab89",
    "commitFile": "reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\ndiff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\n",
    "projectName": "reconf-jvm",
    "lineNum": 25,
    "nodeStartChar": 839,
    "before": "ConfigurationRepositoryFactory.create(WelcomeConfiguration.class)",
    "after": "ConfigurationRepositoryFactory.get(WelcomeConfiguration.class)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "c403972c4499646c78af4d42c0c212c7bebeab89",
    "commitFile": "reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\ndiff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\n",
    "projectName": "reconf-jvm",
    "lineNum": 33,
    "nodeStartChar": 1171,
    "before": "ConfigurationRepositoryFactory.create(WelcomeConfiguration.class,cust)",
    "after": "ConfigurationRepositoryFactory.get(WelcomeConfiguration.class,cust)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "c403972c4499646c78af4d42c0c212c7bebeab89",
    "commitFile": "reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java",
    "patch": "diff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\ndiff --git a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\nindex c81cb40..d0b4197 100644\n--- a/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n+++ b/reconf-client/src/test/java/reconf/debug/ProxyFactoryTest.java\n@@ -22,7 +22,7 @@\n public class ProxyFactoryTest {\n \n     public static void main(String[] args) throws Exception {\n-        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class);\n+        WelcomeConfiguration welcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class);\n \n         Customization cust \u003d new Customization();\n         cust.setComponentPrefix(\"cp-\");\n@@ -30,7 +30,7 @@\n         cust.setComponentItemPrefix(\"kp-\");\n         cust.setComponentItemSuffix(\"-ks\");\n \n-        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.create(WelcomeConfiguration.class, cust);\n+        WelcomeConfiguration customWelcome \u003d ConfigurationRepositoryFactory.get(WelcomeConfiguration.class, cust);\n \n         System.out.println(welcome.getText() + \", \" + customWelcome.getText());\n         System.out.println(welcome.getMap()  + \", \" + customWelcome.getMap());\n",
    "projectName": "reconf-jvm",
    "lineNum": 33,
    "nodeStartChar": 1171,
    "before": "ConfigurationRepositoryFactory.create(WelcomeConfiguration.class,cust)",
    "after": "ConfigurationRepositoryFactory.get(WelcomeConfiguration.class,cust)"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "0fd37f84d7239e8c7de0837be34f34545f48fea0",
    "commitFile": "resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java",
    "patch": "diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\ndiff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\n",
    "projectName": "resourcebundle-core",
    "lineNum": 69,
    "nodeStartChar": 2422,
    "before": "new ResourceBundleKey(\"name\",\"default value\",ArrayFactory.newArray(\"Martin\",\"Germany\"))",
    "after": "new ResourceBundleKey(\"default value\",\"name\",ArrayFactory.newArray(\"Martin\",\"Germany\"))"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "0fd37f84d7239e8c7de0837be34f34545f48fea0",
    "commitFile": "resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java",
    "patch": "diff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\ndiff --git a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\nindex 81bd01b..ed082ba 100644\n--- a/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n+++ b/resourcebundle-inspector/src/test/java/de/alpharogroup/resourcebundle/locale/ResourceBundleKeyTest.java\n@@ -66,7 +66,7 @@\n \t{\n \t\tResourceBundleKey model \u003d new ResourceBundleKey();\n \t\tassertNotNull(model);\n-\t\tmodel \u003d new ResourceBundleKey(\"name\", \"default value\",\n+\t\tmodel \u003d new ResourceBundleKey(\"default value\", \"name\",\n \t\t\tArrayFactory.newArray(\"Martin\", \"Germany\"));\n \t\tassertNotNull(model);\n \t\tassertEquals(model.getKey(), \"name\");\n@@ -91,7 +91,7 @@\n \n \t\tfinal ResourceBundleKey third \u003d new ResourceBundleKey();\n \t\tthird.setKey(\"foo\");\n-\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(\"foo\", null, null);\n+\t\tfinal ResourceBundleKey fourth \u003d new ResourceBundleKey(null, \"foo\", null);\n \n \t\tactual \u003d EqualsHashCodeAndToStringEvaluator.evaluateEqualsHashcodeAndToString(first, second,\n \t\t\tthird, fourth);\n",
    "projectName": "resourcebundle-core",
    "lineNum": 94,
    "nodeStartChar": 3280,
    "before": "new ResourceBundleKey(\"foo\",null,null)",
    "after": "new ResourceBundleKey(null,\"foo\",null)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "8ae258d3784dad67662f205a416ef1c083b82fc2",
    "commitFile": "sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java",
    "patch": "diff --git a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\nindex 4639253..3d648d2 100644\n--- a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n+++ b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n@@ -440,7 +440,7 @@\n         NamedProperty\u003cQName\u003e[] propertyArray \u003d properties.toArray(new NamedProperty[properties.size()]);\r\n         NamedProperties\u003cQName\u003e namedProperties \u003d Datatree.NamedProperties(propertyArray);\r\n         NamespaceBindings bindings \u003d Datatree.NamespaceBindings(\r\n-                (NamespaceBinding[]) document.getNamespaceBindings().toArray());\r\n+                (NamespaceBinding[]) document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()]));\r\n \r\n         if (document instanceof TopLevelDocument)\r\n         {\r\ndiff --git a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\nindex 4639253..3d648d2 100644\n--- a/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n+++ b/sbol-data-io-RDF/src/main/java/org/sbolstandard/core/io/rdf/RdfIo.java\n@@ -440,7 +440,7 @@\n         NamedProperty\u003cQName\u003e[] propertyArray \u003d properties.toArray(new NamedProperty[properties.size()]);\r\n         NamedProperties\u003cQName\u003e namedProperties \u003d Datatree.NamedProperties(propertyArray);\r\n         NamespaceBindings bindings \u003d Datatree.NamespaceBindings(\r\n-                (NamespaceBinding[]) document.getNamespaceBindings().toArray());\r\n+                (NamespaceBinding[]) document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()]));\r\n \r\n         if (document instanceof TopLevelDocument)\r\n         {\r\n",
    "projectName": "sbol-data",
    "lineNum": 443,
    "nodeStartChar": 16685,
    "before": "document.getNamespaceBindings().toArray()",
    "after": "document.getNamespaceBindings().toArray(new NamespaceBinding[document.getNamespaceBindings().size()])"
  },
  {
    "bugType": "DELETE_THROWS_EXCEPTION",
    "commitSHA1": "1054bc36c83b2b0e8f3f4135a18c12e5173a3405",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\nindex eef7cc6..adf17c6 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/loader/SdnWise.java\n@@ -55,9 +55,8 @@\n      * (The FlowVisor code is not yet complete).\n      *\n      * @param args the command line arguments\n-     * @throws java.lang.Exception\n      */\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args){\n         SdnWise sw \u003d new SdnWise();\n         sw.startExemplaryControlPlane();\n     }\n",
    "projectName": "sdn-wise-java",
    "lineNum": 45,
    "nodeStartChar": 1827,
    "before": "9",
    "after": "9"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "725eb3a0c99f09463a83202a7921c8df608a43e9",
    "commitFile": "ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java",
    "patch": "diff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\nindex 8ff0ad1..efa2394 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n@@ -380,7 +380,7 @@\n      */\n     @Override\n     public final void setNodeRssiMin(byte net, NodeAddress dst, byte newRssi) {\n-        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, PACKET_TTL, new byte[]{newRssi});\n+        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, RSSI_MIN, new byte[]{newRssi});\n         sendNetworkPacket(cp);\n     }\n \ndiff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\nindex 8c62e77..8deb0bd 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/ControllerGui.java\n@@ -490,28 +490,28 @@\n             jSpinnerReport.commitEdit();\n \n             controller.setNodeBeaconPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerBeacon.getValue()).shortValue());\n \n             controller.setNodeReportPeriod(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerReport.getValue()).shortValue());\n \n             controller.setNodeRssiMin(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\n                     ((Number) this.jSpinnerRSSI.getValue()).byteValue());\n \n             controller.setNodePacketTtl(\n-                    (byte) this.jSpinnerNetID.getValue(),\n+                    ((Integer) this.jSpinnerNetID.getValue()).byteValue(),\n                     new NodeAddress(\n                             (Integer) this.jSpinnerAddrH.getValue(),\n                             (Integer) this.jSpinnerAddrL.getValue()),\ndiff --git a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\nindex 8ff0ad1..efa2394 100644\n--- a/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n+++ b/ctrl/src/main/java/com/github/sdnwiselab/sdnwise/controller/AbstractController.java\n@@ -380,7 +380,7 @@\n      */\n     @Override\n     public final void setNodeRssiMin(byte net, NodeAddress dst, byte newRssi) {\n-        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, PACKET_TTL, new byte[]{newRssi});\n+        ConfigPacket cp \u003d new ConfigPacket(net, sinkAddress, dst, RSSI_MIN, new byte[]{newRssi});\n         sendNetworkPacket(cp);\n     }\n \n",
    "projectName": "sdn-wise-java",
    "lineNum": 383,
    "nodeStartChar": 13578,
    "before": "new ConfigPacket(net,sinkAddress,dst,PACKET_TTL,new byte[]{newRssi})",
    "after": "new ConfigPacket(net,sinkAddress,dst,RSSI_MIN,new byte[]{newRssi})"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "adfa66e99aa804d86f6f4216604d35006f45af68",
    "commitFile": "src/main/java/com/metamx/metrics/SysMonitor.java",
    "patch": "diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\n",
    "projectName": "server-metrics",
    "lineNum": 280,
    "nodeStartChar": 8568,
    "before": "fsu.getTotal()",
    "after": "fsu.getUsed()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "adfa66e99aa804d86f6f4216604d35006f45af68",
    "commitFile": "src/main/java/com/metamx/metrics/SysMonitor.java",
    "patch": "diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\n",
    "projectName": "server-metrics",
    "lineNum": 280,
    "nodeStartChar": 8568,
    "before": "fsu.getTotal()",
    "after": "fsu.getUsed()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "7d1ac8359de2d667b08f27b1b4a9cdb1f10f076c",
    "commitFile": "src/main/java/com/metamx/metrics/SysMonitor.java",
    "patch": "diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\ndiff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\n",
    "projectName": "server-metrics",
    "lineNum": 280,
    "nodeStartChar": 8568,
    "before": "fsu.getTotal()",
    "after": "fsu.getUsed()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "7d1ac8359de2d667b08f27b1b4a9cdb1f10f076c",
    "commitFile": "src/main/java/com/metamx/metrics/SysMonitor.java",
    "patch": "diff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\ndiff --git a/src/main/java/com/metamx/metrics/SysMonitor.java b/src/main/java/com/metamx/metrics/SysMonitor.java\nindex e8edfd3..5b3177f 100644\n--- a/src/main/java/com/metamx/metrics/SysMonitor.java\n+++ b/src/main/java/com/metamx/metrics/SysMonitor.java\n@@ -277,7 +277,7 @@\n             if (fsu !\u003d null) {\n               final Map\u003cString, Long\u003e stats \u003d ImmutableMap.\u003cString, Long\u003ebuilder()\n                   .put(\"sys/fs/max\", fsu.getTotal() * 1024)\n-                  .put(\"sys/fs/used\", fsu.getTotal() * 1024)\n+                  .put(\"sys/fs/used\", fsu.getUsed() * 1024)\n                   .put(\"sys/fs/files/count\", fsu.getFiles())\n                   .put(\"sys/fs/files/free\", fsu.getFreeFiles())\n                 .build();\n",
    "projectName": "server-metrics",
    "lineNum": 280,
    "nodeStartChar": 8568,
    "before": "fsu.getTotal()",
    "after": "fsu.getUsed()"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "commitSHA1": "9aedb106ec2167b4c26151be019b91fa85a582ab",
    "commitFile": "src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\nindex 28ffed1..bd72e48 100644\n--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n@@ -146,8 +146,9 @@\n             if ( exceptionMap !\u003d null )\n             {\n                 exceptionComment \u003d\n-                    javaDocHelper.parseJavaDoc( sourceType, byteType,\n-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );\n+                    javaDocHelper.parseJavaDoc( sourceType,\n+                                                byteType,\n+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );\n             }\n             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );\n         }\ndiff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\nindex 28ffed1..bd72e48 100644\n--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n@@ -146,8 +146,9 @@\n             if ( exceptionMap !\u003d null )\n             {\n                 exceptionComment \u003d\n-                    javaDocHelper.parseJavaDoc( sourceType, byteType,\n-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );\n+                    javaDocHelper.parseJavaDoc( sourceType,\n+                                                byteType,\n+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );\n             }\n             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );\n         }\n",
    "projectName": "servicedocgen-maven-plugin",
    "lineNum": 151,
    "nodeStartChar": 6069,
    "before": "byteType.getAssignmentClass()",
    "after": "exceptionByteType.getAssignmentClass()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9aedb106ec2167b4c26151be019b91fa85a582ab",
    "commitFile": "src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java",
    "patch": "diff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\nindex 28ffed1..bd72e48 100644\n--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n@@ -146,8 +146,9 @@\n             if ( exceptionMap !\u003d null )\n             {\n                 exceptionComment \u003d\n-                    javaDocHelper.parseJavaDoc( sourceType, byteType,\n-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );\n+                    javaDocHelper.parseJavaDoc( sourceType,\n+                                                byteType,\n+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );\n             }\n             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );\n         }\ndiff --git a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\nindex 28ffed1..bd72e48 100644\n--- a/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n+++ b/src/main/java/org/codehaus/mojo/servicedocgen/introspection/JMethod.java\n@@ -146,8 +146,9 @@\n             if ( exceptionMap !\u003d null )\n             {\n                 exceptionComment \u003d\n-                    javaDocHelper.parseJavaDoc( sourceType, byteType,\n-                                                exceptionMap.get( byteType.getAssignmentClass().getSimpleName() ) );\n+                    javaDocHelper.parseJavaDoc( sourceType,\n+                                                byteType,\n+                                                exceptionMap.get( exceptionByteType.getAssignmentClass().getSimpleName() ) );\n             }\n             this.exceptions.add( new JException( exceptionByteType, exceptionSourceType, exceptionComment ) );\n         }\n",
    "projectName": "servicedocgen-maven-plugin",
    "lineNum": 151,
    "nodeStartChar": 6069,
    "before": "byteType.getAssignmentClass()",
    "after": "exceptionByteType.getAssignmentClass()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "cd7c61857ff8c68f16f38ffafe13a41f174ad50e",
    "commitFile": "src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java",
    "patch": "diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\ndiff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\n",
    "projectName": "shrinkwrap-container-jetty-70",
    "lineNum": 137,
    "nodeStartChar": 4721,
    "before": "archive.addWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)",
    "after": "archive.addAsWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "cd7c61857ff8c68f16f38ffafe13a41f174ad50e",
    "commitFile": "src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java",
    "patch": "diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\ndiff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\n",
    "projectName": "shrinkwrap-container-jetty-70",
    "lineNum": 137,
    "nodeStartChar": 4721,
    "before": "archive.addWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)",
    "after": "archive.addAsWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "7455db9d62cd2ac9e43e25e301a39ecad156ce53",
    "commitFile": "src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java",
    "patch": "diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\ndiff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\n",
    "projectName": "shrinkwrap-container-jetty-70",
    "lineNum": 137,
    "nodeStartChar": 4721,
    "before": "archive.addWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)",
    "after": "archive.addAsWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "7455db9d62cd2ac9e43e25e301a39ecad156ce53",
    "commitFile": "src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java",
    "patch": "diff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\ndiff --git a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\nindex 6adec1c..9d92bcf 100644\n--- a/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n+++ b/src/test/java/org/jboss/shrinkwrap/jetty_7/test/JettyDeploymentIntegrationUnitTestCase.java\n@@ -134,7 +134,7 @@\n \n       final WebArchive archive \u003d ShrinkWrap.create(WebArchive.class, NAME_WAR);\n       final ArchivePath targetPathWebXml \u003d ArchivePaths.create(\"web.xml\");\n-      archive.addWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n+      archive.addAsWebResource(PATH_ACTUAL_WEB_XML, targetPathWebXml).addClasses(forwardingServletClass, echoServletClass);\n       log.info(archive.toString(true));\n \n       // Deploy\n",
    "projectName": "shrinkwrap-container-jetty-70",
    "lineNum": 137,
    "nodeStartChar": 4721,
    "before": "archive.addWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)",
    "after": "archive.addAsWebResource(PATH_ACTUAL_WEB_XML,targetPathWebXml)"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "commitSHA1": "9abf7fb8252b4ef784645ceb4c910a89b3d78b69",
    "commitFile": "src/main/java/mil/nga/sf/wkb/GeometryCodes.java",
    "patch": "diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\nindex 84be333..b2bc434 100644\n--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n@@ -176,8 +176,7 @@\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow new SFException(\n-\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \"\n-\t\t\t\t\t\t\t+ geometryType);\n+\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \" + code);\n \t\t}\n \n \t\treturn geometryType;\ndiff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\nindex 84be333..b2bc434 100644\n--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n@@ -176,8 +176,7 @@\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow new SFException(\n-\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \"\n-\t\t\t\t\t\t\t+ geometryType);\n+\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \" + code);\n \t\t}\n \n \t\treturn geometryType;\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 179,
    "nodeStartChar": 3303,
    "before": "\"Unsupported Geometry code for type retrieval: \" + geometryType",
    "after": "\"Unsupported Geometry code for type retrieval: \" + code"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9abf7fb8252b4ef784645ceb4c910a89b3d78b69",
    "commitFile": "src/main/java/mil/nga/sf/wkb/GeometryCodes.java",
    "patch": "diff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\nindex 84be333..b2bc434 100644\n--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n@@ -176,8 +176,7 @@\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow new SFException(\n-\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \"\n-\t\t\t\t\t\t\t+ geometryType);\n+\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \" + code);\n \t\t}\n \n \t\treturn geometryType;\ndiff --git a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\nindex 84be333..b2bc434 100644\n--- a/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n+++ b/src/main/java/mil/nga/sf/wkb/GeometryCodes.java\n@@ -176,8 +176,7 @@\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow new SFException(\n-\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \"\n-\t\t\t\t\t\t\t+ geometryType);\n+\t\t\t\t\t\"Unsupported Geometry code for type retrieval: \" + code);\n \t\t}\n \n \t\treturn geometryType;\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 179,
    "nodeStartChar": 3303,
    "before": "\"Unsupported Geometry code for type retrieval: \" + geometryType",
    "after": "\"Unsupported Geometry code for type retrieval: \" + code"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "59f8b11bcbba78bb18d4403cfeecbb5bde17aa67",
    "commitFile": "src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java",
    "patch": "diff --git a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\nindex f04bef5..af5b3a9 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n@@ -104,7 +104,7 @@\n \t\t\tif (ringCopyPoints.size() \u003e\u003d 3) {\n \t\t\t\tPoint first \u003d ringCopyPoints.get(0);\n \t\t\t\tPoint last \u003d ringCopyPoints.get(ringCopyPoints.size() - 1);\n-\t\t\t\tif (first.getX() \u003d\u003d last.getX() || first.getY() \u003d\u003d last.getY()) {\n+\t\t\t\tif (first.getX() \u003d\u003d last.getX() \u0026\u0026 first.getY() \u003d\u003d last.getY()) {\n \t\t\t\t\tringCopyPoints.remove(ringCopyPoints.size() - 1);\n \t\t\t\t}\n \t\t\t}\ndiff --git a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\nindex 86cbfef..ff9a1f2 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n@@ -313,7 +313,7 @@\n \t\t\tvalue \u003d -1;\n \t\t} else if (point1.getY() \u003e point2.getY()) {\n \t\t\tvalue \u003d 1;\n-\t\t} else if (point1.getY() \u003e point2.getY()) {\n+\t\t} else if (point1.getY() \u003c point2.getY()) {\n \t\t\tvalue \u003d -1;\n \t\t}\n \t\treturn value;\ndiff --git a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\nindex f04bef5..af5b3a9 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/ShamosHoey.java\n@@ -104,7 +104,7 @@\n \t\t\tif (ringCopyPoints.size() \u003e\u003d 3) {\n \t\t\t\tPoint first \u003d ringCopyPoints.get(0);\n \t\t\t\tPoint last \u003d ringCopyPoints.get(ringCopyPoints.size() - 1);\n-\t\t\t\tif (first.getX() \u003d\u003d last.getX() || first.getY() \u003d\u003d last.getY()) {\n+\t\t\t\tif (first.getX() \u003d\u003d last.getX() \u0026\u0026 first.getY() \u003d\u003d last.getY()) {\n \t\t\t\t\tringCopyPoints.remove(ringCopyPoints.size() - 1);\n \t\t\t\t}\n \t\t\t}\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 107,
    "nodeStartChar": 2920,
    "before": "||",
    "after": "\u0026\u0026"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "59f8b11bcbba78bb18d4403cfeecbb5bde17aa67",
    "commitFile": "src/main/java/mil/nga/wkb/util/sweep/SweepLine.java",
    "patch": "diff --git a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\nindex 86cbfef..ff9a1f2 100644\n--- a/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n+++ b/src/main/java/mil/nga/wkb/util/sweep/SweepLine.java\n@@ -313,7 +313,7 @@\n \t\t\tvalue \u003d -1;\n \t\t} else if (point1.getY() \u003e point2.getY()) {\n \t\t\tvalue \u003d 1;\n-\t\t} else if (point1.getY() \u003e point2.getY()) {\n+\t\t} else if (point1.getY() \u003c point2.getY()) {\n \t\t\tvalue \u003d -1;\n \t\t}\n \t\treturn value;\n",
    "projectName": "simple-features-wkb-java",
    "lineNum": 316,
    "nodeStartChar": 7032,
    "before": "\u003e",
    "after": "\u003c"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "60b2033fbb88b8931765f729755b44ef0485797a",
    "commitFile": "src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java",
    "patch": "diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\ndiff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\n",
    "projectName": "simpleimageviewer4j",
    "lineNum": 109,
    "nodeStartChar": 2801,
    "before": "vp.showNext()",
    "after": "vp.showPrevious()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "60b2033fbb88b8931765f729755b44ef0485797a",
    "commitFile": "src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java",
    "patch": "diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\ndiff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\n",
    "projectName": "simpleimageviewer4j",
    "lineNum": 109,
    "nodeStartChar": 2801,
    "before": "vp.showNext()",
    "after": "vp.showPrevious()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "60b2033fbb88b8931765f729755b44ef0485797a",
    "commitFile": "src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java",
    "patch": "diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\ndiff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\n",
    "projectName": "simpleimageviewer4j",
    "lineNum": 112,
    "nodeStartChar": 2870,
    "before": "vp.showPrevious()",
    "after": "vp.showNext()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "60b2033fbb88b8931765f729755b44ef0485797a",
    "commitFile": "src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java",
    "patch": "diff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\ndiff --git a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\nindex 59e19ea..a457bc7 100644\n--- a/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n+++ b/src/main/java/net/coobird/gui/simpleimageviewer4j/Viewer.java\n@@ -106,10 +106,10 @@\n \t\t\t\tint key \u003d e.getKeyCode();\n \t\t\t\t\n \t\t\t\tif (key \u003d\u003d KeyEvent.VK_LEFT) {\n-\t\t\t\t\tvp.showNext();\n+\t\t\t\t\tvp.showPrevious();\n \t\t\t\t\t\n \t\t\t\t} else if (key \u003d\u003d KeyEvent.VK_RIGHT) {\n-\t\t\t\t\tvp.showPrevious();\n+\t\t\t\t\tvp.showNext();\n \t\t\t\t}\n \t\t\t}\n \t\t});\n",
    "projectName": "simpleimageviewer4j",
    "lineNum": 112,
    "nodeStartChar": 2870,
    "before": "vp.showPrevious()",
    "after": "vp.showNext()"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "32408e7c47fb187fc84d44c7de01b87776a141d3",
    "commitFile": "core/src/main/java/com/glines/socketio/common/DisconnectReason.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\ndiff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 35,
    "nodeStartChar": 1634
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "305d9ff5a921ca7da6c2f824b4c612786889146b",
    "commitFile": "core/src/main/java/com/glines/socketio/common/DisconnectReason.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\ndiff --git a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\nindex ea74c37..20de289 100644\n--- a/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n+++ b/core/src/main/java/com/glines/socketio/common/DisconnectReason.java\n@@ -32,7 +32,7 @@\n \tCLOSE_FAILED(4),\t// The connection dropped before an orderly close could complete.\n \tERROR(5),\t\t\t// A GET or POST returned an error, or an internal error occurred.\n \tCLOSED_REMOTELY(6),\t// Remote end point initiated a close.\n-\tCLOSED(6);\t\t\t// Locally initiated close succeeded.\n+\tCLOSED(7);\t\t\t// Locally initiated close succeeded.\n \n \tprivate int value;\n \tprivate DisconnectReason(int v) { this.value \u003d v; }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 35,
    "nodeStartChar": 1634
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "1874e5c82639b0e73f14ac7e9a2b99ab9bccaba0",
    "commitFile": "core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java",
    "patch": "diff --git a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\nindex 1026e57..6021519 100644\n--- a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n+++ b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n@@ -35,6 +35,6 @@\n \n     @Override\n     protected DataHandler newDataHandler(SocketIOSession session) {\n-        return new JSONPPollingDataHandler(session);\n+        return new XHRPollingDataHandler(session);\n     }\n }\ndiff --git a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\nindex 1026e57..6021519 100644\n--- a/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n+++ b/core/src/main/java/com/glines/socketio/server/transport/XHRPollingTransport.java\n@@ -35,6 +35,6 @@\n \n     @Override\n     protected DataHandler newDataHandler(SocketIOSession session) {\n-        return new JSONPPollingDataHandler(session);\n+        return new XHRPollingDataHandler(session);\n     }\n }\n",
    "projectName": "socket.io-server-java",
    "lineNum": 38,
    "nodeStartChar": 1590,
    "before": "JSONPPollingDataHandler",
    "after": "XHRPollingDataHandler"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "b5a539d0be48efe0490c27de65b5f4c2ed621d87",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\nindex 7cbb0f2..4fa2c20 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n@@ -116,7 +116,7 @@\n \n         public RepositoryConnectorThreadFactory( String tgName, String tName )\n         {\n-            myTG \u003d new ThreadGroup( Thread.currentThread().getThreadGroup().getParent(), tgName );\n+            myTG \u003d new ThreadGroup( tgName );\n             this.tName \u003d tName;\n         }\n \ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\nindex 7cbb0f2..4fa2c20 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/ParallelRepositoryConnector.java\n@@ -116,7 +116,7 @@\n \n         public RepositoryConnectorThreadFactory( String tgName, String tName )\n         {\n-            myTG \u003d new ThreadGroup( Thread.currentThread().getThreadGroup().getParent(), tgName );\n+            myTG \u003d new ThreadGroup( tgName );\n             this.tName \u003d tName;\n         }\n \n",
    "projectName": "sonatype-aether",
    "lineNum": 119,
    "nodeStartChar": 4056,
    "before": "new ThreadGroup(Thread.currentThread().getThreadGroup().getParent(),tgName)",
    "after": "new ThreadGroup(tgName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "5f70830f98062a18cfd667df8d42e59e10baf329",
    "commitFile": "aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java",
    "patch": "diff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\nindex e35e39e..55c0daa 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n@@ -158,7 +158,7 @@\n         // The connection has timed out\n         if ( status \u003d\u003d null )\n         {\n-            throw new IllegalStateException( \"Connection timed out\" );\n+            throw new TransferException( \"Invalid AHC State. Response will possibly gets corrupted.\" );\n         }\n         return onCompleted( httpClient.getProvider().prepareResponse( status, headers,\n                                                                       Collections.\u003cHttpResponseBodyPart\u003e emptyList() ) );\ndiff --git a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\nindex e35e39e..55c0daa 100644\n--- a/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n+++ b/aether-connector-asynchttpclient/src/main/java/org/sonatype/aether/connector/async/CompletionHandler.java\n@@ -158,7 +158,7 @@\n         // The connection has timed out\n         if ( status \u003d\u003d null )\n         {\n-            throw new IllegalStateException( \"Connection timed out\" );\n+            throw new TransferException( \"Invalid AHC State. Response will possibly gets corrupted.\" );\n         }\n         return onCompleted( httpClient.getProvider().prepareResponse( status, headers,\n                                                                       Collections.\u003cHttpResponseBodyPart\u003e emptyList() ) );\n",
    "projectName": "sonatype-aether",
    "lineNum": 161,
    "nodeStartChar": 4777,
    "before": "IllegalStateException",
    "after": "TransferException"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "9f6c767e8aec5949051dc675598771a6310bf1fa",
    "commitFile": "aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java",
    "patch": "diff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\nindex 45d8948..79e1c05 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n@@ -83,7 +83,7 @@\n         resolver \u003d\n             new DefaultArtifactResolver( NullLogger.INSTANCE, TestFileProcessor.INSTANCE,\n                                          new StubRepositoryEventDispatcher(), versionResolver, updateCheckManager,\n-                                         remoteRepositoryManager, null );\n+                                         remoteRepositoryManager );\n \n         artifact \u003d new StubArtifact( \"gid\", \"aid\", \"\", \"ext\", \"ver\" );\n \ndiff --git a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\nindex 45d8948..79e1c05 100644\n--- a/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n+++ b/aether-impl/src/test/java/org/sonatype/aether/impl/internal/DefaultArtifactResolverTest.java\n@@ -83,7 +83,7 @@\n         resolver \u003d\n             new DefaultArtifactResolver( NullLogger.INSTANCE, TestFileProcessor.INSTANCE,\n                                          new StubRepositoryEventDispatcher(), versionResolver, updateCheckManager,\n-                                         remoteRepositoryManager, null );\n+                                         remoteRepositoryManager );\n \n         artifact \u003d new StubArtifact( \"gid\", \"aid\", \"\", \"ext\", \"ver\" );\n \n",
    "projectName": "sonatype-aether",
    "lineNum": 84,
    "nodeStartChar": 3528,
    "before": "new DefaultArtifactResolver(NullLogger.INSTANCE,TestFileProcessor.INSTANCE,new StubRepositoryEventDispatcher(),versionResolver,updateCheckManager,remoteRepositoryManager,null)",
    "after": "new DefaultArtifactResolver(NullLogger.INSTANCE,TestFileProcessor.INSTANCE,new StubRepositoryEventDispatcher(),versionResolver,updateCheckManager,remoteRepositoryManager)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 323,
    "nodeStartChar": 13747,
    "before": "66",
    "after": "2"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 325,
    "nodeStartChar": 13795,
    "before": "2",
    "after": "34"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 352,
    "nodeStartChar": 14415,
    "before": "1",
    "after": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "5de6c854f034f1cd3c51572bd371406a468e5476",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex e7816e5..e6a6bc4 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -320,9 +320,9 @@\n         implements TransferListener\n     {\n \n-        private volatile MessageDigest digest;\n+        private MessageDigest digest;\n \n-        private void initDigest()\n+        private synchronized void initDigest()\n             throws NoSuchAlgorithmException\n         {\n             digest \u003d MessageDigest.getInstance( \"SHA-1\" );\n@@ -349,7 +349,7 @@\n         {\n         }\n \n-        public void transferProgressed( TransferEvent event )\n+        public synchronized void transferProgressed( TransferEvent event )\n             throws TransferCancelledException\n         {\n             digest.update( event.getDataBuffer() );\n@@ -369,7 +369,7 @@\n         {\n         }\n \n-        public byte[] getHash()\n+        public synchronized byte[] getHash()\n         {\n             return digest.digest();\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 372,
    "nodeStartChar": 14931,
    "before": "1",
    "after": "33"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "2b1d640c4f67f3755fd834dd94ed2bf7d8568859",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\n",
    "projectName": "sonatype-aether",
    "lineNum": 90,
    "nodeStartChar": 3495,
    "before": "new StubArtifact(\"testGroup\",\"testArtifact\",\"jar\",\"\",\"1-test\")",
    "after": "new StubArtifact(\"testGroup\",\"testArtifact\",\"\",\"jar\",\"1-test\")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "2b1d640c4f67f3755fd834dd94ed2bf7d8568859",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\n",
    "projectName": "sonatype-aether",
    "lineNum": 171,
    "nodeStartChar": 7322,
    "before": "new StubArtifact(\"testGroup\",\"testArtifact\",\"jar\",\"\",i + \"-test\")",
    "after": "new StubArtifact(\"testGroup\",\"testArtifact\",\"\",\"jar\",i + \"-test\")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "2b1d640c4f67f3755fd834dd94ed2bf7d8568859",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\nindex 5c6c614..d1206f5 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/suite/ConnectorTestSuite.java\n@@ -87,7 +87,7 @@\n         throws IOException, NoRepositoryConnectorException\n     {\n \n-        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", \"1-test\" );\n+        StubArtifact artifact \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", \"1-test\" );\n         StubMetadata metadata \u003d\n             new StubMetadata( \"testGroup\", \"testArtifact\", \"1-test\", \"maven-metadata.xml\",\n                               Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -168,7 +168,7 @@\n \n         for ( int i \u003d 0; i \u003c numTransfers; i++ )\n         {\n-            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+            StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n             StubMetadata meta \u003d\n                 new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                   Metadata.Nature.RELEASE_OR_SNAPSHOT );\n@@ -202,7 +202,7 @@\n                 File artFile \u003d new File( localPath.toString() + \"/a\" + i );\n                 File metaFile \u003d new File( localPath.toString() + \"/m\" + i );\n \n-                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"jar\", \"\", i + \"-test\" );\n+                StubArtifact art \u003d new StubArtifact( \"testGroup\", \"testArtifact\", \"\", \"jar\", i + \"-test\" );\n                 StubMetadata meta \u003d\n                     new StubMetadata( \"testGroup\", \"testArtifact\", i + \"-test\", \"maven-metadata.xml\",\n                                       Metadata.Nature.RELEASE_OR_SNAPSHOT );\n",
    "projectName": "sonatype-aether",
    "lineNum": 205,
    "nodeStartChar": 8628,
    "before": "new StubArtifact(\"testGroup\",\"testArtifact\",\"jar\",\"\",i + \"-test\")",
    "after": "new StubArtifact(\"testGroup\",\"testArtifact\",\"\",\"jar\",i + \"-test\")"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "2083a7dad75cee414497a9eb479bcaf0ed357422",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\nindex 34bd61e..37dba7b 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n@@ -226,7 +226,7 @@\n     @Override\n     public String toString()\n     {\n-        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getVersion(), getExtension() );\n+        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getExtension(), getVersion() );\n     }\n \n }\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\nindex 34bd61e..37dba7b 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/impl/StubArtifact.java\n@@ -226,7 +226,7 @@\n     @Override\n     public String toString()\n     {\n-        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getVersion(), getExtension() );\n+        return String.format( \"%s:%s:%s:%s\", getGroupId(), getArtifactId(), getExtension(), getVersion() );\n     }\n \n }\n",
    "projectName": "sonatype-aether",
    "lineNum": 229,
    "nodeStartChar": 6392,
    "before": "String.format(\"%s:%s:%s:%s\",getGroupId(),getArtifactId(),getVersion(),getExtension())",
    "after": "String.format(\"%s:%s:%s:%s\",getGroupId(),getArtifactId(),getExtension(),getVersion())"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "6b27903881c83c074a5f63d1a6d071c98ec607f0",
    "commitFile": "aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java",
    "patch": "diff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\nindex 364d858..167cbcc 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n@@ -448,8 +448,7 @@\n         }\n         else if ( RepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )\n         {\n-            // Get midnight boundary\n-            Calendar cal \u003d Calendar.getInstance( TimeZone.getTimeZone( \"UTC\" ) );\n+            Calendar cal \u003d Calendar.getInstance();\n             cal.set( Calendar.HOUR_OF_DAY, 0 );\n             cal.set( Calendar.MINUTE, 0 );\n             cal.set( Calendar.SECOND, 0 );\ndiff --git a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\nindex 364d858..167cbcc 100644\n--- a/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n+++ b/aether-impl/src/main/java/org/sonatype/aether/impl/internal/DefaultUpdateCheckManager.java\n@@ -448,8 +448,7 @@\n         }\n         else if ( RepositoryPolicy.UPDATE_POLICY_DAILY.equals( policy ) )\n         {\n-            // Get midnight boundary\n-            Calendar cal \u003d Calendar.getInstance( TimeZone.getTimeZone( \"UTC\" ) );\n+            Calendar cal \u003d Calendar.getInstance();\n             cal.set( Calendar.HOUR_OF_DAY, 0 );\n             cal.set( Calendar.MINUTE, 0 );\n             cal.set( Calendar.SECOND, 0 );\n",
    "projectName": "sonatype-aether",
    "lineNum": 451,
    "nodeStartChar": 15449,
    "before": "Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))",
    "after": "Calendar.getInstance()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "cb1fe44da9abc61336a72d5bcb1b1db53685f305",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\nindex 9c149ff..ec49f1e 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\n@@ -48,7 +48,8 @@\n         throws NoRepositoryConnectorException\n     {\n         super( session.getConfigProperties() );\n-        if ( !\"default\".equalsIgnoreCase( repository.getContentType() ) )\n+\n+        if ( !\"default\".equals( repository.getContentType() ) )\n         {\n             throw new NoRepositoryConnectorException( repository );\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 52,
    "nodeStartChar": 1965,
    "before": "\"default\".equalsIgnoreCase(repository.getContentType())",
    "after": "\"default\".equals(repository.getContentType())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "cb1fe44da9abc61336a72d5bcb1b1db53685f305",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\nindex 9c149ff..ec49f1e 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/FileRepositoryConnector.java\n@@ -48,7 +48,8 @@\n         throws NoRepositoryConnectorException\n     {\n         super( session.getConfigProperties() );\n-        if ( !\"default\".equalsIgnoreCase( repository.getContentType() ) )\n+\n+        if ( !\"default\".equals( repository.getContentType() ) )\n         {\n             throw new NoRepositoryConnectorException( repository );\n         }\n",
    "projectName": "sonatype-aether",
    "lineNum": 52,
    "nodeStartChar": 1965,
    "before": "\"default\".equalsIgnoreCase(repository.getContentType())",
    "after": "\"default\".equals(repository.getContentType())"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "1cd8a6fbee03e8d4377a8ba1d60e1a50891b1105",
    "commitFile": "aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java",
    "patch": "diff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\nindex 92cfa18..1616cef 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n@@ -150,7 +150,7 @@\n \n             assertTrue( \"invalid data offset: bigger than data length\", event.getDataOffset() \u003c event.getDataLength() );\n             assertTrue( \"invalid data window: offset+data length \u003e data buffer length\",\n-                        event.getDataOffset() + event.getDataLength() \u003c event.getDataBuffer().length );\n+                        event.getDataOffset() + event.getDataLength() \u003c\u003d event.getDataBuffer().length );\n \n             assertTrue( \"transferred byte is not set/not positive for type: \" + event.getType(),\n                         event.getTransferredBytes() \u003e -1 );\ndiff --git a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\nindex 92cfa18..1616cef 100644\n--- a/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n+++ b/aether-test-util/src/main/java/org/sonatype/aether/test/util/connector/TransferEventTester.java\n@@ -150,7 +150,7 @@\n \n             assertTrue( \"invalid data offset: bigger than data length\", event.getDataOffset() \u003c event.getDataLength() );\n             assertTrue( \"invalid data window: offset+data length \u003e data buffer length\",\n-                        event.getDataOffset() + event.getDataLength() \u003c event.getDataBuffer().length );\n+                        event.getDataOffset() + event.getDataLength() \u003c\u003d event.getDataBuffer().length );\n \n             assertTrue( \"transferred byte is not set/not positive for type: \" + event.getType(),\n                         event.getTransferredBytes() \u003e -1 );\n",
    "projectName": "sonatype-aether",
    "lineNum": 153,
    "nodeStartChar": 7016,
    "before": "\u003c",
    "after": "\u003c\u003d"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a2b4820b60572c3250b6f2086f946b4354636849",
    "commitFile": "aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java",
    "patch": "diff --git a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\nindex d669590..1c34a53 100644\n--- a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n+++ b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n@@ -116,7 +116,7 @@\n                 {\n                     managedLocalPaths \u003d new HashMap\u003cObject, String\u003e( this.managedLocalPaths );\n                 }\n-                managedLocalPaths.put( key, scope );\n+                managedLocalPaths.put( key, localPath );\n             }\n \n             Collection\u003cExclusion\u003e exclusions \u003d managedDependency.getExclusions();\ndiff --git a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\nindex d669590..1c34a53 100644\n--- a/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n+++ b/aether-util/src/main/java/org/sonatype/aether/util/graph/manager/ClassicDependencyManager.java\n@@ -116,7 +116,7 @@\n                 {\n                     managedLocalPaths \u003d new HashMap\u003cObject, String\u003e( this.managedLocalPaths );\n                 }\n-                managedLocalPaths.put( key, scope );\n+                managedLocalPaths.put( key, localPath );\n             }\n \n             Collection\u003cExclusion\u003e exclusions \u003d managedDependency.getExclusions();\n",
    "projectName": "sonatype-aether",
    "lineNum": 119,
    "nodeStartChar": 4756,
    "before": "managedLocalPaths.put(key,scope)",
    "after": "managedLocalPaths.put(key,localPath)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 93,
    "nodeStartChar": 2823,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 101,
    "nodeStartChar": 3056,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 110,
    "nodeStartChar": 3329,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 118,
    "nodeStartChar": 3601,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f409ffff1f0f86f3e5559751a8928393176362fe",
    "commitFile": "aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java",
    "patch": "diff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\ndiff --git a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\nindex 69cc3f0..93b14b8 100644\n--- a/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n+++ b/aether-connector-file/src/main/java/org/sonatype/aether/connector/file/TransferWrapper.java\n@@ -90,7 +90,7 @@\n         else if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getFile();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Artifact getArtifact()\n@@ -98,7 +98,7 @@\n         if ( artifactTransfer !\u003d null )\n             return artifactTransfer.getArtifact();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n \n     }\n \n@@ -107,7 +107,7 @@\n         if ( artifactTransfer !\u003d null )\n             artifactTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public void setException( MetadataTransferException exception )\n@@ -115,7 +115,7 @@\n         if ( metadataTransfer !\u003d null )\n             metadataTransfer.setException( exception );\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Object getException()\n@@ -125,7 +125,7 @@\n         else if ( metadataTransfer !\u003d null )\n             return metadataTransfer.getException();\n         else\n-            throw new RuntimeException( \"TransferWrapper holds the wrong type\" );\n+            throw new IllegalStateException( \"TransferWrapper holds the wrong type\" );\n     }\n \n     public Metadata getMetadata()\n",
    "projectName": "sonatype-aether",
    "lineNum": 128,
    "nodeStartChar": 3931,
    "before": "RuntimeException",
    "after": "IllegalStateException"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "4b479223630827596d3f48f622b76be16c8bd399",
    "commitFile": "src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java",
    "patch": "diff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\nindex b3f30bc..8aa3395 100644\n--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n@@ -1119,7 +1119,7 @@\n \t\t\t\t\tfor(OWLObjectPropertyExpression p : candidates) {\n \t\t\t\t\t\tif(!p.isAnonymous()) {\n \t\t\t\t\t\t\tnew_binding \u003d binding.clone();\n-\t\t\t\t\t\t\tnew_binding.set(arg0, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n+\t\t\t\t\t\t\tnew_binding.set(arg1, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n \t\t\t\t\t\t\tif(eval(query, group.bind(new_binding), result, new_binding)) {\n \t\t\t\t\t\t\t\tret \u003d true;\n \t\t\t\t\t\t\t}\ndiff --git a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\nindex b3f30bc..8aa3395 100644\n--- a/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n+++ b/src/main/java/de/derivo/sparqldlapi/impl/QueryEngineImpl.java\n@@ -1119,7 +1119,7 @@\n \t\t\t\t\tfor(OWLObjectPropertyExpression p : candidates) {\n \t\t\t\t\t\tif(!p.isAnonymous()) {\n \t\t\t\t\t\t\tnew_binding \u003d binding.clone();\n-\t\t\t\t\t\t\tnew_binding.set(arg0, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n+\t\t\t\t\t\t\tnew_binding.set(arg1, QueryArgument.newURI(p.getNamedProperty().getIRI()));\n \t\t\t\t\t\t\tif(eval(query, group.bind(new_binding), result, new_binding)) {\n \t\t\t\t\t\t\t\tret \u003d true;\n \t\t\t\t\t\t\t}\n",
    "projectName": "sparql-dl-api",
    "lineNum": 1122,
    "nodeStartChar": 34534,
    "before": "new_binding.set(arg0,QueryArgument.newURI(p.getNamedProperty().getIRI()))",
    "after": "new_binding.set(arg1,QueryArgument.newURI(p.getNamedProperty().getIRI()))"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "a11b9cbbdc0e9e3468235fd09a0b86c3b549fc68",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\nindex 3a151d6..89dbb8d 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageService.java\n@@ -257,7 +257,7 @@\n         logger.debug(\"{} event type received...\", symEvent.getType());\n \n \n-        if (symEvent.getType() !\u003d null)\n+        if (symEvent.getType() \u003d\u003d null)\n             return;\n \n \n",
    "projectName": "symphony-java-client",
    "lineNum": 260,
    "nodeStartChar": 9240,
    "before": "!\u003d",
    "after": "\u003d\u003d"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "39d6a9bf43e85155f51c1ad6e33440c435dfb670",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\nindex 3260f7b..37fea5b 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n@@ -107,8 +107,7 @@\n             logger.info(\"Successfully refreshed SymAuth tokens...\");\n \n             logger.info(\"Exposing SymAgentHealthCheck as JMX MBean...\");\n-            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient,\n-                    AgentSystemClientFactory.TYPE.DEFAULT);\n+            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient);\n             SymAgentHealthCheck check \u003d agentSystemClient.getAgentHealthCheck();\n             MBeanServer mbs \u003d ManagementFactory.getPlatformMBeanServer();\n             ObjectName mBeanName \u003d new ObjectName(\"org.symphonyoss.client:type\u003dHealthCheck\");\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\nindex 3260f7b..37fea5b 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/impl/AuthRefreshTask.java\n@@ -107,8 +107,7 @@\n             logger.info(\"Successfully refreshed SymAuth tokens...\");\n \n             logger.info(\"Exposing SymAgentHealthCheck as JMX MBean...\");\n-            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient,\n-                    AgentSystemClientFactory.TYPE.DEFAULT);\n+            AgentSystemClient agentSystemClient \u003d AgentSystemClientFactory.getClient(symClient);\n             SymAgentHealthCheck check \u003d agentSystemClient.getAgentHealthCheck();\n             MBeanServer mbs \u003d ManagementFactory.getPlatformMBeanServer();\n             ObjectName mBeanName \u003d new ObjectName(\"org.symphonyoss.client:type\u003dHealthCheck\");\n",
    "projectName": "symphony-java-client",
    "lineNum": 110,
    "nodeStartChar": 3940,
    "before": "AgentSystemClientFactory.getClient(symClient,AgentSystemClientFactory.TYPE.DEFAULT)",
    "after": "AgentSystemClientFactory.getClient(symClient)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "a0172c8c96cc59dd0a39ba8237be5cc83e95e232",
    "commitFile": "symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java",
    "patch": "diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\nindex ff10d47..ce1a4d4 100644\n--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n@@ -254,7 +254,7 @@\n \n \n             SymMessage message \u003d new SymMessage();\n-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n \n             sendResponse(message);\n \ndiff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\nindex ff10d47..ce1a4d4 100644\n--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n@@ -254,7 +254,7 @@\n \n \n             SymMessage message \u003d new SymMessage();\n-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n \n             sendResponse(message);\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 257,
    "nodeStartChar": 7707,
    "before": "message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString())",
    "after": "message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a0172c8c96cc59dd0a39ba8237be5cc83e95e232",
    "commitFile": "symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java",
    "patch": "diff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\nindex ff10d47..ce1a4d4 100644\n--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n@@ -254,7 +254,7 @@\n \n \n             SymMessage message \u003d new SymMessage();\n-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n \n             sendResponse(message);\n \ndiff --git a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\nindex ff10d47..ce1a4d4 100644\n--- a/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n+++ b/symphony-client/src/test/java/org/symphonyoss/client/SjcTestBot.java\n@@ -254,7 +254,7 @@\n \n \n             SymMessage message \u003d new SymMessage();\n-            message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n+            message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString());\n \n             sendResponse(message);\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 257,
    "nodeStartChar": 7707,
    "before": "message.setMessage(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString())",
    "after": "message.setMessageText(SymphonyClientIT.PRESENCE_COMMAND_MESSAGE + \" \" + presence.getCategory().toString())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1354,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1354,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1495,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\nindex efc0dc0..f63933f 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ConnectionsFactory.java\n@@ -35,9 +35,9 @@\n     public static ConnectionsClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(),symClient.getDefaultHttpClient());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(),symClient.getDefaultHttpClient());\n         }else{\n-            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ConnectionsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1495,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1342,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1342,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1483,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\nindex c3dcc1c..0387e78 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/PresenceFactory.java\n@@ -35,9 +35,9 @@\n     public static PresenceClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new PresenceClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n \n     }\n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1483,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1366,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 38,
    "nodeStartChar": 1366,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1511,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\nindex 0b5cbe7..f9f2af5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/RoomMembershipFactory.java\n@@ -35,9 +35,9 @@\n     public static RoomMembershipClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new RoomMembershipClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 40,
    "nodeStartChar": 1511,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 41,
    "nodeStartChar": 1321,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 41,
    "nodeStartChar": 1321,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 43,
    "nodeStartChar": 1459,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\nindex 36186d6..b623854 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/ShareFactory.java\n@@ -38,9 +38,9 @@\n     public static ShareClient getClient(SymphonyClient symClient, TYPE type) {\n \n         if (type.equals(TYPE.HTTPCLIENT)) {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         } else {\n-            return new ShareClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new ShareClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 43,
    "nodeStartChar": 1459,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 39,
    "nodeStartChar": 1339,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 39,
    "nodeStartChar": 1339,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 41,
    "nodeStartChar": 1477,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\nindex a260006..ab948a6 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/StreamsFactory.java\n@@ -36,9 +36,9 @@\n \n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new StreamsClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 41,
    "nodeStartChar": 1477,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\n",
    "projectName": "symphony-java-client",
    "lineNum": 43,
    "nodeStartChar": 1435,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\n",
    "projectName": "symphony-java-client",
    "lineNum": 43,
    "nodeStartChar": 1435,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\n",
    "projectName": "symphony-java-client",
    "lineNum": 45,
    "nodeStartChar": 1571,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "8aa39c91a847a34b150b6931d5d354de7c5f63f6",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\nindex d18f9b1..682db2c 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/symphony/clients/UsersFactory.java\n@@ -40,9 +40,9 @@\n     public static UsersClient getClient(SymphonyClient symClient, TYPE type){\n \n         if(type.equals(TYPE.HTTPCLIENT)) {\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl(), symClient.getDefaultHttpClient());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl(), symClient.getDefaultHttpClient());\n         }else{\n-            return new UsersClientImpl(symClient.getSymAuth(), symClient.getpodUrl());\n+            return new UsersClientImpl(symClient.getSymAuth(), symClient.getPodUrl());\n         }\n     }\n     @SuppressWarnings(\"unused\")\n",
    "projectName": "symphony-java-client",
    "lineNum": 45,
    "nodeStartChar": 1571,
    "before": "symClient.getpodUrl()",
    "after": "symClient.getPodUrl()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "aa40cfde9848a99481e2da836856c6fd35d70b0b",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\nindex 4dbc227..44903e1 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n@@ -119,7 +119,7 @@\n \n             return symClient;\n \n-        } catch (NetworkException ae) {\n+        } catch (AuthorizationException ae) {\n \n             logger.error(ae.getMessage(), ae);\n         } catch (InitException e) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\nindex 4dbc227..44903e1 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/SymphonyClientFactory.java\n@@ -119,7 +119,7 @@\n \n             return symClient;\n \n-        } catch (NetworkException ae) {\n+        } catch (AuthorizationException ae) {\n \n             logger.error(ae.getMessage(), ae);\n         } catch (InitException e) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 122,
    "nodeStartChar": 4390,
    "before": "NetworkException",
    "after": "AuthorizationException"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "ba79403cb493da4999bcacf9f65ede3ece01ee49",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\n",
    "projectName": "symphony-java-client",
    "lineNum": 27,
    "nodeStartChar": 969,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "8a17ded45826eba40e7fcf4de01af14de2ec465c",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\nindex 64e6aba..63df4e5 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/services/MessageListener.java\n@@ -27,7 +27,7 @@\n /**\n  * Created by Frank Tarsillo on 5/15/2016.\n  */\n-interface MessageListener {\n+public interface MessageListener {\n \n \n     void onMessage(SymMessage message);\n",
    "projectName": "symphony-java-client",
    "lineNum": 27,
    "nodeStartChar": 969,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "commitSHA1": "f08d59b19856300212df8396ea859d451abfec8e",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/model/Room.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\nindex 50103f5..01f8252 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\n@@ -85,7 +85,7 @@\n \n     public void setStream(Stream stream) {\n         this.stream \u003d stream;\n-        if(stream\u003d\u003dnull)\n+        if(streamId\u003d\u003dnull)\n             streamId\u003dstream.getId();\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 88,
    "nodeStartChar": 2476,
    "before": "stream \u003d\u003d null",
    "after": "streamId \u003d\u003d null"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "f08d59b19856300212df8396ea859d451abfec8e",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/model/Room.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\nindex 50103f5..01f8252 100644\n--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Room.java\n@@ -85,7 +85,7 @@\n \n     public void setStream(Stream stream) {\n         this.stream \u003d stream;\n-        if(stream\u003d\u003dnull)\n+        if(streamId\u003d\u003dnull)\n             streamId\u003dstream.getId();\n     }\n \n",
    "projectName": "symphony-java-client",
    "lineNum": 88,
    "nodeStartChar": 2476,
    "before": "stream \u003d\u003d null",
    "after": "streamId \u003d\u003d null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "commitSHA1": "04c5151cbde111747df511befb1c342bf09e7855",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java b/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java\nindex 647df74..09e1e09 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/model/Chat.java\n@@ -105,7 +105,7 @@\n \n         final Chat other \u003d (Chat) obj;\n \n-        if (!this.stream.equals(other.stream)) {\n+        if (this.stream\u003d\u003dnull || !this.stream.equals(other.stream)) {\n             return false;\n         }\n         return true;\n",
    "projectName": "symphony-java-client",
    "lineNum": 108,
    "nodeStartChar": 2826,
    "before": "!this.stream.equals(other.stream)",
    "after": "this.stream \u003d\u003d null || !this.stream.equals(other.stream)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "fe3bb5677d2b9fa05131cbc94a08d752c6625300",
    "commitFile": "symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java",
    "patch": "diff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\ndiff --git a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\nindex dab00d5..24ea82e 100755\n--- a/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n+++ b/symphony-client/src/main/java/org/symphonyoss/client/util/MlMessageParser.java\n@@ -36,7 +36,7 @@\n \n import java.util.List;\n \n-class MlMessageParser extends DefaultHandler {\n+public class MlMessageParser extends DefaultHandler {\n \n     private String messageMl;\n     private Element elementMessageML;\n@@ -49,15 +49,15 @@\n     private final Logger logger \u003d LoggerFactory.getLogger(MlMessageParser.class);\n \n \n-    private MlMessageParser(SymphonyClient symClient){\n+    public MlMessageParser(SymphonyClient symClient){\n         this.symClient \u003d symClient;\n \n     }\n \n-    private MlMessageParser() {\n+    public MlMessageParser() {\n     }\n \n-    private void parseMessage(String message) throws Exception {\n+    public void parseMessage(String message) throws Exception {\n \n         Document doc \u003d Jsoup.parse(message);\n         originalDoc \u003d doc.clone();\n@@ -190,7 +190,7 @@\n         return stringBuilder.toString();\n     }\n \n-    private String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n+    public String getHtmlStartingFromNode(String nodeType, String attrib, String attribValue) {\n \n \n         StringBuilder stringBuilder \u003d new StringBuilder();\n@@ -199,7 +199,7 @@\n     }\n \n \n-    private void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n+    public void getHtmlStartingFromText(String text, StringBuilder builder, List\u003cNode\u003e nodesList, boolean append) {\n \n \n         for (Node node : nodesList) {\n",
    "projectName": "symphony-java-client",
    "lineNum": 39,
    "nodeStartChar": 1316,
    "before": "0",
    "after": "1"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "008310f312f78c18e4e0b0a1516cfb20c1c47981",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex aa9ac06..c2d6d83 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha(data);\n+    return DigestUtils.sha1(data);\n   }\n \n   /**\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex aa9ac06..c2d6d83 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha(data);\n+    return DigestUtils.sha1(data);\n   }\n \n   /**\n",
    "projectName": "ttorrent",
    "lineNum": 17,
    "nodeStartChar": 404,
    "before": "DigestUtils.sha(data)",
    "after": "DigestUtils.sha1(data)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "008310f312f78c18e4e0b0a1516cfb20c1c47981",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex aa9ac06..c2d6d83 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha(data);\n+    return DigestUtils.sha1(data);\n   }\n \n   /**\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex aa9ac06..c2d6d83 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha(data);\n+    return DigestUtils.sha1(data);\n   }\n \n   /**\n",
    "projectName": "ttorrent",
    "lineNum": 17,
    "nodeStartChar": 404,
    "before": "DigestUtils.sha(data)",
    "after": "DigestUtils.sha1(data)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "a0566f03367c7ec9043887afb0350040bec26cc5",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\n",
    "projectName": "ttorrent",
    "lineNum": 348,
    "nodeStartChar": 9788,
    "before": "logger.debug(\"Attempting to send a message to non-connected peer {}!\",this)",
    "after": "logger.trace(\"Attempting to send a message to non-connected peer {}!\",this)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a0566f03367c7ec9043887afb0350040bec26cc5",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\n",
    "projectName": "ttorrent",
    "lineNum": 348,
    "nodeStartChar": 9788,
    "before": "logger.debug(\"Attempting to send a message to non-connected peer {}!\",this)",
    "after": "logger.trace(\"Attempting to send a message to non-connected peer {}!\",this)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "a0566f03367c7ec9043887afb0350040bec26cc5",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\n",
    "projectName": "ttorrent",
    "lineNum": 619,
    "nodeStartChar": 18899,
    "before": "logger.debug(\"Discarding block for already completed \" + p)",
    "after": "logger.trace(\"Discarding block for already completed \" + p)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "a0566f03367c7ec9043887afb0350040bec26cc5",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\nindex 47b6dd7..597c8a9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/peer/SharingPeer.java\n@@ -345,7 +345,7 @@\n         }\n       }), 1, TimeUnit.SECONDS);\n     } else {\n-      logger.debug(\"Attempting to send a message to non-connected peer {}!\", this);\n+      logger.trace(\"Attempting to send a message to non-connected peer {}!\", this);\n       unbind(true);\n     }\n   }\n@@ -616,7 +616,7 @@\n             if (p.isValid()) {\n               this.cancelPendingRequests(p);\n               this.firePeerReady();\n-              logger.debug(\"Discarding block for already completed \" + p);\n+              logger.trace(\"Discarding block for already completed \" + p);\n               break;\n             }\n             //TODO add proper catch for IOException\n",
    "projectName": "ttorrent",
    "lineNum": 619,
    "nodeStartChar": 18899,
    "before": "logger.debug(\"Discarding block for already completed \" + p)",
    "after": "logger.trace(\"Discarding block for already completed \" + p)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "589397f9ac16b1ac78622844934e7f14699e6b0d",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex 001ea41..14d1889 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha1(data);\n+    return DigestUtils.sha(data);\n   }\n \n   /**\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex 001ea41..14d1889 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha1(data);\n+    return DigestUtils.sha(data);\n   }\n \n   /**\n",
    "projectName": "ttorrent",
    "lineNum": 17,
    "nodeStartChar": 404,
    "before": "DigestUtils.sha1(data)",
    "after": "DigestUtils.sha(data)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "589397f9ac16b1ac78622844934e7f14699e6b0d",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex 001ea41..14d1889 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha1(data);\n+    return DigestUtils.sha(data);\n   }\n \n   /**\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\nindex 001ea41..14d1889 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/TorrentUtils.java\n@@ -14,7 +14,7 @@\n    * @return sha 1 hash of specified data\n    */\n   public static byte[] calculateSha1Hash(byte[] data) {\n-    return DigestUtils.sha1(data);\n+    return DigestUtils.sha(data);\n   }\n \n   /**\n",
    "projectName": "ttorrent",
    "lineNum": 17,
    "nodeStartChar": 404,
    "before": "DigestUtils.sha1(data)",
    "after": "DigestUtils.sha(data)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "9ac4b94e8bcb6dd0a60797fac84a7f2f83b552d0",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex e891290..df37f83 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -260,7 +260,7 @@\n           unannouncedTorrents.addAll(e.getValue());\n         } catch (ConnectException t) {\n           LoggerUtils.warnWithMessageAndDebugDetails(logger, \"Cannot connect to the tracker {}\", e.getKey(), t);\n-          logger.info(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n+          logger.debug(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n         }\n       } else {\n         logger.warn(\"Tracker client for {} is null. Torrents are not announced on tracker\", e.getKey());\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex e891290..df37f83 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -260,7 +260,7 @@\n           unannouncedTorrents.addAll(e.getValue());\n         } catch (ConnectException t) {\n           LoggerUtils.warnWithMessageAndDebugDetails(logger, \"Cannot connect to the tracker {}\", e.getKey(), t);\n-          logger.info(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n+          logger.debug(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n         }\n       } else {\n         logger.warn(\"Tracker client for {} is null. Torrents are not announced on tracker\", e.getKey());\n",
    "projectName": "ttorrent",
    "lineNum": 263,
    "nodeStartChar": 8951,
    "before": "logger.info(\"next torrents contain {} in tracker list. {}\",e.getKey(),e.getValue())",
    "after": "logger.debug(\"next torrents contain {} in tracker list. {}\",e.getKey(),e.getValue())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "9ac4b94e8bcb6dd0a60797fac84a7f2f83b552d0",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex e891290..df37f83 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -260,7 +260,7 @@\n           unannouncedTorrents.addAll(e.getValue());\n         } catch (ConnectException t) {\n           LoggerUtils.warnWithMessageAndDebugDetails(logger, \"Cannot connect to the tracker {}\", e.getKey(), t);\n-          logger.info(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n+          logger.debug(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n         }\n       } else {\n         logger.warn(\"Tracker client for {} is null. Torrents are not announced on tracker\", e.getKey());\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex e891290..df37f83 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -260,7 +260,7 @@\n           unannouncedTorrents.addAll(e.getValue());\n         } catch (ConnectException t) {\n           LoggerUtils.warnWithMessageAndDebugDetails(logger, \"Cannot connect to the tracker {}\", e.getKey(), t);\n-          logger.info(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n+          logger.debug(\"next torrents contain {} in tracker list. {}\", e.getKey(), e.getValue());\n         }\n       } else {\n         logger.warn(\"Tracker client for {} is null. Torrents are not announced on tracker\", e.getKey());\n",
    "projectName": "ttorrent",
    "lineNum": 263,
    "nodeStartChar": 8951,
    "before": "logger.info(\"next torrents contain {} in tracker list. {}\",e.getKey(),e.getValue())",
    "after": "logger.debug(\"next torrents contain {} in tracker list. {}\",e.getKey(),e.getValue())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "280a6b2742883c6fa803cfee15f39f2b42af0495",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 29b7a3e..6dc84e1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -1041,7 +1041,7 @@\n       }\n     };\n     th.start();\n-    Thread.sleep(200);\n+    Thread.sleep(100);\n     th.interrupt();\n     new WaitFor(10 * 1000) {\n       @Override\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 29b7a3e..6dc84e1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -1041,7 +1041,7 @@\n       }\n     };\n     th.start();\n-    Thread.sleep(200);\n+    Thread.sleep(100);\n     th.interrupt();\n     new WaitFor(10 * 1000) {\n       @Override\n",
    "projectName": "ttorrent",
    "lineNum": 1044,
    "nodeStartChar": 39027
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "4695b2842dee3b11f647f46086348d6f1f25d58e",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 883f00c..8e7b9c1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -712,7 +712,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final ExecutorService es \u003d Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);\n     final Client leecher \u003d new Client(es) {\n       @Override\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 883f00c..8e7b9c1 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -712,7 +712,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final ExecutorService es \u003d Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);\n     final Client leecher \u003d new Client(es) {\n       @Override\n",
    "projectName": "ttorrent",
    "lineNum": 715,
    "nodeStartChar": 25922,
    "before": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent())",
    "after": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent(),true,false)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "505a7b8c76ddf245345f5108541218d816db0fc5",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex e740022..8d98ae6 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -850,7 +850,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final Client leecher \u003d createClient();\n     leecher.start(InetAddress.getLocalHost());\n     final AtomicBoolean interrupted \u003d new AtomicBoolean();\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex e740022..8d98ae6 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -850,7 +850,7 @@\n     final File torrentFile \u003d tempFiles.createTempFile();\n     torrent.save(torrentFile);\n     seeder.start(InetAddress.getLocalHost());\n-    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent());\n+    seeder.addTorrent(torrentFile.getAbsolutePath(), dwnlFile.getParent(), true, false);\n     final Client leecher \u003d createClient();\n     leecher.start(InetAddress.getLocalHost());\n     final AtomicBoolean interrupted \u003d new AtomicBoolean();\n",
    "projectName": "ttorrent",
    "lineNum": 853,
    "nodeStartChar": 31143,
    "before": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent())",
    "after": "seeder.addTorrent(torrentFile.getAbsolutePath(),dwnlFile.getParent(),true,false)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "5bf5504d82f59ba1ffe800574ea9155157c6767d",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\nindex 957f8ac..28d1cc8 100644\n--- a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n@@ -277,7 +277,7 @@\n     c2.start(InetAddress.getLocalHost());\n     File torrentFile \u003d new File(TEST_RESOURCES + \"/torrents\", \"file1.jar.torrent\");\n     File parentFiles \u003d new File(TEST_RESOURCES + \"/parentFiles\");\n-    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath());\n+    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath(), true, false);\n \n     final TrackedTorrent tt \u003d tracker.getTrackedTorrent(torrent.getHexInfoHash());\n     new WaitFor(10 * 1000) {\ndiff --git a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\nindex 957f8ac..28d1cc8 100644\n--- a/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/tracker/TrackerTest.java\n@@ -277,7 +277,7 @@\n     c2.start(InetAddress.getLocalHost());\n     File torrentFile \u003d new File(TEST_RESOURCES + \"/torrents\", \"file1.jar.torrent\");\n     File parentFiles \u003d new File(TEST_RESOURCES + \"/parentFiles\");\n-    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath());\n+    c2.addTorrent(torrentFile.getAbsolutePath(), parentFiles.getAbsolutePath(), true, false);\n \n     final TrackedTorrent tt \u003d tracker.getTrackedTorrent(torrent.getHexInfoHash());\n     new WaitFor(10 * 1000) {\n",
    "projectName": "ttorrent",
    "lineNum": 280,
    "nodeStartChar": 10940,
    "before": "c2.addTorrent(torrentFile.getAbsolutePath(),parentFiles.getAbsolutePath())",
    "after": "c2.addTorrent(torrentFile.getAbsolutePath(),parentFiles.getAbsolutePath(),true,false)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "f95b7ca2ee3881be8d51bdc60c2e28679c6b64c9",
    "commitFile": "tests/src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 5f20a61..e740022 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -833,7 +833,8 @@\n       }\n     });\n     try {\n-      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60);\n+      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60,\n+              0, new AtomicBoolean(), 10);\n     } finally {\n       future.cancel(true);\n       service.shutdown();\ndiff --git a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 5f20a61..e740022 100644\n--- a/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/tests/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -833,7 +833,8 @@\n       }\n     });\n     try {\n-      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60);\n+      leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(), tempFiles.createTempDir().getAbsolutePath(), 60,\n+              0, new AtomicBoolean(), 10);\n     } finally {\n       future.cancel(true);\n       service.shutdown();\n",
    "projectName": "ttorrent",
    "lineNum": 836,
    "nodeStartChar": 30416,
    "before": "leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(),tempFiles.createTempDir().getAbsolutePath(),60)",
    "after": "leecher.downloadUninterruptibly(torrentFile.getAbsolutePath(),tempFiles.createTempDir().getAbsolutePath(),60,0,new AtomicBoolean(),10)"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "commitSHA1": "8d4fc2a8f72b9085b1f095e8a1ca70fea712ea7b",
    "commitFile": "common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java",
    "patch": "diff --git a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\nindex 1073c39..5d32dfb 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n@@ -263,7 +263,7 @@\n \n       return new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER, infoHash,\n               new Peer(ip, port, ByteBuffer.wrap(peerId)),\n-              downloaded, uploaded, left, compact, noPeerId,\n+              uploaded, downloaded, left, compact, noPeerId,\n               event, numWant);\n     } catch (InvalidBEncodingException ibee) {\n       throw new MessageValidationException(\ndiff --git a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\nindex 1073c39..5d32dfb 100644\n--- a/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n+++ b/common/src/main/java/com/turn/ttorrent/common/protocol/http/HTTPAnnounceRequestMessage.java\n@@ -263,7 +263,7 @@\n \n       return new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER, infoHash,\n               new Peer(ip, port, ByteBuffer.wrap(peerId)),\n-              downloaded, uploaded, left, compact, noPeerId,\n+              uploaded, downloaded, left, compact, noPeerId,\n               event, numWant);\n     } catch (InvalidBEncodingException ibee) {\n       throw new MessageValidationException(\n",
    "projectName": "ttorrent",
    "lineNum": 264,
    "nodeStartChar": 7671,
    "before": "new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER,infoHash,new Peer(ip,port,ByteBuffer.wrap(peerId)),downloaded,uploaded,left,compact,noPeerId,event,numWant)",
    "after": "new HTTPAnnounceRequestMessage(Constants.EMPTY_BUFFER,infoHash,new Peer(ip,port,ByteBuffer.wrap(peerId)),uploaded,downloaded,left,compact,noPeerId,event,numWant)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "cf9427341a96a0ccae42e8b5a0425bcb127c3115",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex d87dfdb..6c29e52 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -563,7 +563,7 @@\n           }\n         });\n         try {\n-          future.get(5, TimeUnit.SECONDS);\n+          future.get(10, TimeUnit.SECONDS);\n         } catch (ExecutionException e) {\n           fail(\"get execution exception on accept connection\", e);\n         } catch (TimeoutException e) {\ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex d87dfdb..6c29e52 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -563,7 +563,7 @@\n           }\n         });\n         try {\n-          future.get(5, TimeUnit.SECONDS);\n+          future.get(10, TimeUnit.SECONDS);\n         } catch (ExecutionException e) {\n           fail(\"get execution exception on accept connection\", e);\n         } catch (TimeoutException e) {\n",
    "projectName": "ttorrent",
    "lineNum": 566,
    "nodeStartChar": 20264
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "commitSHA1": "f1d23d20b352d9ef5b299191f2a76dd18e5d6d29",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\n",
    "projectName": "ttorrent",
    "lineNum": 87,
    "nodeStartChar": 3470,
    "before": "myContext.getTorrentsStorage().hasTorrent(hexInfoHash)",
    "after": "!myContext.getTorrentsStorage().hasTorrent(hexInfoHash)"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "commitSHA1": "00614d055f840211e861f99b14d03fa2b8389c76",
    "commitFile": "ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java",
    "patch": "diff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\ndiff --git a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\nindex 241e469..6ea4ff9 100644\n--- a/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n+++ b/ttorrent-client/src/main/java/com/turn/ttorrent/client/network/WorkingReceiver.java\n@@ -84,7 +84,7 @@\n \n     final String hexInfoHash \u003d peer.getHexInfoHash();\n     SharedTorrent torrent \u003d myContext.getTorrentsStorage().getTorrent(hexInfoHash);\n-    if (torrent \u003d\u003d null || myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n+    if (torrent \u003d\u003d null || !myContext.getTorrentsStorage().hasTorrent(hexInfoHash)) {\n       logger.debug(\"torrent with hash {} for peer {} doesn\u0027t found in storage. Maybe somebody deletes it manually\", hexInfoHash, peer);\n       return new ShutdownAndRemovePeerProcessor(myPeerUID, myContext).processAndGetNext(socketChannel);\n     }\n",
    "projectName": "ttorrent",
    "lineNum": 87,
    "nodeStartChar": 3470,
    "before": "myContext.getTorrentsStorage().hasTorrent(hexInfoHash)",
    "after": "!myContext.getTorrentsStorage().hasTorrent(hexInfoHash)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "commitSHA1": "e5a12b705edd194233e922f70f91297e96963f66",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\n",
    "projectName": "ttorrent",
    "lineNum": 48,
    "nodeStartChar": 1751,
    "before": "torrent.update(event,peerId,hexPeerId,ip,port,uploaded,downloaded,left)",
    "after": "actualTorrent.update(event,peerId,hexPeerId,ip,port,uploaded,downloaded,left)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "e5a12b705edd194233e922f70f91297e96963f66",
    "commitFile": "src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\ndiff --git a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\nindex c67dd65..767c192 100644\n--- a/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n+++ b/src/main/java/com/turn/ttorrent/tracker/TorrentsRepository.java\n@@ -45,7 +45,7 @@\n       lockFor(hexInfoHash).lock();\n       TrackedTorrent oldTorrent \u003d this.myTorrents.putIfAbsent(hexInfoHash, torrent);\n       actualTorrent \u003d oldTorrent \u003d\u003d null ? torrent : oldTorrent;\n-      torrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n+      actualTorrent.update(event, peerId, hexPeerId, ip, port, uploaded, downloaded, left);\n     } finally {\n       lockFor(hexInfoHash).unlock();\n     }\n@@ -53,7 +53,7 @@\n   }\n \n   private ReentrantLock lockFor(String torrentHash) {\n-    return myLocks[torrentHash.hashCode() % myLocks.length];\n+    return myLocks[Math.abs(torrentHash.hashCode()) % myLocks.length];\n   }\n \n   public void cleanup(int torrentExpireTimeoutSec) {\n",
    "projectName": "ttorrent",
    "lineNum": 48,
    "nodeStartChar": 1751,
    "before": "torrent.update(event,peerId,hexPeerId,ip,port,uploaded,downloaded,left)",
    "after": "actualTorrent.update(event,peerId,hexPeerId,ip,port,uploaded,downloaded,left)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "commitSHA1": "e5b01d30552984021eb576e96abc47b50bbdc6a0",
    "commitFile": "src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex dabf756..c9ddd1e 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -110,7 +110,7 @@\n   }\n \n   private boolean needRunCleanup() {\n-    return (myTimeService.now() - lastCleanupTime) \u003c myCleanupTimeoutMillis;\n+    return (myTimeService.now() - lastCleanupTime) \u003e myCleanupTimeoutMillis;\n   }\n \n   private void processWriteTasks() {\ndiff --git a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\nindex dabf756..c9ddd1e 100644\n--- a/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n+++ b/src/main/java/com/turn/ttorrent/client/network/ConnectionWorker.java\n@@ -110,7 +110,7 @@\n   }\n \n   private boolean needRunCleanup() {\n-    return (myTimeService.now() - lastCleanupTime) \u003c myCleanupTimeoutMillis;\n+    return (myTimeService.now() - lastCleanupTime) \u003e myCleanupTimeoutMillis;\n   }\n \n   private void processWriteTasks() {\n",
    "projectName": "ttorrent",
    "lineNum": 113,
    "nodeStartChar": 3956,
    "before": "\u003c",
    "after": "\u003e"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "commitSHA1": "07645f934d1b9a9cfda7bb7882aa5d76656d952a",
    "commitFile": "src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\nindex 898c9f3..eecaa89 100644\n--- a/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/network/ConnectionManagerTest.java\n@@ -73,16 +73,16 @@\n     assertEquals(acceptCount.get(), 0);\n     assertEquals(readCount.get(), 0);\n     int serverPort \u003d ConnectionManager.PORT_RANGE_START;\n-    Socket socket \u003d new Socket();\n+    Socket socket \u003d null;\n     while (serverPort \u003c ConnectionManager.PORT_RANGE_END) {\n       try {\n-        socket.connect(new InetSocketAddress(\"127.0.0.1\", serverPort));\n+        socket \u003d new Socket(\"127.0.0.1\", serverPort);\n         if (socket.isConnected()) break;\n       } catch (ConnectException ignored) {}\n       serverPort++;\n     }\n \n-    if (!socket.isConnected()) {\n+    if (socket \u003d\u003d null || !socket.isConnected()) {\n       fail(\"can not connect to server channel of connection manager\");\n     }\n \n",
    "projectName": "ttorrent",
    "lineNum": 85,
    "nodeStartChar": 2812,
    "before": "!socket.isConnected()",
    "after": "socket \u003d\u003d null || !socket.isConnected()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "240ce72fe5301773a657cea43b00341d706f341d",
    "commitFile": "src/main/java/com/turn/ttorrent/client/announce/Announce.java",
    "patch": "diff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\ndiff --git a/src/main/java/com/turn/ttorrent/client/announce/Announce.java b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\nindex 3a316e2..063d289 100644\n--- a/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n+++ b/src/main/java/com/turn/ttorrent/client/announce/Announce.java\n@@ -67,7 +67,7 @@\n    * Announce thread and control.\n    */\n   private Thread thread;\n-  private boolean stop;\n+  private volatile boolean stop;\n   private boolean forceStop;\n \n   /**\n@@ -217,10 +217,10 @@\n     logger.info(\"Starting announce loop...\");\n \n \n-    while (!this.stop \u0026\u0026 !Thread.interrupted()) {\n+    while (!this.stop \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n       logger.debug(\"Starting announce for {} torrents\", torrents.size());\n       for (SharedTorrent torrent : this.torrents) {\n-        if (this.stop || Thread.interrupted()){\n+        if (this.stop || Thread.currentThread().isInterrupted()){\n           break;\n         }\n         try {\n",
    "projectName": "ttorrent",
    "lineNum": 70,
    "nodeStartChar": 2146,
    "before": "2",
    "after": "66"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "9e429af1bbb24c911a16ef7d126752bb55f19874",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 41d8802..5b2eaf8 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -640,7 +640,7 @@\n \n   public void interrupt_download() throws IOException, InterruptedException, NoSuchAlgorithmException {\n     tracker.setAcceptForeignTorrents(true);\n-    Client seeder \u003d createClient();\n+    final Client seeder \u003d createClient();\n     final File dwnlFile \u003d tempFiles.createTempFile(513 * 1024 * 60);\n     final Torrent torrent \u003d Torrent.create(dwnlFile, null, tracker.getAnnounceURI(), \"Test\");\n \ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 41d8802..5b2eaf8 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -640,7 +640,7 @@\n \n   public void interrupt_download() throws IOException, InterruptedException, NoSuchAlgorithmException {\n     tracker.setAcceptForeignTorrents(true);\n-    Client seeder \u003d createClient();\n+    final Client seeder \u003d createClient();\n     final File dwnlFile \u003d tempFiles.createTempFile(513 * 1024 * 60);\n     final Torrent torrent \u003d Torrent.create(dwnlFile, null, tracker.getAnnounceURI(), \"Test\");\n \n",
    "projectName": "ttorrent",
    "lineNum": 643,
    "nodeStartChar": 23615,
    "before": "0",
    "after": "16"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "commitSHA1": "1ac71f69879b6c77435e656d2fb9f41fc0416dc9",
    "commitFile": "src/test/java/com/turn/ttorrent/client/ClientTest.java",
    "patch": "diff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 62af5ea..50ac783 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -508,7 +508,7 @@\n         }\n       }\n     });\n-    leecher.downloadUninterruptibly(st, 6000);\n+    leecher.downloadUninterruptibly(st, 60);\n \n /*\n     seeder.start(InetAddress.getLocalHost());\ndiff --git a/src/test/java/com/turn/ttorrent/client/ClientTest.java b/src/test/java/com/turn/ttorrent/client/ClientTest.java\nindex 62af5ea..50ac783 100644\n--- a/src/test/java/com/turn/ttorrent/client/ClientTest.java\n+++ b/src/test/java/com/turn/ttorrent/client/ClientTest.java\n@@ -508,7 +508,7 @@\n         }\n       }\n     });\n-    leecher.downloadUninterruptibly(st, 6000);\n+    leecher.downloadUninterruptibly(st, 60);\n \n /*\n     seeder.start(InetAddress.getLocalHost());\n",
    "projectName": "ttorrent",
    "lineNum": 511,
    "nodeStartChar": 18389
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "commitSHA1": "32dc067b63ba7be9a63ec8b2d56d8c8fe20f87f1",
    "commitFile": "src/com/turn/ttorrent/client/Announce.java",
    "patch": "diff --git a/src/com/turn/ttorrent/client/Announce.java b/src/com/turn/ttorrent/client/Announce.java\nindex 429ba1b..2a13bba 100644\n--- a/src/com/turn/ttorrent/client/Announce.java\n+++ b/src/com/turn/ttorrent/client/Announce.java\n@@ -304,7 +304,7 @@\n \t\t\tthis.stop(true);\n \t\t} catch (IOException ioe) {\n \t\t\tlogger.warn(\"Error reading response from tracker: {}\",\n-\t\t\t\tioe.getMessage(), ioe);\n+\t\t\t\tioe.getMessage());\n \t\t} finally {\n \t\t\tif (result !\u003d null \u0026\u0026 result.containsKey(\"failure reason\")) {\n \t\t\t\ttry {\ndiff --git a/src/com/turn/ttorrent/client/Announce.java b/src/com/turn/ttorrent/client/Announce.java\nindex 429ba1b..2a13bba 100644\n--- a/src/com/turn/ttorrent/client/Announce.java\n+++ b/src/com/turn/ttorrent/client/Announce.java\n@@ -304,7 +304,7 @@\n \t\t\tthis.stop(true);\n \t\t} catch (IOException ioe) {\n \t\t\tlogger.warn(\"Error reading response from tracker: {}\",\n-\t\t\t\tioe.getMessage(), ioe);\n+\t\t\t\tioe.getMessage());\n \t\t} finally {\n \t\t\tif (result !\u003d null \u0026\u0026 result.containsKey(\"failure reason\")) {\n \t\t\t\ttry {\n",
    "projectName": "ttorrent",
    "lineNum": 306,
    "nodeStartChar": 9458,
    "before": "logger.warn(\"Error reading response from tracker: {}\",ioe.getMessage(),ioe)",
    "after": "logger.warn(\"Error reading response from tracker: {}\",ioe.getMessage())"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "commitSHA1": "f2a957a00fdd52011f035fabca8c84c06e011448",
    "commitFile": "src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java",
    "patch": "diff --git a/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java b/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java\nindex 8546050..31dade4 100644\n--- a/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java\n+++ b/src/main/java/com/github/ukrainiantolatin/UkrainianToLatin.java\n@@ -1,7 +1,7 @@\n /*\r\n  * $Id$\r\n  *\r\n- * Copyright (c) 2012 Valentyn Kolesnikov\r\n+ * Copyright 2012 Valentyn Kolesnikov\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -26,7 +26,7 @@\n  * @author Valentyn Kolesnikov\r\n  * @version $Revision$ $Date$\r\n  */\r\n-public class UkrainianToLatin {\r\n+public final class UkrainianToLatin {\r\n     private static final int INDEX_0 \u003d 0;\r\n     private static final int INDEX_1 \u003d 1;\r\n     private static final int INDEX_2 \u003d 2;\r\n",
    "projectName": "ukrainiantolatin",
    "lineNum": 23,
    "nodeStartChar": 705,
    "before": "1",
    "after": "17"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "56f55fbd3de388a4f90511bd7ee7b238c719789b",
    "commitFile": "src/test/java/io/github/benas/unixstream/components/PwdTest.java",
    "patch": "diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d9a74a7..f0c71b0 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,7 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).contains(\"unix-stream\");\n     }\n \n }\ndiff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d9a74a7..f0c71b0 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,7 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).contains(\"unix-stream\");\n     }\n \n }\n",
    "projectName": "unix-stream",
    "lineNum": 21,
    "nodeStartChar": 495,
    "before": "assertThat(paths.get(0).toString()).endsWith(\"unix-stream\")",
    "after": "assertThat(paths.get(0).toString()).contains(\"unix-stream\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "56f55fbd3de388a4f90511bd7ee7b238c719789b",
    "commitFile": "src/test/java/io/github/benas/unixstream/components/PwdTest.java",
    "patch": "diff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d9a74a7..f0c71b0 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,7 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).contains(\"unix-stream\");\n     }\n \n }\ndiff --git a/src/test/java/io/github/benas/unixstream/components/PwdTest.java b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\nindex d9a74a7..f0c71b0 100755\n--- a/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n+++ b/src/test/java/io/github/benas/unixstream/components/PwdTest.java\n@@ -18,7 +18,7 @@\n \n         List\u003cPath\u003e paths \u003d stream.collect(Collectors.toList());\n \n-        assertThat(paths.get(0).toString()).endsWith(\"unix-stream\");\n+        assertThat(paths.get(0).toString()).contains(\"unix-stream\");\n     }\n \n }\n",
    "projectName": "unix-stream",
    "lineNum": 21,
    "nodeStartChar": 495,
    "before": "assertThat(paths.get(0).toString()).endsWith(\"unix-stream\")",
    "after": "assertThat(paths.get(0).toString()).contains(\"unix-stream\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "82effe35960225857e6afa5649d873161a52364b",
    "commitFile": "peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java",
    "patch": "diff --git a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\nindex f1d5114..dca88d8 100644\n--- a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n+++ b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n@@ -52,7 +52,8 @@\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertTrue(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, date)));\n-        Assert.assertFalse(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, new Date())));\n+        Assert.assertFalse(Signed.of(\"1\", certificate, date)\n+                .equals(Signed.of(\"1\", certificate, new Date(System.currentTimeMillis() + (10 * 1000)))));\n \n         Assert.assertNotNull(signed.hashCode());\n         Assert.assertNotNull(Signed.of(\"1\", certificate, date).hashCode());\ndiff --git a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\nindex bb6b87e..d2cf783 100644\n--- a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n+++ b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n@@ -167,7 +167,7 @@\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.eventReason(EventReason.MAILBOX_FULL)));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.issuer(\"Somebody\")));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.evidenceIdentifier(InstanceIdentifier.generateUUID())));\n-        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date())));\n+        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date(System.currentTimeMillis() + (10 * 1000)))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.sender(ParticipantIdentifier.of(\"9908:999999999\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.receiver(ParticipantIdentifier.of(\"9908:111111111\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.documentTypeIdentifier(DocumentTypeIdentifier.of(\"Testing...\"))));\ndiff --git a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\nindex f1d5114..dca88d8 100644\n--- a/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n+++ b/peppol-common/src/test/java/no/difi/vefa/peppol/common/model/SignedTest.java\n@@ -52,7 +52,8 @@\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertFalse(Signed.of(\"1\", Mockito.mock(X509Certificate.class), date).equals(signed));\n         Assert.assertTrue(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, date)));\n-        Assert.assertFalse(Signed.of(\"1\", certificate, date).equals(Signed.of(\"1\", certificate, new Date())));\n+        Assert.assertFalse(Signed.of(\"1\", certificate, date)\n+                .equals(Signed.of(\"1\", certificate, new Date(System.currentTimeMillis() + (10 * 1000)))));\n \n         Assert.assertNotNull(signed.hashCode());\n         Assert.assertNotNull(Signed.of(\"1\", certificate, date).hashCode());\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 56,
    "nodeStartChar": 2219,
    "before": "new Date()",
    "after": "new Date(System.currentTimeMillis() + (10 * 1000))"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "82effe35960225857e6afa5649d873161a52364b",
    "commitFile": "peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java",
    "patch": "diff --git a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\nindex bb6b87e..d2cf783 100644\n--- a/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n+++ b/peppol-evidence/src/test/java/no/difi/vefa/peppol/evidence/rem/EvidenceTest.java\n@@ -167,7 +167,7 @@\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.eventReason(EventReason.MAILBOX_FULL)));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.issuer(\"Somebody\")));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.evidenceIdentifier(InstanceIdentifier.generateUUID())));\n-        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date())));\n+        Assert.assertFalse(EVIDENCE.equals(EVIDENCE.timestamp(new Date(System.currentTimeMillis() + (10 * 1000)))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.sender(ParticipantIdentifier.of(\"9908:999999999\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.receiver(ParticipantIdentifier.of(\"9908:111111111\"))));\n         Assert.assertFalse(EVIDENCE.equals(EVIDENCE.documentTypeIdentifier(DocumentTypeIdentifier.of(\"Testing...\"))));\n",
    "projectName": "vefa-peppol-lookup",
    "lineNum": 170,
    "nodeStartChar": 9039,
    "before": "new Date()",
    "after": "new Date(System.currentTimeMillis() + (10 * 1000))"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "0c59fb90d1d3aa29898f70a5f7123188ecf95fda",
    "commitFile": "src/test/java/com/versioneye/utils/HttpUtilsTest.java",
    "patch": "diff --git a/src/test/java/com/versioneye/utils/HttpUtilsTest.java b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\nindex 41d8786..770958a 100644\n--- a/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n+++ b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n@@ -27,7 +27,7 @@\n         mapper.writeValue(outstream, input);\n \n         String url \u003d \"http://localhost:3000/api/v2/projects/1_54d11ffa6c13297974000002?api_key\u003df511fb2\";\n-        HttpUtils.post(url, outstream.toByteArray(), \"project_file\");\n+        HttpUtils.post(url, outstream.toByteArray(), \"project_file\", null, null, null, null);\n     }\n \n }\ndiff --git a/src/test/java/com/versioneye/utils/HttpUtilsTest.java b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\nindex 41d8786..770958a 100644\n--- a/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n+++ b/src/test/java/com/versioneye/utils/HttpUtilsTest.java\n@@ -27,7 +27,7 @@\n         mapper.writeValue(outstream, input);\n \n         String url \u003d \"http://localhost:3000/api/v2/projects/1_54d11ffa6c13297974000002?api_key\u003df511fb2\";\n-        HttpUtils.post(url, outstream.toByteArray(), \"project_file\");\n+        HttpUtils.post(url, outstream.toByteArray(), \"project_file\", null, null, null, null);\n     }\n \n }\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 30,
    "nodeStartChar": 1022,
    "before": "HttpUtils.post(url,outstream.toByteArray(),\"project_file\")",
    "after": "HttpUtils.post(url,outstream.toByteArray(),\"project_file\",null,null,null,null)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "fdaaa77a460d09c61bd2b8448f9debc6200e840e",
    "commitFile": "src/main/java/com/versioneye/SuperMojo.java",
    "patch": "diff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 1455edd..7c4e6f9 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -90,7 +90,7 @@\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n             throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n                     \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n-        return apiKey;\n+        return projectId;\n     }\n \n     protected Properties fetchPropertiesFor( String key ) throws Exception {\ndiff --git a/src/main/java/com/versioneye/SuperMojo.java b/src/main/java/com/versioneye/SuperMojo.java\nindex 1455edd..7c4e6f9 100644\n--- a/src/main/java/com/versioneye/SuperMojo.java\n+++ b/src/main/java/com/versioneye/SuperMojo.java\n@@ -90,7 +90,7 @@\n         if (projectId \u003d\u003d null || projectId.isEmpty())\n             throw new MojoExecutionException(\"versioneye.properties found but without project_id! \" +\n                     \"Read the instructions at https://github.com/versioneye/versioneye_maven_plugin\");\n-        return apiKey;\n+        return projectId;\n     }\n \n     protected Properties fetchPropertiesFor( String key ) throws Exception {\n",
    "projectName": "versioneye_maven_plugin",
    "lineNum": 93,
    "nodeStartChar": 3521,
    "before": "return apiKey; ",
    "after": "return projectId; "
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "commitSHA1": "bc1c232ffd699913279835caa7c562841cce27cb",
    "commitFile": "src/main/java/org/jboss/windup/plugin/WindupMojo.java",
    "patch": "diff --git a/src/main/java/org/jboss/windup/plugin/WindupMojo.java b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\nindex ea5bc31..9b2ddb6 100644\n--- a/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n+++ b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n@@ -257,7 +257,7 @@\n         GraphContextFactory graphContextFactory \u003d addonRegistry.getServices(GraphContextFactory.class).get();\n \n         Path graphPath \u003d windupConfiguration.getOutputDirectory().resolve(\"graph\");\n-        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath))\n+        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath, true))\n         {\n             windupConfiguration.setGraphContext(graphContext);\n             windupProcessor.execute(windupConfiguration);\ndiff --git a/src/main/java/org/jboss/windup/plugin/WindupMojo.java b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\nindex ea5bc31..9b2ddb6 100644\n--- a/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n+++ b/src/main/java/org/jboss/windup/plugin/WindupMojo.java\n@@ -257,7 +257,7 @@\n         GraphContextFactory graphContextFactory \u003d addonRegistry.getServices(GraphContextFactory.class).get();\n \n         Path graphPath \u003d windupConfiguration.getOutputDirectory().resolve(\"graph\");\n-        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath))\n+        try (GraphContext graphContext \u003d graphContextFactory.create(graphPath, true))\n         {\n             windupConfiguration.setGraphContext(graphContext);\n             windupProcessor.execute(windupConfiguration);\n",
    "projectName": "windup-maven-plugin",
    "lineNum": 260,
    "nodeStartChar": 11590,
    "before": "graphContextFactory.create(graphPath)",
    "after": "graphContextFactory.create(graphPath,true)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "651b778f7a3f1b302b0d5e4549279527b74773f6",
    "commitFile": "src/main/java/org/freedesktop/DesktopEntryWriter.java",
    "patch": "diff --git a/src/main/java/org/freedesktop/DesktopEntryWriter.java b/src/main/java/org/freedesktop/DesktopEntryWriter.java\nindex e7868e6..baa89b6 100644\n--- a/src/main/java/org/freedesktop/DesktopEntryWriter.java\n+++ b/src/main/java/org/freedesktop/DesktopEntryWriter.java\n@@ -5,16 +5,16 @@\n \n public class DesktopEntryWriter {\n \n-    private IniStyleFileWriter delgate;\n+    private IniStyleFileWriter delegate;\n \n     /**\n      * @param writer the writer must be using a utf-8 encoding\n      */\n     public DesktopEntryWriter(Writer writer) {\n-        this.delgate \u003d new IniStyleFileWriter(writer);\n+        this.delegate \u003d new IniStyleFileWriter(writer);\n     }\n \n     public void write(DesktopEntry file) throws IOException {\n-        delgate.write(file);\n+        delegate.write(file);\n     }\n }\ndiff --git a/src/main/java/org/freedesktop/DesktopEntryWriter.java b/src/main/java/org/freedesktop/DesktopEntryWriter.java\nindex e7868e6..baa89b6 100644\n--- a/src/main/java/org/freedesktop/DesktopEntryWriter.java\n+++ b/src/main/java/org/freedesktop/DesktopEntryWriter.java\n@@ -5,16 +5,16 @@\n \n public class DesktopEntryWriter {\n \n-    private IniStyleFileWriter delgate;\n+    private IniStyleFileWriter delegate;\n \n     /**\n      * @param writer the writer must be using a utf-8 encoding\n      */\n     public DesktopEntryWriter(Writer writer) {\n-        this.delgate \u003d new IniStyleFileWriter(writer);\n+        this.delegate \u003d new IniStyleFileWriter(writer);\n     }\n \n     public void write(DesktopEntry file) throws IOException {\n-        delgate.write(file);\n+        delegate.write(file);\n     }\n }\n",
    "projectName": "xdg-java",
    "lineNum": 14,
    "nodeStartChar": 288,
    "before": "this.delgate",
    "after": "this.delegate"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "commitSHA1": "308f1d85821e03d616f70fe4d6e3d8d0e973b2a1",
    "commitFile": "src/main/java/org/exquery/xqdoc/XQueryVisitor.java",
    "patch": "diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\nindex 39d2664..623b9e9 100644\n--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n@@ -461,7 +461,7 @@\n         String namespacePrefix \u003d null;\n         String namespace \u003d null;\n         String localName \u003d null;\n-        String[] tmp \u003d context.functionName().getText().split(\":\", 2);\n+        String[] tmp \u003d context.eqName().getText().split(\":\", 2);\n         if (tmp.length \u003e 1) {\n             namespacePrefix \u003d tmp[0];\n             localName \u003d tmp[1];\ndiff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\nindex 39d2664..623b9e9 100644\n--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n@@ -461,7 +461,7 @@\n         String namespacePrefix \u003d null;\n         String namespace \u003d null;\n         String localName \u003d null;\n-        String[] tmp \u003d context.functionName().getText().split(\":\", 2);\n+        String[] tmp \u003d context.eqName().getText().split(\":\", 2);\n         if (tmp.length \u003e 1) {\n             namespacePrefix \u003d tmp[0];\n             localName \u003d tmp[1];\n",
    "projectName": "xqdoc",
    "lineNum": 464,
    "nodeStartChar": 18200,
    "before": "context.functionName()",
    "after": "context.eqName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "commitSHA1": "308f1d85821e03d616f70fe4d6e3d8d0e973b2a1",
    "commitFile": "src/main/java/org/exquery/xqdoc/XQueryVisitor.java",
    "patch": "diff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\nindex 39d2664..623b9e9 100644\n--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n@@ -461,7 +461,7 @@\n         String namespacePrefix \u003d null;\n         String namespace \u003d null;\n         String localName \u003d null;\n-        String[] tmp \u003d context.functionName().getText().split(\":\", 2);\n+        String[] tmp \u003d context.eqName().getText().split(\":\", 2);\n         if (tmp.length \u003e 1) {\n             namespacePrefix \u003d tmp[0];\n             localName \u003d tmp[1];\ndiff --git a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\nindex 39d2664..623b9e9 100644\n--- a/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n+++ b/src/main/java/org/exquery/xqdoc/XQueryVisitor.java\n@@ -461,7 +461,7 @@\n         String namespacePrefix \u003d null;\n         String namespace \u003d null;\n         String localName \u003d null;\n-        String[] tmp \u003d context.functionName().getText().split(\":\", 2);\n+        String[] tmp \u003d context.eqName().getText().split(\":\", 2);\n         if (tmp.length \u003e 1) {\n             namespacePrefix \u003d tmp[0];\n             localName \u003d tmp[1];\n",
    "projectName": "xqdoc",
    "lineNum": 464,
    "nodeStartChar": 18200,
    "before": "context.functionName()",
    "after": "context.eqName()"
  }
]